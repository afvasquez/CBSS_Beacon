
Bastian_freeRTOS-TRACE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000470c  00000000  00000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .got          0000021c  0000470c  0000470c  0000c70c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .got.plt      0000000c  00004928  00004928  0000c928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .relocate     00000438  20000000  00004934  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00001c40  20000438  00004d6c  00010438  2**2
                  ALLOC
  5 .stack        00002000  20002078  000069ac  00010438  2**0
                  ALLOC
  6 .ARM.attributes 00000028  00000000  00000000  00010438  2**0
                  CONTENTS, READONLY
  7 .comment      0000005b  00000000  00000000  00010460  2**0
                  CONTENTS, READONLY
  8 .debug_info   000235e5  00000000  00000000  000104bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000032f4  00000000  00000000  00033aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000789f  00000000  00000000  00036d94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000780  00000000  00000000  0003e633  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000828  00000000  00000000  0003edb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00018567  00000000  00000000  0003f5db  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000e044  00000000  00000000  00057b42  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00086f8b  00000000  00000000  00065b86  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000015d8  00000000  00000000  000ecb14  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20004078 	.word	0x20004078
       4:	000038c1 	.word	0x000038c1
       8:	000038bd 	.word	0x000038bd
       c:	000038bd 	.word	0x000038bd
	...
      2c:	00001b3d 	.word	0x00001b3d
	...
      38:	00001bb1 	.word	0x00001bb1
      3c:	00001bf5 	.word	0x00001bf5
      40:	000038bd 	.word	0x000038bd
      44:	000038bd 	.word	0x000038bd
      48:	000038bd 	.word	0x000038bd
      4c:	000038bd 	.word	0x000038bd
      50:	000038bd 	.word	0x000038bd
      54:	000038bd 	.word	0x000038bd
      58:	000038bd 	.word	0x000038bd
      5c:	000038bd 	.word	0x000038bd
      60:	000038bd 	.word	0x000038bd
      64:	0000139d 	.word	0x0000139d
      68:	000013b1 	.word	0x000013b1
      6c:	000013c5 	.word	0x000013c5
      70:	000013d9 	.word	0x000013d9
	...
      7c:	000038bd 	.word	0x000038bd
      80:	000038bd 	.word	0x000038bd
      84:	000038bd 	.word	0x000038bd
      88:	000038bd 	.word	0x000038bd
      8c:	000038bd 	.word	0x000038bd
      90:	000038bd 	.word	0x000038bd
	...
      9c:	000038bd 	.word	0x000038bd
      a0:	000038bd 	.word	0x000038bd
      a4:	000038bd 	.word	0x000038bd
      a8:	000038bd 	.word	0x000038bd
      ac:	000038bd 	.word	0x000038bd

000000b0 <__do_global_dtors_aux>:
      b0:	b510      	push	{r4, lr}
      b2:	4c06      	ldr	r4, [pc, #24]	; (cc <__do_global_dtors_aux+0x1c>)
      b4:	7823      	ldrb	r3, [r4, #0]
      b6:	2b00      	cmp	r3, #0
      b8:	d107      	bne.n	ca <__do_global_dtors_aux+0x1a>
      ba:	4b05      	ldr	r3, [pc, #20]	; (d0 <__do_global_dtors_aux+0x20>)
      bc:	2b00      	cmp	r3, #0
      be:	d002      	beq.n	c6 <__do_global_dtors_aux+0x16>
      c0:	4804      	ldr	r0, [pc, #16]	; (d4 <__do_global_dtors_aux+0x24>)
      c2:	e000      	b.n	c6 <__do_global_dtors_aux+0x16>
      c4:	bf00      	nop
      c6:	2301      	movs	r3, #1
      c8:	7023      	strb	r3, [r4, #0]
      ca:	bd10      	pop	{r4, pc}
      cc:	20000438 	.word	0x20000438
      d0:	00000000 	.word	0x00000000
      d4:	0000470c 	.word	0x0000470c

000000d8 <frame_dummy>:
      d8:	b508      	push	{r3, lr}
      da:	4b08      	ldr	r3, [pc, #32]	; (fc <frame_dummy+0x24>)
      dc:	2b00      	cmp	r3, #0
      de:	d003      	beq.n	e8 <frame_dummy+0x10>
      e0:	4807      	ldr	r0, [pc, #28]	; (100 <frame_dummy+0x28>)
      e2:	4908      	ldr	r1, [pc, #32]	; (104 <frame_dummy+0x2c>)
      e4:	e000      	b.n	e8 <frame_dummy+0x10>
      e6:	bf00      	nop
      e8:	4807      	ldr	r0, [pc, #28]	; (108 <frame_dummy+0x30>)
      ea:	6803      	ldr	r3, [r0, #0]
      ec:	2b00      	cmp	r3, #0
      ee:	d003      	beq.n	f8 <frame_dummy+0x20>
      f0:	4b06      	ldr	r3, [pc, #24]	; (10c <frame_dummy+0x34>)
      f2:	2b00      	cmp	r3, #0
      f4:	d000      	beq.n	f8 <frame_dummy+0x20>
      f6:	4798      	blx	r3
      f8:	bd08      	pop	{r3, pc}
      fa:	46c0      	nop			; (mov r8, r8)
      fc:	00000000 	.word	0x00000000
     100:	0000470c 	.word	0x0000470c
     104:	2000043c 	.word	0x2000043c
     108:	0000470c 	.word	0x0000470c
     10c:	00000000 	.word	0x00000000

00000110 <timer_irda_sync_callback>:
		break;
	}
}

void timer_irda_sync_callback(TimerHandle_t pxTimer)
{
     110:	b082      	sub	sp, #8
     112:	4b09      	ldr	r3, [pc, #36]	; (138 <timer_irda_sync_callback+0x28>)
     114:	447b      	add	r3, pc
	configASSERT( pxTimer );
     116:	2800      	cmp	r0, #0
     118:	d101      	bne.n	11e <timer_irda_sync_callback+0xe>
     11a:	b672      	cpsid	i
     11c:	e7fe      	b.n	11c <timer_irda_sync_callback+0xc>
	// This is the timeout timer that should perform the following if reached
	
	switch ( irda_comm_state ) {
     11e:	4a07      	ldr	r2, [pc, #28]	; (13c <timer_irda_sync_callback+0x2c>)
     120:	589a      	ldr	r2, [r3, r2]
     122:	9201      	str	r2, [sp, #4]
     124:	7812      	ldrb	r2, [r2, #0]
     126:	2a02      	cmp	r2, #2
     128:	d103      	bne.n	132 <timer_irda_sync_callback+0x22>
		case IRDA_BEACON_BACK_PING:
			// There was no Back-Ping detected
			irda_comm_state = IRDA_BEACON_PING;
     12a:	4a04      	ldr	r2, [pc, #16]	; (13c <timer_irda_sync_callback+0x2c>)
     12c:	589a      	ldr	r2, [r3, r2]
     12e:	2301      	movs	r3, #1
     130:	7013      	strb	r3, [r2, #0]
		break;
	}
     132:	b002      	add	sp, #8
     134:	4770      	bx	lr
     136:	46c0      	nop			; (mov r8, r8)
     138:	000045f4 	.word	0x000045f4
     13c:	000000d4 	.word	0x000000d4

00000140 <timer_irda_ping_callback>:
		system_interrupt_disable_global();
	}
}

void timer_irda_ping_callback(TimerHandle_t pxTimer) 
{
     140:	b510      	push	{r4, lr}
     142:	b082      	sub	sp, #8
     144:	4c1a      	ldr	r4, [pc, #104]	; (1b0 <timer_irda_ping_callback+0x70>)
     146:	447c      	add	r4, pc
	configASSERT( pxTimer );
     148:	2800      	cmp	r0, #0
     14a:	d101      	bne.n	150 <timer_irda_ping_callback+0x10>
     14c:	b672      	cpsid	i
     14e:	e7fe      	b.n	14e <timer_irda_ping_callback+0xe>
	// This is the timeout timer that should perform the following if reached
	
	switch ( irda_comm_state ) {
     150:	4b18      	ldr	r3, [pc, #96]	; (1b4 <timer_irda_ping_callback+0x74>)
     152:	58e3      	ldr	r3, [r4, r3]
     154:	7818      	ldrb	r0, [r3, #0]
     156:	3801      	subs	r0, #1
     158:	2807      	cmp	r0, #7
     15a:	d827      	bhi.n	1ac <timer_irda_ping_callback+0x6c>
     15c:	f004 f928 	bl	43b0 <__gnu_thumb1_case_uqi>
     160:	0426040a 	.word	0x0426040a
     164:	04262626 	.word	0x04262626
		case IRDA_BEACON_STAGE_5_RX:	// Stage 5 message has just been sent
		case IRDA_BEACON_STAGE_9:
		case IRDA_BEACON_BACK_PING:
			// Change the state of the machine
			irda_comm_state = IRDA_BEACON_PING;	// We are starting to wait for the Back-Ping
     168:	4b12      	ldr	r3, [pc, #72]	; (1b4 <timer_irda_ping_callback+0x74>)
     16a:	58e3      	ldr	r3, [r4, r3]
     16c:	9301      	str	r3, [sp, #4]
     16e:	2301      	movs	r3, #1
     170:	9a01      	ldr	r2, [sp, #4]
     172:	7013      	strb	r3, [r2, #0]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     174:	2280      	movs	r2, #128	; 0x80
     176:	0492      	lsls	r2, r2, #18
     178:	4b0f      	ldr	r3, [pc, #60]	; (1b8 <timer_irda_ping_callback+0x78>)
     17a:	615a      	str	r2, [r3, #20]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     17c:	4b0f      	ldr	r3, [pc, #60]	; (1bc <timer_irda_ping_callback+0x7c>)
     17e:	58e3      	ldr	r3, [r4, r3]
     180:	681a      	ldr	r2, [r3, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     182:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     184:	2b00      	cmp	r3, #0
     186:	d1fc      	bne.n	182 <timer_irda_ping_callback+0x42>
	_usart_wait_for_sync(module);

	switch (transceiver_type) {
		case USART_TRANSCEIVER_RX:
			/* Disable RX */
			usart_hw->CTRLB.reg &= ~SERCOM_USART_CTRLB_RXEN;
     188:	6851      	ldr	r1, [r2, #4]
     18a:	4b0d      	ldr	r3, [pc, #52]	; (1c0 <timer_irda_ping_callback+0x80>)
     18c:	400b      	ands	r3, r1
     18e:	6053      	str	r3, [r2, #4]
			module->receiver_enabled = false;
     190:	4b0a      	ldr	r3, [pc, #40]	; (1bc <timer_irda_ping_callback+0x7c>)
     192:	58e0      	ldr	r0, [r4, r3]
     194:	2300      	movs	r3, #0
     196:	7183      	strb	r3, [r0, #6]
		case IRDA_BEACON_PING:
			port_pin_set_output_level(LED_ERROR, pdFALSE);
				// There was no significant response to the ping, 
					// Reset accordingly
			usart_disable_transceiver(&irda_master, USART_TRANSCEIVER_RX);
			usart_abort_job( &irda_master, USART_TRANSCEIVER_RX );
     198:	2100      	movs	r1, #0
     19a:	4b0a      	ldr	r3, [pc, #40]	; (1c4 <timer_irda_ping_callback+0x84>)
     19c:	58e3      	ldr	r3, [r4, r3]
     19e:	4798      	blx	r3
			
				// The IrDA task is now to reset and ping again
			vTaskResume( irda_task_handler );
     1a0:	4b09      	ldr	r3, [pc, #36]	; (1c8 <timer_irda_ping_callback+0x88>)
     1a2:	58e3      	ldr	r3, [r4, r3]
     1a4:	6818      	ldr	r0, [r3, #0]
     1a6:	4b09      	ldr	r3, [pc, #36]	; (1cc <timer_irda_ping_callback+0x8c>)
     1a8:	58e3      	ldr	r3, [r4, r3]
     1aa:	4798      	blx	r3
		break;
	}
}
     1ac:	b002      	add	sp, #8
     1ae:	bd10      	pop	{r4, pc}
     1b0:	000045c2 	.word	0x000045c2
     1b4:	000000d4 	.word	0x000000d4
     1b8:	41004400 	.word	0x41004400
     1bc:	00000138 	.word	0x00000138
     1c0:	fffdffff 	.word	0xfffdffff
     1c4:	00000034 	.word	0x00000034
     1c8:	00000170 	.word	0x00000170
     1cc:	0000011c 	.word	0x0000011c

000001d0 <irda_communication_task>:

//#define IRDA_BEACON_PING	(( uint8_t ) 0x01 )		// This is the 
uint8_t irda_comm_state;
uint8_t irda_tx_array[6] = { 0 };
uint8_t irda_rx_array[6] = { 0 };
void irda_communication_task(void) {
     1d0:	b5f0      	push	{r4, r5, r6, r7, lr}
     1d2:	464f      	mov	r7, r9
     1d4:	4646      	mov	r6, r8
     1d6:	b4c0      	push	{r6, r7}
     1d8:	b085      	sub	sp, #20
     1da:	4c7a      	ldr	r4, [pc, #488]	; (3c4 <irda_communication_task+0x1f4>)
     1dc:	447c      	add	r4, pc
	uint8_t slat_address_holder;
	
	// Start this task by pinging out
	irda_comm_state = IRDA_BEACON_PING;
     1de:	4b7a      	ldr	r3, [pc, #488]	; (3c8 <irda_communication_task+0x1f8>)
     1e0:	58e3      	ldr	r3, [r4, r3]
     1e2:	9303      	str	r3, [sp, #12]
     1e4:	2301      	movs	r3, #1
     1e6:	9903      	ldr	r1, [sp, #12]
     1e8:	700b      	strb	r3, [r1, #0]
	
	while (1) {
		//port_pin_toggle_output_level(LED_BUSY);
		switch( irda_comm_state )
     1ea:	4b77      	ldr	r3, [pc, #476]	; (3c8 <irda_communication_task+0x1f8>)
     1ec:	58e7      	ldr	r7, [r4, r3]
				
				//irda_tx_array[4] = 0xCC;
				crc_generate(&irda_tx_array, 4);	// Generate the CRC byte for this packet
				
				// Reset the Sync Timer
				xTimerReset(timer_IrDA_Ping, 0);	// Reset the Ping timer immediately
     1ee:	2500      	movs	r5, #0
	_usart_wait_for_sync(module);

	switch (transceiver_type) {
		case USART_TRANSCEIVER_RX:
			/* Disable RX */
			usart_hw->CTRLB.reg &= ~SERCOM_USART_CTRLB_RXEN;
     1f0:	4a76      	ldr	r2, [pc, #472]	; (3cc <irda_communication_task+0x1fc>)
     1f2:	4690      	mov	r8, r2
	// Start this task by pinging out
	irda_comm_state = IRDA_BEACON_PING;
	
	while (1) {
		//port_pin_toggle_output_level(LED_BUSY);
		switch( irda_comm_state )
     1f4:	783b      	ldrb	r3, [r7, #0]
     1f6:	2b03      	cmp	r3, #3
     1f8:	d02f      	beq.n	25a <irda_communication_task+0x8a>
     1fa:	2b08      	cmp	r3, #8
     1fc:	d100      	bne.n	200 <irda_communication_task+0x30>
     1fe:	e080      	b.n	302 <irda_communication_task+0x132>
     200:	2b01      	cmp	r3, #1
     202:	d000      	beq.n	206 <irda_communication_task+0x36>
     204:	e0ce      	b.n	3a4 <irda_communication_task+0x1d4>
		{
			case IRDA_BEACON_PING:
				// Send out the ping and wait
				irda_tx_array[0] = 0xAA;
     206:	4b72      	ldr	r3, [pc, #456]	; (3d0 <irda_communication_task+0x200>)
     208:	58e3      	ldr	r3, [r4, r3]
     20a:	22aa      	movs	r2, #170	; 0xaa
     20c:	701a      	strb	r2, [r3, #0]
				irda_tx_array[1] = 0xAA;
     20e:	705a      	strb	r2, [r3, #1]
				irda_tx_array[2] = 0xAA;
     210:	709a      	strb	r2, [r3, #2]
				
				// Reset the Sync Timer
				xTimerReset(timer_IrDA_Ping, 0);	// Reset the Ping timer immediately
     212:	4b70      	ldr	r3, [pc, #448]	; (3d4 <irda_communication_task+0x204>)
     214:	58e3      	ldr	r3, [r4, r3]
     216:	681e      	ldr	r6, [r3, #0]
     218:	4b6f      	ldr	r3, [pc, #444]	; (3d8 <irda_communication_task+0x208>)
     21a:	58e3      	ldr	r3, [r4, r3]
     21c:	4798      	blx	r3
     21e:	1c02      	adds	r2, r0, #0
     220:	9500      	str	r5, [sp, #0]
     222:	1c30      	adds	r0, r6, #0
     224:	2102      	movs	r1, #2
     226:	1c2b      	adds	r3, r5, #0
     228:	4e6c      	ldr	r6, [pc, #432]	; (3dc <irda_communication_task+0x20c>)
     22a:	59a6      	ldr	r6, [r4, r6]
     22c:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     22e:	4b6c      	ldr	r3, [pc, #432]	; (3e0 <irda_communication_task+0x210>)
     230:	58e3      	ldr	r3, [r4, r3]
     232:	681a      	ldr	r2, [r3, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     234:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     236:	2b00      	cmp	r3, #0
     238:	d1fc      	bne.n	234 <irda_communication_task+0x64>
	_usart_wait_for_sync(module);

	switch (transceiver_type) {
		case USART_TRANSCEIVER_RX:
			/* Disable RX */
			usart_hw->CTRLB.reg &= ~SERCOM_USART_CTRLB_RXEN;
     23a:	6853      	ldr	r3, [r2, #4]
     23c:	4646      	mov	r6, r8
     23e:	4033      	ands	r3, r6
     240:	6053      	str	r3, [r2, #4]
			module->receiver_enabled = false;
     242:	4b67      	ldr	r3, [pc, #412]	; (3e0 <irda_communication_task+0x210>)
     244:	58e0      	ldr	r0, [r4, r3]
     246:	7185      	strb	r5, [r0, #6]
				usart_disable_transceiver(&irda_master, USART_TRANSCEIVER_RX);
				usart_write_buffer_job(&irda_master, irda_tx_array,3);	// Send three bytes over IR
     248:	4b61      	ldr	r3, [pc, #388]	; (3d0 <irda_communication_task+0x200>)
     24a:	58e3      	ldr	r3, [r4, r3]
     24c:	9303      	str	r3, [sp, #12]
     24e:	1c19      	adds	r1, r3, #0
     250:	2203      	movs	r2, #3
     252:	4b64      	ldr	r3, [pc, #400]	; (3e4 <irda_communication_task+0x214>)
     254:	58e3      	ldr	r3, [r4, r3]
     256:	4798      	blx	r3
			break;
     258:	e0a4      	b.n	3a4 <irda_communication_task+0x1d4>
			case IRDA_BEACON_STAGE_5:	// Stage 5 message has just been sent
				// Send out the ping and wait
				slat_address_holder = irda_rx_array[0];
     25a:	4b63      	ldr	r3, [pc, #396]	; (3e8 <irda_communication_task+0x218>)
     25c:	58e3      	ldr	r3, [r4, r3]
     25e:	7819      	ldrb	r1, [r3, #0]
     260:	4689      	mov	r9, r1
				if ( !table_access_busy && job_lookup_table[slat_address_holder][0] > 0 ) {
     262:	4b62      	ldr	r3, [pc, #392]	; (3ec <irda_communication_task+0x21c>)
     264:	58e3      	ldr	r3, [r4, r3]
     266:	9303      	str	r3, [sp, #12]
     268:	781b      	ldrb	r3, [r3, #0]
     26a:	2b00      	cmp	r3, #0
     26c:	d117      	bne.n	29e <irda_communication_task+0xce>
     26e:	4b60      	ldr	r3, [pc, #384]	; (3f0 <irda_communication_task+0x220>)
     270:	58e3      	ldr	r3, [r4, r3]
     272:	9303      	str	r3, [sp, #12]
     274:	00cb      	lsls	r3, r1, #3
     276:	9a03      	ldr	r2, [sp, #12]
     278:	5c9b      	ldrb	r3, [r3, r2]
     27a:	2b00      	cmp	r3, #0
     27c:	d00f      	beq.n	29e <irda_communication_task+0xce>
					irda_tx_array[0] = job_lookup_table[slat_address_holder][0];
     27e:	4b5c      	ldr	r3, [pc, #368]	; (3f0 <irda_communication_task+0x220>)
     280:	58e1      	ldr	r1, [r4, r3]
     282:	464b      	mov	r3, r9
     284:	00da      	lsls	r2, r3, #3
     286:	5c50      	ldrb	r0, [r2, r1]
     288:	4b51      	ldr	r3, [pc, #324]	; (3d0 <irda_communication_task+0x200>)
     28a:	58e3      	ldr	r3, [r4, r3]
     28c:	7018      	strb	r0, [r3, #0]
					irda_tx_array[1] = job_lookup_table[slat_address_holder][1];
     28e:	188a      	adds	r2, r1, r2
     290:	7851      	ldrb	r1, [r2, #1]
     292:	7059      	strb	r1, [r3, #1]
					irda_tx_array[2] = job_lookup_table[slat_address_holder][2];
     294:	7891      	ldrb	r1, [r2, #2]
     296:	7099      	strb	r1, [r3, #2]
					irda_tx_array[3] = job_lookup_table[slat_address_holder][3];
     298:	78d2      	ldrb	r2, [r2, #3]
     29a:	70da      	strb	r2, [r3, #3]
     29c:	e005      	b.n	2aa <irda_communication_task+0xda>
				} else {
					irda_tx_array[0] = 0x00;
     29e:	4b4c      	ldr	r3, [pc, #304]	; (3d0 <irda_communication_task+0x200>)
     2a0:	58e3      	ldr	r3, [r4, r3]
     2a2:	701d      	strb	r5, [r3, #0]
					irda_tx_array[1] = 0x00;
     2a4:	705d      	strb	r5, [r3, #1]
					irda_tx_array[2] = 0x00;
     2a6:	709d      	strb	r5, [r3, #2]
					irda_tx_array[3] = 0x00;	
     2a8:	70dd      	strb	r5, [r3, #3]
				}
				
				//irda_tx_array[4] = 0xCC;
				crc_generate(&irda_tx_array, 4);	// Generate the CRC byte for this packet
     2aa:	4b49      	ldr	r3, [pc, #292]	; (3d0 <irda_communication_task+0x200>)
     2ac:	58e3      	ldr	r3, [r4, r3]
     2ae:	9303      	str	r3, [sp, #12]
     2b0:	1c18      	adds	r0, r3, #0
     2b2:	2104      	movs	r1, #4
     2b4:	4b4f      	ldr	r3, [pc, #316]	; (3f4 <irda_communication_task+0x224>)
     2b6:	58e3      	ldr	r3, [r4, r3]
     2b8:	4798      	blx	r3
				
				// Reset the Sync Timer
				xTimerReset(timer_IrDA_Ping, 0);	// Reset the Ping timer immediately
     2ba:	4b46      	ldr	r3, [pc, #280]	; (3d4 <irda_communication_task+0x204>)
     2bc:	58e3      	ldr	r3, [r4, r3]
     2be:	681e      	ldr	r6, [r3, #0]
     2c0:	4b45      	ldr	r3, [pc, #276]	; (3d8 <irda_communication_task+0x208>)
     2c2:	58e3      	ldr	r3, [r4, r3]
     2c4:	4798      	blx	r3
     2c6:	1c02      	adds	r2, r0, #0
     2c8:	9500      	str	r5, [sp, #0]
     2ca:	1c30      	adds	r0, r6, #0
     2cc:	2102      	movs	r1, #2
     2ce:	1c2b      	adds	r3, r5, #0
     2d0:	4e42      	ldr	r6, [pc, #264]	; (3dc <irda_communication_task+0x20c>)
     2d2:	59a6      	ldr	r6, [r4, r6]
     2d4:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     2d6:	4b42      	ldr	r3, [pc, #264]	; (3e0 <irda_communication_task+0x210>)
     2d8:	58e3      	ldr	r3, [r4, r3]
     2da:	681a      	ldr	r2, [r3, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     2dc:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     2de:	2b00      	cmp	r3, #0
     2e0:	d1fc      	bne.n	2dc <irda_communication_task+0x10c>
	_usart_wait_for_sync(module);

	switch (transceiver_type) {
		case USART_TRANSCEIVER_RX:
			/* Disable RX */
			usart_hw->CTRLB.reg &= ~SERCOM_USART_CTRLB_RXEN;
     2e2:	6853      	ldr	r3, [r2, #4]
     2e4:	4646      	mov	r6, r8
     2e6:	4033      	ands	r3, r6
     2e8:	6053      	str	r3, [r2, #4]
			module->receiver_enabled = false;
     2ea:	4b3d      	ldr	r3, [pc, #244]	; (3e0 <irda_communication_task+0x210>)
     2ec:	58e0      	ldr	r0, [r4, r3]
     2ee:	7185      	strb	r5, [r0, #6]
				usart_disable_transceiver(&irda_master, USART_TRANSCEIVER_RX);
				usart_write_buffer_job(&irda_master, irda_tx_array,5);	// Send three bytes over IR
     2f0:	4b37      	ldr	r3, [pc, #220]	; (3d0 <irda_communication_task+0x200>)
     2f2:	58e3      	ldr	r3, [r4, r3]
     2f4:	9303      	str	r3, [sp, #12]
     2f6:	1c19      	adds	r1, r3, #0
     2f8:	2205      	movs	r2, #5
     2fa:	4b3a      	ldr	r3, [pc, #232]	; (3e4 <irda_communication_task+0x214>)
     2fc:	58e3      	ldr	r3, [r4, r3]
     2fe:	4798      	blx	r3
			break;
     300:	e050      	b.n	3a4 <irda_communication_task+0x1d4>
			case IRDA_BEACON_STAGE_9:	// Stage 5 message has just been sent
				// Send out the ping and wait
				if ( !table_access_busy && job_lookup_table[slat_address_holder][0] > 0 ) {
     302:	4b3a      	ldr	r3, [pc, #232]	; (3ec <irda_communication_task+0x21c>)
     304:	58e3      	ldr	r3, [r4, r3]
     306:	9303      	str	r3, [sp, #12]
     308:	781b      	ldrb	r3, [r3, #0]
     30a:	2b00      	cmp	r3, #0
     30c:	d119      	bne.n	342 <irda_communication_task+0x172>
     30e:	4b38      	ldr	r3, [pc, #224]	; (3f0 <irda_communication_task+0x220>)
     310:	58e3      	ldr	r3, [r4, r3]
     312:	9303      	str	r3, [sp, #12]
     314:	4649      	mov	r1, r9
     316:	00cb      	lsls	r3, r1, #3
     318:	9a03      	ldr	r2, [sp, #12]
     31a:	5c9b      	ldrb	r3, [r3, r2]
     31c:	2b00      	cmp	r3, #0
     31e:	d010      	beq.n	342 <irda_communication_task+0x172>
					irda_tx_array[0] = job_lookup_table[slat_address_holder][4];
     320:	4b33      	ldr	r3, [pc, #204]	; (3f0 <irda_communication_task+0x220>)
     322:	58e1      	ldr	r1, [r4, r3]
     324:	464b      	mov	r3, r9
     326:	00d8      	lsls	r0, r3, #3
     328:	180a      	adds	r2, r1, r0
     32a:	7916      	ldrb	r6, [r2, #4]
     32c:	4b28      	ldr	r3, [pc, #160]	; (3d0 <irda_communication_task+0x200>)
     32e:	58e3      	ldr	r3, [r4, r3]
     330:	701e      	strb	r6, [r3, #0]
					irda_tx_array[1] = job_lookup_table[slat_address_holder][5];
     332:	7956      	ldrb	r6, [r2, #5]
     334:	705e      	strb	r6, [r3, #1]
					irda_tx_array[2] = job_lookup_table[slat_address_holder][6];
     336:	7996      	ldrb	r6, [r2, #6]
     338:	709e      	strb	r6, [r3, #2]
					irda_tx_array[3] = job_lookup_table[slat_address_holder][7];
     33a:	79d2      	ldrb	r2, [r2, #7]
     33c:	70da      	strb	r2, [r3, #3]
					
					job_lookup_table[slat_address_holder][0] = 0;
     33e:	5445      	strb	r5, [r0, r1]
     340:	e005      	b.n	34e <irda_communication_task+0x17e>
				} else {
					irda_tx_array[0] = 0x00;
     342:	4b23      	ldr	r3, [pc, #140]	; (3d0 <irda_communication_task+0x200>)
     344:	58e3      	ldr	r3, [r4, r3]
     346:	701d      	strb	r5, [r3, #0]
					irda_tx_array[1] = 0x00;
     348:	705d      	strb	r5, [r3, #1]
					irda_tx_array[2] = 0x00;
     34a:	709d      	strb	r5, [r3, #2]
					irda_tx_array[3] = 0x00;
     34c:	70dd      	strb	r5, [r3, #3]
				}
				
				//irda_tx_array[4] = 0xEE;
				crc_generate(&irda_tx_array, 4);	// Generate the CRC byte for this packet
     34e:	4b20      	ldr	r3, [pc, #128]	; (3d0 <irda_communication_task+0x200>)
     350:	58e3      	ldr	r3, [r4, r3]
     352:	9303      	str	r3, [sp, #12]
     354:	1c18      	adds	r0, r3, #0
     356:	2104      	movs	r1, #4
     358:	4b26      	ldr	r3, [pc, #152]	; (3f4 <irda_communication_task+0x224>)
     35a:	58e3      	ldr	r3, [r4, r3]
     35c:	4798      	blx	r3
				//port_pin_set_output_level(LED_ERROR, pdTRUE);
			
				// Reset the Sync Timer
				xTimerReset(timer_IrDA_Ping, 0);	// Reset the Ping timer immediately
     35e:	4b1d      	ldr	r3, [pc, #116]	; (3d4 <irda_communication_task+0x204>)
     360:	58e3      	ldr	r3, [r4, r3]
     362:	681e      	ldr	r6, [r3, #0]
     364:	4b1c      	ldr	r3, [pc, #112]	; (3d8 <irda_communication_task+0x208>)
     366:	58e3      	ldr	r3, [r4, r3]
     368:	4798      	blx	r3
     36a:	1c02      	adds	r2, r0, #0
     36c:	9500      	str	r5, [sp, #0]
     36e:	1c30      	adds	r0, r6, #0
     370:	2102      	movs	r1, #2
     372:	1c2b      	adds	r3, r5, #0
     374:	4e19      	ldr	r6, [pc, #100]	; (3dc <irda_communication_task+0x20c>)
     376:	59a6      	ldr	r6, [r4, r6]
     378:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     37a:	4b19      	ldr	r3, [pc, #100]	; (3e0 <irda_communication_task+0x210>)
     37c:	58e3      	ldr	r3, [r4, r3]
     37e:	681a      	ldr	r2, [r3, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     380:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     382:	2b00      	cmp	r3, #0
     384:	d1fc      	bne.n	380 <irda_communication_task+0x1b0>
	_usart_wait_for_sync(module);

	switch (transceiver_type) {
		case USART_TRANSCEIVER_RX:
			/* Disable RX */
			usart_hw->CTRLB.reg &= ~SERCOM_USART_CTRLB_RXEN;
     386:	6853      	ldr	r3, [r2, #4]
     388:	4646      	mov	r6, r8
     38a:	4033      	ands	r3, r6
     38c:	6053      	str	r3, [r2, #4]
			module->receiver_enabled = false;
     38e:	4b14      	ldr	r3, [pc, #80]	; (3e0 <irda_communication_task+0x210>)
     390:	58e0      	ldr	r0, [r4, r3]
     392:	7185      	strb	r5, [r0, #6]
				usart_disable_transceiver(&irda_master, USART_TRANSCEIVER_RX);
				usart_write_buffer_job(&irda_master, irda_tx_array,5);	// Send three bytes over IR
     394:	4b0e      	ldr	r3, [pc, #56]	; (3d0 <irda_communication_task+0x200>)
     396:	58e3      	ldr	r3, [r4, r3]
     398:	9303      	str	r3, [sp, #12]
     39a:	1c19      	adds	r1, r3, #0
     39c:	2205      	movs	r2, #5
     39e:	4b11      	ldr	r3, [pc, #68]	; (3e4 <irda_communication_task+0x214>)
     3a0:	58e3      	ldr	r3, [r4, r3]
     3a2:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
     3a4:	4b14      	ldr	r3, [pc, #80]	; (3f8 <irda_communication_task+0x228>)
     3a6:	58e6      	ldr	r6, [r4, r3]
     3a8:	2301      	movs	r3, #1
     3aa:	7033      	strb	r3, [r6, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     3ac:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     3b0:	b662      	cpsie	i
			break;
		}
		
		system_interrupt_enable_global();
		vTaskSuspend( NULL );
     3b2:	1c28      	adds	r0, r5, #0
     3b4:	4b11      	ldr	r3, [pc, #68]	; (3fc <irda_communication_task+0x22c>)
     3b6:	58e3      	ldr	r3, [r4, r3]
     3b8:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     3ba:	b672      	cpsid	i
     3bc:	f3bf 8f5f 	dmb	sy
 * Disabled global interrupts in the device, preventing any enabled interrupt
 * handlers from executing.
 */
static inline void system_interrupt_disable_global(void)
{
	cpu_irq_disable();
     3c0:	7035      	strb	r5, [r6, #0]
     3c2:	e717      	b.n	1f4 <irda_communication_task+0x24>
     3c4:	0000452c 	.word	0x0000452c
     3c8:	000000d4 	.word	0x000000d4
     3cc:	fffdffff 	.word	0xfffdffff
     3d0:	0000009c 	.word	0x0000009c
     3d4:	00000148 	.word	0x00000148
     3d8:	000000bc 	.word	0x000000bc
     3dc:	00000134 	.word	0x00000134
     3e0:	00000138 	.word	0x00000138
     3e4:	00000200 	.word	0x00000200
     3e8:	00000028 	.word	0x00000028
     3ec:	000001c8 	.word	0x000001c8
     3f0:	0000017c 	.word	0x0000017c
     3f4:	00000168 	.word	0x00000168
     3f8:	00000090 	.word	0x00000090
     3fc:	0000013c 	.word	0x0000013c

00000400 <main>:
TaskHandle_t irda_task_handler;

//struct tc_module tc_instance;

int main(void)
{
     400:	b5f0      	push	{r4, r5, r6, r7, lr}
     402:	b089      	sub	sp, #36	; 0x24
     404:	4c2e      	ldr	r4, [pc, #184]	; (4c0 <main+0xc0>)
     406:	447c      	add	r4, pc
    /* Initialize the SAM system */
	system_init();
     408:	4b2e      	ldr	r3, [pc, #184]	; (4c4 <main+0xc4>)
     40a:	58e3      	ldr	r3, [r4, r3]
     40c:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     40e:	2701      	movs	r7, #1
     410:	ad07      	add	r5, sp, #28
     412:	706f      	strb	r7, [r5, #1]
	config->powersave  = false;
     414:	2600      	movs	r6, #0
     416:	70ae      	strb	r6, [r5, #2]
	//////////////////////////////////////////////////////////////////////////
	// Set the LED outputs for this board.
	struct port_config led_out;
	port_get_config_defaults(&led_out);
	
	led_out.direction = PORT_PIN_DIR_OUTPUT;
     418:	702f      	strb	r7, [r5, #0]
	port_pin_set_config(LED_BUSY, &led_out);
     41a:	201b      	movs	r0, #27
     41c:	1c29      	adds	r1, r5, #0
     41e:	4b2a      	ldr	r3, [pc, #168]	; (4c8 <main+0xc8>)
     420:	58e3      	ldr	r3, [r4, r3]
     422:	9304      	str	r3, [sp, #16]
     424:	4798      	blx	r3
	port_pin_set_config(LED_ERROR, &led_out);
     426:	2019      	movs	r0, #25
     428:	1c29      	adds	r1, r5, #0
     42a:	9d04      	ldr	r5, [sp, #16]
     42c:	47a8      	blx	r5
	//////////////////////////////////////////////////////////////////////////
	
	//////////////////////////////////////////////////////////////////////////
	// Start the IrDA communication port
	bastian_IrDA_configuration();
     42e:	4b27      	ldr	r3, [pc, #156]	; (4cc <main+0xcc>)
     430:	58e3      	ldr	r3, [r4, r3]
     432:	4798      	blx	r3
	control_serial_setup();
     434:	4b26      	ldr	r3, [pc, #152]	; (4d0 <main+0xd0>)
     436:	58e3      	ldr	r3, [r4, r3]
     438:	4798      	blx	r3
	
	// Start the trace
	//uiTraceStart();
	
	// Create the task
	xTaskCreate(irda_communication_task,
     43a:	4b26      	ldr	r3, [pc, #152]	; (4d4 <main+0xd4>)
     43c:	58e3      	ldr	r3, [r4, r3]
     43e:	9304      	str	r3, [sp, #16]
     440:	2303      	movs	r3, #3
     442:	9300      	str	r3, [sp, #0]
     444:	4b24      	ldr	r3, [pc, #144]	; (4d8 <main+0xd8>)
     446:	58e3      	ldr	r3, [r4, r3]
     448:	9301      	str	r3, [sp, #4]
     44a:	9602      	str	r6, [sp, #8]
     44c:	9603      	str	r6, [sp, #12]
     44e:	9804      	ldr	r0, [sp, #16]
     450:	4922      	ldr	r1, [pc, #136]	; (4dc <main+0xdc>)
     452:	4479      	add	r1, pc
     454:	228c      	movs	r2, #140	; 0x8c
     456:	2300      	movs	r3, #0
     458:	4d21      	ldr	r5, [pc, #132]	; (4e0 <main+0xe0>)
     45a:	5965      	ldr	r5, [r4, r5]
     45c:	47a8      	blx	r5
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
     45e:	4b21      	ldr	r3, [pc, #132]	; (4e4 <main+0xe4>)
     460:	58e3      	ldr	r3, [r4, r3]
     462:	701f      	strb	r7, [r3, #0]
     464:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     468:	b662      	cpsie	i
	
	// Enable global interrupts
	system_interrupt_enable_global();
	
	// Create the necessary timer
	timer_IrDA_Ping = xTimerCreate("Ping", 3, pdFALSE, 0, timer_irda_ping_callback);
     46a:	4b1f      	ldr	r3, [pc, #124]	; (4e8 <main+0xe8>)
     46c:	58e3      	ldr	r3, [r4, r3]
     46e:	9300      	str	r3, [sp, #0]
     470:	481e      	ldr	r0, [pc, #120]	; (4ec <main+0xec>)
     472:	4478      	add	r0, pc
     474:	2103      	movs	r1, #3
     476:	2200      	movs	r2, #0
     478:	2300      	movs	r3, #0
     47a:	4d1d      	ldr	r5, [pc, #116]	; (4f0 <main+0xf0>)
     47c:	5965      	ldr	r5, [r4, r5]
     47e:	47a8      	blx	r5
     480:	4b1c      	ldr	r3, [pc, #112]	; (4f4 <main+0xf4>)
     482:	58e7      	ldr	r7, [r4, r3]
     484:	6038      	str	r0, [r7, #0]
	timer_IrDA_Sync = xTimerCreate("Sync", 1, pdFALSE, 1, timer_irda_sync_callback );
     486:	4b1c      	ldr	r3, [pc, #112]	; (4f8 <main+0xf8>)
     488:	58e3      	ldr	r3, [r4, r3]
     48a:	9300      	str	r3, [sp, #0]
     48c:	481b      	ldr	r0, [pc, #108]	; (4fc <main+0xfc>)
     48e:	4478      	add	r0, pc
     490:	2101      	movs	r1, #1
     492:	2200      	movs	r2, #0
     494:	2301      	movs	r3, #1
     496:	47a8      	blx	r5
     498:	4b19      	ldr	r3, [pc, #100]	; (500 <main+0x100>)
     49a:	58e3      	ldr	r3, [r4, r3]
     49c:	6018      	str	r0, [r3, #0]
	xTimerStart(timer_IrDA_Ping, 0);	// Start timer that keeps track of Linking
     49e:	683d      	ldr	r5, [r7, #0]
     4a0:	4b18      	ldr	r3, [pc, #96]	; (504 <main+0x104>)
     4a2:	58e3      	ldr	r3, [r4, r3]
     4a4:	4798      	blx	r3
     4a6:	1c02      	adds	r2, r0, #0
     4a8:	9600      	str	r6, [sp, #0]
     4aa:	1c28      	adds	r0, r5, #0
     4ac:	2101      	movs	r1, #1
     4ae:	2300      	movs	r3, #0
     4b0:	4d15      	ldr	r5, [pc, #84]	; (508 <main+0x108>)
     4b2:	5965      	ldr	r5, [r4, r5]
     4b4:	47a8      	blx	r5
	//xTimerStart(timer_IrDA_Sync, 0);	// Start ping timer
	
	// ..and let FreeRTOS run tasks!
	vTaskStartScheduler();
     4b6:	4b15      	ldr	r3, [pc, #84]	; (50c <main+0x10c>)
     4b8:	58e3      	ldr	r3, [r4, r3]
     4ba:	4798      	blx	r3
     4bc:	e7fe      	b.n	4bc <main+0xbc>
     4be:	46c0      	nop			; (mov r8, r8)
     4c0:	00004302 	.word	0x00004302
     4c4:	00000024 	.word	0x00000024
     4c8:	00000194 	.word	0x00000194
     4cc:	00000154 	.word	0x00000154
     4d0:	000000c8 	.word	0x000000c8
     4d4:	000001a4 	.word	0x000001a4
     4d8:	00000170 	.word	0x00000170
     4dc:	00004236 	.word	0x00004236
     4e0:	00000054 	.word	0x00000054
     4e4:	00000090 	.word	0x00000090
     4e8:	0000018c 	.word	0x0000018c
     4ec:	0000421e 	.word	0x0000421e
     4f0:	00000010 	.word	0x00000010
     4f4:	00000148 	.word	0x00000148
     4f8:	000001b4 	.word	0x000001b4
     4fc:	0000420a 	.word	0x0000420a
     500:	000000d0 	.word	0x000000d0
     504:	000000bc 	.word	0x000000bc
     508:	00000134 	.word	0x00000134
     50c:	000001a0 	.word	0x000001a0

00000510 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     510:	b510      	push	{r4, lr}
     512:	1c03      	adds	r3, r0, #0
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     514:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     516:	2040      	movs	r0, #64	; 0x40
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     518:	4299      	cmp	r1, r3
     51a:	d30c      	bcc.n	536 <_sercom_get_sync_baud_val+0x26>
     51c:	2400      	movs	r4, #0
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
     51e:	1ac9      	subs	r1, r1, r3
		baud_calculated++;
     520:	1c60      	adds	r0, r4, #1
     522:	b280      	uxth	r0, r0
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     524:	428b      	cmp	r3, r1
     526:	d801      	bhi.n	52c <_sercom_get_sync_baud_val+0x1c>
		clock_value = clock_value - baudrate;
		baud_calculated++;
     528:	1c04      	adds	r4, r0, #0
     52a:	e7f8      	b.n	51e <_sercom_get_sync_baud_val+0xe>

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     52c:	2040      	movs	r0, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     52e:	2cff      	cmp	r4, #255	; 0xff
     530:	d801      	bhi.n	536 <_sercom_get_sync_baud_val+0x26>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     532:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     534:	2000      	movs	r0, #0
	}
}
     536:	bd10      	pop	{r4, pc}

00000538 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     538:	b5f0      	push	{r4, r5, r6, r7, lr}
     53a:	465f      	mov	r7, fp
     53c:	4656      	mov	r6, sl
     53e:	464d      	mov	r5, r9
     540:	4644      	mov	r4, r8
     542:	b4f0      	push	{r4, r5, r6, r7}
     544:	b087      	sub	sp, #28
     546:	1c06      	adds	r6, r0, #0
     548:	1c0d      	adds	r5, r1, #0
     54a:	9204      	str	r2, [sp, #16]
     54c:	aa10      	add	r2, sp, #64	; 0x40
     54e:	7810      	ldrb	r0, [r2, #0]
     550:	4a67      	ldr	r2, [pc, #412]	; (6f0 <_sercom_get_async_baud_val+0x1b8>)
     552:	447a      	add	r2, pc
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     554:	1c31      	adds	r1, r6, #0
     556:	4341      	muls	r1, r0
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     558:	2440      	movs	r4, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     55a:	42a9      	cmp	r1, r5
     55c:	d900      	bls.n	560 <_sercom_get_async_baud_val+0x28>
     55e:	e0ba      	b.n	6d6 <_sercom_get_async_baud_val+0x19e>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     560:	2b00      	cmp	r3, #0
     562:	d14f      	bne.n	604 <_sercom_get_async_baud_val+0xcc>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     564:	4b63      	ldr	r3, [pc, #396]	; (6f4 <_sercom_get_async_baud_val+0x1bc>)
     566:	58d3      	ldr	r3, [r2, r3]
     568:	9302      	str	r3, [sp, #8]
     56a:	2100      	movs	r1, #0
     56c:	1c32      	adds	r2, r6, #0
     56e:	2300      	movs	r3, #0
     570:	9c02      	ldr	r4, [sp, #8]
     572:	47a0      	blx	r4
     574:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
     576:	1c2e      	adds	r6, r5, #0
     578:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     57a:	2000      	movs	r0, #0
     57c:	2100      	movs	r1, #0
     57e:	2200      	movs	r2, #0
     580:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     582:	253f      	movs	r5, #63	; 0x3f
     584:	46ac      	mov	ip, r5
		bit_shift = (uint64_t)1 << i;
     586:	2401      	movs	r4, #1
     588:	46a0      	mov	r8, r4
     58a:	9002      	str	r0, [sp, #8]
     58c:	9103      	str	r1, [sp, #12]
     58e:	4661      	mov	r1, ip
     590:	3920      	subs	r1, #32
     592:	d403      	bmi.n	59c <_sercom_get_async_baud_val+0x64>
     594:	4645      	mov	r5, r8
     596:	408d      	lsls	r5, r1
     598:	46a9      	mov	r9, r5
     59a:	e005      	b.n	5a8 <_sercom_get_async_baud_val+0x70>
     59c:	2020      	movs	r0, #32
     59e:	4661      	mov	r1, ip
     5a0:	1a44      	subs	r4, r0, r1
     5a2:	4645      	mov	r5, r8
     5a4:	40e5      	lsrs	r5, r4
     5a6:	46a9      	mov	r9, r5
     5a8:	4640      	mov	r0, r8
     5aa:	4661      	mov	r1, ip
     5ac:	4088      	lsls	r0, r1
     5ae:	4682      	mov	sl, r0

		r = r << 1;
     5b0:	1c10      	adds	r0, r2, #0
     5b2:	1c19      	adds	r1, r3, #0
     5b4:	1880      	adds	r0, r0, r2
     5b6:	4159      	adcs	r1, r3
     5b8:	1c02      	adds	r2, r0, #0
     5ba:	1c0b      	adds	r3, r1, #0

		if (n & bit_shift) {
     5bc:	465c      	mov	r4, fp
     5be:	464d      	mov	r5, r9
     5c0:	422c      	tst	r4, r5
     5c2:	d002      	beq.n	5ca <_sercom_get_async_baud_val+0x92>
			r |= 0x01;
     5c4:	4642      	mov	r2, r8
     5c6:	4302      	orrs	r2, r0
     5c8:	1c0b      	adds	r3, r1, #0
		}

		if (r >= d) {
     5ca:	429f      	cmp	r7, r3
     5cc:	d80c      	bhi.n	5e8 <_sercom_get_async_baud_val+0xb0>
     5ce:	d101      	bne.n	5d4 <_sercom_get_async_baud_val+0x9c>
     5d0:	4296      	cmp	r6, r2
     5d2:	d809      	bhi.n	5e8 <_sercom_get_async_baud_val+0xb0>
			r = r - d;
     5d4:	1b92      	subs	r2, r2, r6
     5d6:	41bb      	sbcs	r3, r7
			q |= bit_shift;
     5d8:	4650      	mov	r0, sl
     5da:	9902      	ldr	r1, [sp, #8]
     5dc:	4308      	orrs	r0, r1
     5de:	4649      	mov	r1, r9
     5e0:	9c03      	ldr	r4, [sp, #12]
     5e2:	4321      	orrs	r1, r4
     5e4:	9002      	str	r0, [sp, #8]
     5e6:	9103      	str	r1, [sp, #12]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     5e8:	4665      	mov	r5, ip
     5ea:	3d01      	subs	r5, #1
     5ec:	46ac      	mov	ip, r5
     5ee:	d2ce      	bcs.n	58e <_sercom_get_async_baud_val+0x56>
     5f0:	9802      	ldr	r0, [sp, #8]
     5f2:	9903      	ldr	r1, [sp, #12]

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
     5f4:	4b3d      	ldr	r3, [pc, #244]	; (6ec <_sercom_get_async_baud_val+0x1b4>)
     5f6:	4a3c      	ldr	r2, [pc, #240]	; (6e8 <_sercom_get_async_baud_val+0x1b0>)
     5f8:	1a12      	subs	r2, r2, r0
     5fa:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     5fc:	0c11      	lsrs	r1, r2, #16
     5fe:	041b      	lsls	r3, r3, #16
     600:	4319      	orrs	r1, r3
     602:	e065      	b.n	6d0 <_sercom_get_async_baud_val+0x198>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
     604:	2100      	movs	r1, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     606:	2b01      	cmp	r3, #1
     608:	d162      	bne.n	6d0 <_sercom_get_async_baud_val+0x198>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     60a:	0f6c      	lsrs	r4, r5, #29
     60c:	00ed      	lsls	r5, r5, #3
     60e:	46ab      	mov	fp, r5
			temp2 = ((uint64_t)baudrate * sample_num);
     610:	4b38      	ldr	r3, [pc, #224]	; (6f4 <_sercom_get_async_baud_val+0x1bc>)
     612:	58d3      	ldr	r3, [r2, r3]
     614:	9302      	str	r3, [sp, #8]
     616:	1c32      	adds	r2, r6, #0
     618:	2300      	movs	r3, #0
     61a:	9e02      	ldr	r6, [sp, #8]
     61c:	47b0      	blx	r6
     61e:	1c06      	adds	r6, r0, #0
     620:	1c0f      	adds	r7, r1, #0
     622:	2300      	movs	r3, #0
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
     624:	2501      	movs	r5, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
     626:	9602      	str	r6, [sp, #8]
     628:	9703      	str	r7, [sp, #12]
     62a:	469a      	mov	sl, r3
     62c:	46a1      	mov	r9, r4
     62e:	4657      	mov	r7, sl
     630:	b2ff      	uxtb	r7, r7
     632:	9705      	str	r7, [sp, #20]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     634:	2000      	movs	r0, #0
     636:	4680      	mov	r8, r0
     638:	2200      	movs	r2, #0
     63a:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     63c:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     63e:	1c27      	adds	r7, r4, #0
     640:	3f20      	subs	r7, #32
     642:	d403      	bmi.n	64c <_sercom_get_async_baud_val+0x114>
     644:	1c29      	adds	r1, r5, #0
     646:	40b9      	lsls	r1, r7
     648:	9101      	str	r1, [sp, #4]
     64a:	e004      	b.n	656 <_sercom_get_async_baud_val+0x11e>
     64c:	2620      	movs	r6, #32
     64e:	1b37      	subs	r7, r6, r4
     650:	1c28      	adds	r0, r5, #0
     652:	40f8      	lsrs	r0, r7
     654:	9001      	str	r0, [sp, #4]
     656:	1c29      	adds	r1, r5, #0
     658:	40a1      	lsls	r1, r4
     65a:	9100      	str	r1, [sp, #0]

		r = r << 1;
     65c:	1c10      	adds	r0, r2, #0
     65e:	1c19      	adds	r1, r3, #0
     660:	1880      	adds	r0, r0, r2
     662:	4159      	adcs	r1, r3
     664:	1c02      	adds	r2, r0, #0
     666:	1c0b      	adds	r3, r1, #0

		if (n & bit_shift) {
     668:	465e      	mov	r6, fp
     66a:	9f00      	ldr	r7, [sp, #0]
     66c:	403e      	ands	r6, r7
     66e:	46b4      	mov	ip, r6
     670:	9e01      	ldr	r6, [sp, #4]
     672:	464f      	mov	r7, r9
     674:	403e      	ands	r6, r7
     676:	4667      	mov	r7, ip
     678:	433e      	orrs	r6, r7
     67a:	d002      	beq.n	682 <_sercom_get_async_baud_val+0x14a>
			r |= 0x01;
     67c:	1c2a      	adds	r2, r5, #0
     67e:	4302      	orrs	r2, r0
     680:	1c0b      	adds	r3, r1, #0
		}

		if (r >= d) {
     682:	9803      	ldr	r0, [sp, #12]
     684:	4298      	cmp	r0, r3
     686:	d80b      	bhi.n	6a0 <_sercom_get_async_baud_val+0x168>
     688:	d102      	bne.n	690 <_sercom_get_async_baud_val+0x158>
     68a:	9902      	ldr	r1, [sp, #8]
     68c:	4291      	cmp	r1, r2
     68e:	d807      	bhi.n	6a0 <_sercom_get_async_baud_val+0x168>
			r = r - d;
     690:	9e02      	ldr	r6, [sp, #8]
     692:	9f03      	ldr	r7, [sp, #12]
     694:	1b92      	subs	r2, r2, r6
     696:	41bb      	sbcs	r3, r7
			q |= bit_shift;
     698:	4647      	mov	r7, r8
     69a:	9800      	ldr	r0, [sp, #0]
     69c:	4307      	orrs	r7, r0
     69e:	46b8      	mov	r8, r7
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     6a0:	3c01      	subs	r4, #1
     6a2:	d2cc      	bcs.n	63e <_sercom_get_async_baud_val+0x106>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
     6a4:	4641      	mov	r1, r8
     6a6:	4652      	mov	r2, sl
     6a8:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
     6aa:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
     6ac:	4c12      	ldr	r4, [pc, #72]	; (6f8 <_sercom_get_async_baud_val+0x1c0>)
     6ae:	42a3      	cmp	r3, r4
     6b0:	d908      	bls.n	6c4 <_sercom_get_async_baud_val+0x18c>
     6b2:	9a05      	ldr	r2, [sp, #20]
     6b4:	3201      	adds	r2, #1
     6b6:	b2d2      	uxtb	r2, r2
     6b8:	9205      	str	r2, [sp, #20]
     6ba:	2601      	movs	r6, #1
     6bc:	44b2      	add	sl, r6
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     6be:	4657      	mov	r7, sl
     6c0:	2f08      	cmp	r7, #8
     6c2:	d1b4      	bne.n	62e <_sercom_get_async_baud_val+0xf6>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     6c4:	2440      	movs	r4, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
     6c6:	9805      	ldr	r0, [sp, #20]
     6c8:	2808      	cmp	r0, #8
     6ca:	d004      	beq.n	6d6 <_sercom_get_async_baud_val+0x19e>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
     6cc:	0341      	lsls	r1, r0, #13
     6ce:	4319      	orrs	r1, r3
	}

	*baudval = baud_calculated;
     6d0:	9c04      	ldr	r4, [sp, #16]
     6d2:	8021      	strh	r1, [r4, #0]
	return STATUS_OK;
     6d4:	2400      	movs	r4, #0
}
     6d6:	1c20      	adds	r0, r4, #0
     6d8:	b007      	add	sp, #28
     6da:	bc3c      	pop	{r2, r3, r4, r5}
     6dc:	4690      	mov	r8, r2
     6de:	4699      	mov	r9, r3
     6e0:	46a2      	mov	sl, r4
     6e2:	46ab      	mov	fp, r5
     6e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     6e6:	46c0      	nop			; (mov r8, r8)
     6e8:	00000000 	.word	0x00000000
     6ec:	00000001 	.word	0x00000001
     6f0:	000041b6 	.word	0x000041b6
     6f4:	000000a0 	.word	0x000000a0
     6f8:	00001fff 	.word	0x00001fff
     6fc:	46c0      	nop			; (mov r8, r8)
     6fe:	46c0      	nop			; (mov r8, r8)

00000700 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     700:	b530      	push	{r4, r5, lr}
     702:	b085      	sub	sp, #20
     704:	1c05      	adds	r5, r0, #0
     706:	4c12      	ldr	r4, [pc, #72]	; (750 <sercom_set_gclk_generator+0x50>)
     708:	447c      	add	r4, pc
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     70a:	4b12      	ldr	r3, [pc, #72]	; (754 <sercom_set_gclk_generator+0x54>)
     70c:	447b      	add	r3, pc
     70e:	781b      	ldrb	r3, [r3, #0]
     710:	2b00      	cmp	r3, #0
     712:	d001      	beq.n	718 <sercom_set_gclk_generator+0x18>
     714:	2900      	cmp	r1, #0
     716:	d010      	beq.n	73a <sercom_set_gclk_generator+0x3a>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     718:	a903      	add	r1, sp, #12
     71a:	700d      	strb	r5, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     71c:	2013      	movs	r0, #19
     71e:	4b0e      	ldr	r3, [pc, #56]	; (758 <sercom_set_gclk_generator+0x58>)
     720:	58e3      	ldr	r3, [r4, r3]
     722:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     724:	2013      	movs	r0, #19
     726:	4b0d      	ldr	r3, [pc, #52]	; (75c <sercom_set_gclk_generator+0x5c>)
     728:	58e3      	ldr	r3, [r4, r3]
     72a:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
     72c:	4b0c      	ldr	r3, [pc, #48]	; (760 <sercom_set_gclk_generator+0x60>)
     72e:	447b      	add	r3, pc
     730:	705d      	strb	r5, [r3, #1]
		_sercom_config.generator_is_set = true;
     732:	2201      	movs	r2, #1
     734:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     736:	2000      	movs	r0, #0
     738:	e008      	b.n	74c <sercom_set_gclk_generator+0x4c>
	} else if (generator_source == _sercom_config.generator_source) {
     73a:	4b0a      	ldr	r3, [pc, #40]	; (764 <sercom_set_gclk_generator+0x64>)
     73c:	447b      	add	r3, pc
     73e:	785a      	ldrb	r2, [r3, #1]
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     740:	201d      	movs	r0, #29
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config */
		return STATUS_OK;
     742:	1b55      	subs	r5, r2, r5
     744:	1e6a      	subs	r2, r5, #1
     746:	4195      	sbcs	r5, r2
     748:	426d      	negs	r5, r5
     74a:	4028      	ands	r0, r5
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     74c:	b005      	add	sp, #20
     74e:	bd30      	pop	{r4, r5, pc}
     750:	00004000 	.word	0x00004000
     754:	1ffffd58 	.word	0x1ffffd58
     758:	0000006c 	.word	0x0000006c
     75c:	00000188 	.word	0x00000188
     760:	1ffffd36 	.word	0x1ffffd36
     764:	1ffffd28 	.word	0x1ffffd28

00000768 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
     768:	b500      	push	{lr}
	switch ((uintptr_t)sercom_module) {
     76a:	4b28      	ldr	r3, [pc, #160]	; (80c <_sercom_get_default_pad+0xa4>)
     76c:	4298      	cmp	r0, r3
     76e:	d019      	beq.n	7a4 <_sercom_get_default_pad+0x3c>
     770:	d803      	bhi.n	77a <_sercom_get_default_pad+0x12>
     772:	4b27      	ldr	r3, [pc, #156]	; (810 <_sercom_get_default_pad+0xa8>)
     774:	4298      	cmp	r0, r3
     776:	d007      	beq.n	788 <_sercom_get_default_pad+0x20>
     778:	e03e      	b.n	7f8 <_sercom_get_default_pad+0x90>
     77a:	4b26      	ldr	r3, [pc, #152]	; (814 <_sercom_get_default_pad+0xac>)
     77c:	4298      	cmp	r0, r3
     77e:	d01f      	beq.n	7c0 <_sercom_get_default_pad+0x58>
     780:	4b25      	ldr	r3, [pc, #148]	; (818 <_sercom_get_default_pad+0xb0>)
     782:	4298      	cmp	r0, r3
     784:	d02a      	beq.n	7dc <_sercom_get_default_pad+0x74>
     786:	e037      	b.n	7f8 <_sercom_get_default_pad+0x90>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     788:	2000      	movs	r0, #0
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     78a:	2903      	cmp	r1, #3
     78c:	d83d      	bhi.n	80a <_sercom_get_default_pad+0xa2>
     78e:	1c08      	adds	r0, r1, #0
     790:	f003 fe0e 	bl	43b0 <__gnu_thumb1_case_uqi>
     794:	06043402 	.word	0x06043402
     798:	4820      	ldr	r0, [pc, #128]	; (81c <_sercom_get_default_pad+0xb4>)
     79a:	e036      	b.n	80a <_sercom_get_default_pad+0xa2>
     79c:	4820      	ldr	r0, [pc, #128]	; (820 <_sercom_get_default_pad+0xb8>)
     79e:	e034      	b.n	80a <_sercom_get_default_pad+0xa2>
     7a0:	4820      	ldr	r0, [pc, #128]	; (824 <_sercom_get_default_pad+0xbc>)
     7a2:	e032      	b.n	80a <_sercom_get_default_pad+0xa2>
	}

	Assert(false);
	return 0;
     7a4:	2000      	movs	r0, #0
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     7a6:	2903      	cmp	r1, #3
     7a8:	d82f      	bhi.n	80a <_sercom_get_default_pad+0xa2>
     7aa:	1c08      	adds	r0, r1, #0
     7ac:	f003 fe00 	bl	43b0 <__gnu_thumb1_case_uqi>
     7b0:	06042802 	.word	0x06042802
     7b4:	2003      	movs	r0, #3
     7b6:	e028      	b.n	80a <_sercom_get_default_pad+0xa2>
     7b8:	481b      	ldr	r0, [pc, #108]	; (828 <_sercom_get_default_pad+0xc0>)
     7ba:	e026      	b.n	80a <_sercom_get_default_pad+0xa2>
     7bc:	481b      	ldr	r0, [pc, #108]	; (82c <_sercom_get_default_pad+0xc4>)
     7be:	e024      	b.n	80a <_sercom_get_default_pad+0xa2>
	}

	Assert(false);
	return 0;
     7c0:	2000      	movs	r0, #0
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     7c2:	2903      	cmp	r1, #3
     7c4:	d821      	bhi.n	80a <_sercom_get_default_pad+0xa2>
     7c6:	1c08      	adds	r0, r1, #0
     7c8:	f003 fdf2 	bl	43b0 <__gnu_thumb1_case_uqi>
     7cc:	06041c02 	.word	0x06041c02
     7d0:	4817      	ldr	r0, [pc, #92]	; (830 <_sercom_get_default_pad+0xc8>)
     7d2:	e01a      	b.n	80a <_sercom_get_default_pad+0xa2>
     7d4:	4817      	ldr	r0, [pc, #92]	; (834 <_sercom_get_default_pad+0xcc>)
     7d6:	e018      	b.n	80a <_sercom_get_default_pad+0xa2>
     7d8:	4817      	ldr	r0, [pc, #92]	; (838 <_sercom_get_default_pad+0xd0>)
     7da:	e016      	b.n	80a <_sercom_get_default_pad+0xa2>
	}

	Assert(false);
	return 0;
     7dc:	2000      	movs	r0, #0
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     7de:	2903      	cmp	r1, #3
     7e0:	d813      	bhi.n	80a <_sercom_get_default_pad+0xa2>
     7e2:	1c08      	adds	r0, r1, #0
     7e4:	f003 fde4 	bl	43b0 <__gnu_thumb1_case_uqi>
     7e8:	06041002 	.word	0x06041002
     7ec:	4813      	ldr	r0, [pc, #76]	; (83c <_sercom_get_default_pad+0xd4>)
     7ee:	e00c      	b.n	80a <_sercom_get_default_pad+0xa2>
     7f0:	4813      	ldr	r0, [pc, #76]	; (840 <_sercom_get_default_pad+0xd8>)
     7f2:	e00a      	b.n	80a <_sercom_get_default_pad+0xa2>
     7f4:	4813      	ldr	r0, [pc, #76]	; (844 <_sercom_get_default_pad+0xdc>)
     7f6:	e008      	b.n	80a <_sercom_get_default_pad+0xa2>
	}

	Assert(false);
	return 0;
     7f8:	2000      	movs	r0, #0
     7fa:	e006      	b.n	80a <_sercom_get_default_pad+0xa2>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     7fc:	4812      	ldr	r0, [pc, #72]	; (848 <_sercom_get_default_pad+0xe0>)
     7fe:	e004      	b.n	80a <_sercom_get_default_pad+0xa2>
     800:	4812      	ldr	r0, [pc, #72]	; (84c <_sercom_get_default_pad+0xe4>)
     802:	e002      	b.n	80a <_sercom_get_default_pad+0xa2>
     804:	4812      	ldr	r0, [pc, #72]	; (850 <_sercom_get_default_pad+0xe8>)
     806:	e000      	b.n	80a <_sercom_get_default_pad+0xa2>
     808:	4812      	ldr	r0, [pc, #72]	; (854 <_sercom_get_default_pad+0xec>)
	}

	Assert(false);
	return 0;
}
     80a:	bd00      	pop	{pc}
     80c:	42000c00 	.word	0x42000c00
     810:	42000800 	.word	0x42000800
     814:	42001000 	.word	0x42001000
     818:	42001400 	.word	0x42001400
     81c:	00040003 	.word	0x00040003
     820:	00060003 	.word	0x00060003
     824:	00070003 	.word	0x00070003
     828:	001e0003 	.word	0x001e0003
     82c:	001f0003 	.word	0x001f0003
     830:	00080003 	.word	0x00080003
     834:	000a0003 	.word	0x000a0003
     838:	000b0003 	.word	0x000b0003
     83c:	00100003 	.word	0x00100003
     840:	00120003 	.word	0x00120003
     844:	00130003 	.word	0x00130003
     848:	00050003 	.word	0x00050003
     84c:	00010003 	.word	0x00010003
     850:	00090003 	.word	0x00090003
     854:	00110003 	.word	0x00110003

00000858 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     858:	b570      	push	{r4, r5, r6, lr}
     85a:	b084      	sub	sp, #16
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     85c:	4a0f      	ldr	r2, [pc, #60]	; (89c <_sercom_get_sercom_inst_index+0x44>)
     85e:	447a      	add	r2, pc
     860:	4669      	mov	r1, sp
     862:	ca70      	ldmia	r2!, {r4, r5, r6}
     864:	c170      	stmia	r1!, {r4, r5, r6}
     866:	6812      	ldr	r2, [r2, #0]
     868:	600a      	str	r2, [r1, #0]

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     86a:	1c03      	adds	r3, r0, #0
     86c:	9a00      	ldr	r2, [sp, #0]
     86e:	4282      	cmp	r2, r0
     870:	d00f      	beq.n	892 <_sercom_get_sercom_inst_index+0x3a>
     872:	9c01      	ldr	r4, [sp, #4]
     874:	4284      	cmp	r4, r0
     876:	d008      	beq.n	88a <_sercom_get_sercom_inst_index+0x32>
     878:	9d02      	ldr	r5, [sp, #8]
     87a:	4285      	cmp	r5, r0
     87c:	d007      	beq.n	88e <_sercom_get_sercom_inst_index+0x36>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     87e:	2000      	movs	r0, #0
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     880:	9e03      	ldr	r6, [sp, #12]
     882:	429e      	cmp	r6, r3
     884:	d107      	bne.n	896 <_sercom_get_sercom_inst_index+0x3e>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     886:	2003      	movs	r0, #3
     888:	e004      	b.n	894 <_sercom_get_sercom_inst_index+0x3c>
     88a:	2001      	movs	r0, #1
     88c:	e002      	b.n	894 <_sercom_get_sercom_inst_index+0x3c>
     88e:	2002      	movs	r0, #2
     890:	e000      	b.n	894 <_sercom_get_sercom_inst_index+0x3c>
     892:	2000      	movs	r0, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
     894:	b2c0      	uxtb	r0, r0
	}

	/* Invalid data given */
	Assert(false);
	return 0;
}
     896:	b004      	add	sp, #16
     898:	bd70      	pop	{r4, r5, r6, pc}
     89a:	46c0      	nop			; (mov r8, r8)
     89c:	00003e42 	.word	0x00003e42

000008a0 <irda_master_callback_received>:
//////////////////////////////////////////////////////////////////////////
////////////////////// IrDA CALLBACK FUNCTIONS ////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
// IrDA Rx Callback Function
static void irda_master_callback_received(const struct usart_module *const module) {
     8a0:	b510      	push	{r4, lr}
     8a2:	b082      	sub	sp, #8
     8a4:	4c38      	ldr	r4, [pc, #224]	; (988 <irda_master_callback_received+0xe8>)
     8a6:	447c      	add	r4, pc
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     8a8:	4b38      	ldr	r3, [pc, #224]	; (98c <irda_master_callback_received+0xec>)
     8aa:	58e3      	ldr	r3, [r4, r3]
     8ac:	681a      	ldr	r2, [r3, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     8ae:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     8b0:	2b00      	cmp	r3, #0
     8b2:	d1fc      	bne.n	8ae <irda_master_callback_received+0xe>
	_usart_wait_for_sync(module);

	switch (transceiver_type) {
		case USART_TRANSCEIVER_RX:
			/* Disable RX */
			usart_hw->CTRLB.reg &= ~SERCOM_USART_CTRLB_RXEN;
     8b4:	6851      	ldr	r1, [r2, #4]
     8b6:	4b36      	ldr	r3, [pc, #216]	; (990 <irda_master_callback_received+0xf0>)
     8b8:	400b      	ands	r3, r1
     8ba:	6053      	str	r3, [r2, #4]
			module->receiver_enabled = false;
     8bc:	4b33      	ldr	r3, [pc, #204]	; (98c <irda_master_callback_received+0xec>)
     8be:	58e3      	ldr	r3, [r4, r3]
     8c0:	9301      	str	r3, [sp, #4]
     8c2:	2300      	movs	r3, #0
     8c4:	9901      	ldr	r1, [sp, #4]
     8c6:	718b      	strb	r3, [r1, #6]
	BaseType_t xYieldRequired; 
	
	usart_disable_transceiver(&irda_master, USART_TRANSCEIVER_RX);		// Disable the Rx Transceiver
	
	switch ( irda_comm_state )
     8c8:	4b32      	ldr	r3, [pc, #200]	; (994 <irda_master_callback_received+0xf4>)
     8ca:	58e3      	ldr	r3, [r4, r3]
     8cc:	9301      	str	r3, [sp, #4]
     8ce:	781b      	ldrb	r3, [r3, #0]
     8d0:	2b02      	cmp	r3, #2
     8d2:	d002      	beq.n	8da <irda_master_callback_received+0x3a>
     8d4:	2b04      	cmp	r3, #4
     8d6:	d035      	beq.n	944 <irda_master_callback_received+0xa4>
     8d8:	e054      	b.n	984 <irda_master_callback_received+0xe4>
	{
		case IRDA_BEACON_BACK_PING:
			if ( crc_check(&irda_rx_array, 4) )
     8da:	4b2f      	ldr	r3, [pc, #188]	; (998 <irda_master_callback_received+0xf8>)
     8dc:	58e3      	ldr	r3, [r4, r3]
     8de:	9301      	str	r3, [sp, #4]
     8e0:	1c18      	adds	r0, r3, #0
     8e2:	2104      	movs	r1, #4
     8e4:	4b2d      	ldr	r3, [pc, #180]	; (99c <irda_master_callback_received+0xfc>)
     8e6:	58e3      	ldr	r3, [r4, r3]
     8e8:	4798      	blx	r3
     8ea:	2800      	cmp	r0, #0
     8ec:	d04a      	beq.n	984 <irda_master_callback_received+0xe4>
			{
				irda_comm_state = IRDA_BEACON_STAGE_5;	// Change state to send first response
     8ee:	4b29      	ldr	r3, [pc, #164]	; (994 <irda_master_callback_received+0xf4>)
     8f0:	58e3      	ldr	r3, [r4, r3]
     8f2:	9301      	str	r3, [sp, #4]
     8f4:	2303      	movs	r3, #3
     8f6:	9a01      	ldr	r2, [sp, #4]
     8f8:	7013      	strb	r3, [r2, #0]
				//xTimerResetFromISR(timer_IrDA_Ping, 0);	// Reset the Ping timer immediately
				
				// Note that we must report from this point on
				will_report_control = true;	// Will report the following
     8fa:	4b29      	ldr	r3, [pc, #164]	; (9a0 <irda_master_callback_received+0x100>)
     8fc:	58e3      	ldr	r3, [r4, r3]
     8fe:	9301      	str	r3, [sp, #4]
     900:	2301      	movs	r3, #1
     902:	9901      	ldr	r1, [sp, #4]
     904:	700b      	strb	r3, [r1, #0]
				slat_number_report = irda_rx_array[0];
     906:	4b24      	ldr	r3, [pc, #144]	; (998 <irda_master_callback_received+0xf8>)
     908:	58e3      	ldr	r3, [r4, r3]
     90a:	781a      	ldrb	r2, [r3, #0]
     90c:	4925      	ldr	r1, [pc, #148]	; (9a4 <irda_master_callback_received+0x104>)
     90e:	5861      	ldr	r1, [r4, r1]
     910:	700a      	strb	r2, [r1, #0]
				job_number_report = irda_rx_array[1];
     912:	785a      	ldrb	r2, [r3, #1]
     914:	4924      	ldr	r1, [pc, #144]	; (9a8 <irda_master_callback_received+0x108>)
     916:	5861      	ldr	r1, [r4, r1]
     918:	700a      	strb	r2, [r1, #0]
				job_report = irda_rx_array[2];
     91a:	789a      	ldrb	r2, [r3, #2]
     91c:	4923      	ldr	r1, [pc, #140]	; (9ac <irda_master_callback_received+0x10c>)
     91e:	5861      	ldr	r1, [r4, r1]
     920:	700a      	strb	r2, [r1, #0]
				slat_health_report = irda_rx_array[3];
     922:	78db      	ldrb	r3, [r3, #3]
     924:	4a22      	ldr	r2, [pc, #136]	; (9b0 <irda_master_callback_received+0x110>)
     926:	58a2      	ldr	r2, [r4, r2]
     928:	7013      	strb	r3, [r2, #0]
								
 				xYieldRequired = xTaskResumeFromISR( irda_task_handler );
     92a:	4b22      	ldr	r3, [pc, #136]	; (9b4 <irda_master_callback_received+0x114>)
     92c:	58e3      	ldr	r3, [r4, r3]
     92e:	6818      	ldr	r0, [r3, #0]
     930:	4b21      	ldr	r3, [pc, #132]	; (9b8 <irda_master_callback_received+0x118>)
     932:	58e3      	ldr	r3, [r4, r3]
     934:	4798      	blx	r3
 				if( xYieldRequired == pdTRUE )
 				{
 					// We should switch context so the ISR returns to a different task.
 					// NOTE:  How this is done depends on the port you are using.  Check
 					// the documentation and examples for your port.
 					portYIELD_FROM_ISR(xYieldRequired);
     936:	2801      	cmp	r0, #1
     938:	d124      	bne.n	984 <irda_master_callback_received+0xe4>
     93a:	2280      	movs	r2, #128	; 0x80
     93c:	0552      	lsls	r2, r2, #21
     93e:	4b1f      	ldr	r3, [pc, #124]	; (9bc <irda_master_callback_received+0x11c>)
     940:	601a      	str	r2, [r3, #0]
     942:	e01f      	b.n	984 <irda_master_callback_received+0xe4>
 				}
			}
		break;
		case IRDA_BEACON_STAGE_5_RX:
			if ( crc_check(&irda_rx_array, 4) )
     944:	4b14      	ldr	r3, [pc, #80]	; (998 <irda_master_callback_received+0xf8>)
     946:	58e3      	ldr	r3, [r4, r3]
     948:	9301      	str	r3, [sp, #4]
     94a:	1c18      	adds	r0, r3, #0
     94c:	2104      	movs	r1, #4
     94e:	4b13      	ldr	r3, [pc, #76]	; (99c <irda_master_callback_received+0xfc>)
     950:	58e3      	ldr	r3, [r4, r3]
     952:	4798      	blx	r3
     954:	2800      	cmp	r0, #0
     956:	d015      	beq.n	984 <irda_master_callback_received+0xe4>
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     958:	2280      	movs	r2, #128	; 0x80
     95a:	0492      	lsls	r2, r2, #18
     95c:	4b18      	ldr	r3, [pc, #96]	; (9c0 <irda_master_callback_received+0x120>)
     95e:	619a      	str	r2, [r3, #24]
			{
					// This LED indicates that the cards have both been synced
				port_pin_set_output_level(LED_ERROR, pdTRUE);
				
				irda_comm_state = IRDA_BEACON_STAGE_9;	// Change state to send first response
     960:	4b0c      	ldr	r3, [pc, #48]	; (994 <irda_master_callback_received+0xf4>)
     962:	58e3      	ldr	r3, [r4, r3]
     964:	9301      	str	r3, [sp, #4]
     966:	2308      	movs	r3, #8
     968:	9a01      	ldr	r2, [sp, #4]
     96a:	7013      	strb	r3, [r2, #0]
				//xTimerResetFromISR(timer_IrDA_Ping, 0);	// Reset the Ping timer immediately
				
				xYieldRequired = xTaskResumeFromISR( irda_task_handler );
     96c:	4b11      	ldr	r3, [pc, #68]	; (9b4 <irda_master_callback_received+0x114>)
     96e:	58e3      	ldr	r3, [r4, r3]
     970:	6818      	ldr	r0, [r3, #0]
     972:	4b11      	ldr	r3, [pc, #68]	; (9b8 <irda_master_callback_received+0x118>)
     974:	58e3      	ldr	r3, [r4, r3]
     976:	4798      	blx	r3
				if( xYieldRequired == pdTRUE )
				{
					// We should switch context so the ISR returns to a different task.
					// NOTE:  How this is done depends on the port you are using.  Check
					// the documentation and examples for your port.
					portYIELD_FROM_ISR(xYieldRequired);
     978:	2801      	cmp	r0, #1
     97a:	d103      	bne.n	984 <irda_master_callback_received+0xe4>
     97c:	2280      	movs	r2, #128	; 0x80
     97e:	0552      	lsls	r2, r2, #21
     980:	4b0e      	ldr	r3, [pc, #56]	; (9bc <irda_master_callback_received+0x11c>)
     982:	601a      	str	r2, [r3, #0]
				}
			}
		break;
	}
}
     984:	b002      	add	sp, #8
     986:	bd10      	pop	{r4, pc}
     988:	00003e62 	.word	0x00003e62
     98c:	00000138 	.word	0x00000138
     990:	fffdffff 	.word	0xfffdffff
     994:	000000d4 	.word	0x000000d4
     998:	00000028 	.word	0x00000028
     99c:	000001e8 	.word	0x000001e8
     9a0:	0000002c 	.word	0x0000002c
     9a4:	00000140 	.word	0x00000140
     9a8:	000001d4 	.word	0x000001d4
     9ac:	00000100 	.word	0x00000100
     9b0:	00000074 	.word	0x00000074
     9b4:	00000170 	.word	0x00000170
     9b8:	00000088 	.word	0x00000088
     9bc:	e000ed04 	.word	0xe000ed04
     9c0:	41004400 	.word	0x41004400

000009c4 <irda_master_callback_transmitted>:
// IrDA Tx Callback Function
static void irda_master_callback_transmitted(const struct usart_module *const module) {
     9c4:	b570      	push	{r4, r5, r6, lr}
     9c6:	b084      	sub	sp, #16
     9c8:	4c41      	ldr	r4, [pc, #260]	; (ad0 <irda_master_callback_transmitted+0x10c>)
     9ca:	447c      	add	r4, pc
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     9cc:	4b41      	ldr	r3, [pc, #260]	; (ad4 <irda_master_callback_transmitted+0x110>)
     9ce:	58e3      	ldr	r3, [r4, r3]
     9d0:	681b      	ldr	r3, [r3, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     9d2:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     9d4:	2a00      	cmp	r2, #0
     9d6:	d1fc      	bne.n	9d2 <irda_master_callback_transmitted+0xe>
	_usart_wait_for_sync(module);

	switch (transceiver_type) {
		case USART_TRANSCEIVER_RX:
			/* Enable RX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
     9d8:	6859      	ldr	r1, [r3, #4]
     9da:	2280      	movs	r2, #128	; 0x80
     9dc:	0292      	lsls	r2, r2, #10
     9de:	430a      	orrs	r2, r1
     9e0:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
     9e2:	4a3c      	ldr	r2, [pc, #240]	; (ad4 <irda_master_callback_transmitted+0x110>)
     9e4:	58a2      	ldr	r2, [r4, r2]
     9e6:	9202      	str	r2, [sp, #8]
     9e8:	2201      	movs	r2, #1
     9ea:	9902      	ldr	r1, [sp, #8]
     9ec:	718a      	strb	r2, [r1, #6]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     9ee:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     9f0:	2a00      	cmp	r2, #0
     9f2:	d1fc      	bne.n	9ee <irda_master_callback_transmitted+0x2a>
	
	usart_enable_transceiver( &irda_master, USART_TRANSCEIVER_RX );		// Enable the Rx transceiver
	
	switch ( irda_comm_state ) {
     9f4:	4a38      	ldr	r2, [pc, #224]	; (ad8 <irda_master_callback_transmitted+0x114>)
     9f6:	58a2      	ldr	r2, [r4, r2]
     9f8:	9202      	str	r2, [sp, #8]
     9fa:	7812      	ldrb	r2, [r2, #0]
     9fc:	2a03      	cmp	r2, #3
     9fe:	d004      	beq.n	a0a <irda_master_callback_transmitted+0x46>
     a00:	2a08      	cmp	r2, #8
     a02:	d044      	beq.n	a8e <irda_master_callback_transmitted+0xca>
     a04:	2a01      	cmp	r2, #1
     a06:	d161      	bne.n	acc <irda_master_callback_transmitted+0x108>
     a08:	e020      	b.n	a4c <irda_master_callback_transmitted+0x88>
		case IRDA_BEACON_STAGE_5:	// Stage 5 message has just been sent
			irda_comm_state = IRDA_BEACON_STAGE_5_RX;
     a0a:	4b33      	ldr	r3, [pc, #204]	; (ad8 <irda_master_callback_transmitted+0x114>)
     a0c:	58e3      	ldr	r3, [r4, r3]
     a0e:	9302      	str	r3, [sp, #8]
     a10:	2304      	movs	r3, #4
     a12:	9a02      	ldr	r2, [sp, #8]
     a14:	7013      	strb	r3, [r2, #0]
			
			xTimerResetFromISR(timer_IrDA_Ping, 0);	// Reset the Ping timer immediately
     a16:	4b31      	ldr	r3, [pc, #196]	; (adc <irda_master_callback_transmitted+0x118>)
     a18:	58e3      	ldr	r3, [r4, r3]
     a1a:	681d      	ldr	r5, [r3, #0]
     a1c:	4b30      	ldr	r3, [pc, #192]	; (ae0 <irda_master_callback_transmitted+0x11c>)
     a1e:	58e3      	ldr	r3, [r4, r3]
     a20:	4798      	blx	r3
     a22:	1c02      	adds	r2, r0, #0
     a24:	2300      	movs	r3, #0
     a26:	9300      	str	r3, [sp, #0]
     a28:	1c28      	adds	r0, r5, #0
     a2a:	2107      	movs	r1, #7
     a2c:	4d2d      	ldr	r5, [pc, #180]	; (ae4 <irda_master_callback_transmitted+0x120>)
     a2e:	5965      	ldr	r5, [r4, r5]
     a30:	47a8      	blx	r5
			
			usart_read_buffer_job( &irda_master, irda_rx_array, 5);	// Attempt to receive the next 5 bytes
     a32:	4b28      	ldr	r3, [pc, #160]	; (ad4 <irda_master_callback_transmitted+0x110>)
     a34:	58e3      	ldr	r3, [r4, r3]
     a36:	9302      	str	r3, [sp, #8]
     a38:	4b2b      	ldr	r3, [pc, #172]	; (ae8 <irda_master_callback_transmitted+0x124>)
     a3a:	58e3      	ldr	r3, [r4, r3]
     a3c:	9303      	str	r3, [sp, #12]
     a3e:	9802      	ldr	r0, [sp, #8]
     a40:	1c19      	adds	r1, r3, #0
     a42:	2205      	movs	r2, #5
     a44:	4b29      	ldr	r3, [pc, #164]	; (aec <irda_master_callback_transmitted+0x128>)
     a46:	58e3      	ldr	r3, [r4, r3]
     a48:	4798      	blx	r3
		break;
     a4a:	e03f      	b.n	acc <irda_master_callback_transmitted+0x108>
		case IRDA_BEACON_PING:	// The ping has just been transmitted
			
		
			// Change the state of the machine
			irda_comm_state = IRDA_BEACON_BACK_PING;	// We are starting to wait for the Back-Ping	
     a4c:	4b22      	ldr	r3, [pc, #136]	; (ad8 <irda_master_callback_transmitted+0x114>)
     a4e:	58e3      	ldr	r3, [r4, r3]
     a50:	9302      	str	r3, [sp, #8]
     a52:	2302      	movs	r3, #2
     a54:	9d02      	ldr	r5, [sp, #8]
     a56:	702b      	strb	r3, [r5, #0]
			
			// Reset the Sync Timer
			xTimerResetFromISR( timer_IrDA_Ping, 0 );
     a58:	4b20      	ldr	r3, [pc, #128]	; (adc <irda_master_callback_transmitted+0x118>)
     a5a:	58e3      	ldr	r3, [r4, r3]
     a5c:	681d      	ldr	r5, [r3, #0]
     a5e:	4b20      	ldr	r3, [pc, #128]	; (ae0 <irda_master_callback_transmitted+0x11c>)
     a60:	58e3      	ldr	r3, [r4, r3]
     a62:	4798      	blx	r3
     a64:	1c02      	adds	r2, r0, #0
     a66:	2300      	movs	r3, #0
     a68:	9300      	str	r3, [sp, #0]
     a6a:	1c28      	adds	r0, r5, #0
     a6c:	2107      	movs	r1, #7
     a6e:	4d1d      	ldr	r5, [pc, #116]	; (ae4 <irda_master_callback_transmitted+0x120>)
     a70:	5965      	ldr	r5, [r4, r5]
     a72:	47a8      	blx	r5
			usart_read_buffer_job( &irda_master, irda_rx_array, 5);	// Attempt to receive the next 5 bytes
     a74:	4b17      	ldr	r3, [pc, #92]	; (ad4 <irda_master_callback_transmitted+0x110>)
     a76:	58e3      	ldr	r3, [r4, r3]
     a78:	9302      	str	r3, [sp, #8]
     a7a:	4b1b      	ldr	r3, [pc, #108]	; (ae8 <irda_master_callback_transmitted+0x124>)
     a7c:	58e3      	ldr	r3, [r4, r3]
     a7e:	9303      	str	r3, [sp, #12]
     a80:	9802      	ldr	r0, [sp, #8]
     a82:	1c19      	adds	r1, r3, #0
     a84:	2205      	movs	r2, #5
     a86:	4b19      	ldr	r3, [pc, #100]	; (aec <irda_master_callback_transmitted+0x128>)
     a88:	58e3      	ldr	r3, [r4, r3]
     a8a:	4798      	blx	r3
		break;
     a8c:	e01e      	b.n	acc <irda_master_callback_transmitted+0x108>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     a8e:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     a90:	2a00      	cmp	r2, #0
     a92:	d1fc      	bne.n	a8e <irda_master_callback_transmitted+0xca>
	_usart_wait_for_sync(module);

	switch (transceiver_type) {
		case USART_TRANSCEIVER_RX:
			/* Disable RX */
			usart_hw->CTRLB.reg &= ~SERCOM_USART_CTRLB_RXEN;
     a94:	6859      	ldr	r1, [r3, #4]
     a96:	4a16      	ldr	r2, [pc, #88]	; (af0 <irda_master_callback_transmitted+0x12c>)
     a98:	400a      	ands	r2, r1
     a9a:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = false;
     a9c:	4b0d      	ldr	r3, [pc, #52]	; (ad4 <irda_master_callback_transmitted+0x110>)
     a9e:	58e3      	ldr	r3, [r4, r3]
     aa0:	2500      	movs	r5, #0
     aa2:	719d      	strb	r5, [r3, #6]
		case IRDA_BEACON_STAGE_9:
			// Reset the Sync Timer
			usart_disable_transceiver( &irda_master, USART_TRANSCEIVER_RX );		// Enable the Rx transceiver
			xTimerResetFromISR( timer_IrDA_Ping, 0 );
     aa4:	4b0d      	ldr	r3, [pc, #52]	; (adc <irda_master_callback_transmitted+0x118>)
     aa6:	58e3      	ldr	r3, [r4, r3]
     aa8:	681e      	ldr	r6, [r3, #0]
     aaa:	4b0d      	ldr	r3, [pc, #52]	; (ae0 <irda_master_callback_transmitted+0x11c>)
     aac:	58e3      	ldr	r3, [r4, r3]
     aae:	4798      	blx	r3
     ab0:	1c02      	adds	r2, r0, #0
     ab2:	9500      	str	r5, [sp, #0]
     ab4:	1c30      	adds	r0, r6, #0
     ab6:	2107      	movs	r1, #7
     ab8:	2300      	movs	r3, #0
     aba:	4d0a      	ldr	r5, [pc, #40]	; (ae4 <irda_master_callback_transmitted+0x120>)
     abc:	5965      	ldr	r5, [r4, r5]
     abe:	47a8      	blx	r5
			irda_comm_state = IRDA_BEACON_PING;	// We are starting to wait for the Back-Ping
     ac0:	4b05      	ldr	r3, [pc, #20]	; (ad8 <irda_master_callback_transmitted+0x114>)
     ac2:	58e3      	ldr	r3, [r4, r3]
     ac4:	9302      	str	r3, [sp, #8]
     ac6:	2301      	movs	r3, #1
     ac8:	9902      	ldr	r1, [sp, #8]
     aca:	700b      	strb	r3, [r1, #0]
		break;
	}
}
     acc:	b004      	add	sp, #16
     ace:	bd70      	pop	{r4, r5, r6, pc}
     ad0:	00003d3e 	.word	0x00003d3e
     ad4:	00000138 	.word	0x00000138
     ad8:	000000d4 	.word	0x000000d4
     adc:	00000148 	.word	0x00000148
     ae0:	000000fc 	.word	0x000000fc
     ae4:	00000134 	.word	0x00000134
     ae8:	00000028 	.word	0x00000028
     aec:	000001a8 	.word	0x000001a8
     af0:	fffdffff 	.word	0xfffdffff

00000af4 <bastian_IrDA_configuration>:
static void irda_master_callback_received(const struct usart_module *const module);
static void irda_master_callback_transmitted(const struct usart_module *const module);

//////////////////////////////////////////////////////////////////////////
// IrDA Port COnfiguration
void bastian_IrDA_configuration (void){
     af4:	b5f0      	push	{r4, r5, r6, r7, lr}
     af6:	b093      	sub	sp, #76	; 0x4c
     af8:	4d31      	ldr	r5, [pc, #196]	; (bc0 <bastian_IrDA_configuration+0xcc>)
     afa:	447d      	add	r5, pc
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     afc:	2380      	movs	r3, #128	; 0x80
     afe:	05db      	lsls	r3, r3, #23
     b00:	9302      	str	r3, [sp, #8]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     b02:	2300      	movs	r3, #0
     b04:	aa02      	add	r2, sp, #8
     b06:	6053      	str	r3, [r2, #4]
	config->parity           = USART_PARITY_NONE;
	config->stopbits         = USART_STOPBITS_1;
     b08:	2100      	movs	r1, #0
     b0a:	7293      	strb	r3, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     b0c:	72d3      	strb	r3, [r2, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
     b0e:	2401      	movs	r4, #1
     b10:	2024      	movs	r0, #36	; 0x24
     b12:	5414      	strb	r4, [r2, r0]
	config->transmitter_enable = true;
     b14:	2025      	movs	r0, #37	; 0x25
     b16:	5414      	strb	r4, [r2, r0]
	config->clock_polarity_inverted = false;
     b18:	2026      	movs	r0, #38	; 0x26
     b1a:	5413      	strb	r3, [r2, r0]
	config->use_external_clock = false;
     b1c:	2027      	movs	r0, #39	; 0x27
     b1e:	5413      	strb	r3, [r2, r0]
	config->ext_clock_freq   = 0;
     b20:	6293      	str	r3, [r2, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     b22:	202c      	movs	r0, #44	; 0x2c
     b24:	5413      	strb	r3, [r2, r0]
	config->generator_source = GCLK_GENERATOR_0;
     b26:	202d      	movs	r0, #45	; 0x2d
     b28:	5413      	strb	r3, [r2, r0]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     b2a:	6153      	str	r3, [r2, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     b2c:	8213      	strh	r3, [r2, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     b2e:	2000      	movs	r0, #0
     b30:	76d0      	strb	r0, [r2, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     b32:	7611      	strb	r1, [r2, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     b34:	7711      	strb	r1, [r2, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
	config->receive_pulse_length                    = 19;
     b36:	2013      	movs	r0, #19
     b38:	7690      	strb	r0, [r2, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     b3a:	7751      	strb	r1, [r2, #29]
	usart_get_config_defaults(&irda_conf);
	
	// Port Configuration
	irda_conf.transfer_mode = USART_TRANSFER_ASYNCHRONOUSLY;	// Asynchronous Communication Mode
	irda_conf.generator_source = GCLK_GENERATOR_0;				// Use the Generic Clock 0 as source
	irda_conf.baudrate = 115200;								// IrDA Baudrate
     b3c:	21e1      	movs	r1, #225	; 0xe1
     b3e:	0249      	lsls	r1, r1, #9
     b40:	6211      	str	r1, [r2, #32]
	irda_conf.character_size = USART_CHARACTER_SIZE_8BIT;
	irda_conf.stopbits = USART_STOPBITS_1;
	irda_conf.parity = USART_PARITY_EVEN;
     b42:	8113      	strh	r3, [r2, #8]
	irda_conf.encoding_format_enable = true;	// Enable IrDA Encoding
     b44:	7654      	strb	r4, [r2, #25]
	
	// Pin Multiplexer Settings
	irda_conf.mux_setting = USART_RX_1_TX_0_XCK_1;
     b46:	2380      	movs	r3, #128	; 0x80
     b48:	035b      	lsls	r3, r3, #13
     b4a:	60d3      	str	r3, [r2, #12]
	irda_conf.pinmux_pad0 = PINMUX_PA22C_SERCOM3_PAD0;
     b4c:	4b1d      	ldr	r3, [pc, #116]	; (bc4 <bastian_IrDA_configuration+0xd0>)
     b4e:	6313      	str	r3, [r2, #48]	; 0x30
	irda_conf.pinmux_pad1 = PINMUX_PA23C_SERCOM3_PAD1;
     b50:	4b1d      	ldr	r3, [pc, #116]	; (bc8 <bastian_IrDA_configuration+0xd4>)
     b52:	6353      	str	r3, [r2, #52]	; 0x34
	irda_conf.pinmux_pad2 = PINMUX_UNUSED;
     b54:	2301      	movs	r3, #1
     b56:	425b      	negs	r3, r3
     b58:	6393      	str	r3, [r2, #56]	; 0x38
	irda_conf.pinmux_pad3 = PINMUX_UNUSED;
     b5a:	63d3      	str	r3, [r2, #60]	; 0x3c

	// Initialize the previous settings
	usart_init((struct usart_module*) &irda_master, SERCOM3, &irda_conf);
     b5c:	4b1b      	ldr	r3, [pc, #108]	; (bcc <bastian_IrDA_configuration+0xd8>)
     b5e:	58ef      	ldr	r7, [r5, r3]
     b60:	1c38      	adds	r0, r7, #0
     b62:	491b      	ldr	r1, [pc, #108]	; (bd0 <bastian_IrDA_configuration+0xdc>)
     b64:	4b1b      	ldr	r3, [pc, #108]	; (bd4 <bastian_IrDA_configuration+0xe0>)
     b66:	58eb      	ldr	r3, [r5, r3]
     b68:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     b6a:	683e      	ldr	r6, [r7, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     b6c:	1c30      	adds	r0, r6, #0
     b6e:	4b1a      	ldr	r3, [pc, #104]	; (bd8 <bastian_IrDA_configuration+0xe4>)
     b70:	58eb      	ldr	r3, [r5, r3]
     b72:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     b74:	231f      	movs	r3, #31
     b76:	4018      	ands	r0, r3
     b78:	4084      	lsls	r4, r0
     b7a:	4b18      	ldr	r3, [pc, #96]	; (bdc <bastian_IrDA_configuration+0xe8>)
     b7c:	601c      	str	r4, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     b7e:	683a      	ldr	r2, [r7, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     b80:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     b82:	2b00      	cmp	r3, #0
     b84:	d1fc      	bne.n	b80 <bastian_IrDA_configuration+0x8c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     b86:	6832      	ldr	r2, [r6, #0]
     b88:	2302      	movs	r3, #2
     b8a:	4313      	orrs	r3, r2
     b8c:	6033      	str	r3, [r6, #0]

	// Enable the module
	usart_enable((struct usart_module*) &irda_master);

	// ******** Callback setup
	usart_register_callback((struct usart_module*) &irda_master, (usart_callback_t)irda_master_callback_received, USART_CALLBACK_BUFFER_RECEIVED);
     b8e:	4b0f      	ldr	r3, [pc, #60]	; (bcc <bastian_IrDA_configuration+0xd8>)
     b90:	58ec      	ldr	r4, [r5, r3]
     b92:	1c20      	adds	r0, r4, #0
     b94:	4912      	ldr	r1, [pc, #72]	; (be0 <bastian_IrDA_configuration+0xec>)
     b96:	4479      	add	r1, pc
     b98:	2201      	movs	r2, #1
     b9a:	4b12      	ldr	r3, [pc, #72]	; (be4 <bastian_IrDA_configuration+0xf0>)
     b9c:	58ee      	ldr	r6, [r5, r3]
     b9e:	47b0      	blx	r6
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     ba0:	2531      	movs	r5, #49	; 0x31
     ba2:	5d62      	ldrb	r2, [r4, r5]
     ba4:	2302      	movs	r3, #2
     ba6:	4313      	orrs	r3, r2
     ba8:	5563      	strb	r3, [r4, r5]
	usart_enable_callback((struct usart_module*) &irda_master, USART_CALLBACK_BUFFER_RECEIVED);

	usart_register_callback((struct usart_module*) &irda_master, (usart_callback_t)irda_master_callback_transmitted, USART_CALLBACK_BUFFER_TRANSMITTED);
     baa:	1c20      	adds	r0, r4, #0
     bac:	490e      	ldr	r1, [pc, #56]	; (be8 <bastian_IrDA_configuration+0xf4>)
     bae:	4479      	add	r1, pc
     bb0:	2200      	movs	r2, #0
     bb2:	47b0      	blx	r6
     bb4:	5d62      	ldrb	r2, [r4, r5]
     bb6:	2301      	movs	r3, #1
     bb8:	4313      	orrs	r3, r2
     bba:	5563      	strb	r3, [r4, r5]
	usart_enable_callback((struct usart_module*) &irda_master, USART_CALLBACK_BUFFER_TRANSMITTED);
}
     bbc:	b013      	add	sp, #76	; 0x4c
     bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
     bc0:	00003c0e 	.word	0x00003c0e
     bc4:	00160002 	.word	0x00160002
     bc8:	00170002 	.word	0x00170002
     bcc:	00000138 	.word	0x00000138
     bd0:	42001400 	.word	0x42001400
     bd4:	0000014c 	.word	0x0000014c
     bd8:	00000064 	.word	0x00000064
     bdc:	e000e100 	.word	0xe000e100
     be0:	fffffd07 	.word	0xfffffd07
     be4:	00000008 	.word	0x00000008
     be8:	fffffe13 	.word	0xfffffe13

00000bec <control_callback_transmitted>:
	}	
}
// IrDA Tx Callback Function
static void control_callback_transmitted(const struct usart_module *const module) {
	
}
     bec:	4770      	bx	lr
     bee:	46c0      	nop			; (mov r8, r8)

00000bf0 <controls_communcation_tx_task>:
}

//////////////////////////////////////////////////////////////////////////
//	Control Task Handler
// TX task handler
void controls_communcation_tx_task( void ) {
     bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
     bf2:	4657      	mov	r7, sl
     bf4:	464e      	mov	r6, r9
     bf6:	4645      	mov	r5, r8
     bf8:	b4e0      	push	{r5, r6, r7}
     bfa:	b084      	sub	sp, #16
     bfc:	4c37      	ldr	r4, [pc, #220]	; (cdc <controls_communcation_tx_task+0xec>)
     bfe:	447c      	add	r4, pc
		// Initialize this task
	control_tx_status = CONTROL_TX_SENDING_PING;	// The first thing that we do, is send the ping
     c00:	4b37      	ldr	r3, [pc, #220]	; (ce0 <controls_communcation_tx_task+0xf0>)
     c02:	58e3      	ldr	r3, [r4, r3]
     c04:	9302      	str	r3, [sp, #8]
     c06:	2301      	movs	r3, #1
     c08:	9a02      	ldr	r2, [sp, #8]
     c0a:	7013      	strb	r3, [r2, #0]
	will_report_control = false;
     c0c:	4b35      	ldr	r3, [pc, #212]	; (ce4 <controls_communcation_tx_task+0xf4>)
     c0e:	58e3      	ldr	r3, [r4, r3]
     c10:	9302      	str	r3, [sp, #8]
     c12:	2300      	movs	r3, #0
     c14:	9e02      	ldr	r6, [sp, #8]
     c16:	7033      	strb	r3, [r6, #0]
	
	for (;;) {	// Loop forever
		// Send a sample ping :
		// Change the nature of the data to be sent depending on the type of data that needs to be transmitted
			// Check if we are going to send a report or a regular ping
		if ( will_report_control ) {
     c18:	4b32      	ldr	r3, [pc, #200]	; (ce4 <controls_communcation_tx_task+0xf4>)
     c1a:	58e7      	ldr	r7, [r4, r3]
     c1c:	46ba      	mov	sl, r7
			will_report_control = false;	
			
			xTimerReset(control_tx_timer, 0);
			usart_write_buffer_job(&control_serial, control_tx_buffer, 5);
		} else {
			control_tx_buffer[0] = 0xDE;	
     c1e:	22de      	movs	r2, #222	; 0xde
     c20:	4690      	mov	r8, r2
			
			xTimerReset(control_tx_timer, 0);
     c22:	2500      	movs	r5, #0
	
	for (;;) {	// Loop forever
		// Send a sample ping :
		// Change the nature of the data to be sent depending on the type of data that needs to be transmitted
			// Check if we are going to send a report or a regular ping
		if ( will_report_control ) {
     c24:	4656      	mov	r6, sl
     c26:	7833      	ldrb	r3, [r6, #0]
     c28:	2b00      	cmp	r3, #0
     c2a:	d036      	beq.n	c9a <controls_communcation_tx_task+0xaa>
			control_tx_buffer[0] = 0xFA;
     c2c:	4b2e      	ldr	r3, [pc, #184]	; (ce8 <controls_communcation_tx_task+0xf8>)
     c2e:	58e6      	ldr	r6, [r4, r3]
     c30:	23fa      	movs	r3, #250	; 0xfa
     c32:	7033      	strb	r3, [r6, #0]
			control_tx_buffer[1] = slat_number_report;
     c34:	4b2d      	ldr	r3, [pc, #180]	; (cec <controls_communcation_tx_task+0xfc>)
     c36:	58e3      	ldr	r3, [r4, r3]
     c38:	9302      	str	r3, [sp, #8]
     c3a:	781b      	ldrb	r3, [r3, #0]
     c3c:	b2db      	uxtb	r3, r3
     c3e:	7073      	strb	r3, [r6, #1]
			control_tx_buffer[2] = job_number_report;
     c40:	4b2b      	ldr	r3, [pc, #172]	; (cf0 <controls_communcation_tx_task+0x100>)
     c42:	58e3      	ldr	r3, [r4, r3]
     c44:	9302      	str	r3, [sp, #8]
     c46:	781b      	ldrb	r3, [r3, #0]
     c48:	b2db      	uxtb	r3, r3
     c4a:	70b3      	strb	r3, [r6, #2]
			control_tx_buffer[3] = job_report;
     c4c:	4b29      	ldr	r3, [pc, #164]	; (cf4 <controls_communcation_tx_task+0x104>)
     c4e:	58e3      	ldr	r3, [r4, r3]
     c50:	9302      	str	r3, [sp, #8]
     c52:	781b      	ldrb	r3, [r3, #0]
     c54:	b2db      	uxtb	r3, r3
     c56:	70f3      	strb	r3, [r6, #3]
			control_tx_buffer[4] = slat_health_report;	// Status of the motor
     c58:	4b27      	ldr	r3, [pc, #156]	; (cf8 <controls_communcation_tx_task+0x108>)
     c5a:	58e3      	ldr	r3, [r4, r3]
     c5c:	9302      	str	r3, [sp, #8]
     c5e:	781b      	ldrb	r3, [r3, #0]
     c60:	b2db      	uxtb	r3, r3
     c62:	7133      	strb	r3, [r6, #4]
			
			will_report_control = false;	
     c64:	4b1f      	ldr	r3, [pc, #124]	; (ce4 <controls_communcation_tx_task+0xf4>)
     c66:	58e3      	ldr	r3, [r4, r3]
     c68:	701d      	strb	r5, [r3, #0]
			
			xTimerReset(control_tx_timer, 0);
     c6a:	4b24      	ldr	r3, [pc, #144]	; (cfc <controls_communcation_tx_task+0x10c>)
     c6c:	58e3      	ldr	r3, [r4, r3]
     c6e:	681f      	ldr	r7, [r3, #0]
     c70:	4b23      	ldr	r3, [pc, #140]	; (d00 <controls_communcation_tx_task+0x110>)
     c72:	58e3      	ldr	r3, [r4, r3]
     c74:	4798      	blx	r3
     c76:	1c02      	adds	r2, r0, #0
     c78:	9500      	str	r5, [sp, #0]
     c7a:	1c38      	adds	r0, r7, #0
     c7c:	2102      	movs	r1, #2
     c7e:	1c2b      	adds	r3, r5, #0
     c80:	4f20      	ldr	r7, [pc, #128]	; (d04 <controls_communcation_tx_task+0x114>)
     c82:	59e7      	ldr	r7, [r4, r7]
     c84:	47b8      	blx	r7
			usart_write_buffer_job(&control_serial, control_tx_buffer, 5);
     c86:	4b20      	ldr	r3, [pc, #128]	; (d08 <controls_communcation_tx_task+0x118>)
     c88:	58e3      	ldr	r3, [r4, r3]
     c8a:	9302      	str	r3, [sp, #8]
     c8c:	1c18      	adds	r0, r3, #0
     c8e:	1c31      	adds	r1, r6, #0
     c90:	2205      	movs	r2, #5
     c92:	4b1e      	ldr	r3, [pc, #120]	; (d0c <controls_communcation_tx_task+0x11c>)
     c94:	58e3      	ldr	r3, [r4, r3]
     c96:	4798      	blx	r3
     c98:	e01a      	b.n	cd0 <controls_communcation_tx_task+0xe0>
		} else {
			control_tx_buffer[0] = 0xDE;	
     c9a:	4b13      	ldr	r3, [pc, #76]	; (ce8 <controls_communcation_tx_task+0xf8>)
     c9c:	58e7      	ldr	r7, [r4, r3]
     c9e:	4642      	mov	r2, r8
     ca0:	703a      	strb	r2, [r7, #0]
			
			xTimerReset(control_tx_timer, 0);
     ca2:	4b16      	ldr	r3, [pc, #88]	; (cfc <controls_communcation_tx_task+0x10c>)
     ca4:	58e3      	ldr	r3, [r4, r3]
     ca6:	681e      	ldr	r6, [r3, #0]
     ca8:	4b15      	ldr	r3, [pc, #84]	; (d00 <controls_communcation_tx_task+0x110>)
     caa:	58e3      	ldr	r3, [r4, r3]
     cac:	4798      	blx	r3
     cae:	1c02      	adds	r2, r0, #0
     cb0:	9500      	str	r5, [sp, #0]
     cb2:	1c30      	adds	r0, r6, #0
     cb4:	2102      	movs	r1, #2
     cb6:	1c2b      	adds	r3, r5, #0
     cb8:	4e12      	ldr	r6, [pc, #72]	; (d04 <controls_communcation_tx_task+0x114>)
     cba:	59a6      	ldr	r6, [r4, r6]
     cbc:	47b0      	blx	r6
			usart_write_buffer_job(&control_serial, control_tx_buffer, 1);
     cbe:	4b12      	ldr	r3, [pc, #72]	; (d08 <controls_communcation_tx_task+0x118>)
     cc0:	58e3      	ldr	r3, [r4, r3]
     cc2:	9303      	str	r3, [sp, #12]
     cc4:	1c18      	adds	r0, r3, #0
     cc6:	1c39      	adds	r1, r7, #0
     cc8:	2201      	movs	r2, #1
     cca:	4b10      	ldr	r3, [pc, #64]	; (d0c <controls_communcation_tx_task+0x11c>)
     ccc:	58e3      	ldr	r3, [r4, r3]
     cce:	4798      	blx	r3
		}
		
		vTaskSuspend( NULL );	// Suspend myself right now
     cd0:	1c28      	adds	r0, r5, #0
     cd2:	4b0f      	ldr	r3, [pc, #60]	; (d10 <controls_communcation_tx_task+0x120>)
     cd4:	58e3      	ldr	r3, [r4, r3]
     cd6:	4798      	blx	r3
	}
     cd8:	e7a4      	b.n	c24 <controls_communcation_tx_task+0x34>
     cda:	46c0      	nop			; (mov r8, r8)
     cdc:	00003b0a 	.word	0x00003b0a
     ce0:	000000cc 	.word	0x000000cc
     ce4:	0000002c 	.word	0x0000002c
     ce8:	00000070 	.word	0x00000070
     cec:	00000140 	.word	0x00000140
     cf0:	000001d4 	.word	0x000001d4
     cf4:	00000100 	.word	0x00000100
     cf8:	00000074 	.word	0x00000074
     cfc:	000001c0 	.word	0x000001c0
     d00:	000000bc 	.word	0x000000bc
     d04:	00000134 	.word	0x00000134
     d08:	00000124 	.word	0x00000124
     d0c:	00000200 	.word	0x00000200
     d10:	0000013c 	.word	0x0000013c

00000d14 <controls_communcation_rx_task>:
}
// RX Task Handler
void controls_communcation_rx_task( void ) {
     d14:	b5f0      	push	{r4, r5, r6, r7, lr}
     d16:	465f      	mov	r7, fp
     d18:	4656      	mov	r6, sl
     d1a:	464d      	mov	r5, r9
     d1c:	4644      	mov	r4, r8
     d1e:	b4f0      	push	{r4, r5, r6, r7}
     d20:	b085      	sub	sp, #20
     d22:	4c81      	ldr	r4, [pc, #516]	; (f28 <controls_communcation_rx_task+0x214>)
     d24:	447c      	add	r4, pc
	
	uint16_t temp_16bit_variable;
	uint16_t temp_delay;
	
	// Initialize this task
		control_rx_status = CONTROL_RX_GETTING_FB;
     d26:	4b81      	ldr	r3, [pc, #516]	; (f2c <controls_communcation_rx_task+0x218>)
     d28:	58e3      	ldr	r3, [r4, r3]
     d2a:	9302      	str	r3, [sp, #8]
     d2c:	2301      	movs	r3, #1
     d2e:	9902      	ldr	r1, [sp, #8]
     d30:	700b      	strb	r3, [r1, #0]
		table_access_busy = false;
     d32:	4b7f      	ldr	r3, [pc, #508]	; (f30 <controls_communcation_rx_task+0x21c>)
     d34:	58e3      	ldr	r3, [r4, r3]
     d36:	9302      	str	r3, [sp, #8]
     d38:	2300      	movs	r3, #0
     d3a:	9a02      	ldr	r2, [sp, #8]
     d3c:	7013      	strb	r3, [r2, #0]
	
	for (;;) {	// Loop forever
		// Send a sample ping
		switch ( control_rx_status ) {
     d3e:	4b7b      	ldr	r3, [pc, #492]	; (f2c <controls_communcation_rx_task+0x218>)
     d40:	58e5      	ldr	r5, [r4, r3]
     d42:	46a9      	mov	r9, r5
				control_rx_buffer[14] = control_rx_buffer[13];
				
				control_rx_status = CONTROL_RX_GETTING_FB;
			case CONTROL_RX_GETTING_FB:
				// Reset the timer for this byte reception
				xTimerReset( control_rx_timer, 0 );
     d44:	2600      	movs	r6, #0
		control_rx_status = CONTROL_RX_GETTING_FB;
		table_access_busy = false;
	
	for (;;) {	// Loop forever
		// Send a sample ping
		switch ( control_rx_status ) {
     d46:	464f      	mov	r7, r9
     d48:	783b      	ldrb	r3, [r7, #0]
     d4a:	b2db      	uxtb	r3, r3
     d4c:	2b01      	cmp	r3, #1
     d4e:	d100      	bne.n	d52 <controls_communcation_rx_task+0x3e>
     d50:	e0cb      	b.n	eea <controls_communcation_rx_task+0x1d6>
     d52:	2b10      	cmp	r3, #16
     d54:	d000      	beq.n	d58 <controls_communcation_rx_task+0x44>
     d56:	e0e2      	b.n	f1e <controls_communcation_rx_task+0x20a>
			case CONTROL_RX_PROCESSING_PACKAGE:
					// Data has been received and is ready to be processed
					
					// First set the flag that indicates database access
				table_access_busy = true;
     d58:	4b75      	ldr	r3, [pc, #468]	; (f30 <controls_communcation_rx_task+0x21c>)
     d5a:	58e3      	ldr	r3, [r4, r3]
     d5c:	9302      	str	r3, [sp, #8]
     d5e:	2301      	movs	r3, #1
     d60:	9902      	ldr	r1, [sp, #8]
     d62:	700b      	strb	r3, [r1, #0]
					// Next, check if the number of the indicated slat is correct
				if ( control_rx_buffer[ 1 ] > 0 && control_rx_buffer[ 1 ] < NUMBER_OF_SLATS + 1 ) {	// 0 < ss < 72 (in this case)
     d64:	4b73      	ldr	r3, [pc, #460]	; (f34 <controls_communcation_rx_task+0x220>)
     d66:	58e3      	ldr	r3, [r4, r3]
     d68:	9302      	str	r3, [sp, #8]
     d6a:	785b      	ldrb	r3, [r3, #1]
     d6c:	2b00      	cmp	r3, #0
     d6e:	d100      	bne.n	d72 <controls_communcation_rx_task+0x5e>
     d70:	e0ad      	b.n	ece <controls_communcation_rx_task+0x1ba>
     d72:	4b70      	ldr	r3, [pc, #448]	; (f34 <controls_communcation_rx_task+0x220>)
     d74:	58e3      	ldr	r3, [r4, r3]
     d76:	9302      	str	r3, [sp, #8]
     d78:	785b      	ldrb	r3, [r3, #1]
     d7a:	b2db      	uxtb	r3, r3
     d7c:	2b48      	cmp	r3, #72	; 0x48
     d7e:	d900      	bls.n	d82 <controls_communcation_rx_task+0x6e>
     d80:	e0a5      	b.n	ece <controls_communcation_rx_task+0x1ba>
					current_slat = control_rx_buffer[1];	// Initialize the current slat counter/variable
     d82:	4b6c      	ldr	r3, [pc, #432]	; (f34 <controls_communcation_rx_task+0x220>)
     d84:	58e3      	ldr	r3, [r4, r3]
     d86:	7858      	ldrb	r0, [r3, #1]
     d88:	b2c0      	uxtb	r0, r0
					
					// Iterate on the number of slats to be affected
					if ( control_rx_buffer[ 2 ] < 2 ) subsequent_slats = 1;
     d8a:	789b      	ldrb	r3, [r3, #2]
     d8c:	b2db      	uxtb	r3, r3
     d8e:	2b01      	cmp	r3, #1
     d90:	d80a      	bhi.n	da8 <controls_communcation_rx_task+0x94>
     d92:	2201      	movs	r2, #1
     d94:	4690      	mov	r8, r2
     d96:	4b68      	ldr	r3, [pc, #416]	; (f38 <controls_communcation_rx_task+0x224>)
     d98:	58e3      	ldr	r3, [r4, r3]
     d9a:	781b      	ldrb	r3, [r3, #0]
     d9c:	469a      	mov	sl, r3
     d9e:	1c35      	adds	r5, r6, #0
						
							// Modulate the number of the slat if needed
						if ( current_slat > NUMBER_OF_SLATS ) current_slat = current_slat % NUMBER_OF_SLATS;
						
							// Check the case if the job number is zero (deleting record)
						if ( control_rx_buffer[3] == 0 && 
     da0:	4b64      	ldr	r3, [pc, #400]	; (f34 <controls_communcation_rx_task+0x220>)
     da2:	58e3      	ldr	r3, [r4, r3]
     da4:	9303      	str	r3, [sp, #12]
     da6:	e008      	b.n	dba <controls_communcation_rx_task+0xa6>
				if ( control_rx_buffer[ 1 ] > 0 && control_rx_buffer[ 1 ] < NUMBER_OF_SLATS + 1 ) {	// 0 < ss < 72 (in this case)
					current_slat = control_rx_buffer[1];	// Initialize the current slat counter/variable
					
					// Iterate on the number of slats to be affected
					if ( control_rx_buffer[ 2 ] < 2 ) subsequent_slats = 1;
					else subsequent_slats = control_rx_buffer[ 2 ];
     da8:	4b62      	ldr	r3, [pc, #392]	; (f34 <controls_communcation_rx_task+0x220>)
     daa:	58e3      	ldr	r3, [r4, r3]
     dac:	9302      	str	r3, [sp, #8]
     dae:	789b      	ldrb	r3, [r3, #2]
     db0:	b2db      	uxtb	r3, r3
     db2:	4698      	mov	r8, r3
					
					for ( i=0; i < subsequent_slats; i++ ) {
     db4:	2b00      	cmp	r3, #0
     db6:	d1ee      	bne.n	d96 <controls_communcation_rx_task+0x82>
     db8:	e089      	b.n	ece <controls_communcation_rx_task+0x1ba>
						current_slat = current_slat + i;	// Fix the slat to be operated on
     dba:	1940      	adds	r0, r0, r5
     dbc:	b2c0      	uxtb	r0, r0
						
							// Modulate the number of the slat if needed
						if ( current_slat > NUMBER_OF_SLATS ) current_slat = current_slat % NUMBER_OF_SLATS;
     dbe:	2848      	cmp	r0, #72	; 0x48
     dc0:	d904      	bls.n	dcc <controls_communcation_rx_task+0xb8>
     dc2:	4b5e      	ldr	r3, [pc, #376]	; (f3c <controls_communcation_rx_task+0x228>)
     dc4:	58e3      	ldr	r3, [r4, r3]
     dc6:	2148      	movs	r1, #72	; 0x48
     dc8:	4798      	blx	r3
     dca:	b2c8      	uxtb	r0, r1
						
							// Check the case if the job number is zero (deleting record)
						if ( control_rx_buffer[3] == 0 && 
     dcc:	9f03      	ldr	r7, [sp, #12]
     dce:	78fb      	ldrb	r3, [r7, #3]
     dd0:	2b00      	cmp	r3, #0
     dd2:	d10e      	bne.n	df2 <controls_communcation_rx_task+0xde>
							job_lookup_table[current_slat][0] > 0 ) {	// Spend very little time clearing
     dd4:	4b5a      	ldr	r3, [pc, #360]	; (f40 <controls_communcation_rx_task+0x22c>)
     dd6:	58e3      	ldr	r3, [r4, r3]
     dd8:	9302      	str	r3, [sp, #8]
     dda:	00c3      	lsls	r3, r0, #3
     ddc:	9902      	ldr	r1, [sp, #8]
     dde:	5c5b      	ldrb	r3, [r3, r1]
						
							// Modulate the number of the slat if needed
						if ( current_slat > NUMBER_OF_SLATS ) current_slat = current_slat % NUMBER_OF_SLATS;
						
							// Check the case if the job number is zero (deleting record)
						if ( control_rx_buffer[3] == 0 && 
     de0:	2b00      	cmp	r3, #0
     de2:	d006      	beq.n	df2 <controls_communcation_rx_task+0xde>
							job_lookup_table[current_slat][0] > 0 ) {	// Spend very little time clearing
							job_lookup_table[current_slat][0] = 0;	// Record has been cleared as per request
     de4:	4b56      	ldr	r3, [pc, #344]	; (f40 <controls_communcation_rx_task+0x22c>)
     de6:	58e3      	ldr	r3, [r4, r3]
     de8:	9302      	str	r3, [sp, #8]
     dea:	00c3      	lsls	r3, r0, #3
     dec:	9a02      	ldr	r2, [sp, #8]
     dee:	549e      	strb	r6, [r3, r2]
     df0:	e064      	b.n	ebc <controls_communcation_rx_task+0x1a8>
						} else {
							// Start parsing the necessary data
							job_lookup_table[current_slat][0] = control_rx_buffer[ 3 ];	// Parsing the Job Number
     df2:	4683      	mov	fp, r0
     df4:	4b4f      	ldr	r3, [pc, #316]	; (f34 <controls_communcation_rx_task+0x220>)
     df6:	58e3      	ldr	r3, [r4, r3]
     df8:	78da      	ldrb	r2, [r3, #3]
     dfa:	b2d2      	uxtb	r2, r2
     dfc:	4694      	mov	ip, r2
     dfe:	4a50      	ldr	r2, [pc, #320]	; (f40 <controls_communcation_rx_task+0x22c>)
     e00:	58a2      	ldr	r2, [r4, r2]
     e02:	9202      	str	r2, [sp, #8]
     e04:	00c1      	lsls	r1, r0, #3
     e06:	4667      	mov	r7, ip
     e08:	548f      	strb	r7, [r1, r2]
							job_lookup_table[current_slat][7] = control_rx_buffer[ 4 ];	// Parsing the Job Power
     e0a:	791a      	ldrb	r2, [r3, #4]
     e0c:	b2d2      	uxtb	r2, r2
     e0e:	4694      	mov	ip, r2
     e10:	9f02      	ldr	r7, [sp, #8]
     e12:	187a      	adds	r2, r7, r1
     e14:	4661      	mov	r1, ip
     e16:	71d1      	strb	r1, [r2, #7]
							
							job_lookup_table[current_slat][1] = control_rx_buffer[ 5 ];	// Parsing the HSB for Delay
     e18:	7959      	ldrb	r1, [r3, #5]
     e1a:	b2c9      	uxtb	r1, r1
     e1c:	7051      	strb	r1, [r2, #1]
							job_lookup_table[current_slat][2] = control_rx_buffer[ 6 ] & 0xF0;	// Parsing the LSB for Delay
     e1e:	7999      	ldrb	r1, [r3, #6]
     e20:	270f      	movs	r7, #15
     e22:	43b9      	bics	r1, r7
     e24:	7091      	strb	r1, [r2, #2]
							
							job_lookup_table[current_slat][4] = control_rx_buffer[ 9 ];	// Parsing the HSB for Duration
     e26:	7a59      	ldrb	r1, [r3, #9]
     e28:	b2c9      	uxtb	r1, r1
     e2a:	7111      	strb	r1, [r2, #4]
							job_lookup_table[current_slat][5] = control_rx_buffer[ 10 ] & 0xF0;	// Parsing the LSB for Duration
     e2c:	7a99      	ldrb	r1, [r3, #10]
     e2e:	43b9      	bics	r1, r7
     e30:	7151      	strb	r1, [r2, #5]
							
							temp_16bit_variable = (uint16_t) control_rx_buffer[7];
     e32:	79da      	ldrb	r2, [r3, #7]
							temp_16bit_variable = temp_16bit_variable << 8;
     e34:	0212      	lsls	r2, r2, #8
							temp_16bit_variable = temp_16bit_variable | (uint16_t) control_rx_buffer[8];
     e36:	7a1b      	ldrb	r3, [r3, #8]
     e38:	4313      	orrs	r3, r2
							if ( temp_16bit_variable == 0 ) {	// If zero, send minimum
     e3a:	d10b      	bne.n	e54 <controls_communcation_rx_task+0x140>
								job_lookup_table[current_slat][2] = job_lookup_table[current_slat][2] & 0xF0;
     e3c:	4b40      	ldr	r3, [pc, #256]	; (f40 <controls_communcation_rx_task+0x22c>)
     e3e:	58e3      	ldr	r3, [r4, r3]
     e40:	9302      	str	r3, [sp, #8]
     e42:	00c3      	lsls	r3, r0, #3
     e44:	9902      	ldr	r1, [sp, #8]
     e46:	18cb      	adds	r3, r1, r3
     e48:	789a      	ldrb	r2, [r3, #2]
     e4a:	43ba      	bics	r2, r7
     e4c:	709a      	strb	r2, [r3, #2]
								job_lookup_table[current_slat][3] = 0x01;
     e4e:	2201      	movs	r2, #1
     e50:	70da      	strb	r2, [r3, #3]
     e52:	e00e      	b.n	e72 <controls_communcation_rx_task+0x15e>
							} else {
								temp_delay = temp_16bit_variable;
								temp_16bit_variable = temp_16bit_variable >> 4;
     e54:	0919      	lsrs	r1, r3, #4
								temp_16bit_variable = temp_16bit_variable & 0x00FF;
								job_lookup_table[current_slat][3] = (uint8_t) temp_16bit_variable;
     e56:	27ff      	movs	r7, #255	; 0xff
     e58:	4039      	ands	r1, r7
     e5a:	4a39      	ldr	r2, [pc, #228]	; (f40 <controls_communcation_rx_task+0x22c>)
     e5c:	58a2      	ldr	r2, [r4, r2]
     e5e:	9202      	str	r2, [sp, #8]
     e60:	00c2      	lsls	r2, r0, #3
     e62:	9f02      	ldr	r7, [sp, #8]
     e64:	18ba      	adds	r2, r7, r2
     e66:	70d1      	strb	r1, [r2, #3]
								temp_16bit_variable = temp_delay;
								temp_16bit_variable = temp_16bit_variable >> 12;
								temp_16bit_variable = temp_16bit_variable & 0x000F;
								temp_8bit_variable_A = (uint8_t) temp_16bit_variable;
     e68:	0b1b      	lsrs	r3, r3, #12
								job_lookup_table[current_slat][2] = job_lookup_table[current_slat][2] | temp_8bit_variable_A;
     e6a:	7891      	ldrb	r1, [r2, #2]
     e6c:	4319      	orrs	r1, r3
     e6e:	7091      	strb	r1, [r2, #2]
								temp_16bit_variable = temp_16bit_variable & 0x00FF;
								job_lookup_table[current_slat][3] = (uint8_t) temp_16bit_variable;
								temp_16bit_variable = temp_delay;
								temp_16bit_variable = temp_16bit_variable >> 12;
								temp_16bit_variable = temp_16bit_variable & 0x000F;
								temp_8bit_variable_A = (uint8_t) temp_16bit_variable;
     e70:	469a      	mov	sl, r3
								job_lookup_table[current_slat][2] = job_lookup_table[current_slat][2] | temp_8bit_variable_A;
							}
							
							temp_16bit_variable = (uint16_t) control_rx_buffer[11];
     e72:	4b30      	ldr	r3, [pc, #192]	; (f34 <controls_communcation_rx_task+0x220>)
     e74:	58e3      	ldr	r3, [r4, r3]
     e76:	7ada      	ldrb	r2, [r3, #11]
							temp_16bit_variable = temp_16bit_variable << 8;
     e78:	0212      	lsls	r2, r2, #8
							temp_16bit_variable = temp_16bit_variable | (uint16_t) control_rx_buffer[12];
     e7a:	7b1b      	ldrb	r3, [r3, #12]
     e7c:	4313      	orrs	r3, r2
							if ( temp_16bit_variable == 0 ) {	// If zero, send minimum
     e7e:	d10d      	bne.n	e9c <controls_communcation_rx_task+0x188>
								job_lookup_table[current_slat][5] = job_lookup_table[current_slat][5] & 0xF0;
     e80:	4b2f      	ldr	r3, [pc, #188]	; (f40 <controls_communcation_rx_task+0x22c>)
     e82:	58e3      	ldr	r3, [r4, r3]
     e84:	9302      	str	r3, [sp, #8]
     e86:	4659      	mov	r1, fp
     e88:	00cb      	lsls	r3, r1, #3
     e8a:	9a02      	ldr	r2, [sp, #8]
     e8c:	18d3      	adds	r3, r2, r3
     e8e:	795a      	ldrb	r2, [r3, #5]
     e90:	270f      	movs	r7, #15
     e92:	43ba      	bics	r2, r7
     e94:	715a      	strb	r2, [r3, #5]
								job_lookup_table[current_slat][6] = 0x01;
     e96:	2101      	movs	r1, #1
     e98:	7199      	strb	r1, [r3, #6]
     e9a:	e00f      	b.n	ebc <controls_communcation_rx_task+0x1a8>
							} else {
								temp_delay = temp_16bit_variable;
								temp_16bit_variable = temp_16bit_variable >> 4;
     e9c:	0919      	lsrs	r1, r3, #4
								temp_16bit_variable = temp_16bit_variable & 0x00FF;
								job_lookup_table[current_slat][6] = (uint8_t) temp_16bit_variable;
     e9e:	22ff      	movs	r2, #255	; 0xff
     ea0:	4011      	ands	r1, r2
     ea2:	4a27      	ldr	r2, [pc, #156]	; (f40 <controls_communcation_rx_task+0x22c>)
     ea4:	58a2      	ldr	r2, [r4, r2]
     ea6:	9202      	str	r2, [sp, #8]
     ea8:	465f      	mov	r7, fp
     eaa:	00fa      	lsls	r2, r7, #3
     eac:	9f02      	ldr	r7, [sp, #8]
     eae:	18ba      	adds	r2, r7, r2
     eb0:	7191      	strb	r1, [r2, #6]
								temp_16bit_variable = temp_delay;
								temp_16bit_variable = temp_16bit_variable >> 12;
								temp_16bit_variable = temp_16bit_variable & 0x000F;
								temp_8bit_variable_A = (uint8_t) temp_16bit_variable;
     eb2:	0b1b      	lsrs	r3, r3, #12
								job_lookup_table[current_slat][5] = job_lookup_table[current_slat][5] | temp_8bit_variable_A;
     eb4:	7951      	ldrb	r1, [r2, #5]
     eb6:	4319      	orrs	r1, r3
     eb8:	7151      	strb	r1, [r2, #5]
								temp_16bit_variable = temp_16bit_variable & 0x00FF;
								job_lookup_table[current_slat][6] = (uint8_t) temp_16bit_variable;
								temp_16bit_variable = temp_delay;
								temp_16bit_variable = temp_16bit_variable >> 12;
								temp_16bit_variable = temp_16bit_variable & 0x000F;
								temp_8bit_variable_A = (uint8_t) temp_16bit_variable;
     eba:	469a      	mov	sl, r3
					
					// Iterate on the number of slats to be affected
					if ( control_rx_buffer[ 2 ] < 2 ) subsequent_slats = 1;
					else subsequent_slats = control_rx_buffer[ 2 ];
					
					for ( i=0; i < subsequent_slats; i++ ) {
     ebc:	3501      	adds	r5, #1
     ebe:	b2ed      	uxtb	r5, r5
     ec0:	4545      	cmp	r5, r8
     ec2:	d200      	bcs.n	ec6 <controls_communcation_rx_task+0x1b2>
     ec4:	e779      	b.n	dba <controls_communcation_rx_task+0xa6>
     ec6:	4b1c      	ldr	r3, [pc, #112]	; (f38 <controls_communcation_rx_task+0x224>)
     ec8:	58e3      	ldr	r3, [r4, r3]
     eca:	4651      	mov	r1, sl
     ecc:	7019      	strb	r1, [r3, #0]
						}
					}
				}
				
					// Set the table control to false after table has been modified
				table_access_busy = false;
     ece:	4b18      	ldr	r3, [pc, #96]	; (f30 <controls_communcation_rx_task+0x21c>)
     ed0:	58e3      	ldr	r3, [r4, r3]
     ed2:	701e      	strb	r6, [r3, #0]
				control_rx_buffer[14] = control_rx_buffer[13];
     ed4:	4b17      	ldr	r3, [pc, #92]	; (f34 <controls_communcation_rx_task+0x220>)
     ed6:	58e3      	ldr	r3, [r4, r3]
     ed8:	7b5a      	ldrb	r2, [r3, #13]
     eda:	b2d2      	uxtb	r2, r2
     edc:	739a      	strb	r2, [r3, #14]
				
				control_rx_status = CONTROL_RX_GETTING_FB;
     ede:	4b13      	ldr	r3, [pc, #76]	; (f2c <controls_communcation_rx_task+0x218>)
     ee0:	58e3      	ldr	r3, [r4, r3]
     ee2:	9302      	str	r3, [sp, #8]
     ee4:	2301      	movs	r3, #1
     ee6:	9a02      	ldr	r2, [sp, #8]
     ee8:	7013      	strb	r3, [r2, #0]
			case CONTROL_RX_GETTING_FB:
				// Reset the timer for this byte reception
				xTimerReset( control_rx_timer, 0 );
     eea:	4b16      	ldr	r3, [pc, #88]	; (f44 <controls_communcation_rx_task+0x230>)
     eec:	58e3      	ldr	r3, [r4, r3]
     eee:	681d      	ldr	r5, [r3, #0]
     ef0:	4b15      	ldr	r3, [pc, #84]	; (f48 <controls_communcation_rx_task+0x234>)
     ef2:	58e3      	ldr	r3, [r4, r3]
     ef4:	4798      	blx	r3
     ef6:	1c02      	adds	r2, r0, #0
     ef8:	9600      	str	r6, [sp, #0]
     efa:	1c28      	adds	r0, r5, #0
     efc:	2102      	movs	r1, #2
     efe:	1c33      	adds	r3, r6, #0
     f00:	4d12      	ldr	r5, [pc, #72]	; (f4c <controls_communcation_rx_task+0x238>)
     f02:	5965      	ldr	r5, [r4, r5]
     f04:	47a8      	blx	r5
			
				// Queue the job of getting that first byte
				usart_read_buffer_job( &control_serial, control_rx_buffer, 1);	// Get one byte	
     f06:	4b12      	ldr	r3, [pc, #72]	; (f50 <controls_communcation_rx_task+0x23c>)
     f08:	58e3      	ldr	r3, [r4, r3]
     f0a:	9302      	str	r3, [sp, #8]
     f0c:	4b09      	ldr	r3, [pc, #36]	; (f34 <controls_communcation_rx_task+0x220>)
     f0e:	58e3      	ldr	r3, [r4, r3]
     f10:	9303      	str	r3, [sp, #12]
     f12:	9802      	ldr	r0, [sp, #8]
     f14:	1c19      	adds	r1, r3, #0
     f16:	2201      	movs	r2, #1
     f18:	4b0e      	ldr	r3, [pc, #56]	; (f54 <controls_communcation_rx_task+0x240>)
     f1a:	58e3      	ldr	r3, [r4, r3]
     f1c:	4798      	blx	r3
			break;
		}
		
		// we have to try to do two things at the same time: 1] Send the ping back every 20ms 2] Receive data from controls ASYNC
		vTaskSuspend( NULL );	// Suspend myself right now!
     f1e:	1c30      	adds	r0, r6, #0
     f20:	4b0d      	ldr	r3, [pc, #52]	; (f58 <controls_communcation_rx_task+0x244>)
     f22:	58e3      	ldr	r3, [r4, r3]
     f24:	4798      	blx	r3
	}
     f26:	e70e      	b.n	d46 <controls_communcation_rx_task+0x32>
     f28:	000039e4 	.word	0x000039e4
     f2c:	00000190 	.word	0x00000190
     f30:	000001c8 	.word	0x000001c8
     f34:	0000016c 	.word	0x0000016c
     f38:	000000e0 	.word	0x000000e0
     f3c:	000001d8 	.word	0x000001d8
     f40:	0000017c 	.word	0x0000017c
     f44:	000001f4 	.word	0x000001f4
     f48:	000000bc 	.word	0x000000bc
     f4c:	00000134 	.word	0x00000134
     f50:	00000124 	.word	0x00000124
     f54:	000001a8 	.word	0x000001a8
     f58:	0000013c 	.word	0x0000013c

00000f5c <control_tx_timer_callback>:
}

void control_tx_timer_callback( TimerHandle_t pxTimer ) {
     f5c:	b500      	push	{lr}
     f5e:	b083      	sub	sp, #12
     f60:	4b07      	ldr	r3, [pc, #28]	; (f80 <control_tx_timer_callback+0x24>)
     f62:	447b      	add	r3, pc
	configASSERT( pxTimer );
     f64:	2800      	cmp	r0, #0
     f66:	d101      	bne.n	f6c <control_tx_timer_callback+0x10>
     f68:	b672      	cpsid	i
     f6a:	e7fe      	b.n	f6a <control_tx_timer_callback+0xe>
	
	// Execute the following if the timer for the TX task expires
	vTaskResume( control_tx_task_handler );	
     f6c:	4a05      	ldr	r2, [pc, #20]	; (f84 <control_tx_timer_callback+0x28>)
     f6e:	589a      	ldr	r2, [r3, r2]
     f70:	6810      	ldr	r0, [r2, #0]
     f72:	4a05      	ldr	r2, [pc, #20]	; (f88 <control_tx_timer_callback+0x2c>)
     f74:	589a      	ldr	r2, [r3, r2]
     f76:	9201      	str	r2, [sp, #4]
     f78:	4790      	blx	r2
}
     f7a:	b003      	add	sp, #12
     f7c:	bd00      	pop	{pc}
     f7e:	46c0      	nop			; (mov r8, r8)
     f80:	000037a6 	.word	0x000037a6
     f84:	00000058 	.word	0x00000058
     f88:	0000011c 	.word	0x0000011c

00000f8c <control_rx_timer_callback>:

void control_rx_timer_callback( TimerHandle_t pxTimer ) {
     f8c:	b500      	push	{lr}
     f8e:	b083      	sub	sp, #12
     f90:	4b0e      	ldr	r3, [pc, #56]	; (fcc <control_rx_timer_callback+0x40>)
     f92:	447b      	add	r3, pc
	configASSERT( pxTimer );
     f94:	2800      	cmp	r0, #0
     f96:	d101      	bne.n	f9c <control_rx_timer_callback+0x10>
     f98:	b672      	cpsid	i
     f9a:	e7fe      	b.n	f9a <control_rx_timer_callback+0xe>
	
	// Execute the following when the timer for the RX task has expired
	switch ( control_rx_status ) {
     f9c:	4a0c      	ldr	r2, [pc, #48]	; (fd0 <control_rx_timer_callback+0x44>)
     f9e:	589a      	ldr	r2, [r3, r2]
     fa0:	9201      	str	r2, [sp, #4]
     fa2:	7812      	ldrb	r2, [r2, #0]
     fa4:	b2d2      	uxtb	r2, r2
     fa6:	2a01      	cmp	r2, #1
     fa8:	d007      	beq.n	fba <control_rx_timer_callback+0x2e>
     faa:	2a02      	cmp	r2, #2
     fac:	d10c      	bne.n	fc8 <control_rx_timer_callback+0x3c>
		case CONTROL_RX_FB_CONTENT:
			control_rx_status = CONTROL_RX_GETTING_FB;	// Change status to getting the header
     fae:	4a08      	ldr	r2, [pc, #32]	; (fd0 <control_rx_timer_callback+0x44>)
     fb0:	589a      	ldr	r2, [r3, r2]
     fb2:	9201      	str	r2, [sp, #4]
     fb4:	2201      	movs	r2, #1
     fb6:	9901      	ldr	r1, [sp, #4]
     fb8:	700a      	strb	r2, [r1, #0]
		case CONTROL_RX_GETTING_FB:
			vTaskResume( control_rx_task_handler );	// Resume the Rx Task
     fba:	4a06      	ldr	r2, [pc, #24]	; (fd4 <control_rx_timer_callback+0x48>)
     fbc:	589a      	ldr	r2, [r3, r2]
     fbe:	6810      	ldr	r0, [r2, #0]
     fc0:	4a05      	ldr	r2, [pc, #20]	; (fd8 <control_rx_timer_callback+0x4c>)
     fc2:	589a      	ldr	r2, [r3, r2]
     fc4:	9201      	str	r2, [sp, #4]
     fc6:	4790      	blx	r2
		break;
	}
}
     fc8:	b003      	add	sp, #12
     fca:	bd00      	pop	{pc}
     fcc:	00003776 	.word	0x00003776
     fd0:	00000190 	.word	0x00000190
     fd4:	00000114 	.word	0x00000114
     fd8:	0000011c 	.word	0x0000011c

00000fdc <control_callback_received>:
//////////////////////////////////////////////////////////////////////////
////////////////////// IrDA CALLBACK FUNCTIONS ////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
// IrDA Rx Callback Function
static void control_callback_received(const struct usart_module *const module) {
     fdc:	b530      	push	{r4, r5, lr}
     fde:	b085      	sub	sp, #20
     fe0:	4c20      	ldr	r4, [pc, #128]	; (1064 <control_callback_received+0x88>)
     fe2:	447c      	add	r4, pc
	
	switch ( control_rx_status ) {
     fe4:	4b20      	ldr	r3, [pc, #128]	; (1068 <control_callback_received+0x8c>)
     fe6:	58e3      	ldr	r3, [r4, r3]
     fe8:	9302      	str	r3, [sp, #8]
     fea:	781b      	ldrb	r3, [r3, #0]
     fec:	b2db      	uxtb	r3, r3
     fee:	2b01      	cmp	r3, #1
     ff0:	d002      	beq.n	ff8 <control_callback_received+0x1c>
     ff2:	2b02      	cmp	r3, #2
     ff4:	d028      	beq.n	1048 <control_callback_received+0x6c>
     ff6:	e033      	b.n	1060 <control_callback_received+0x84>
		case CONTROL_RX_GETTING_FB:
			// Check if the first byte is the correct header
			if ( control_rx_buffer[0] == 0xFB ) {
     ff8:	4b1c      	ldr	r3, [pc, #112]	; (106c <control_callback_received+0x90>)
     ffa:	58e3      	ldr	r3, [r4, r3]
     ffc:	9302      	str	r3, [sp, #8]
     ffe:	781b      	ldrb	r3, [r3, #0]
    1000:	b2db      	uxtb	r3, r3
    1002:	2bfb      	cmp	r3, #251	; 0xfb
    1004:	d12c      	bne.n	1060 <control_callback_received+0x84>
					// We have received the very first byte of the packet
						// Change the status of the rx module
				control_rx_status = CONTROL_RX_FB_CONTENT;
    1006:	4b18      	ldr	r3, [pc, #96]	; (1068 <control_callback_received+0x8c>)
    1008:	58e3      	ldr	r3, [r4, r3]
    100a:	9302      	str	r3, [sp, #8]
    100c:	2302      	movs	r3, #2
    100e:	9a02      	ldr	r2, [sp, #8]
    1010:	7013      	strb	r3, [r2, #0]
				
						// Go ahead and queue the reception of the rest of the message
				xTimerResetFromISR( control_rx_timer, 0 );
    1012:	4b17      	ldr	r3, [pc, #92]	; (1070 <control_callback_received+0x94>)
    1014:	58e3      	ldr	r3, [r4, r3]
    1016:	681d      	ldr	r5, [r3, #0]
    1018:	4b16      	ldr	r3, [pc, #88]	; (1074 <control_callback_received+0x98>)
    101a:	58e3      	ldr	r3, [r4, r3]
    101c:	4798      	blx	r3
    101e:	1c02      	adds	r2, r0, #0
    1020:	2300      	movs	r3, #0
    1022:	9300      	str	r3, [sp, #0]
    1024:	1c28      	adds	r0, r5, #0
    1026:	2107      	movs	r1, #7
    1028:	4d13      	ldr	r5, [pc, #76]	; (1078 <control_callback_received+0x9c>)
    102a:	5965      	ldr	r5, [r4, r5]
    102c:	47a8      	blx	r5
				usart_read_buffer_job( &control_serial, control_rx_buffer + 1, 12);	// Receive the next 12 bytes of the message
    102e:	4b13      	ldr	r3, [pc, #76]	; (107c <control_callback_received+0xa0>)
    1030:	58e3      	ldr	r3, [r4, r3]
    1032:	9302      	str	r3, [sp, #8]
    1034:	4b0d      	ldr	r3, [pc, #52]	; (106c <control_callback_received+0x90>)
    1036:	58e3      	ldr	r3, [r4, r3]
    1038:	1c19      	adds	r1, r3, #0
    103a:	3101      	adds	r1, #1
    103c:	9802      	ldr	r0, [sp, #8]
    103e:	220c      	movs	r2, #12
    1040:	4b0f      	ldr	r3, [pc, #60]	; (1080 <control_callback_received+0xa4>)
    1042:	58e3      	ldr	r3, [r4, r3]
    1044:	4798      	blx	r3
    1046:	e00b      	b.n	1060 <control_callback_received+0x84>
			}
		break;
		case CONTROL_RX_FB_CONTENT:
			control_rx_status = CONTROL_RX_PROCESSING_PACKAGE;
    1048:	4b07      	ldr	r3, [pc, #28]	; (1068 <control_callback_received+0x8c>)
    104a:	58e3      	ldr	r3, [r4, r3]
    104c:	9302      	str	r3, [sp, #8]
    104e:	2310      	movs	r3, #16
    1050:	9d02      	ldr	r5, [sp, #8]
    1052:	702b      	strb	r3, [r5, #0]
			
			xTaskResumeFromISR( control_rx_task_handler );
    1054:	4b0b      	ldr	r3, [pc, #44]	; (1084 <control_callback_received+0xa8>)
    1056:	58e3      	ldr	r3, [r4, r3]
    1058:	6818      	ldr	r0, [r3, #0]
    105a:	4b0b      	ldr	r3, [pc, #44]	; (1088 <control_callback_received+0xac>)
    105c:	58e3      	ldr	r3, [r4, r3]
    105e:	4798      	blx	r3
		break;
	}	
}
    1060:	b005      	add	sp, #20
    1062:	bd30      	pop	{r4, r5, pc}
    1064:	00003726 	.word	0x00003726
    1068:	00000190 	.word	0x00000190
    106c:	0000016c 	.word	0x0000016c
    1070:	000001f4 	.word	0x000001f4
    1074:	000000fc 	.word	0x000000fc
    1078:	00000134 	.word	0x00000134
    107c:	00000124 	.word	0x00000124
    1080:	000001a8 	.word	0x000001a8
    1084:	00000114 	.word	0x00000114
    1088:	00000088 	.word	0x00000088

0000108c <bastian_control_configuration>:
	}
}

//////////////////////////////////////////////////////////////////////////
// IrDA Port COnfiguration
void bastian_control_configuration (void){
    108c:	b5f0      	push	{r4, r5, r6, r7, lr}
    108e:	b093      	sub	sp, #76	; 0x4c
    1090:	4d31      	ldr	r5, [pc, #196]	; (1158 <bastian_control_configuration+0xcc>)
    1092:	447d      	add	r5, pc
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    1094:	2380      	movs	r3, #128	; 0x80
    1096:	05db      	lsls	r3, r3, #23
    1098:	9302      	str	r3, [sp, #8]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    109a:	2300      	movs	r3, #0
    109c:	aa02      	add	r2, sp, #8
    109e:	6053      	str	r3, [r2, #4]
	config->parity           = USART_PARITY_NONE;
	config->stopbits         = USART_STOPBITS_1;
    10a0:	2100      	movs	r1, #0
    10a2:	7293      	strb	r3, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    10a4:	72d3      	strb	r3, [r2, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    10a6:	2701      	movs	r7, #1
    10a8:	2024      	movs	r0, #36	; 0x24
    10aa:	5417      	strb	r7, [r2, r0]
	config->transmitter_enable = true;
    10ac:	2025      	movs	r0, #37	; 0x25
    10ae:	5417      	strb	r7, [r2, r0]
	config->clock_polarity_inverted = false;
    10b0:	2026      	movs	r0, #38	; 0x26
    10b2:	5413      	strb	r3, [r2, r0]
	config->use_external_clock = false;
    10b4:	2027      	movs	r0, #39	; 0x27
    10b6:	5413      	strb	r3, [r2, r0]
	config->ext_clock_freq   = 0;
    10b8:	6293      	str	r3, [r2, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    10ba:	202c      	movs	r0, #44	; 0x2c
    10bc:	5413      	strb	r3, [r2, r0]
	config->generator_source = GCLK_GENERATOR_0;
    10be:	202d      	movs	r0, #45	; 0x2d
    10c0:	5413      	strb	r3, [r2, r0]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    10c2:	6153      	str	r3, [r2, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    10c4:	8213      	strh	r3, [r2, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    10c6:	2000      	movs	r0, #0
    10c8:	76d0      	strb	r0, [r2, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    10ca:	7611      	strb	r1, [r2, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    10cc:	7711      	strb	r1, [r2, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    10ce:	7651      	strb	r1, [r2, #25]
	config->receive_pulse_length                    = 19;
    10d0:	2013      	movs	r0, #19
    10d2:	7690      	strb	r0, [r2, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    10d4:	7751      	strb	r1, [r2, #29]
	usart_get_config_defaults(&control_conf);
	
	// Port Configuration
	control_conf.transfer_mode = USART_TRANSFER_ASYNCHRONOUSLY;	// Asynchronous Communication Mode
	control_conf.generator_source = GCLK_GENERATOR_0;				// Use the Generic Clock 0 as source
	control_conf.baudrate = 115200;								// IrDA Baudrate
    10d6:	21e1      	movs	r1, #225	; 0xe1
    10d8:	0249      	lsls	r1, r1, #9
    10da:	6211      	str	r1, [r2, #32]
	control_conf.character_size = USART_CHARACTER_SIZE_8BIT;
	control_conf.stopbits = USART_STOPBITS_1;
	control_conf.parity = USART_PARITY_EVEN;
    10dc:	8113      	strh	r3, [r2, #8]
	
	// Pin Multiplexer Settings
	control_conf.mux_setting = USART_RX_1_TX_0_XCK_1;
    10de:	2380      	movs	r3, #128	; 0x80
    10e0:	035b      	lsls	r3, r3, #13
    10e2:	60d3      	str	r3, [r2, #12]
	control_conf.pinmux_pad0 = PINMUX_PA16C_SERCOM1_PAD0;	// S1P0
    10e4:	4b1d      	ldr	r3, [pc, #116]	; (115c <bastian_control_configuration+0xd0>)
    10e6:	6313      	str	r3, [r2, #48]	; 0x30
	control_conf.pinmux_pad1 = PINMUX_PA17C_SERCOM1_PAD1;	// S1P1
    10e8:	4b1d      	ldr	r3, [pc, #116]	; (1160 <bastian_control_configuration+0xd4>)
    10ea:	6353      	str	r3, [r2, #52]	; 0x34
	control_conf.pinmux_pad2 = PINMUX_UNUSED;
    10ec:	2301      	movs	r3, #1
    10ee:	425b      	negs	r3, r3
    10f0:	6393      	str	r3, [r2, #56]	; 0x38
	control_conf.pinmux_pad3 = PINMUX_UNUSED;
    10f2:	63d3      	str	r3, [r2, #60]	; 0x3c

	// Initialize the previous settings
	usart_init((struct usart_module*) &control_serial, SERCOM1, &control_conf);
    10f4:	4b1b      	ldr	r3, [pc, #108]	; (1164 <bastian_control_configuration+0xd8>)
    10f6:	58ee      	ldr	r6, [r5, r3]
    10f8:	1c30      	adds	r0, r6, #0
    10fa:	491b      	ldr	r1, [pc, #108]	; (1168 <bastian_control_configuration+0xdc>)
    10fc:	4b1b      	ldr	r3, [pc, #108]	; (116c <bastian_control_configuration+0xe0>)
    10fe:	58eb      	ldr	r3, [r5, r3]
    1100:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1102:	6834      	ldr	r4, [r6, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1104:	1c20      	adds	r0, r4, #0
    1106:	4b1a      	ldr	r3, [pc, #104]	; (1170 <bastian_control_configuration+0xe4>)
    1108:	58eb      	ldr	r3, [r5, r3]
    110a:	4798      	blx	r3
    110c:	231f      	movs	r3, #31
    110e:	4018      	ands	r0, r3
    1110:	4087      	lsls	r7, r0
    1112:	4b18      	ldr	r3, [pc, #96]	; (1174 <bastian_control_configuration+0xe8>)
    1114:	601f      	str	r7, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1116:	6832      	ldr	r2, [r6, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1118:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    111a:	2b00      	cmp	r3, #0
    111c:	d1fc      	bne.n	1118 <bastian_control_configuration+0x8c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    111e:	6822      	ldr	r2, [r4, #0]
    1120:	2302      	movs	r3, #2
    1122:	4313      	orrs	r3, r2
    1124:	6023      	str	r3, [r4, #0]

	// Enable the module
	usart_enable((struct usart_module*) &control_serial);

	// ******** Callback setup
	usart_register_callback((struct usart_module*) &control_serial, (usart_callback_t)control_callback_received, USART_CALLBACK_BUFFER_RECEIVED);
    1126:	4b0f      	ldr	r3, [pc, #60]	; (1164 <bastian_control_configuration+0xd8>)
    1128:	58ec      	ldr	r4, [r5, r3]
    112a:	1c20      	adds	r0, r4, #0
    112c:	4912      	ldr	r1, [pc, #72]	; (1178 <bastian_control_configuration+0xec>)
    112e:	4479      	add	r1, pc
    1130:	2201      	movs	r2, #1
    1132:	4b12      	ldr	r3, [pc, #72]	; (117c <bastian_control_configuration+0xf0>)
    1134:	58ee      	ldr	r6, [r5, r3]
    1136:	47b0      	blx	r6
    1138:	2531      	movs	r5, #49	; 0x31
    113a:	5d62      	ldrb	r2, [r4, r5]
    113c:	2302      	movs	r3, #2
    113e:	4313      	orrs	r3, r2
    1140:	5563      	strb	r3, [r4, r5]
	usart_enable_callback((struct usart_module*) &control_serial, USART_CALLBACK_BUFFER_RECEIVED);

	usart_register_callback((struct usart_module*) &control_serial, (usart_callback_t)control_callback_transmitted, USART_CALLBACK_BUFFER_TRANSMITTED);
    1142:	1c20      	adds	r0, r4, #0
    1144:	490e      	ldr	r1, [pc, #56]	; (1180 <bastian_control_configuration+0xf4>)
    1146:	4479      	add	r1, pc
    1148:	2200      	movs	r2, #0
    114a:	47b0      	blx	r6
    114c:	5d62      	ldrb	r2, [r4, r5]
    114e:	2301      	movs	r3, #1
    1150:	4313      	orrs	r3, r2
    1152:	5563      	strb	r3, [r4, r5]
	usart_enable_callback((struct usart_module*) &control_serial, USART_CALLBACK_BUFFER_TRANSMITTED);
}
    1154:	b013      	add	sp, #76	; 0x4c
    1156:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1158:	00003676 	.word	0x00003676
    115c:	00100002 	.word	0x00100002
    1160:	00110002 	.word	0x00110002
    1164:	00000124 	.word	0x00000124
    1168:	42000c00 	.word	0x42000c00
    116c:	0000014c 	.word	0x0000014c
    1170:	00000064 	.word	0x00000064
    1174:	e000e100 	.word	0xe000e100
    1178:	fffffeab 	.word	0xfffffeab
    117c:	00000008 	.word	0x00000008
    1180:	fffffaa3 	.word	0xfffffaa3

00001184 <control_serial_setup>:
uint8_t temp_8bit_variable_B;
uint16_t temp_ramp;
uint16_t temp_speed;
uint16_t temp_duration;

void control_serial_setup( void ) {
    1184:	b5f0      	push	{r4, r5, r6, r7, lr}
    1186:	b087      	sub	sp, #28
    1188:	4c34      	ldr	r4, [pc, #208]	; (125c <control_serial_setup+0xd8>)
    118a:	447c      	add	r4, pc
	int i, j;
		// At this point, we set-up the module
	bastian_control_configuration();
    118c:	4b34      	ldr	r3, [pc, #208]	; (1260 <control_serial_setup+0xdc>)
    118e:	58e3      	ldr	r3, [r4, r3]
    1190:	4798      	blx	r3
	
		// Create the TX necessary task
	xTaskCreate( controls_communcation_tx_task,
    1192:	4b34      	ldr	r3, [pc, #208]	; (1264 <control_serial_setup+0xe0>)
    1194:	58e3      	ldr	r3, [r4, r3]
    1196:	9304      	str	r3, [sp, #16]
    1198:	2702      	movs	r7, #2
    119a:	9700      	str	r7, [sp, #0]
    119c:	4b32      	ldr	r3, [pc, #200]	; (1268 <control_serial_setup+0xe4>)
    119e:	58e3      	ldr	r3, [r4, r3]
    11a0:	9301      	str	r3, [sp, #4]
    11a2:	2600      	movs	r6, #0
    11a4:	9602      	str	r6, [sp, #8]
    11a6:	9603      	str	r6, [sp, #12]
    11a8:	9804      	ldr	r0, [sp, #16]
    11aa:	4930      	ldr	r1, [pc, #192]	; (126c <control_serial_setup+0xe8>)
    11ac:	4479      	add	r1, pc
    11ae:	228c      	movs	r2, #140	; 0x8c
    11b0:	2300      	movs	r3, #0
    11b2:	4d2f      	ldr	r5, [pc, #188]	; (1270 <control_serial_setup+0xec>)
    11b4:	5965      	ldr	r5, [r4, r5]
    11b6:	47a8      	blx	r5
				 NULL, 
				 2,
				 &control_tx_task_handler );
				 
		// Create the TX necessary task
	xTaskCreate( controls_communcation_rx_task,
    11b8:	4b2e      	ldr	r3, [pc, #184]	; (1274 <control_serial_setup+0xf0>)
    11ba:	58e3      	ldr	r3, [r4, r3]
    11bc:	9304      	str	r3, [sp, #16]
    11be:	9700      	str	r7, [sp, #0]
    11c0:	4b2d      	ldr	r3, [pc, #180]	; (1278 <control_serial_setup+0xf4>)
    11c2:	58e3      	ldr	r3, [r4, r3]
    11c4:	9301      	str	r3, [sp, #4]
    11c6:	9602      	str	r6, [sp, #8]
    11c8:	9603      	str	r6, [sp, #12]
    11ca:	9804      	ldr	r0, [sp, #16]
    11cc:	492b      	ldr	r1, [pc, #172]	; (127c <control_serial_setup+0xf8>)
    11ce:	4479      	add	r1, pc
    11d0:	228c      	movs	r2, #140	; 0x8c
    11d2:	2300      	movs	r3, #0
    11d4:	47a8      	blx	r5
				configMINIMAL_STACK_SIZE,
				NULL,
				2,
				&control_rx_task_handler );
				 
	control_rx_timer = xTimerCreate("Crx", 200, pdFALSE, 2, control_rx_timer_callback );
    11d6:	4b2a      	ldr	r3, [pc, #168]	; (1280 <control_serial_setup+0xfc>)
    11d8:	58e3      	ldr	r3, [r4, r3]
    11da:	9300      	str	r3, [sp, #0]
    11dc:	4829      	ldr	r0, [pc, #164]	; (1284 <control_serial_setup+0x100>)
    11de:	4478      	add	r0, pc
    11e0:	21c8      	movs	r1, #200	; 0xc8
    11e2:	2200      	movs	r2, #0
    11e4:	2302      	movs	r3, #2
    11e6:	4d28      	ldr	r5, [pc, #160]	; (1288 <control_serial_setup+0x104>)
    11e8:	5967      	ldr	r7, [r4, r5]
    11ea:	47b8      	blx	r7
    11ec:	1c05      	adds	r5, r0, #0
    11ee:	4b27      	ldr	r3, [pc, #156]	; (128c <control_serial_setup+0x108>)
    11f0:	58e3      	ldr	r3, [r4, r3]
    11f2:	6018      	str	r0, [r3, #0]
	xTimerStart(control_rx_timer, 0);
    11f4:	4b26      	ldr	r3, [pc, #152]	; (1290 <control_serial_setup+0x10c>)
    11f6:	58e3      	ldr	r3, [r4, r3]
    11f8:	9304      	str	r3, [sp, #16]
    11fa:	4798      	blx	r3
    11fc:	1c02      	adds	r2, r0, #0
    11fe:	9600      	str	r6, [sp, #0]
    1200:	1c28      	adds	r0, r5, #0
    1202:	2101      	movs	r1, #1
    1204:	2300      	movs	r3, #0
    1206:	4d23      	ldr	r5, [pc, #140]	; (1294 <control_serial_setup+0x110>)
    1208:	5965      	ldr	r5, [r4, r5]
    120a:	47a8      	blx	r5
	
	control_tx_timer = xTimerCreate("Ctx", 20, pdFALSE, 2, control_tx_timer_callback );
    120c:	4b22      	ldr	r3, [pc, #136]	; (1298 <control_serial_setup+0x114>)
    120e:	58e3      	ldr	r3, [r4, r3]
    1210:	9300      	str	r3, [sp, #0]
    1212:	4822      	ldr	r0, [pc, #136]	; (129c <control_serial_setup+0x118>)
    1214:	4478      	add	r0, pc
    1216:	2114      	movs	r1, #20
    1218:	2200      	movs	r2, #0
    121a:	2302      	movs	r3, #2
    121c:	47b8      	blx	r7
    121e:	1c07      	adds	r7, r0, #0
    1220:	4b1f      	ldr	r3, [pc, #124]	; (12a0 <control_serial_setup+0x11c>)
    1222:	58e3      	ldr	r3, [r4, r3]
    1224:	6018      	str	r0, [r3, #0]
	xTimerStart(control_tx_timer, 0);
    1226:	9b04      	ldr	r3, [sp, #16]
    1228:	4798      	blx	r3
    122a:	1c02      	adds	r2, r0, #0
    122c:	9600      	str	r6, [sp, #0]
    122e:	1c38      	adds	r0, r7, #0
    1230:	2101      	movs	r1, #1
    1232:	2300      	movs	r3, #0
    1234:	47a8      	blx	r5
	
	// Initialize all the database to zero
	for (i=0; i<NUMBER_OF_SLATS + 1; i++)
    1236:	2500      	movs	r5, #0
uint8_t temp_8bit_variable_B;
uint16_t temp_ramp;
uint16_t temp_speed;
uint16_t temp_duration;

void control_serial_setup( void ) {
    1238:	2100      	movs	r1, #0
	control_tx_timer = xTimerCreate("Ctx", 20, pdFALSE, 2, control_tx_timer_callback );
	xTimerStart(control_tx_timer, 0);
	
	// Initialize all the database to zero
	for (i=0; i<NUMBER_OF_SLATS + 1; i++)
		for ( j=0; j<8; j++ ) job_lookup_table[i][j] = 0;	// Initialize entry to zero
    123a:	4b1a      	ldr	r3, [pc, #104]	; (12a4 <control_serial_setup+0x120>)
    123c:	58e4      	ldr	r4, [r4, r3]
    123e:	e007      	b.n	1250 <control_serial_setup+0xcc>
    1240:	18c2      	adds	r2, r0, r3
    1242:	5511      	strb	r1, [r2, r4]
    1244:	3301      	adds	r3, #1
    1246:	2b08      	cmp	r3, #8
    1248:	d1fa      	bne.n	1240 <control_serial_setup+0xbc>
	
	control_tx_timer = xTimerCreate("Ctx", 20, pdFALSE, 2, control_tx_timer_callback );
	xTimerStart(control_tx_timer, 0);
	
	// Initialize all the database to zero
	for (i=0; i<NUMBER_OF_SLATS + 1; i++)
    124a:	3501      	adds	r5, #1
    124c:	2d49      	cmp	r5, #73	; 0x49
    124e:	d002      	beq.n	1256 <control_serial_setup+0xd2>
uint8_t temp_8bit_variable_B;
uint16_t temp_ramp;
uint16_t temp_speed;
uint16_t temp_duration;

void control_serial_setup( void ) {
    1250:	1c0b      	adds	r3, r1, #0
	control_tx_timer = xTimerCreate("Ctx", 20, pdFALSE, 2, control_tx_timer_callback );
	xTimerStart(control_tx_timer, 0);
	
	// Initialize all the database to zero
	for (i=0; i<NUMBER_OF_SLATS + 1; i++)
		for ( j=0; j<8; j++ ) job_lookup_table[i][j] = 0;	// Initialize entry to zero
    1252:	00e8      	lsls	r0, r5, #3
    1254:	e7f4      	b.n	1240 <control_serial_setup+0xbc>
}
    1256:	b007      	add	sp, #28
    1258:	bdf0      	pop	{r4, r5, r6, r7, pc}
    125a:	46c0      	nop			; (mov r8, r8)
    125c:	0000357e 	.word	0x0000357e
    1260:	00000108 	.word	0x00000108
    1264:	00000040 	.word	0x00000040
    1268:	00000058 	.word	0x00000058
    126c:	00003504 	.word	0x00003504
    1270:	00000054 	.word	0x00000054
    1274:	0000001c 	.word	0x0000001c
    1278:	00000114 	.word	0x00000114
    127c:	000034ea 	.word	0x000034ea
    1280:	000000c4 	.word	0x000000c4
    1284:	000034e2 	.word	0x000034e2
    1288:	00000010 	.word	0x00000010
    128c:	000001f4 	.word	0x000001f4
    1290:	000000bc 	.word	0x000000bc
    1294:	00000134 	.word	0x00000134
    1298:	000000e4 	.word	0x000000e4
    129c:	000034b0 	.word	0x000034b0
    12a0:	000001c0 	.word	0x000001c0
    12a4:	0000017c 	.word	0x0000017c

000012a8 <crc_check>:
#include "asf.h"
#include "bastian_sercom.h"

// This is the function that will check the validity of the crc byte as received
BaseType_t crc_check( uint8_t* data, uint8_t size ) {
    12a8:	b530      	push	{r4, r5, lr}
	uint8_t i;
	uint8_t crc_result = 0;
	
		// Add all the contents of the packet
	for( i=0; i<size; i++) crc_result += *( data + i );		
    12aa:	2900      	cmp	r1, #0
    12ac:	d00c      	beq.n	12c8 <crc_check+0x20>
    12ae:	1c03      	adds	r3, r0, #0
    12b0:	1c42      	adds	r2, r0, #1
    12b2:	1e4c      	subs	r4, r1, #1
    12b4:	b2e4      	uxtb	r4, r4
    12b6:	1915      	adds	r5, r2, r4
#include "bastian_sercom.h"

// This is the function that will check the validity of the crc byte as received
BaseType_t crc_check( uint8_t* data, uint8_t size ) {
	uint8_t i;
	uint8_t crc_result = 0;
    12b8:	2200      	movs	r2, #0
	
		// Add all the contents of the packet
	for( i=0; i<size; i++) crc_result += *( data + i );		
    12ba:	781c      	ldrb	r4, [r3, #0]
    12bc:	1912      	adds	r2, r2, r4
    12be:	b2d2      	uxtb	r2, r2
    12c0:	3301      	adds	r3, #1
    12c2:	42ab      	cmp	r3, r5
    12c4:	d1f9      	bne.n	12ba <crc_check+0x12>
    12c6:	e000      	b.n	12ca <crc_check+0x22>
#include "bastian_sercom.h"

// This is the function that will check the validity of the crc byte as received
BaseType_t crc_check( uint8_t* data, uint8_t size ) {
	uint8_t i;
	uint8_t crc_result = 0;
    12c8:	2200      	movs	r2, #0
	crc_result |= 0x55;	// OR the result and get our crc
	
		// Return result as boolean
			// pdTRUE  -> CRC Checks Out
			// pdFALSE -> CRC does NOT check out
	if ( crc_result == *(data + size) ) return pdTRUE;
    12ca:	5c43      	ldrb	r3, [r0, r1]
    12cc:	2055      	movs	r0, #85	; 0x55
    12ce:	4302      	orrs	r2, r0
    12d0:	1a98      	subs	r0, r3, r2
    12d2:	4242      	negs	r2, r0
    12d4:	4150      	adcs	r0, r2
	else return pdFALSE;
}
    12d6:	bd30      	pop	{r4, r5, pc}

000012d8 <crc_generate>:

// This is the function that generates the CRC byte
	// The size does not include the spot for the CRC byte
void crc_generate( uint8_t* data, uint8_t size ) {
    12d8:	b510      	push	{r4, lr}
	uint8_t i;
	*( data + size ) = 0;
    12da:	1842      	adds	r2, r0, r1
    12dc:	2300      	movs	r3, #0
    12de:	7013      	strb	r3, [r2, #0]
	
		// Add all the contents of the packet
	for( i=0; i<size; i++) *( data + size ) += *( data + i );
    12e0:	2900      	cmp	r1, #0
    12e2:	d00b      	beq.n	12fc <crc_generate+0x24>
    12e4:	1c03      	adds	r3, r0, #0
    12e6:	3001      	adds	r0, #1
    12e8:	3901      	subs	r1, #1
    12ea:	b2c9      	uxtb	r1, r1
    12ec:	1840      	adds	r0, r0, r1
    12ee:	781c      	ldrb	r4, [r3, #0]
    12f0:	7811      	ldrb	r1, [r2, #0]
    12f2:	1861      	adds	r1, r4, r1
    12f4:	7011      	strb	r1, [r2, #0]
    12f6:	3301      	adds	r3, #1
    12f8:	4283      	cmp	r3, r0
    12fa:	d1f8      	bne.n	12ee <crc_generate+0x16>
	
	*( data + size ) |= 0x55;	// OR the CRC byte
    12fc:	7811      	ldrb	r1, [r2, #0]
    12fe:	2355      	movs	r3, #85	; 0x55
    1300:	430b      	orrs	r3, r1
    1302:	7013      	strb	r3, [r2, #0]
    1304:	bd10      	pop	{r4, pc}
    1306:	46c0      	nop			; (mov r8, r8)

00001308 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1308:	4770      	bx	lr
    130a:	46c0      	nop			; (mov r8, r8)

0000130c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    130c:	b530      	push	{r4, r5, lr}
    130e:	4a0f      	ldr	r2, [pc, #60]	; (134c <_sercom_set_handler+0x40>)
    1310:	447a      	add	r2, pc
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    1312:	4b0f      	ldr	r3, [pc, #60]	; (1350 <_sercom_set_handler+0x44>)
    1314:	447b      	add	r3, pc
    1316:	781b      	ldrb	r3, [r3, #0]
    1318:	2b00      	cmp	r3, #0
    131a:	d110      	bne.n	133e <_sercom_set_handler+0x32>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    131c:	4b0d      	ldr	r3, [pc, #52]	; (1354 <_sercom_set_handler+0x48>)
    131e:	447b      	add	r3, pc
    1320:	4d0d      	ldr	r5, [pc, #52]	; (1358 <_sercom_set_handler+0x4c>)
    1322:	447d      	add	r5, pc
    1324:	605d      	str	r5, [r3, #4]
			_sercom_instances[i] = NULL;
    1326:	4c0d      	ldr	r4, [pc, #52]	; (135c <_sercom_set_handler+0x50>)
    1328:	5912      	ldr	r2, [r2, r4]
    132a:	2400      	movs	r4, #0
    132c:	6014      	str	r4, [r2, #0]
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    132e:	609d      	str	r5, [r3, #8]
			_sercom_instances[i] = NULL;
    1330:	6054      	str	r4, [r2, #4]
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1332:	60dd      	str	r5, [r3, #12]
			_sercom_instances[i] = NULL;
    1334:	6094      	str	r4, [r2, #8]
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1336:	611d      	str	r5, [r3, #16]
			_sercom_instances[i] = NULL;
    1338:	60d4      	str	r4, [r2, #12]
		}

		_handler_table_initialized = true;
    133a:	2201      	movs	r2, #1
    133c:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    133e:	0080      	lsls	r0, r0, #2
    1340:	4b07      	ldr	r3, [pc, #28]	; (1360 <_sercom_set_handler+0x54>)
    1342:	447b      	add	r3, pc
    1344:	1818      	adds	r0, r3, r0
    1346:	6041      	str	r1, [r0, #4]
}
    1348:	bd30      	pop	{r4, r5, pc}
    134a:	46c0      	nop			; (mov r8, r8)
    134c:	000033f8 	.word	0x000033f8
    1350:	1ffff158 	.word	0x1ffff158
    1354:	1ffff14e 	.word	0x1ffff14e
    1358:	ffffffe3 	.word	0xffffffe3
    135c:	000000dc 	.word	0x000000dc
    1360:	1ffff12a 	.word	0x1ffff12a

00001364 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1364:	b570      	push	{r4, r5, r6, lr}
    1366:	b084      	sub	sp, #16
    1368:	1c06      	adds	r6, r0, #0
    136a:	4c08      	ldr	r4, [pc, #32]	; (138c <_sercom_get_interrupt_vector+0x28>)
    136c:	447c      	add	r4, pc
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    136e:	ad03      	add	r5, sp, #12
    1370:	1c28      	adds	r0, r5, #0
    1372:	4907      	ldr	r1, [pc, #28]	; (1390 <_sercom_get_interrupt_vector+0x2c>)
    1374:	4479      	add	r1, pc
    1376:	2204      	movs	r2, #4
    1378:	4b06      	ldr	r3, [pc, #24]	; (1394 <_sercom_get_interrupt_vector+0x30>)
    137a:	58e3      	ldr	r3, [r4, r3]
    137c:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    137e:	1c30      	adds	r0, r6, #0
    1380:	4b05      	ldr	r3, [pc, #20]	; (1398 <_sercom_get_interrupt_vector+0x34>)
    1382:	58e3      	ldr	r3, [r4, r3]
    1384:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1386:	5628      	ldrsb	r0, [r5, r0]
}
    1388:	b004      	add	sp, #16
    138a:	bd70      	pop	{r4, r5, r6, pc}
    138c:	0000339c 	.word	0x0000339c
    1390:	00003354 	.word	0x00003354
    1394:	0000004c 	.word	0x0000004c
    1398:	000001fc 	.word	0x000001fc

0000139c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    139c:	b508      	push	{r3, lr}
    139e:	4b03      	ldr	r3, [pc, #12]	; (13ac <SERCOM0_Handler+0x10>)
    13a0:	447b      	add	r3, pc
    13a2:	685b      	ldr	r3, [r3, #4]
    13a4:	2000      	movs	r0, #0
    13a6:	4798      	blx	r3
    13a8:	bd08      	pop	{r3, pc}
    13aa:	46c0      	nop			; (mov r8, r8)
    13ac:	1ffff0cc 	.word	0x1ffff0cc

000013b0 <SERCOM1_Handler>:
    13b0:	b508      	push	{r3, lr}
    13b2:	4b03      	ldr	r3, [pc, #12]	; (13c0 <SERCOM1_Handler+0x10>)
    13b4:	447b      	add	r3, pc
    13b6:	689b      	ldr	r3, [r3, #8]
    13b8:	2001      	movs	r0, #1
    13ba:	4798      	blx	r3
    13bc:	bd08      	pop	{r3, pc}
    13be:	46c0      	nop			; (mov r8, r8)
    13c0:	1ffff0b8 	.word	0x1ffff0b8

000013c4 <SERCOM2_Handler>:
    13c4:	b508      	push	{r3, lr}
    13c6:	4b03      	ldr	r3, [pc, #12]	; (13d4 <SERCOM2_Handler+0x10>)
    13c8:	447b      	add	r3, pc
    13ca:	68db      	ldr	r3, [r3, #12]
    13cc:	2002      	movs	r0, #2
    13ce:	4798      	blx	r3
    13d0:	bd08      	pop	{r3, pc}
    13d2:	46c0      	nop			; (mov r8, r8)
    13d4:	1ffff0a4 	.word	0x1ffff0a4

000013d8 <SERCOM3_Handler>:
    13d8:	b508      	push	{r3, lr}
    13da:	4b03      	ldr	r3, [pc, #12]	; (13e8 <SERCOM3_Handler+0x10>)
    13dc:	447b      	add	r3, pc
    13de:	691b      	ldr	r3, [r3, #16]
    13e0:	2003      	movs	r0, #3
    13e2:	4798      	blx	r3
    13e4:	bd08      	pop	{r3, pc}
    13e6:	46c0      	nop			; (mov r8, r8)
    13e8:	1ffff090 	.word	0x1ffff090

000013ec <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    13ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    13ee:	465f      	mov	r7, fp
    13f0:	4656      	mov	r6, sl
    13f2:	464d      	mov	r5, r9
    13f4:	4644      	mov	r4, r8
    13f6:	b4f0      	push	{r4, r5, r6, r7}
    13f8:	b09b      	sub	sp, #108	; 0x6c
    13fa:	1c06      	adds	r6, r0, #0
    13fc:	1c0c      	adds	r4, r1, #0
    13fe:	9208      	str	r2, [sp, #32]
    1400:	4dc6      	ldr	r5, [pc, #792]	; (171c <usart_init+0x330>)
    1402:	447d      	add	r5, pc
    1404:	9509      	str	r5, [sp, #36]	; 0x24
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    1406:	6031      	str	r1, [r6, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1408:	1c08      	adds	r0, r1, #0
    140a:	4bc5      	ldr	r3, [pc, #788]	; (1720 <usart_init+0x334>)
    140c:	58eb      	ldr	r3, [r5, r3]
    140e:	4798      	blx	r3
    1410:	1c02      	adds	r2, r0, #0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1412:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    1414:	2005      	movs	r0, #5
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1416:	07df      	lsls	r7, r3, #31
    1418:	d500      	bpl.n	141c <usart_init+0x30>
    141a:	e177      	b.n	170c <usart_init+0x320>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    141c:	6823      	ldr	r3, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    141e:	201c      	movs	r0, #28
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1420:	0799      	lsls	r1, r3, #30
    1422:	d500      	bpl.n	1426 <usart_init+0x3a>
    1424:	e172      	b.n	170c <usart_init+0x320>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    1426:	4bbf      	ldr	r3, [pc, #764]	; (1724 <usart_init+0x338>)
    1428:	6a18      	ldr	r0, [r3, #32]
#else
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    142a:	1c95      	adds	r5, r2, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    142c:	2701      	movs	r7, #1
    142e:	1c39      	adds	r1, r7, #0
    1430:	40a9      	lsls	r1, r5
    1432:	4301      	orrs	r1, r0
    1434:	6219      	str	r1, [r3, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    1436:	232d      	movs	r3, #45	; 0x2d
    1438:	9d08      	ldr	r5, [sp, #32]
    143a:	1c1f      	adds	r7, r3, #0
    143c:	5ceb      	ldrb	r3, [r5, r3]
    143e:	a919      	add	r1, sp, #100	; 0x64
    1440:	700b      	strb	r3, [r1, #0]
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1442:	3214      	adds	r2, #20

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1444:	b2d2      	uxtb	r2, r2
    1446:	4691      	mov	r9, r2
    1448:	1c10      	adds	r0, r2, #0
    144a:	4bb7      	ldr	r3, [pc, #732]	; (1728 <usart_init+0x33c>)
    144c:	9d09      	ldr	r5, [sp, #36]	; 0x24
    144e:	58eb      	ldr	r3, [r5, r3]
    1450:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1452:	4648      	mov	r0, r9
    1454:	4bb5      	ldr	r3, [pc, #724]	; (172c <usart_init+0x340>)
    1456:	58eb      	ldr	r3, [r5, r3]
    1458:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    145a:	9d08      	ldr	r5, [sp, #32]
    145c:	5de8      	ldrb	r0, [r5, r7]
    145e:	2100      	movs	r1, #0
    1460:	4bb3      	ldr	r3, [pc, #716]	; (1730 <usart_init+0x344>)
    1462:	9d09      	ldr	r5, [sp, #36]	; 0x24
    1464:	58eb      	ldr	r3, [r5, r3]
    1466:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    1468:	9d08      	ldr	r5, [sp, #32]
    146a:	7aeb      	ldrb	r3, [r5, #11]
    146c:	7173      	strb	r3, [r6, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    146e:	2324      	movs	r3, #36	; 0x24
    1470:	5ceb      	ldrb	r3, [r5, r3]
    1472:	71b3      	strb	r3, [r6, #6]
	module->transmitter_enabled = config->transmitter_enable;
    1474:	2325      	movs	r3, #37	; 0x25
    1476:	5ceb      	ldrb	r3, [r5, r3]
    1478:	71f3      	strb	r3, [r6, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    147a:	7eeb      	ldrb	r3, [r5, #27]
    147c:	7233      	strb	r3, [r6, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    147e:	7f2b      	ldrb	r3, [r5, #28]
    1480:	7273      	strb	r3, [r6, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1482:	6837      	ldr	r7, [r6, #0]
    1484:	46b9      	mov	r9, r7

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1486:	1c38      	adds	r0, r7, #0
    1488:	4ba5      	ldr	r3, [pc, #660]	; (1720 <usart_init+0x334>)
    148a:	9d09      	ldr	r5, [sp, #36]	; 0x24
    148c:	58eb      	ldr	r3, [r5, r3]
    148e:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1490:	3014      	adds	r0, #20
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    1492:	2200      	movs	r2, #0
    1494:	466b      	mov	r3, sp
    1496:	334e      	adds	r3, #78	; 0x4e
    1498:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    149a:	9d08      	ldr	r5, [sp, #32]
    149c:	8a2d      	ldrh	r5, [r5, #16]
    149e:	46a8      	mov	r8, r5
    14a0:	2380      	movs	r3, #128	; 0x80
    14a2:	01db      	lsls	r3, r3, #7
    14a4:	429d      	cmp	r5, r3
    14a6:	d01c      	beq.n	14e2 <usart_init+0xf6>
    14a8:	2380      	movs	r3, #128	; 0x80
    14aa:	01db      	lsls	r3, r3, #7
    14ac:	429d      	cmp	r5, r3
    14ae:	d804      	bhi.n	14ba <usart_init+0xce>
    14b0:	2380      	movs	r3, #128	; 0x80
    14b2:	019b      	lsls	r3, r3, #6
    14b4:	429d      	cmp	r5, r3
    14b6:	d00e      	beq.n	14d6 <usart_init+0xea>
    14b8:	e007      	b.n	14ca <usart_init+0xde>
    14ba:	23c0      	movs	r3, #192	; 0xc0
    14bc:	01db      	lsls	r3, r3, #7
    14be:	429d      	cmp	r5, r3
    14c0:	d00c      	beq.n	14dc <usart_init+0xf0>
    14c2:	2380      	movs	r3, #128	; 0x80
    14c4:	021b      	lsls	r3, r3, #8
    14c6:	429d      	cmp	r5, r3
    14c8:	d002      	beq.n	14d0 <usart_init+0xe4>
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    14ca:	2710      	movs	r7, #16
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    14cc:	2500      	movs	r5, #0
    14ce:	e00a      	b.n	14e6 <usart_init+0xfa>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    14d0:	2703      	movs	r7, #3
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    14d2:	2500      	movs	r5, #0
    14d4:	e007      	b.n	14e6 <usart_init+0xfa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    14d6:	2710      	movs	r7, #16
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    14d8:	2501      	movs	r5, #1
    14da:	e004      	b.n	14e6 <usart_init+0xfa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    14dc:	2708      	movs	r7, #8
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    14de:	2501      	movs	r5, #1
    14e0:	e001      	b.n	14e6 <usart_init+0xfa>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    14e2:	2708      	movs	r7, #8
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    14e4:	2500      	movs	r5, #0
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    14e6:	9908      	ldr	r1, [sp, #32]
    14e8:	6809      	ldr	r1, [r1, #0]
    14ea:	910a      	str	r1, [sp, #40]	; 0x28
		(uint32_t)config->mux_setting |
    14ec:	9a08      	ldr	r2, [sp, #32]
    14ee:	68d2      	ldr	r2, [r2, #12]
    14f0:	920c      	str	r2, [sp, #48]	; 0x30
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    14f2:	9b08      	ldr	r3, [sp, #32]
    14f4:	695b      	ldr	r3, [r3, #20]
    14f6:	930d      	str	r3, [sp, #52]	; 0x34
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    14f8:	9908      	ldr	r1, [sp, #32]
    14fa:	7e09      	ldrb	r1, [r1, #24]
    14fc:	910e      	str	r1, [sp, #56]	; 0x38
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    14fe:	2326      	movs	r3, #38	; 0x26
    1500:	9a08      	ldr	r2, [sp, #32]
    1502:	5cd3      	ldrb	r3, [r2, r3]
    1504:	469b      	mov	fp, r3

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
    1506:	6853      	ldr	r3, [r2, #4]
    1508:	469a      	mov	sl, r3
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    150a:	2b00      	cmp	r3, #0
    150c:	d017      	beq.n	153e <usart_init+0x152>
    150e:	2380      	movs	r3, #128	; 0x80
    1510:	055b      	lsls	r3, r3, #21
    1512:	459a      	cmp	sl, r3
    1514:	d13c      	bne.n	1590 <usart_init+0x1a4>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    1516:	2327      	movs	r3, #39	; 0x27
    1518:	5cd3      	ldrb	r3, [r2, r3]
    151a:	2b00      	cmp	r3, #0
    151c:	d13c      	bne.n	1598 <usart_init+0x1ac>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    151e:	6a15      	ldr	r5, [r2, #32]
    1520:	b2c0      	uxtb	r0, r0
    1522:	4b84      	ldr	r3, [pc, #528]	; (1734 <usart_init+0x348>)
    1524:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1526:	58d3      	ldr	r3, [r2, r3]
    1528:	4798      	blx	r3
    152a:	1c01      	adds	r1, r0, #0
    152c:	1c28      	adds	r0, r5, #0
    152e:	466a      	mov	r2, sp
    1530:	324e      	adds	r2, #78	; 0x4e
    1532:	4b81      	ldr	r3, [pc, #516]	; (1738 <usart_init+0x34c>)
    1534:	9d09      	ldr	r5, [sp, #36]	; 0x24
    1536:	58eb      	ldr	r3, [r5, r3]
    1538:	4798      	blx	r3
    153a:	1c03      	adds	r3, r0, #0
    153c:	e029      	b.n	1592 <usart_init+0x1a6>
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    153e:	2327      	movs	r3, #39	; 0x27
    1540:	9908      	ldr	r1, [sp, #32]
    1542:	5ccb      	ldrb	r3, [r1, r3]
    1544:	2b00      	cmp	r3, #0
    1546:	d00f      	beq.n	1568 <usart_init+0x17c>
				status_code =
    1548:	6a0a      	ldr	r2, [r1, #32]
    154a:	9207      	str	r2, [sp, #28]
    154c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    154e:	9306      	str	r3, [sp, #24]
    1550:	9700      	str	r7, [sp, #0]
    1552:	1c10      	adds	r0, r2, #0
    1554:	1c19      	adds	r1, r3, #0
    1556:	466a      	mov	r2, sp
    1558:	324e      	adds	r2, #78	; 0x4e
    155a:	1c2b      	adds	r3, r5, #0
    155c:	4d77      	ldr	r5, [pc, #476]	; (173c <usart_init+0x350>)
    155e:	9f09      	ldr	r7, [sp, #36]	; 0x24
    1560:	597f      	ldr	r7, [r7, r5]
    1562:	47b8      	blx	r7
    1564:	1c03      	adds	r3, r0, #0
    1566:	e014      	b.n	1592 <usart_init+0x1a6>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    1568:	9908      	ldr	r1, [sp, #32]
    156a:	6a09      	ldr	r1, [r1, #32]
    156c:	9110      	str	r1, [sp, #64]	; 0x40
    156e:	b2c0      	uxtb	r0, r0
    1570:	4b70      	ldr	r3, [pc, #448]	; (1734 <usart_init+0x348>)
    1572:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1574:	58d3      	ldr	r3, [r2, r3]
    1576:	4798      	blx	r3
    1578:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    157a:	9700      	str	r7, [sp, #0]
    157c:	9810      	ldr	r0, [sp, #64]	; 0x40
    157e:	466a      	mov	r2, sp
    1580:	324e      	adds	r2, #78	; 0x4e
    1582:	1c2b      	adds	r3, r5, #0
    1584:	4d6d      	ldr	r5, [pc, #436]	; (173c <usart_init+0x350>)
    1586:	9f09      	ldr	r7, [sp, #36]	; 0x24
    1588:	597f      	ldr	r7, [r7, r5]
    158a:	47b8      	blx	r7
    158c:	1c03      	adds	r3, r0, #0
    158e:	e000      	b.n	1592 <usart_init+0x1a6>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    1590:	2300      	movs	r3, #0
    1592:	1e18      	subs	r0, r3, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    1594:	d000      	beq.n	1598 <usart_init+0x1ac>
    1596:	e0b9      	b.n	170c <usart_init+0x320>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    1598:	9d08      	ldr	r5, [sp, #32]
    159a:	7e6b      	ldrb	r3, [r5, #25]
    159c:	2b00      	cmp	r3, #0
    159e:	d002      	beq.n	15a6 <usart_init+0x1ba>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    15a0:	7eab      	ldrb	r3, [r5, #26]
    15a2:	464f      	mov	r7, r9
    15a4:	73bb      	strb	r3, [r7, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    15a6:	6832      	ldr	r2, [r6, #0]
    15a8:	9f08      	ldr	r7, [sp, #32]
    15aa:	9d09      	ldr	r5, [sp, #36]	; 0x24

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    15ac:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    15ae:	2b00      	cmp	r3, #0
    15b0:	d1fc      	bne.n	15ac <usart_init+0x1c0>
    15b2:	9708      	str	r7, [sp, #32]
    15b4:	9509      	str	r5, [sp, #36]	; 0x24

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    15b6:	466b      	mov	r3, sp
    15b8:	334e      	adds	r3, #78	; 0x4e
    15ba:	881b      	ldrh	r3, [r3, #0]
    15bc:	4648      	mov	r0, r9
    15be:	8183      	strh	r3, [r0, #12]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    15c0:	990c      	ldr	r1, [sp, #48]	; 0x30
    15c2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    15c4:	4329      	orrs	r1, r5
		(uint32_t)config->mux_setting |
    15c6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    15c8:	4339      	orrs	r1, r7
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    15ca:	4650      	mov	r0, sl
    15cc:	4301      	orrs	r1, r0
		config->sample_rate |
    15ce:	4642      	mov	r2, r8
    15d0:	4311      	orrs	r1, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    15d2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    15d4:	022b      	lsls	r3, r5, #8
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    15d6:	4319      	orrs	r1, r3
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    15d8:	465f      	mov	r7, fp
    15da:	077b      	lsls	r3, r7, #29

	/*Set baud val */
	usart_hw->BAUD.reg = baud;

	/* Set sample mode */
	ctrla |= transfer_mode;
    15dc:	4319      	orrs	r1, r3

	if (config->use_external_clock == false) {
    15de:	2327      	movs	r3, #39	; 0x27
    15e0:	9d08      	ldr	r5, [sp, #32]
    15e2:	5ceb      	ldrb	r3, [r5, r3]
    15e4:	2b00      	cmp	r3, #0
    15e6:	d101      	bne.n	15ec <usart_init+0x200>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    15e8:	2304      	movs	r3, #4
    15ea:	4319      	orrs	r1, r3
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    15ec:	9d08      	ldr	r5, [sp, #32]
    15ee:	7f28      	ldrb	r0, [r5, #28]
    15f0:	0240      	lsls	r0, r0, #9
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    15f2:	7e6b      	ldrb	r3, [r5, #25]
    15f4:	029b      	lsls	r3, r3, #10
    15f6:	4318      	orrs	r0, r3
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    15f8:	7f6b      	ldrb	r3, [r5, #29]
    15fa:	021b      	lsls	r3, r3, #8
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    15fc:	4318      	orrs	r0, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    15fe:	2324      	movs	r3, #36	; 0x24
    1600:	5ceb      	ldrb	r3, [r5, r3]
    1602:	045b      	lsls	r3, r3, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1604:	4318      	orrs	r0, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    1606:	2325      	movs	r3, #37	; 0x25
    1608:	5ceb      	ldrb	r3, [r5, r3]
    160a:	041b      	lsls	r3, r3, #16
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    160c:	4318      	orrs	r0, r3
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->character_size;
    160e:	7aeb      	ldrb	r3, [r5, #11]
    1610:	4318      	orrs	r0, r3
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    1612:	892b      	ldrh	r3, [r5, #8]
    1614:	2bff      	cmp	r3, #255	; 0xff
    1616:	d004      	beq.n	1622 <usart_init+0x236>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    1618:	2280      	movs	r2, #128	; 0x80
    161a:	0452      	lsls	r2, r2, #17
    161c:	4311      	orrs	r1, r2
		ctrlb |= config->parity;
    161e:	4318      	orrs	r0, r3
    1620:	e006      	b.n	1630 <usart_init+0x244>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    1622:	9d08      	ldr	r5, [sp, #32]
    1624:	7eeb      	ldrb	r3, [r5, #27]
    1626:	2b00      	cmp	r3, #0
    1628:	d002      	beq.n	1630 <usart_init+0x244>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    162a:	2380      	movs	r3, #128	; 0x80
    162c:	04db      	lsls	r3, r3, #19
    162e:	4319      	orrs	r1, r3
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    1630:	232c      	movs	r3, #44	; 0x2c
    1632:	9d08      	ldr	r5, [sp, #32]
    1634:	5ceb      	ldrb	r3, [r5, r3]
    1636:	2b00      	cmp	r3, #0
    1638:	d103      	bne.n	1642 <usart_init+0x256>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    163a:	4b41      	ldr	r3, [pc, #260]	; (1740 <usart_init+0x354>)
    163c:	789b      	ldrb	r3, [r3, #2]
    163e:	079f      	lsls	r7, r3, #30
    1640:	d501      	bpl.n	1646 <usart_init+0x25a>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1642:	2380      	movs	r3, #128	; 0x80
    1644:	4319      	orrs	r1, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1646:	6832      	ldr	r2, [r6, #0]
    1648:	9f08      	ldr	r7, [sp, #32]
    164a:	9d09      	ldr	r5, [sp, #36]	; 0x24

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    164c:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    164e:	2b00      	cmp	r3, #0
    1650:	d1fc      	bne.n	164c <usart_init+0x260>
    1652:	9708      	str	r7, [sp, #32]
    1654:	9509      	str	r5, [sp, #36]	; 0x24

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    1656:	464a      	mov	r2, r9
    1658:	6050      	str	r0, [r2, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    165a:	6832      	ldr	r2, [r6, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    165c:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    165e:	2b00      	cmp	r3, #0
    1660:	d1fc      	bne.n	165c <usart_init+0x270>
    1662:	9708      	str	r7, [sp, #32]
    1664:	9509      	str	r5, [sp, #36]	; 0x24

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    1666:	464b      	mov	r3, r9
    1668:	6019      	str	r1, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    166a:	2280      	movs	r2, #128	; 0x80
    166c:	ab18      	add	r3, sp, #96	; 0x60
    166e:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1670:	2200      	movs	r2, #0
    1672:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    1674:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1676:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
    1678:	6b3d      	ldr	r5, [r7, #48]	; 0x30
    167a:	9514      	str	r5, [sp, #80]	; 0x50
    167c:	6b7f      	ldr	r7, [r7, #52]	; 0x34
    167e:	9715      	str	r7, [sp, #84]	; 0x54
    1680:	9808      	ldr	r0, [sp, #32]
    1682:	6b80      	ldr	r0, [r0, #56]	; 0x38
    1684:	9016      	str	r0, [sp, #88]	; 0x58
    1686:	9908      	ldr	r1, [sp, #32]
    1688:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
    168a:	9117      	str	r1, [sp, #92]	; 0x5c
    168c:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    168e:	aa18      	add	r2, sp, #96	; 0x60
    1690:	9d09      	ldr	r5, [sp, #36]	; 0x24
    1692:	46a0      	mov	r8, r4
    1694:	1c14      	adds	r4, r2, #0
    1696:	b2f9      	uxtb	r1, r7
    1698:	00bb      	lsls	r3, r7, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    169a:	aa14      	add	r2, sp, #80	; 0x50
    169c:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    169e:	2800      	cmp	r0, #0
    16a0:	d103      	bne.n	16aa <usart_init+0x2be>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    16a2:	4640      	mov	r0, r8
    16a4:	4b27      	ldr	r3, [pc, #156]	; (1744 <usart_init+0x358>)
    16a6:	58eb      	ldr	r3, [r5, r3]
    16a8:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
    16aa:	1c43      	adds	r3, r0, #1
    16ac:	d006      	beq.n	16bc <usart_init+0x2d0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    16ae:	7020      	strb	r0, [r4, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    16b0:	0c00      	lsrs	r0, r0, #16
    16b2:	b2c0      	uxtb	r0, r0
    16b4:	1c21      	adds	r1, r4, #0
    16b6:	4b24      	ldr	r3, [pc, #144]	; (1748 <usart_init+0x35c>)
    16b8:	58eb      	ldr	r3, [r5, r3]
    16ba:	4798      	blx	r3
    16bc:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    16be:	2f04      	cmp	r7, #4
    16c0:	d1e9      	bne.n	1696 <usart_init+0x2aa>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
    16c2:	2300      	movs	r3, #0
    16c4:	60f3      	str	r3, [r6, #12]
    16c6:	6133      	str	r3, [r6, #16]
    16c8:	6173      	str	r3, [r6, #20]
    16ca:	61b3      	str	r3, [r6, #24]
    16cc:	61f3      	str	r3, [r6, #28]
    16ce:	6233      	str	r3, [r6, #32]
	}

	module->tx_buffer_ptr              = NULL;
    16d0:	62b3      	str	r3, [r6, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    16d2:	6273      	str	r3, [r6, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    16d4:	2200      	movs	r2, #0
    16d6:	85f3      	strh	r3, [r6, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    16d8:	85b3      	strh	r3, [r6, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    16da:	2330      	movs	r3, #48	; 0x30
    16dc:	54f2      	strb	r2, [r6, r3]
	module->callback_enable_mask       = 0x00;
    16de:	2331      	movs	r3, #49	; 0x31
    16e0:	54f2      	strb	r2, [r6, r3]
	module->rx_status                  = STATUS_OK;
    16e2:	2332      	movs	r3, #50	; 0x32
    16e4:	54f2      	strb	r2, [r6, r3]
	module->tx_status                  = STATUS_OK;
    16e6:	2333      	movs	r3, #51	; 0x33
    16e8:	54f2      	strb	r2, [r6, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    16ea:	6830      	ldr	r0, [r6, #0]
    16ec:	4b0c      	ldr	r3, [pc, #48]	; (1720 <usart_init+0x334>)
    16ee:	58eb      	ldr	r3, [r5, r3]
    16f0:	4798      	blx	r3
    16f2:	1c04      	adds	r4, r0, #0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    16f4:	4b15      	ldr	r3, [pc, #84]	; (174c <usart_init+0x360>)
    16f6:	58eb      	ldr	r3, [r5, r3]
    16f8:	930a      	str	r3, [sp, #40]	; 0x28
    16fa:	1c19      	adds	r1, r3, #0
    16fc:	4b14      	ldr	r3, [pc, #80]	; (1750 <usart_init+0x364>)
    16fe:	58eb      	ldr	r3, [r5, r3]
    1700:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1702:	4b14      	ldr	r3, [pc, #80]	; (1754 <usart_init+0x368>)
    1704:	58eb      	ldr	r3, [r5, r3]
    1706:	00a4      	lsls	r4, r4, #2
    1708:	50e6      	str	r6, [r4, r3]
#endif

	return status_code;
    170a:	2000      	movs	r0, #0
}
    170c:	b01b      	add	sp, #108	; 0x6c
    170e:	bc3c      	pop	{r2, r3, r4, r5}
    1710:	4690      	mov	r8, r2
    1712:	4699      	mov	r9, r3
    1714:	46a2      	mov	sl, r4
    1716:	46ab      	mov	fp, r5
    1718:	bdf0      	pop	{r4, r5, r6, r7, pc}
    171a:	46c0      	nop			; (mov r8, r8)
    171c:	00003306 	.word	0x00003306
    1720:	000001fc 	.word	0x000001fc
    1724:	40000400 	.word	0x40000400
    1728:	0000006c 	.word	0x0000006c
    172c:	00000188 	.word	0x00000188
    1730:	00000184 	.word	0x00000184
    1734:	00000110 	.word	0x00000110
    1738:	000000b0 	.word	0x000000b0
    173c:	00000018 	.word	0x00000018
    1740:	41002000 	.word	0x41002000
    1744:	00000210 	.word	0x00000210
    1748:	00000204 	.word	0x00000204
    174c:	00000198 	.word	0x00000198
    1750:	000000e8 	.word	0x000000e8
    1754:	000000dc 	.word	0x000000dc

00001758 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    1758:	b5f0      	push	{r4, r5, r6, r7, lr}
    175a:	4647      	mov	r7, r8
    175c:	b480      	push	{r7}
    175e:	b082      	sub	sp, #8
    1760:	1c05      	adds	r5, r0, #0
    1762:	1c0f      	adds	r7, r1, #0
    1764:	4690      	mov	r8, r2
    1766:	4c0f      	ldr	r4, [pc, #60]	; (17a4 <_usart_write_buffer+0x4c>)
    1768:	447c      	add	r4, pc
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    176a:	6806      	ldr	r6, [r0, #0]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    176c:	4b0e      	ldr	r3, [pc, #56]	; (17a8 <_usart_write_buffer+0x50>)
    176e:	58e3      	ldr	r3, [r4, r3]
    1770:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    1772:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1774:	b29b      	uxth	r3, r3
    1776:	2b00      	cmp	r3, #0
    1778:	d004      	beq.n	1784 <_usart_write_buffer+0x2c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    177a:	4b0c      	ldr	r3, [pc, #48]	; (17ac <_usart_write_buffer+0x54>)
    177c:	58e3      	ldr	r3, [r4, r3]
    177e:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    1780:	2005      	movs	r0, #5
    1782:	e00b      	b.n	179c <_usart_write_buffer+0x44>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
    1784:	4643      	mov	r3, r8
    1786:	85eb      	strh	r3, [r5, #46]	; 0x2e
    1788:	4b08      	ldr	r3, [pc, #32]	; (17ac <_usart_write_buffer+0x54>)
    178a:	58e3      	ldr	r3, [r4, r3]
    178c:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	module->tx_buffer_ptr              = tx_data;
    178e:	62af      	str	r7, [r5, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    1790:	2205      	movs	r2, #5
    1792:	2333      	movs	r3, #51	; 0x33
    1794:	54ea      	strb	r2, [r5, r3]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    1796:	2301      	movs	r3, #1
    1798:	75b3      	strb	r3, [r6, #22]

	return STATUS_OK;
    179a:	2000      	movs	r0, #0
}
    179c:	b002      	add	sp, #8
    179e:	bc04      	pop	{r2}
    17a0:	4690      	mov	r8, r2
    17a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    17a4:	00002fa0 	.word	0x00002fa0
    17a8:	00000080 	.word	0x00000080
    17ac:	00000004 	.word	0x00000004

000017b0 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    17b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    17b2:	4647      	mov	r7, r8
    17b4:	b480      	push	{r7}
    17b6:	b082      	sub	sp, #8
    17b8:	1c04      	adds	r4, r0, #0
    17ba:	1c0f      	adds	r7, r1, #0
    17bc:	4690      	mov	r8, r2
    17be:	4d14      	ldr	r5, [pc, #80]	; (1810 <_usart_read_buffer+0x60>)
    17c0:	447d      	add	r5, pc
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    17c2:	6806      	ldr	r6, [r0, #0]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    17c4:	4b13      	ldr	r3, [pc, #76]	; (1814 <_usart_read_buffer+0x64>)
    17c6:	58eb      	ldr	r3, [r5, r3]
    17c8:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    17ca:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    17cc:	b29b      	uxth	r3, r3
    17ce:	2b00      	cmp	r3, #0
    17d0:	d004      	beq.n	17dc <_usart_read_buffer+0x2c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    17d2:	4b11      	ldr	r3, [pc, #68]	; (1818 <_usart_read_buffer+0x68>)
    17d4:	58eb      	ldr	r3, [r5, r3]
    17d6:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    17d8:	2005      	movs	r0, #5
    17da:	e015      	b.n	1808 <_usart_read_buffer+0x58>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
    17dc:	4643      	mov	r3, r8
    17de:	85a3      	strh	r3, [r4, #44]	; 0x2c
    17e0:	4b0d      	ldr	r3, [pc, #52]	; (1818 <_usart_read_buffer+0x68>)
    17e2:	58eb      	ldr	r3, [r5, r3]
    17e4:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	module->rx_buffer_ptr              = rx_data;
    17e6:	6267      	str	r7, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    17e8:	2205      	movs	r2, #5
    17ea:	2332      	movs	r3, #50	; 0x32
    17ec:	54e2      	strb	r2, [r4, r3]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    17ee:	2304      	movs	r3, #4
    17f0:	75b3      	strb	r3, [r6, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
    17f2:	7a23      	ldrb	r3, [r4, #8]
    17f4:	2b00      	cmp	r3, #0
    17f6:	d001      	beq.n	17fc <_usart_read_buffer+0x4c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    17f8:	2320      	movs	r3, #32
    17fa:	75b3      	strb	r3, [r6, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
    17fc:	7a63      	ldrb	r3, [r4, #9]
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
    17fe:	2000      	movs	r0, #0
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
    1800:	2b00      	cmp	r3, #0
    1802:	d001      	beq.n	1808 <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    1804:	2308      	movs	r3, #8
    1806:	75b3      	strb	r3, [r6, #22]
	}
#endif

	return STATUS_OK;
}
    1808:	b002      	add	sp, #8
    180a:	bc04      	pop	{r2}
    180c:	4690      	mov	r8, r2
    180e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1810:	00002f48 	.word	0x00002f48
    1814:	00000080 	.word	0x00000080
    1818:	00000004 	.word	0x00000004

0000181c <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    181c:	1c93      	adds	r3, r2, #2
    181e:	009b      	lsls	r3, r3, #2
    1820:	18c3      	adds	r3, r0, r3
    1822:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    1824:	2301      	movs	r3, #1
    1826:	4093      	lsls	r3, r2
    1828:	1c1a      	adds	r2, r3, #0
    182a:	2330      	movs	r3, #48	; 0x30
    182c:	5cc1      	ldrb	r1, [r0, r3]
    182e:	430a      	orrs	r2, r1
    1830:	54c2      	strb	r2, [r0, r3]
}
    1832:	4770      	bx	lr

00001834 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    1834:	b530      	push	{r4, r5, lr}
    1836:	b083      	sub	sp, #12
    1838:	4c07      	ldr	r4, [pc, #28]	; (1858 <usart_write_buffer_job+0x24>)
    183a:	447c      	add	r4, pc
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    183c:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
    183e:	2a00      	cmp	r2, #0
    1840:	d007      	beq.n	1852 <usart_write_buffer_job+0x1e>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->transmitter_enabled)) {
    1842:	79c5      	ldrb	r5, [r0, #7]
		return STATUS_ERR_DENIED;
    1844:	231c      	movs	r3, #28
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->transmitter_enabled)) {
    1846:	2d00      	cmp	r5, #0
    1848:	d003      	beq.n	1852 <usart_write_buffer_job+0x1e>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
    184a:	4b04      	ldr	r3, [pc, #16]	; (185c <usart_write_buffer_job+0x28>)
    184c:	58e3      	ldr	r3, [r4, r3]
    184e:	4798      	blx	r3
    1850:	1c03      	adds	r3, r0, #0
}
    1852:	1c18      	adds	r0, r3, #0
    1854:	b003      	add	sp, #12
    1856:	bd30      	pop	{r4, r5, pc}
    1858:	00002ece 	.word	0x00002ece
    185c:	00000094 	.word	0x00000094

00001860 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    1860:	b530      	push	{r4, r5, lr}
    1862:	b083      	sub	sp, #12
    1864:	4c07      	ldr	r4, [pc, #28]	; (1884 <usart_read_buffer_job+0x24>)
    1866:	447c      	add	r4, pc
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    1868:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
    186a:	2a00      	cmp	r2, #0
    186c:	d007      	beq.n	187e <usart_read_buffer_job+0x1e>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    186e:	7985      	ldrb	r5, [r0, #6]
		return STATUS_ERR_DENIED;
    1870:	231c      	movs	r3, #28
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1872:	2d00      	cmp	r5, #0
    1874:	d003      	beq.n	187e <usart_read_buffer_job+0x1e>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
    1876:	4b04      	ldr	r3, [pc, #16]	; (1888 <usart_read_buffer_job+0x28>)
    1878:	58e3      	ldr	r3, [r4, r3]
    187a:	4798      	blx	r3
    187c:	1c03      	adds	r3, r0, #0
}
    187e:	1c18      	adds	r0, r3, #0
    1880:	b003      	add	sp, #12
    1882:	bd30      	pop	{r4, r5, pc}
    1884:	00002ea2 	.word	0x00002ea2
    1888:	000000a8 	.word	0x000000a8

0000188c <usart_abort_job>:
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    188c:	6803      	ldr	r3, [r0, #0]

	switch(transceiver_type) {
    188e:	2900      	cmp	r1, #0
    1890:	d002      	beq.n	1898 <usart_abort_job+0xc>
    1892:	2901      	cmp	r1, #1
    1894:	d005      	beq.n	18a2 <usart_abort_job+0x16>
    1896:	e008      	b.n	18aa <usart_abort_job+0x1e>
		case USART_TRANSCEIVER_RX:
			/* Clear the interrupt flag in order to prevent the receive
			 * complete callback to fire */
			usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXC;
    1898:	2204      	movs	r2, #4
    189a:	761a      	strb	r2, [r3, #24]

			/* Clear the software reception buffer */
			module->remaining_rx_buffer_length = 0;
    189c:	2300      	movs	r3, #0
    189e:	8583      	strh	r3, [r0, #44]	; 0x2c

			break;
    18a0:	e003      	b.n	18aa <usart_abort_job+0x1e>

		case USART_TRANSCEIVER_TX:
			/* Clear the interrupt flag in order to prevent the receive
			 * complete callback to fire */
			usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_TXC;
    18a2:	2202      	movs	r2, #2
    18a4:	761a      	strb	r2, [r3, #24]

			/* Clear the software reception buffer */
			module->remaining_tx_buffer_length = 0;
    18a6:	2300      	movs	r3, #0
    18a8:	85c3      	strh	r3, [r0, #46]	; 0x2e

			break;
	}
}
    18aa:	4770      	bx	lr

000018ac <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    18ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    18ae:	b083      	sub	sp, #12
    18b0:	4b66      	ldr	r3, [pc, #408]	; (1a4c <_usart_interrupt_handler+0x1a0>)
    18b2:	447b      	add	r3, pc
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    18b4:	4a66      	ldr	r2, [pc, #408]	; (1a50 <_usart_interrupt_handler+0x1a4>)
    18b6:	589a      	ldr	r2, [r3, r2]
    18b8:	0080      	lsls	r0, r0, #2
    18ba:	5885      	ldr	r5, [r0, r2]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    18bc:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    18be:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    18c0:	2b00      	cmp	r3, #0
    18c2:	d1fc      	bne.n	18be <_usart_interrupt_handler+0x12>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    18c4:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    18c6:	7da6      	ldrb	r6, [r4, #22]
    18c8:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
			module->callback_enable_mask;
    18ca:	2331      	movs	r3, #49	; 0x31
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
    18cc:	5ceb      	ldrb	r3, [r5, r3]
    18ce:	2230      	movs	r2, #48	; 0x30
    18d0:	5caf      	ldrb	r7, [r5, r2]
    18d2:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    18d4:	07f1      	lsls	r1, r6, #31
    18d6:	d520      	bpl.n	191a <_usart_interrupt_handler+0x6e>
		if (module->remaining_tx_buffer_length) {
    18d8:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    18da:	b29b      	uxth	r3, r3
    18dc:	2b00      	cmp	r3, #0
    18de:	d01a      	beq.n	1916 <_usart_interrupt_handler+0x6a>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    18e0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    18e2:	781a      	ldrb	r2, [r3, #0]
    18e4:	b2d2      	uxtb	r2, r2
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    18e6:	1c59      	adds	r1, r3, #1
    18e8:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    18ea:	7969      	ldrb	r1, [r5, #5]
    18ec:	2901      	cmp	r1, #1
    18ee:	d104      	bne.n	18fa <_usart_interrupt_handler+0x4e>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    18f0:	7859      	ldrb	r1, [r3, #1]
    18f2:	0209      	lsls	r1, r1, #8
    18f4:	430a      	orrs	r2, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    18f6:	3302      	adds	r3, #2
    18f8:	62ab      	str	r3, [r5, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    18fa:	05d3      	lsls	r3, r2, #23
    18fc:	0ddb      	lsrs	r3, r3, #23
    18fe:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    1900:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1902:	3b01      	subs	r3, #1
    1904:	b29b      	uxth	r3, r3
    1906:	85eb      	strh	r3, [r5, #46]	; 0x2e
    1908:	2b00      	cmp	r3, #0
    190a:	d106      	bne.n	191a <_usart_interrupt_handler+0x6e>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    190c:	2301      	movs	r3, #1
    190e:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    1910:	2302      	movs	r3, #2
    1912:	75a3      	strb	r3, [r4, #22]
    1914:	e001      	b.n	191a <_usart_interrupt_handler+0x6e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1916:	2301      	movs	r3, #1
    1918:	7523      	strb	r3, [r4, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    191a:	07b2      	lsls	r2, r6, #30
    191c:	d509      	bpl.n	1932 <_usart_interrupt_handler+0x86>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    191e:	2302      	movs	r3, #2
    1920:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    1922:	2200      	movs	r2, #0
    1924:	2333      	movs	r3, #51	; 0x33
    1926:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    1928:	07fb      	lsls	r3, r7, #31
    192a:	d502      	bpl.n	1932 <_usart_interrupt_handler+0x86>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    192c:	1c28      	adds	r0, r5, #0
    192e:	68e9      	ldr	r1, [r5, #12]
    1930:	4788      	blx	r1

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    1932:	0772      	lsls	r2, r6, #29
    1934:	d56a      	bpl.n	1a0c <_usart_interrupt_handler+0x160>

		if (module->remaining_rx_buffer_length) {
    1936:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1938:	b29b      	uxth	r3, r3
    193a:	2b00      	cmp	r3, #0
    193c:	d064      	beq.n	1a08 <_usart_interrupt_handler+0x15c>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    193e:	8b63      	ldrh	r3, [r4, #26]
    1940:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    1942:	0719      	lsls	r1, r3, #28
    1944:	d402      	bmi.n	194c <_usart_interrupt_handler+0xa0>

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {

		if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1946:	223f      	movs	r2, #63	; 0x3f
    1948:	4013      	ands	r3, r2
    194a:	e001      	b.n	1950 <_usart_interrupt_handler+0xa4>
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
				error_code &= ~SERCOM_USART_STATUS_CTS;
    194c:	2237      	movs	r2, #55	; 0x37
    194e:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    1950:	2b00      	cmp	r3, #0
    1952:	d037      	beq.n	19c4 <_usart_interrupt_handler+0x118>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1954:	079a      	lsls	r2, r3, #30
    1956:	d507      	bpl.n	1968 <_usart_interrupt_handler+0xbc>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1958:	221a      	movs	r2, #26
    195a:	2332      	movs	r3, #50	; 0x32
    195c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
    195e:	8b62      	ldrh	r2, [r4, #26]
    1960:	2302      	movs	r3, #2
    1962:	4313      	orrs	r3, r2
    1964:	8363      	strh	r3, [r4, #26]
    1966:	e027      	b.n	19b8 <_usart_interrupt_handler+0x10c>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1968:	0759      	lsls	r1, r3, #29
    196a:	d507      	bpl.n	197c <_usart_interrupt_handler+0xd0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    196c:	221e      	movs	r2, #30
    196e:	2332      	movs	r3, #50	; 0x32
    1970:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
    1972:	8b62      	ldrh	r2, [r4, #26]
    1974:	2304      	movs	r3, #4
    1976:	4313      	orrs	r3, r2
    1978:	8363      	strh	r3, [r4, #26]
    197a:	e01d      	b.n	19b8 <_usart_interrupt_handler+0x10c>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    197c:	07da      	lsls	r2, r3, #31
    197e:	d507      	bpl.n	1990 <_usart_interrupt_handler+0xe4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    1980:	2213      	movs	r2, #19
    1982:	2332      	movs	r3, #50	; 0x32
    1984:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
    1986:	8b62      	ldrh	r2, [r4, #26]
    1988:	2301      	movs	r3, #1
    198a:	4313      	orrs	r3, r2
    198c:	8363      	strh	r3, [r4, #26]
    198e:	e013      	b.n	19b8 <_usart_interrupt_handler+0x10c>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    1990:	06d9      	lsls	r1, r3, #27
    1992:	d507      	bpl.n	19a4 <_usart_interrupt_handler+0xf8>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    1994:	2242      	movs	r2, #66	; 0x42
    1996:	2332      	movs	r3, #50	; 0x32
    1998:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    199a:	8b62      	ldrh	r2, [r4, #26]
    199c:	2310      	movs	r3, #16
    199e:	4313      	orrs	r3, r2
    19a0:	8363      	strh	r3, [r4, #26]
    19a2:	e009      	b.n	19b8 <_usart_interrupt_handler+0x10c>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    19a4:	2220      	movs	r2, #32
    19a6:	421a      	tst	r2, r3
    19a8:	d006      	beq.n	19b8 <_usart_interrupt_handler+0x10c>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    19aa:	2241      	movs	r2, #65	; 0x41
    19ac:	2332      	movs	r3, #50	; 0x32
    19ae:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    19b0:	8b62      	ldrh	r2, [r4, #26]
    19b2:	2320      	movs	r3, #32
    19b4:	4313      	orrs	r3, r2
    19b6:	8363      	strh	r3, [r4, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    19b8:	077a      	lsls	r2, r7, #29
    19ba:	d527      	bpl.n	1a0c <_usart_interrupt_handler+0x160>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    19bc:	1c28      	adds	r0, r5, #0
    19be:	696b      	ldr	r3, [r5, #20]
    19c0:	4798      	blx	r3
    19c2:	e023      	b.n	1a0c <_usart_interrupt_handler+0x160>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    19c4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    19c6:	05d2      	lsls	r2, r2, #23
    19c8:	0dd2      	lsrs	r2, r2, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    19ca:	b2d3      	uxtb	r3, r2
    19cc:	6a69      	ldr	r1, [r5, #36]	; 0x24
    19ce:	700b      	strb	r3, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    19d0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    19d2:	1c59      	adds	r1, r3, #1
    19d4:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    19d6:	7969      	ldrb	r1, [r5, #5]
    19d8:	2901      	cmp	r1, #1
    19da:	d104      	bne.n	19e6 <_usart_interrupt_handler+0x13a>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    19dc:	0a12      	lsrs	r2, r2, #8
    19de:	705a      	strb	r2, [r3, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    19e0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    19e2:	3301      	adds	r3, #1
    19e4:	626b      	str	r3, [r5, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    19e6:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    19e8:	3b01      	subs	r3, #1
    19ea:	b29b      	uxth	r3, r3
    19ec:	85ab      	strh	r3, [r5, #44]	; 0x2c
    19ee:	2b00      	cmp	r3, #0
    19f0:	d10c      	bne.n	1a0c <_usart_interrupt_handler+0x160>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    19f2:	2304      	movs	r3, #4
    19f4:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    19f6:	2200      	movs	r2, #0
    19f8:	2332      	movs	r3, #50	; 0x32
    19fa:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    19fc:	07ba      	lsls	r2, r7, #30
    19fe:	d505      	bpl.n	1a0c <_usart_interrupt_handler+0x160>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    1a00:	1c28      	adds	r0, r5, #0
    1a02:	692b      	ldr	r3, [r5, #16]
    1a04:	4798      	blx	r3
    1a06:	e001      	b.n	1a0c <_usart_interrupt_handler+0x160>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1a08:	2304      	movs	r3, #4
    1a0a:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1a0c:	06f1      	lsls	r1, r6, #27
    1a0e:	d507      	bpl.n	1a20 <_usart_interrupt_handler+0x174>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    1a10:	2310      	movs	r3, #16
    1a12:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    1a14:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    1a16:	06fa      	lsls	r2, r7, #27
    1a18:	d502      	bpl.n	1a20 <_usart_interrupt_handler+0x174>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    1a1a:	1c28      	adds	r0, r5, #0
    1a1c:	69eb      	ldr	r3, [r5, #28]
    1a1e:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    1a20:	06b1      	lsls	r1, r6, #26
    1a22:	d507      	bpl.n	1a34 <_usart_interrupt_handler+0x188>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1a24:	2320      	movs	r3, #32
    1a26:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    1a28:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    1a2a:	073a      	lsls	r2, r7, #28
    1a2c:	d502      	bpl.n	1a34 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    1a2e:	1c28      	adds	r0, r5, #0
    1a30:	69ab      	ldr	r3, [r5, #24]
    1a32:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1a34:	0731      	lsls	r1, r6, #28
    1a36:	d507      	bpl.n	1a48 <_usart_interrupt_handler+0x19c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1a38:	2308      	movs	r3, #8
    1a3a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1a3c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    1a3e:	06ba      	lsls	r2, r7, #26
    1a40:	d502      	bpl.n	1a48 <_usart_interrupt_handler+0x19c>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    1a42:	6a2b      	ldr	r3, [r5, #32]
    1a44:	1c28      	adds	r0, r5, #0
    1a46:	4798      	blx	r3
		}
	}
#endif
}
    1a48:	b003      	add	sp, #12
    1a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a4c:	00002e56 	.word	0x00002e56
    1a50:	000000dc 	.word	0x000000dc

00001a54 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1a54:	1c03      	adds	r3, r0, #0
    1a56:	3308      	adds	r3, #8
    1a58:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    1a5a:	2201      	movs	r2, #1
    1a5c:	4252      	negs	r2, r2
    1a5e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1a60:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1a62:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    1a64:	2300      	movs	r3, #0
    1a66:	6003      	str	r3, [r0, #0]
}
    1a68:	4770      	bx	lr
    1a6a:	46c0      	nop			; (mov r8, r8)

00001a6c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    1a6c:	2300      	movs	r3, #0
    1a6e:	6103      	str	r3, [r0, #16]
}
    1a70:	4770      	bx	lr
    1a72:	46c0      	nop			; (mov r8, r8)

00001a74 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
    1a74:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    1a76:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1a78:	689a      	ldr	r2, [r3, #8]
    1a7a:	608a      	str	r2, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
    1a7c:	689a      	ldr	r2, [r3, #8]
    1a7e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
    1a80:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1a82:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
    1a84:	6803      	ldr	r3, [r0, #0]
    1a86:	3301      	adds	r3, #1
    1a88:	6003      	str	r3, [r0, #0]
}
    1a8a:	4770      	bx	lr

00001a8c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1a8c:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1a8e:	680c      	ldr	r4, [r1, #0]
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1a90:	1c02      	adds	r2, r0, #0
    1a92:	3208      	adds	r2, #8
	are stored in ready lists (all of which have the same xItemValue value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    1a94:	1c63      	adds	r3, r4, #1
    1a96:	d101      	bne.n	1a9c <vListInsert+0x10>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    1a98:	6902      	ldr	r2, [r0, #16]
    1a9a:	e005      	b.n	1aa8 <vListInsert+0x1c>
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1a9c:	6853      	ldr	r3, [r2, #4]
    1a9e:	681d      	ldr	r5, [r3, #0]
    1aa0:	42ac      	cmp	r4, r5
    1aa2:	d301      	bcc.n	1aa8 <vListInsert+0x1c>
    1aa4:	1c1a      	adds	r2, r3, #0
    1aa6:	e7f9      	b.n	1a9c <vListInsert+0x10>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    1aa8:	6853      	ldr	r3, [r2, #4]
    1aaa:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    1aac:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    1aae:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
    1ab0:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1ab2:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
    1ab4:	6803      	ldr	r3, [r0, #0]
    1ab6:	3301      	adds	r3, #1
    1ab8:	6003      	str	r3, [r0, #0]
}
    1aba:	bd30      	pop	{r4, r5, pc}

00001abc <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    1abc:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1abe:	6842      	ldr	r2, [r0, #4]
    1ac0:	6881      	ldr	r1, [r0, #8]
    1ac2:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1ac4:	6882      	ldr	r2, [r0, #8]
    1ac6:	6841      	ldr	r1, [r0, #4]
    1ac8:	6051      	str	r1, [r2, #4]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    1aca:	685a      	ldr	r2, [r3, #4]
    1acc:	4282      	cmp	r2, r0
    1ace:	d101      	bne.n	1ad4 <uxListRemove+0x18>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    1ad0:	6892      	ldr	r2, [r2, #8]
    1ad2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    1ad4:	2200      	movs	r2, #0
    1ad6:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
    1ad8:	6818      	ldr	r0, [r3, #0]
    1ada:	3801      	subs	r0, #1
    1adc:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
    1ade:	4770      	bx	lr

00001ae0 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
    1ae0:	4b04      	ldr	r3, [pc, #16]	; (1af4 <prvTaskExitError+0x14>)
    1ae2:	447b      	add	r3, pc
    1ae4:	681b      	ldr	r3, [r3, #0]
    1ae6:	3301      	adds	r3, #1
    1ae8:	d001      	beq.n	1aee <prvTaskExitError+0xe>
    1aea:	b672      	cpsid	i
    1aec:	e7fe      	b.n	1aec <prvTaskExitError+0xc>
	portDISABLE_INTERRUPTS();
    1aee:	b672      	cpsid	i
    1af0:	e7fe      	b.n	1af0 <prvTaskExitError+0x10>
    1af2:	46c0      	nop			; (mov r8, r8)
    1af4:	1fffe51a 	.word	0x1fffe51a

00001af8 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
    1af8:	4a06      	ldr	r2, [pc, #24]	; (1b14 <pxCurrentTCBConst2>)
    1afa:	6813      	ldr	r3, [r2, #0]
    1afc:	6818      	ldr	r0, [r3, #0]
    1afe:	3020      	adds	r0, #32
    1b00:	f380 8809 	msr	PSP, r0
    1b04:	2002      	movs	r0, #2
    1b06:	f380 8814 	msr	CONTROL, r0
    1b0a:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
    1b0c:	46ae      	mov	lr, r5
    1b0e:	b662      	cpsie	i
    1b10:	bd00      	pop	{pc}
    1b12:	46c0      	nop			; (mov r8, r8)

00001b14 <pxCurrentTCBConst2>:
    1b14:	20001cfc 	.word	0x20001cfc

00001b18 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    1b18:	b510      	push	{r4, lr}
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    1b1a:	1f03      	subs	r3, r0, #4
    1b1c:	2480      	movs	r4, #128	; 0x80
    1b1e:	0464      	lsls	r4, r4, #17
    1b20:	601c      	str	r4, [r3, #0]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
    1b22:	3b04      	subs	r3, #4
    1b24:	6019      	str	r1, [r3, #0]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
    1b26:	3b04      	subs	r3, #4
    1b28:	4903      	ldr	r1, [pc, #12]	; (1b38 <pxPortInitialiseStack+0x20>)
    1b2a:	4479      	add	r1, pc
    1b2c:	6019      	str	r1, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
    1b2e:	3b14      	subs	r3, #20
    1b30:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */

	return pxTopOfStack;
    1b32:	3840      	subs	r0, #64	; 0x40
}
    1b34:	bd10      	pop	{r4, pc}
    1b36:	46c0      	nop			; (mov r8, r8)
    1b38:	ffffffb3 	.word	0xffffffb3

00001b3c <SVC_Handler>:

void vPortSVCHandler( void )
{
	/* This function is no longer used, but retained for backward
	compatibility. */
}
    1b3c:	4770      	bx	lr
    1b3e:	46c0      	nop			; (mov r8, r8)

00001b40 <vPortYield>:
/*-----------------------------------------------------------*/

void vPortYield( void )
{
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
    1b40:	2280      	movs	r2, #128	; 0x80
    1b42:	0552      	lsls	r2, r2, #21
    1b44:	4b03      	ldr	r3, [pc, #12]	; (1b54 <vPortYield+0x14>)
    1b46:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
    1b48:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    1b4c:	f3bf 8f6f 	isb	sy
}
    1b50:	4770      	bx	lr
    1b52:	46c0      	nop			; (mov r8, r8)
    1b54:	e000ed04 	.word	0xe000ed04

00001b58 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    portDISABLE_INTERRUPTS();
    1b58:	b672      	cpsid	i
    uxCriticalNesting++;
    1b5a:	4b05      	ldr	r3, [pc, #20]	; (1b70 <vPortEnterCritical+0x18>)
    1b5c:	447b      	add	r3, pc
    1b5e:	681a      	ldr	r2, [r3, #0]
    1b60:	3201      	adds	r2, #1
    1b62:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
    1b64:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    1b68:	f3bf 8f6f 	isb	sy
}
    1b6c:	4770      	bx	lr
    1b6e:	46c0      	nop			; (mov r8, r8)
    1b70:	1fffe4a0 	.word	0x1fffe4a0

00001b74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
    1b74:	4b07      	ldr	r3, [pc, #28]	; (1b94 <vPortExitCritical+0x20>)
    1b76:	447b      	add	r3, pc
    1b78:	681b      	ldr	r3, [r3, #0]
    1b7a:	2b00      	cmp	r3, #0
    1b7c:	d101      	bne.n	1b82 <vPortExitCritical+0xe>
    1b7e:	b672      	cpsid	i
    1b80:	e7fe      	b.n	1b80 <vPortExitCritical+0xc>
    uxCriticalNesting--;
    1b82:	3b01      	subs	r3, #1
    1b84:	4a04      	ldr	r2, [pc, #16]	; (1b98 <vPortExitCritical+0x24>)
    1b86:	447a      	add	r2, pc
    1b88:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
    1b8a:	2b00      	cmp	r3, #0
    1b8c:	d100      	bne.n	1b90 <vPortExitCritical+0x1c>
    {
        portENABLE_INTERRUPTS();
    1b8e:	b662      	cpsie	i
    }
}
    1b90:	4770      	bx	lr
    1b92:	46c0      	nop			; (mov r8, r8)
    1b94:	1fffe486 	.word	0x1fffe486
    1b98:	1fffe476 	.word	0x1fffe476

00001b9c <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
    1b9c:	f3ef 8010 	mrs	r0, PRIMASK
    1ba0:	b672      	cpsid	i
    1ba2:	4770      	bx	lr
					" bx lr				  "
				  );

	/* To avoid compiler warnings.  This line will never be reached. */
	return 0;
}
    1ba4:	2000      	movs	r0, #0
    1ba6:	46c0      	nop			; (mov r8, r8)

00001ba8 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( uint32_t ulMask )
{
	__asm volatile(
    1ba8:	f380 8810 	msr	PRIMASK, r0
    1bac:	4770      	bx	lr
    1bae:	46c0      	nop			; (mov r8, r8)

00001bb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    1bb0:	f3ef 8009 	mrs	r0, PSP
    1bb4:	4b0e      	ldr	r3, [pc, #56]	; (1bf0 <pxCurrentTCBConst>)
    1bb6:	681a      	ldr	r2, [r3, #0]
    1bb8:	3820      	subs	r0, #32
    1bba:	6010      	str	r0, [r2, #0]
    1bbc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    1bbe:	4644      	mov	r4, r8
    1bc0:	464d      	mov	r5, r9
    1bc2:	4656      	mov	r6, sl
    1bc4:	465f      	mov	r7, fp
    1bc6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    1bc8:	b508      	push	{r3, lr}
    1bca:	b672      	cpsid	i
    1bcc:	f001 f94a 	bl	2e64 <vTaskSwitchContext>
    1bd0:	b662      	cpsie	i
    1bd2:	bc0c      	pop	{r2, r3}
    1bd4:	6811      	ldr	r1, [r2, #0]
    1bd6:	6808      	ldr	r0, [r1, #0]
    1bd8:	3010      	adds	r0, #16
    1bda:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    1bdc:	46a0      	mov	r8, r4
    1bde:	46a9      	mov	r9, r5
    1be0:	46b2      	mov	sl, r6
    1be2:	46bb      	mov	fp, r7
    1be4:	f380 8809 	msr	PSP, r0
    1be8:	3820      	subs	r0, #32
    1bea:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    1bec:	4718      	bx	r3
    1bee:	46c0      	nop			; (mov r8, r8)

00001bf0 <pxCurrentTCBConst>:
    1bf0:	20001cfc 	.word	0x20001cfc

00001bf4 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    1bf4:	b530      	push	{r4, r5, lr}
    1bf6:	b083      	sub	sp, #12
    1bf8:	4c0a      	ldr	r4, [pc, #40]	; (1c24 <SysTick_Handler+0x30>)
    1bfa:	447c      	add	r4, pc
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
    1bfc:	4b0a      	ldr	r3, [pc, #40]	; (1c28 <SysTick_Handler+0x34>)
    1bfe:	58e3      	ldr	r3, [r4, r3]
    1c00:	4798      	blx	r3
    1c02:	1c05      	adds	r5, r0, #0
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
    1c04:	4b09      	ldr	r3, [pc, #36]	; (1c2c <SysTick_Handler+0x38>)
    1c06:	58e3      	ldr	r3, [r4, r3]
    1c08:	4798      	blx	r3
    1c0a:	2800      	cmp	r0, #0
    1c0c:	d003      	beq.n	1c16 <SysTick_Handler+0x22>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    1c0e:	2280      	movs	r2, #128	; 0x80
    1c10:	0552      	lsls	r2, r2, #21
    1c12:	4b07      	ldr	r3, [pc, #28]	; (1c30 <SysTick_Handler+0x3c>)
    1c14:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
    1c16:	1c28      	adds	r0, r5, #0
    1c18:	4b06      	ldr	r3, [pc, #24]	; (1c34 <SysTick_Handler+0x40>)
    1c1a:	58e3      	ldr	r3, [r4, r3]
    1c1c:	4798      	blx	r3
}
    1c1e:	b003      	add	sp, #12
    1c20:	bd30      	pop	{r4, r5, pc}
    1c22:	46c0      	nop			; (mov r8, r8)
    1c24:	00002b0e 	.word	0x00002b0e
    1c28:	000001f0 	.word	0x000001f0
    1c2c:	000001cc 	.word	0x000001cc
    1c30:	e000ed04 	.word	0xe000ed04
    1c34:	000000f4 	.word	0x000000f4

00001c38 <vPortSetupTimerInterrupt>:
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_VAL)  = 0; /* Load the SysTick Counter Value */
    1c38:	2200      	movs	r2, #0
    1c3a:	4b04      	ldr	r3, [pc, #16]	; (1c4c <vPortSetupTimerInterrupt+0x14>)
    1c3c:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    1c3e:	4a04      	ldr	r2, [pc, #16]	; (1c50 <vPortSetupTimerInterrupt+0x18>)
    1c40:	4b04      	ldr	r3, [pc, #16]	; (1c54 <vPortSetupTimerInterrupt+0x1c>)
    1c42:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    1c44:	2207      	movs	r2, #7
    1c46:	4b04      	ldr	r3, [pc, #16]	; (1c58 <vPortSetupTimerInterrupt+0x20>)
    1c48:	601a      	str	r2, [r3, #0]
}
    1c4a:	4770      	bx	lr
    1c4c:	e000e018 	.word	0xe000e018
    1c50:	0000bb7f 	.word	0x0000bb7f
    1c54:	e000e014 	.word	0xe000e014
    1c58:	e000e010 	.word	0xe000e010

00001c5c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
    1c5c:	b500      	push	{lr}
    1c5e:	b083      	sub	sp, #12
    1c60:	4a0c      	ldr	r2, [pc, #48]	; (1c94 <xPortStartScheduler+0x38>)
    1c62:	447a      	add	r2, pc
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    1c64:	4b0c      	ldr	r3, [pc, #48]	; (1c98 <xPortStartScheduler+0x3c>)
    1c66:	6818      	ldr	r0, [r3, #0]
    1c68:	21ff      	movs	r1, #255	; 0xff
    1c6a:	0409      	lsls	r1, r1, #16
    1c6c:	4301      	orrs	r1, r0
    1c6e:	6019      	str	r1, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    1c70:	6818      	ldr	r0, [r3, #0]
    1c72:	21ff      	movs	r1, #255	; 0xff
    1c74:	0609      	lsls	r1, r1, #24
    1c76:	4301      	orrs	r1, r0
    1c78:	6019      	str	r1, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
    1c7a:	4b08      	ldr	r3, [pc, #32]	; (1c9c <xPortStartScheduler+0x40>)
    1c7c:	58d3      	ldr	r3, [r2, r3]
    1c7e:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    1c80:	2200      	movs	r2, #0
    1c82:	4b07      	ldr	r3, [pc, #28]	; (1ca0 <xPortStartScheduler+0x44>)
    1c84:	447b      	add	r3, pc
    1c86:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
    1c88:	4b06      	ldr	r3, [pc, #24]	; (1ca4 <xPortStartScheduler+0x48>)
    1c8a:	447b      	add	r3, pc
    1c8c:	4798      	blx	r3

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
    1c8e:	4b06      	ldr	r3, [pc, #24]	; (1ca8 <xPortStartScheduler+0x4c>)
    1c90:	447b      	add	r3, pc
    1c92:	4798      	blx	r3
    1c94:	00002aa6 	.word	0x00002aa6
    1c98:	e000ed20 	.word	0xe000ed20
    1c9c:	00000060 	.word	0x00000060
    1ca0:	1fffe378 	.word	0x1fffe378
    1ca4:	fffffe6b 	.word	0xfffffe6b
    1ca8:	fffffe4d 	.word	0xfffffe4d

00001cac <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    1cac:	b570      	push	{r4, r5, r6, lr}
    1cae:	b082      	sub	sp, #8
    1cb0:	1c05      	adds	r5, r0, #0
    1cb2:	4c18      	ldr	r4, [pc, #96]	; (1d14 <pvPortMalloc+0x68>)
    1cb4:	447c      	add	r4, pc
void *pvReturn = NULL;
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    1cb6:	0743      	lsls	r3, r0, #29
    1cb8:	d002      	beq.n	1cc0 <pvPortMalloc+0x14>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    1cba:	2307      	movs	r3, #7
    1cbc:	439d      	bics	r5, r3
    1cbe:	3508      	adds	r5, #8
		}
	#endif

	vTaskSuspendAll();
    1cc0:	4b15      	ldr	r3, [pc, #84]	; (1d18 <pvPortMalloc+0x6c>)
    1cc2:	58e3      	ldr	r3, [r4, r3]
    1cc4:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
    1cc6:	4b15      	ldr	r3, [pc, #84]	; (1d1c <pvPortMalloc+0x70>)
    1cc8:	447b      	add	r3, pc
    1cca:	681b      	ldr	r3, [r3, #0]
    1ccc:	2b00      	cmp	r3, #0
    1cce:	d106      	bne.n	1cde <pvPortMalloc+0x32>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
    1cd0:	4b13      	ldr	r3, [pc, #76]	; (1d20 <pvPortMalloc+0x74>)
    1cd2:	447b      	add	r3, pc
    1cd4:	1c1a      	adds	r2, r3, #0
    1cd6:	320c      	adds	r2, #12
    1cd8:	2107      	movs	r1, #7
    1cda:	438a      	bics	r2, r1
    1cdc:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    1cde:	4b11      	ldr	r3, [pc, #68]	; (1d24 <pvPortMalloc+0x78>)
    1ce0:	447b      	add	r3, pc
    1ce2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    1ce4:	18ed      	adds	r5, r5, r3
    1ce6:	4a10      	ldr	r2, [pc, #64]	; (1d28 <pvPortMalloc+0x7c>)
    1ce8:	4295      	cmp	r5, r2
    1cea:	d809      	bhi.n	1d00 <pvPortMalloc+0x54>
    1cec:	42ab      	cmp	r3, r5
    1cee:	d209      	bcs.n	1d04 <pvPortMalloc+0x58>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    1cf0:	4a0e      	ldr	r2, [pc, #56]	; (1d2c <pvPortMalloc+0x80>)
    1cf2:	447a      	add	r2, pc
    1cf4:	6816      	ldr	r6, [r2, #0]
    1cf6:	18f6      	adds	r6, r6, r3
			xNextFreeByte += xWantedSize;
    1cf8:	4b0d      	ldr	r3, [pc, #52]	; (1d30 <pvPortMalloc+0x84>)
    1cfa:	447b      	add	r3, pc
    1cfc:	675d      	str	r5, [r3, #116]	; 0x74
    1cfe:	e002      	b.n	1d06 <pvPortMalloc+0x5a>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
    1d00:	2600      	movs	r6, #0
    1d02:	e000      	b.n	1d06 <pvPortMalloc+0x5a>
    1d04:	2600      	movs	r6, #0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    1d06:	4b0b      	ldr	r3, [pc, #44]	; (1d34 <pvPortMalloc+0x88>)
    1d08:	58e3      	ldr	r3, [r4, r3]
    1d0a:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
    1d0c:	1c30      	adds	r0, r6, #0
    1d0e:	b002      	add	sp, #8
    1d10:	bd70      	pop	{r4, r5, r6, pc}
    1d12:	46c0      	nop			; (mov r8, r8)
    1d14:	00002a54 	.word	0x00002a54
    1d18:	000000f8 	.word	0x000000f8
    1d1c:	1fffe7c0 	.word	0x1fffe7c0
    1d20:	1fffe7b6 	.word	0x1fffe7b6
    1d24:	1ffffea8 	.word	0x1ffffea8
    1d28:	00001767 	.word	0x00001767
    1d2c:	1fffe796 	.word	0x1fffe796
    1d30:	1ffffe8e 	.word	0x1ffffe8e
    1d34:	0000019c 	.word	0x0000019c

00001d38 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
    1d38:	2800      	cmp	r0, #0
    1d3a:	d001      	beq.n	1d40 <vPortFree+0x8>
    1d3c:	b672      	cpsid	i
    1d3e:	e7fe      	b.n	1d3e <vPortFree+0x6>
}
    1d40:	4770      	bx	lr
    1d42:	46c0      	nop			; (mov r8, r8)

00001d44 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    1d44:	b570      	push	{r4, r5, r6, lr}
    1d46:	b082      	sub	sp, #8
    1d48:	1c04      	adds	r4, r0, #0
    1d4a:	1c16      	adds	r6, r2, #0
    1d4c:	4b1e      	ldr	r3, [pc, #120]	; (1dc8 <prvCopyDataToQueue+0x84>)
    1d4e:	447b      	add	r3, pc
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    1d50:	6c02      	ldr	r2, [r0, #64]	; 0x40
    1d52:	2a00      	cmp	r2, #0
    1d54:	d109      	bne.n	1d6a <prvCopyDataToQueue+0x26>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    1d56:	6800      	ldr	r0, [r0, #0]
    1d58:	2800      	cmp	r0, #0
    1d5a:	d12f      	bne.n	1dbc <prvCopyDataToQueue+0x78>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    1d5c:	6860      	ldr	r0, [r4, #4]
    1d5e:	4a1b      	ldr	r2, [pc, #108]	; (1dcc <prvCopyDataToQueue+0x88>)
    1d60:	589a      	ldr	r2, [r3, r2]
    1d62:	4790      	blx	r2
				pxQueue->pxMutexHolder = NULL;
    1d64:	2300      	movs	r3, #0
    1d66:	6063      	str	r3, [r4, #4]
    1d68:	e028      	b.n	1dbc <prvCopyDataToQueue+0x78>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    1d6a:	2e00      	cmp	r6, #0
    1d6c:	d10e      	bne.n	1d8c <prvCopyDataToQueue+0x48>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    1d6e:	6880      	ldr	r0, [r0, #8]
    1d70:	4d17      	ldr	r5, [pc, #92]	; (1dd0 <prvCopyDataToQueue+0x8c>)
    1d72:	595d      	ldr	r5, [r3, r5]
    1d74:	9501      	str	r5, [sp, #4]
    1d76:	47a8      	blx	r5
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    1d78:	68a1      	ldr	r1, [r4, #8]
    1d7a:	6c22      	ldr	r2, [r4, #64]	; 0x40
    1d7c:	188b      	adds	r3, r1, r2
    1d7e:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    1d80:	6860      	ldr	r0, [r4, #4]
    1d82:	4283      	cmp	r3, r0
    1d84:	d31a      	bcc.n	1dbc <prvCopyDataToQueue+0x78>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    1d86:	6821      	ldr	r1, [r4, #0]
    1d88:	60a1      	str	r1, [r4, #8]
    1d8a:	e017      	b.n	1dbc <prvCopyDataToQueue+0x78>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1d8c:	68c0      	ldr	r0, [r0, #12]
    1d8e:	4d10      	ldr	r5, [pc, #64]	; (1dd0 <prvCopyDataToQueue+0x8c>)
    1d90:	595d      	ldr	r5, [r3, r5]
    1d92:	9501      	str	r5, [sp, #4]
    1d94:	47a8      	blx	r5
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    1d96:	6c23      	ldr	r3, [r4, #64]	; 0x40
    1d98:	425a      	negs	r2, r3
    1d9a:	68e0      	ldr	r0, [r4, #12]
    1d9c:	1883      	adds	r3, r0, r2
    1d9e:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    1da0:	6821      	ldr	r1, [r4, #0]
    1da2:	428b      	cmp	r3, r1
    1da4:	d202      	bcs.n	1dac <prvCopyDataToQueue+0x68>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    1da6:	6863      	ldr	r3, [r4, #4]
    1da8:	189a      	adds	r2, r3, r2
    1daa:	60e2      	str	r2, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    1dac:	2e02      	cmp	r6, #2
    1dae:	d105      	bne.n	1dbc <prvCopyDataToQueue+0x78>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    1db0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1db2:	2b00      	cmp	r3, #0
    1db4:	d002      	beq.n	1dbc <prvCopyDataToQueue+0x78>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
    1db6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1db8:	3b01      	subs	r3, #1
    1dba:	63a3      	str	r3, [r4, #56]	; 0x38
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
    1dbc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1dbe:	3301      	adds	r3, #1
    1dc0:	63a3      	str	r3, [r4, #56]	; 0x38
}
    1dc2:	b002      	add	sp, #8
    1dc4:	bd70      	pop	{r4, r5, r6, pc}
    1dc6:	46c0      	nop			; (mov r8, r8)
    1dc8:	000029ba 	.word	0x000029ba
    1dcc:	0000010c 	.word	0x0000010c
    1dd0:	0000004c 	.word	0x0000004c

00001dd4 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
    1dd4:	b530      	push	{r4, r5, lr}
    1dd6:	b083      	sub	sp, #12
    1dd8:	9001      	str	r0, [sp, #4]
    1dda:	1c0a      	adds	r2, r1, #0
    1ddc:	4d11      	ldr	r5, [pc, #68]	; (1e24 <prvNotifyQueueSetContainer+0x50>)
    1dde:	447d      	add	r5, pc
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    1de0:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
    1de2:	2c00      	cmp	r4, #0
    1de4:	d101      	bne.n	1dea <prvNotifyQueueSetContainer+0x16>
    1de6:	b672      	cpsid	i
    1de8:	e7fe      	b.n	1de8 <prvNotifyQueueSetContainer+0x14>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
    1dea:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    1dec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    1dee:	4299      	cmp	r1, r3
    1df0:	d301      	bcc.n	1df6 <prvNotifyQueueSetContainer+0x22>
    1df2:	b672      	cpsid	i
    1df4:	e7fe      	b.n	1df4 <prvNotifyQueueSetContainer+0x20>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    1df6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
	BaseType_t xReturn = pdFALSE;
    1df8:	2000      	movs	r0, #0
		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    1dfa:	428b      	cmp	r3, r1
    1dfc:	d90f      	bls.n	1e1e <prvNotifyQueueSetContainer+0x4a>
		{
			traceQUEUE_SEND( pxQueueSetContainer );
			/* The data copies is the handle of the queue that contains data. */
			prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
    1dfe:	1c20      	adds	r0, r4, #0
    1e00:	a901      	add	r1, sp, #4
    1e02:	4b09      	ldr	r3, [pc, #36]	; (1e28 <prvNotifyQueueSetContainer+0x54>)
    1e04:	447b      	add	r3, pc
    1e06:	4798      	blx	r3
#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
	BaseType_t xReturn = pdFALSE;
    1e08:	2000      	movs	r0, #0
		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
		{
			traceQUEUE_SEND( pxQueueSetContainer );
			/* The data copies is the handle of the queue that contains data. */
			prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
			if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
    1e0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1e0c:	2b00      	cmp	r3, #0
    1e0e:	d006      	beq.n	1e1e <prvNotifyQueueSetContainer+0x4a>
			{
				if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
    1e10:	1c20      	adds	r0, r4, #0
    1e12:	3024      	adds	r0, #36	; 0x24
    1e14:	4b05      	ldr	r3, [pc, #20]	; (1e2c <prvNotifyQueueSetContainer+0x58>)
    1e16:	58eb      	ldr	r3, [r5, r3]
    1e18:	4798      	blx	r3
#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
	BaseType_t xReturn = pdFALSE;
    1e1a:	1e43      	subs	r3, r0, #1
    1e1c:	4198      	sbcs	r0, r3
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
    1e1e:	b003      	add	sp, #12
    1e20:	bd30      	pop	{r4, r5, pc}
    1e22:	46c0      	nop			; (mov r8, r8)
    1e24:	0000292a 	.word	0x0000292a
    1e28:	ffffff3d 	.word	0xffffff3d
    1e2c:	000000d8 	.word	0x000000d8

00001e30 <prvCopyDataFromQueue>:
	++( pxQueue->uxMessagesWaiting );
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    1e30:	b570      	push	{r4, r5, r6, lr}
    1e32:	b082      	sub	sp, #8
    1e34:	4b0a      	ldr	r3, [pc, #40]	; (1e60 <prvCopyDataFromQueue+0x30>)
    1e36:	447b      	add	r3, pc
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    1e38:	6805      	ldr	r5, [r0, #0]
    1e3a:	2d00      	cmp	r5, #0
    1e3c:	d00d      	beq.n	1e5a <prvCopyDataFromQueue+0x2a>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    1e3e:	6c02      	ldr	r2, [r0, #64]	; 0x40
    1e40:	68c6      	ldr	r6, [r0, #12]
    1e42:	18b4      	adds	r4, r6, r2
    1e44:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    1e46:	6846      	ldr	r6, [r0, #4]
    1e48:	42b4      	cmp	r4, r6
    1e4a:	d300      	bcc.n	1e4e <prvCopyDataFromQueue+0x1e>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    1e4c:	60c5      	str	r5, [r0, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    1e4e:	68c4      	ldr	r4, [r0, #12]
    1e50:	1c08      	adds	r0, r1, #0
    1e52:	1c21      	adds	r1, r4, #0
    1e54:	4c03      	ldr	r4, [pc, #12]	; (1e64 <prvCopyDataFromQueue+0x34>)
    1e56:	591c      	ldr	r4, [r3, r4]
    1e58:	47a0      	blx	r4
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    1e5a:	b002      	add	sp, #8
    1e5c:	bd70      	pop	{r4, r5, r6, pc}
    1e5e:	46c0      	nop			; (mov r8, r8)
    1e60:	000028d2 	.word	0x000028d2
    1e64:	0000004c 	.word	0x0000004c

00001e68 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    1e68:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e6a:	b083      	sub	sp, #12
    1e6c:	1c04      	adds	r4, r0, #0
    1e6e:	4d2b      	ldr	r5, [pc, #172]	; (1f1c <prvUnlockQueue+0xb4>)
    1e70:	447d      	add	r5, pc

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    1e72:	4b2b      	ldr	r3, [pc, #172]	; (1f20 <prvUnlockQueue+0xb8>)
    1e74:	58eb      	ldr	r3, [r5, r3]
    1e76:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    1e78:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    1e7a:	2b00      	cmp	r3, #0
    1e7c:	dd21      	ble.n	1ec2 <prvUnlockQueue+0x5a>
				{
					/* Tasks that are removed from the event list will get added to
					the pending ready list as the scheduler is still suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1e7e:	1c27      	adds	r7, r4, #0
    1e80:	3724      	adds	r7, #36	; 0x24
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
    1e82:	4e28      	ldr	r6, [pc, #160]	; (1f24 <prvUnlockQueue+0xbc>)
    1e84:	447e      	add	r6, pc
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
    1e86:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    1e88:	2b00      	cmp	r3, #0
    1e8a:	d008      	beq.n	1e9e <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
    1e8c:	1c20      	adds	r0, r4, #0
    1e8e:	2100      	movs	r1, #0
    1e90:	47b0      	blx	r6
    1e92:	2801      	cmp	r0, #1
    1e94:	d10f      	bne.n	1eb6 <prvUnlockQueue+0x4e>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
    1e96:	4b24      	ldr	r3, [pc, #144]	; (1f28 <prvUnlockQueue+0xc0>)
    1e98:	58eb      	ldr	r3, [r5, r3]
    1e9a:	4798      	blx	r3
    1e9c:	e00b      	b.n	1eb6 <prvUnlockQueue+0x4e>
				}
				else
				{
					/* Tasks that are removed from the event list will get added to
					the pending ready list as the scheduler is still suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1e9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1ea0:	2b00      	cmp	r3, #0
    1ea2:	d00e      	beq.n	1ec2 <prvUnlockQueue+0x5a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1ea4:	1c38      	adds	r0, r7, #0
    1ea6:	4b21      	ldr	r3, [pc, #132]	; (1f2c <prvUnlockQueue+0xc4>)
    1ea8:	58eb      	ldr	r3, [r5, r3]
    1eaa:	4798      	blx	r3
    1eac:	2800      	cmp	r0, #0
    1eae:	d002      	beq.n	1eb6 <prvUnlockQueue+0x4e>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
    1eb0:	4b1d      	ldr	r3, [pc, #116]	; (1f28 <prvUnlockQueue+0xc0>)
    1eb2:	58eb      	ldr	r3, [r5, r3]
    1eb4:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
    1eb6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    1eb8:	3b01      	subs	r3, #1
    1eba:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    1ebc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    1ebe:	2b00      	cmp	r3, #0
    1ec0:	dce1      	bgt.n	1e86 <prvUnlockQueue+0x1e>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
    1ec2:	2301      	movs	r3, #1
    1ec4:	425b      	negs	r3, r3
    1ec6:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
    1ec8:	4b19      	ldr	r3, [pc, #100]	; (1f30 <prvUnlockQueue+0xc8>)
    1eca:	58eb      	ldr	r3, [r5, r3]
    1ecc:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    1ece:	4b14      	ldr	r3, [pc, #80]	; (1f20 <prvUnlockQueue+0xb8>)
    1ed0:	58eb      	ldr	r3, [r5, r3]
    1ed2:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    1ed4:	6c63      	ldr	r3, [r4, #68]	; 0x44
    1ed6:	2b00      	cmp	r3, #0
    1ed8:	dd17      	ble.n	1f0a <prvUnlockQueue+0xa2>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1eda:	6923      	ldr	r3, [r4, #16]
    1edc:	2b00      	cmp	r3, #0
    1ede:	d014      	beq.n	1f0a <prvUnlockQueue+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1ee0:	1c27      	adds	r7, r4, #0
    1ee2:	3710      	adds	r7, #16
    1ee4:	4b11      	ldr	r3, [pc, #68]	; (1f2c <prvUnlockQueue+0xc4>)
    1ee6:	58ee      	ldr	r6, [r5, r3]
    1ee8:	e002      	b.n	1ef0 <prvUnlockQueue+0x88>
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1eea:	6923      	ldr	r3, [r4, #16]
    1eec:	2b00      	cmp	r3, #0
    1eee:	d00c      	beq.n	1f0a <prvUnlockQueue+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1ef0:	1c38      	adds	r0, r7, #0
    1ef2:	47b0      	blx	r6
    1ef4:	2800      	cmp	r0, #0
    1ef6:	d002      	beq.n	1efe <prvUnlockQueue+0x96>
				{
					vTaskMissedYield();
    1ef8:	4b0b      	ldr	r3, [pc, #44]	; (1f28 <prvUnlockQueue+0xc0>)
    1efa:	58eb      	ldr	r3, [r5, r3]
    1efc:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
    1efe:	6c63      	ldr	r3, [r4, #68]	; 0x44
    1f00:	3b01      	subs	r3, #1
    1f02:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    1f04:	6c63      	ldr	r3, [r4, #68]	; 0x44
    1f06:	2b00      	cmp	r3, #0
    1f08:	dcef      	bgt.n	1eea <prvUnlockQueue+0x82>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    1f0a:	2301      	movs	r3, #1
    1f0c:	425b      	negs	r3, r3
    1f0e:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    1f10:	4b07      	ldr	r3, [pc, #28]	; (1f30 <prvUnlockQueue+0xc8>)
    1f12:	58eb      	ldr	r3, [r5, r3]
    1f14:	4798      	blx	r3
}
    1f16:	b003      	add	sp, #12
    1f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f1a:	46c0      	nop			; (mov r8, r8)
    1f1c:	00002898 	.word	0x00002898
    1f20:	00000218 	.word	0x00000218
    1f24:	ffffff4d 	.word	0xffffff4d
    1f28:	000001bc 	.word	0x000001bc
    1f2c:	000000d8 	.word	0x000000d8
    1f30:	0000000c 	.word	0x0000000c

00001f34 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    1f34:	b570      	push	{r4, r5, r6, lr}
    1f36:	b082      	sub	sp, #8
    1f38:	1c04      	adds	r4, r0, #0
    1f3a:	1c0e      	adds	r6, r1, #0
    1f3c:	4d1b      	ldr	r5, [pc, #108]	; (1fac <xQueueGenericReset+0x78>)
    1f3e:	447d      	add	r5, pc
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
    1f40:	2800      	cmp	r0, #0
    1f42:	d101      	bne.n	1f48 <xQueueGenericReset+0x14>
    1f44:	b672      	cpsid	i
    1f46:	e7fe      	b.n	1f46 <xQueueGenericReset+0x12>

	taskENTER_CRITICAL();
    1f48:	4b19      	ldr	r3, [pc, #100]	; (1fb0 <xQueueGenericReset+0x7c>)
    1f4a:	58eb      	ldr	r3, [r5, r3]
    1f4c:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    1f4e:	6823      	ldr	r3, [r4, #0]
    1f50:	6c22      	ldr	r2, [r4, #64]	; 0x40
    1f52:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    1f54:	4350      	muls	r0, r2
    1f56:	1819      	adds	r1, r3, r0
    1f58:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    1f5a:	2100      	movs	r1, #0
    1f5c:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    1f5e:	60a3      	str	r3, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    1f60:	1a82      	subs	r2, r0, r2
    1f62:	189b      	adds	r3, r3, r2
    1f64:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
    1f66:	2301      	movs	r3, #1
    1f68:	425b      	negs	r3, r3
    1f6a:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
    1f6c:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
    1f6e:	2e00      	cmp	r6, #0
    1f70:	d10d      	bne.n	1f8e <xQueueGenericReset+0x5a>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1f72:	6921      	ldr	r1, [r4, #16]
    1f74:	2900      	cmp	r1, #0
    1f76:	d012      	beq.n	1f9e <xQueueGenericReset+0x6a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    1f78:	1c20      	adds	r0, r4, #0
    1f7a:	3010      	adds	r0, #16
    1f7c:	4b0d      	ldr	r3, [pc, #52]	; (1fb4 <xQueueGenericReset+0x80>)
    1f7e:	58eb      	ldr	r3, [r5, r3]
    1f80:	4798      	blx	r3
    1f82:	2801      	cmp	r0, #1
    1f84:	d10b      	bne.n	1f9e <xQueueGenericReset+0x6a>
				{
					queueYIELD_IF_USING_PREEMPTION();
    1f86:	4b0c      	ldr	r3, [pc, #48]	; (1fb8 <xQueueGenericReset+0x84>)
    1f88:	58eb      	ldr	r3, [r5, r3]
    1f8a:	4798      	blx	r3
    1f8c:	e007      	b.n	1f9e <xQueueGenericReset+0x6a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    1f8e:	1c20      	adds	r0, r4, #0
    1f90:	3010      	adds	r0, #16
    1f92:	4b0a      	ldr	r3, [pc, #40]	; (1fbc <xQueueGenericReset+0x88>)
    1f94:	58ee      	ldr	r6, [r5, r3]
    1f96:	47b0      	blx	r6
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    1f98:	1c20      	adds	r0, r4, #0
    1f9a:	3024      	adds	r0, #36	; 0x24
    1f9c:	47b0      	blx	r6
		}
	}
	taskEXIT_CRITICAL();
    1f9e:	4b08      	ldr	r3, [pc, #32]	; (1fc0 <xQueueGenericReset+0x8c>)
    1fa0:	58eb      	ldr	r3, [r5, r3]
    1fa2:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
    1fa4:	2001      	movs	r0, #1
    1fa6:	b002      	add	sp, #8
    1fa8:	bd70      	pop	{r4, r5, r6, pc}
    1faa:	46c0      	nop			; (mov r8, r8)
    1fac:	000027ca 	.word	0x000027ca
    1fb0:	00000218 	.word	0x00000218
    1fb4:	000000d8 	.word	0x000000d8
    1fb8:	00000144 	.word	0x00000144
    1fbc:	000000b4 	.word	0x000000b4
    1fc0:	0000000c 	.word	0x0000000c

00001fc4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
    1fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1fc6:	b083      	sub	sp, #12
    1fc8:	1c06      	adds	r6, r0, #0
    1fca:	1c0f      	adds	r7, r1, #0
    1fcc:	4d13      	ldr	r5, [pc, #76]	; (201c <STACK_SIZE+0x1c>)
    1fce:	447d      	add	r5, pc
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( UBaseType_t ) 0 )
    1fd0:	2800      	cmp	r0, #0
    1fd2:	d014      	beq.n	1ffe <xQueueGenericCreate+0x3a>
	{
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
    1fd4:	2050      	movs	r0, #80	; 0x50
    1fd6:	4b12      	ldr	r3, [pc, #72]	; (2020 <STACK_SIZE+0x20>)
    1fd8:	58eb      	ldr	r3, [r5, r3]
    1fda:	4798      	blx	r3
    1fdc:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
    1fde:	d00e      	beq.n	1ffe <xQueueGenericCreate+0x3a>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1fe0:	1c38      	adds	r0, r7, #0
    1fe2:	4370      	muls	r0, r6
    1fe4:	3001      	adds	r0, #1

			pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
    1fe6:	4b0e      	ldr	r3, [pc, #56]	; (2020 <STACK_SIZE+0x20>)
    1fe8:	58eb      	ldr	r3, [r5, r3]
    1fea:	4798      	blx	r3
    1fec:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
    1fee:	2800      	cmp	r0, #0
    1ff0:	d107      	bne.n	2002 <STACK_SIZE+0x2>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
    1ff2:	1c20      	adds	r0, r4, #0
    1ff4:	4b0b      	ldr	r3, [pc, #44]	; (2024 <STACK_SIZE+0x24>)
    1ff6:	58eb      	ldr	r3, [r5, r3]
    1ff8:	4798      	blx	r3
    1ffa:	e000      	b.n	1ffe <xQueueGenericCreate+0x3a>
    1ffc:	e7fe      	b.n	1ffc <xQueueGenericCreate+0x38>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
    1ffe:	b672      	cpsid	i
    2000:	e7fc      	b.n	1ffc <xQueueGenericCreate+0x38>
			pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
    2002:	63e6      	str	r6, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
    2004:	6427      	str	r7, [r4, #64]	; 0x40
				( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    2006:	1c20      	adds	r0, r4, #0
    2008:	2101      	movs	r1, #1
    200a:	4b07      	ldr	r3, [pc, #28]	; (2028 <STACK_SIZE+0x28>)
    200c:	58eb      	ldr	r3, [r5, r3]
    200e:	4798      	blx	r3
				}
				#endif /* configUSE_TRACE_FACILITY */

				#if( configUSE_QUEUE_SETS == 1 )
				{
					pxNewQueue->pxQueueSetContainer = NULL;
    2010:	2300      	movs	r3, #0
    2012:	64e3      	str	r3, [r4, #76]	; 0x4c
	}

	configASSERT( xReturn );

	return xReturn;
}
    2014:	1c20      	adds	r0, r4, #0
    2016:	b003      	add	sp, #12
    2018:	bdf0      	pop	{r4, r5, r6, r7, pc}
    201a:	46c0      	nop			; (mov r8, r8)
    201c:	0000273a 	.word	0x0000273a
    2020:	000000ac 	.word	0x000000ac
    2024:	00000068 	.word	0x00000068
    2028:	000001e0 	.word	0x000001e0

0000202c <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    202c:	b5f0      	push	{r4, r5, r6, r7, lr}
    202e:	465f      	mov	r7, fp
    2030:	4656      	mov	r6, sl
    2032:	464d      	mov	r5, r9
    2034:	4644      	mov	r4, r8
    2036:	b4f0      	push	{r4, r5, r6, r7}
    2038:	b087      	sub	sp, #28
    203a:	1c05      	adds	r5, r0, #0
    203c:	1c0f      	adds	r7, r1, #0
    203e:	9203      	str	r2, [sp, #12]
    2040:	1c1e      	adds	r6, r3, #0
    2042:	4c5c      	ldr	r4, [pc, #368]	; (21b4 <xQueueGenericSend+0x188>)
    2044:	447c      	add	r4, pc
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
    2046:	2800      	cmp	r0, #0
    2048:	d101      	bne.n	204e <xQueueGenericSend+0x22>
    204a:	b672      	cpsid	i
    204c:	e7fe      	b.n	204c <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    204e:	2900      	cmp	r1, #0
    2050:	d104      	bne.n	205c <xQueueGenericSend+0x30>
    2052:	6c02      	ldr	r2, [r0, #64]	; 0x40
    2054:	2a00      	cmp	r2, #0
    2056:	d001      	beq.n	205c <xQueueGenericSend+0x30>
    2058:	b672      	cpsid	i
    205a:	e7fe      	b.n	205a <xQueueGenericSend+0x2e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    205c:	2e02      	cmp	r6, #2
    205e:	d104      	bne.n	206a <xQueueGenericSend+0x3e>
    2060:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    2062:	2b01      	cmp	r3, #1
    2064:	d001      	beq.n	206a <xQueueGenericSend+0x3e>
    2066:	b672      	cpsid	i
    2068:	e7fe      	b.n	2068 <xQueueGenericSend+0x3c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    206a:	4b53      	ldr	r3, [pc, #332]	; (21b8 <xQueueGenericSend+0x18c>)
    206c:	58e3      	ldr	r3, [r4, r3]
    206e:	4798      	blx	r3
    2070:	2800      	cmp	r0, #0
    2072:	d102      	bne.n	207a <xQueueGenericSend+0x4e>
    2074:	9a03      	ldr	r2, [sp, #12]
    2076:	2a00      	cmp	r2, #0
    2078:	d107      	bne.n	208a <xQueueGenericSend+0x5e>

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    207a:	2300      	movs	r3, #0
    207c:	4699      	mov	r9, r3
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    207e:	4b4f      	ldr	r3, [pc, #316]	; (21bc <xQueueGenericSend+0x190>)
    2080:	58e3      	ldr	r3, [r4, r3]
    2082:	9302      	str	r3, [sp, #8]
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    2084:	aa04      	add	r2, sp, #16
    2086:	4690      	mov	r8, r2
    2088:	e001      	b.n	208e <xQueueGenericSend+0x62>
	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    208a:	b672      	cpsid	i
    208c:	e7fe      	b.n	208c <xQueueGenericSend+0x60>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    208e:	9b02      	ldr	r3, [sp, #8]
    2090:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    2092:	6bab      	ldr	r3, [r5, #56]	; 0x38
    2094:	6bea      	ldr	r2, [r5, #60]	; 0x3c
    2096:	4293      	cmp	r3, r2
    2098:	d301      	bcc.n	209e <xQueueGenericSend+0x72>
    209a:	2e02      	cmp	r6, #2
    209c:	d125      	bne.n	20ea <xQueueGenericSend+0xbe>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    209e:	1c28      	adds	r0, r5, #0
    20a0:	1c39      	adds	r1, r7, #0
    20a2:	1c32      	adds	r2, r6, #0
    20a4:	4b46      	ldr	r3, [pc, #280]	; (21c0 <xQueueGenericSend+0x194>)
    20a6:	447b      	add	r3, pc
    20a8:	4798      	blx	r3

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    20aa:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    20ac:	2b00      	cmp	r3, #0
    20ae:	d00a      	beq.n	20c6 <xQueueGenericSend+0x9a>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
    20b0:	1c28      	adds	r0, r5, #0
    20b2:	1c31      	adds	r1, r6, #0
    20b4:	4b43      	ldr	r3, [pc, #268]	; (21c4 <xQueueGenericSend+0x198>)
    20b6:	447b      	add	r3, pc
    20b8:	4798      	blx	r3
    20ba:	2801      	cmp	r0, #1
    20bc:	d110      	bne.n	20e0 <xQueueGenericSend+0xb4>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
    20be:	4b42      	ldr	r3, [pc, #264]	; (21c8 <xQueueGenericSend+0x19c>)
    20c0:	58e3      	ldr	r3, [r4, r3]
    20c2:	4798      	blx	r3
    20c4:	e00c      	b.n	20e0 <xQueueGenericSend+0xb4>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    20c6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    20c8:	2a00      	cmp	r2, #0
    20ca:	d009      	beq.n	20e0 <xQueueGenericSend+0xb4>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    20cc:	1c28      	adds	r0, r5, #0
    20ce:	3024      	adds	r0, #36	; 0x24
    20d0:	4b3e      	ldr	r3, [pc, #248]	; (21cc <xQueueGenericSend+0x1a0>)
    20d2:	58e3      	ldr	r3, [r4, r3]
    20d4:	4798      	blx	r3
    20d6:	2801      	cmp	r0, #1
    20d8:	d102      	bne.n	20e0 <xQueueGenericSend+0xb4>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
    20da:	4b3b      	ldr	r3, [pc, #236]	; (21c8 <xQueueGenericSend+0x19c>)
    20dc:	58e3      	ldr	r3, [r4, r3]
    20de:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    20e0:	4b3b      	ldr	r3, [pc, #236]	; (21d0 <xQueueGenericSend+0x1a4>)
    20e2:	58e3      	ldr	r3, [r4, r3]
    20e4:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    20e6:	2001      	movs	r0, #1
    20e8:	e05d      	b.n	21a6 <xQueueGenericSend+0x17a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    20ea:	9b03      	ldr	r3, [sp, #12]
    20ec:	2b00      	cmp	r3, #0
    20ee:	d104      	bne.n	20fa <xQueueGenericSend+0xce>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    20f0:	4b37      	ldr	r3, [pc, #220]	; (21d0 <xQueueGenericSend+0x1a4>)
    20f2:	58e3      	ldr	r3, [r4, r3]
    20f4:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    20f6:	2000      	movs	r0, #0
    20f8:	e055      	b.n	21a6 <xQueueGenericSend+0x17a>
				}
				else if( xEntryTimeSet == pdFALSE )
    20fa:	464a      	mov	r2, r9
    20fc:	2a00      	cmp	r2, #0
    20fe:	d105      	bne.n	210c <xQueueGenericSend+0xe0>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    2100:	4640      	mov	r0, r8
    2102:	4b34      	ldr	r3, [pc, #208]	; (21d4 <xQueueGenericSend+0x1a8>)
    2104:	58e3      	ldr	r3, [r4, r3]
    2106:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    2108:	2301      	movs	r3, #1
    210a:	4699      	mov	r9, r3
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    210c:	4b30      	ldr	r3, [pc, #192]	; (21d0 <xQueueGenericSend+0x1a4>)
    210e:	58e3      	ldr	r3, [r4, r3]
    2110:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    2112:	4b31      	ldr	r3, [pc, #196]	; (21d8 <xQueueGenericSend+0x1ac>)
    2114:	58e3      	ldr	r3, [r4, r3]
    2116:	4798      	blx	r3
		prvLockQueue( pxQueue );
    2118:	4b28      	ldr	r3, [pc, #160]	; (21bc <xQueueGenericSend+0x190>)
    211a:	58e3      	ldr	r3, [r4, r3]
    211c:	4798      	blx	r3
    211e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    2120:	3301      	adds	r3, #1
    2122:	d101      	bne.n	2128 <xQueueGenericSend+0xfc>
    2124:	2300      	movs	r3, #0
    2126:	646b      	str	r3, [r5, #68]	; 0x44
    2128:	6cab      	ldr	r3, [r5, #72]	; 0x48
    212a:	3301      	adds	r3, #1
    212c:	d101      	bne.n	2132 <xQueueGenericSend+0x106>
    212e:	2300      	movs	r3, #0
    2130:	64ab      	str	r3, [r5, #72]	; 0x48
    2132:	4b27      	ldr	r3, [pc, #156]	; (21d0 <xQueueGenericSend+0x1a4>)
    2134:	58e3      	ldr	r3, [r4, r3]
    2136:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2138:	4640      	mov	r0, r8
    213a:	a903      	add	r1, sp, #12
    213c:	4b27      	ldr	r3, [pc, #156]	; (21dc <xQueueGenericSend+0x1b0>)
    213e:	58e3      	ldr	r3, [r4, r3]
    2140:	4798      	blx	r3
    2142:	2800      	cmp	r0, #0
    2144:	d127      	bne.n	2196 <xQueueGenericSend+0x16a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    2146:	4b1d      	ldr	r3, [pc, #116]	; (21bc <xQueueGenericSend+0x190>)
    2148:	58e3      	ldr	r3, [r4, r3]
    214a:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    214c:	6baa      	ldr	r2, [r5, #56]	; 0x38
    214e:	4693      	mov	fp, r2
    2150:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    2152:	469a      	mov	sl, r3
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    2154:	4b1e      	ldr	r3, [pc, #120]	; (21d0 <xQueueGenericSend+0x1a4>)
    2156:	58e3      	ldr	r3, [r4, r3]
    2158:	4798      	blx	r3
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    215a:	45d3      	cmp	fp, sl
    215c:	d113      	bne.n	2186 <xQueueGenericSend+0x15a>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    215e:	1c28      	adds	r0, r5, #0
    2160:	3010      	adds	r0, #16
    2162:	9903      	ldr	r1, [sp, #12]
    2164:	4b1e      	ldr	r3, [pc, #120]	; (21e0 <xQueueGenericSend+0x1b4>)
    2166:	58e3      	ldr	r3, [r4, r3]
    2168:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    216a:	1c28      	adds	r0, r5, #0
    216c:	4b1d      	ldr	r3, [pc, #116]	; (21e4 <xQueueGenericSend+0x1b8>)
    216e:	447b      	add	r3, pc
    2170:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    2172:	4b1d      	ldr	r3, [pc, #116]	; (21e8 <xQueueGenericSend+0x1bc>)
    2174:	58e3      	ldr	r3, [r4, r3]
    2176:	4798      	blx	r3
    2178:	2800      	cmp	r0, #0
    217a:	d000      	beq.n	217e <xQueueGenericSend+0x152>
    217c:	e787      	b.n	208e <xQueueGenericSend+0x62>
				{
					portYIELD_WITHIN_API();
    217e:	4b12      	ldr	r3, [pc, #72]	; (21c8 <xQueueGenericSend+0x19c>)
    2180:	58e3      	ldr	r3, [r4, r3]
    2182:	4798      	blx	r3
    2184:	e783      	b.n	208e <xQueueGenericSend+0x62>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    2186:	1c28      	adds	r0, r5, #0
    2188:	4b18      	ldr	r3, [pc, #96]	; (21ec <xQueueGenericSend+0x1c0>)
    218a:	447b      	add	r3, pc
    218c:	4798      	blx	r3
				( void ) xTaskResumeAll();
    218e:	4b16      	ldr	r3, [pc, #88]	; (21e8 <xQueueGenericSend+0x1bc>)
    2190:	58e3      	ldr	r3, [r4, r3]
    2192:	4798      	blx	r3
    2194:	e77b      	b.n	208e <xQueueGenericSend+0x62>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    2196:	1c28      	adds	r0, r5, #0
    2198:	4b15      	ldr	r3, [pc, #84]	; (21f0 <xQueueGenericSend+0x1c4>)
    219a:	447b      	add	r3, pc
    219c:	4798      	blx	r3
			( void ) xTaskResumeAll();
    219e:	4b12      	ldr	r3, [pc, #72]	; (21e8 <xQueueGenericSend+0x1bc>)
    21a0:	58e3      	ldr	r3, [r4, r3]
    21a2:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    21a4:	2000      	movs	r0, #0
		}
	}
}
    21a6:	b007      	add	sp, #28
    21a8:	bc3c      	pop	{r2, r3, r4, r5}
    21aa:	4690      	mov	r8, r2
    21ac:	4699      	mov	r9, r3
    21ae:	46a2      	mov	sl, r4
    21b0:	46ab      	mov	fp, r5
    21b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    21b4:	000026c4 	.word	0x000026c4
    21b8:	000001f8 	.word	0x000001f8
    21bc:	00000218 	.word	0x00000218
    21c0:	fffffc9b 	.word	0xfffffc9b
    21c4:	fffffd1b 	.word	0xfffffd1b
    21c8:	00000144 	.word	0x00000144
    21cc:	000000d8 	.word	0x000000d8
    21d0:	0000000c 	.word	0x0000000c
    21d4:	00000214 	.word	0x00000214
    21d8:	000000f8 	.word	0x000000f8
    21dc:	000000f0 	.word	0x000000f0
    21e0:	00000050 	.word	0x00000050
    21e4:	fffffcf7 	.word	0xfffffcf7
    21e8:	0000019c 	.word	0x0000019c
    21ec:	fffffcdb 	.word	0xfffffcdb
    21f0:	fffffccb 	.word	0xfffffccb

000021f4 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    21f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    21f6:	464f      	mov	r7, r9
    21f8:	4646      	mov	r6, r8
    21fa:	b4c0      	push	{r6, r7}
    21fc:	b083      	sub	sp, #12
    21fe:	1c04      	adds	r4, r0, #0
    2200:	4689      	mov	r9, r1
    2202:	1c17      	adds	r7, r2, #0
    2204:	1c1d      	adds	r5, r3, #0
    2206:	4e30      	ldr	r6, [pc, #192]	; (22c8 <xQueueGenericSendFromISR+0xd4>)
    2208:	447e      	add	r6, pc
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
    220a:	2800      	cmp	r0, #0
    220c:	d101      	bne.n	2212 <xQueueGenericSendFromISR+0x1e>
    220e:	b672      	cpsid	i
    2210:	e7fe      	b.n	2210 <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    2212:	2900      	cmp	r1, #0
    2214:	d104      	bne.n	2220 <xQueueGenericSendFromISR+0x2c>
    2216:	6c03      	ldr	r3, [r0, #64]	; 0x40
    2218:	2b00      	cmp	r3, #0
    221a:	d001      	beq.n	2220 <xQueueGenericSendFromISR+0x2c>
    221c:	b672      	cpsid	i
    221e:	e7fe      	b.n	221e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    2220:	2d02      	cmp	r5, #2
    2222:	d136      	bne.n	2292 <xQueueGenericSendFromISR+0x9e>
    2224:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    2226:	2a01      	cmp	r2, #1
    2228:	d03d      	beq.n	22a6 <xQueueGenericSendFromISR+0xb2>
    222a:	b672      	cpsid	i
    222c:	e7fe      	b.n	222c <xQueueGenericSendFromISR+0x38>
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    222e:	1c20      	adds	r0, r4, #0
    2230:	4649      	mov	r1, r9
    2232:	1c2a      	adds	r2, r5, #0
    2234:	4b25      	ldr	r3, [pc, #148]	; (22cc <xQueueGenericSendFromISR+0xd8>)
    2236:	447b      	add	r3, pc
    2238:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    223a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    223c:	3301      	adds	r3, #1
    223e:	d11f      	bne.n	2280 <xQueueGenericSendFromISR+0x8c>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    2240:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    2242:	2b00      	cmp	r3, #0
    2244:	d00c      	beq.n	2260 <xQueueGenericSendFromISR+0x6c>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
    2246:	1c20      	adds	r0, r4, #0
    2248:	1c29      	adds	r1, r5, #0
    224a:	4b21      	ldr	r3, [pc, #132]	; (22d0 <xQueueGenericSendFromISR+0xdc>)
    224c:	447b      	add	r3, pc
    224e:	4798      	blx	r3
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
    2250:	2501      	movs	r5, #1
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
    2252:	2801      	cmp	r0, #1
    2254:	d12d      	bne.n	22b2 <xQueueGenericSendFromISR+0xbe>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    2256:	2f00      	cmp	r7, #0
    2258:	d017      	beq.n	228a <xQueueGenericSendFromISR+0x96>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    225a:	2301      	movs	r3, #1
    225c:	603b      	str	r3, [r7, #0]
    225e:	e028      	b.n	22b2 <xQueueGenericSendFromISR+0xbe>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
    2260:	2501      	movs	r5, #1
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2262:	6a62      	ldr	r2, [r4, #36]	; 0x24
    2264:	2a00      	cmp	r2, #0
    2266:	d024      	beq.n	22b2 <xQueueGenericSendFromISR+0xbe>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2268:	1c20      	adds	r0, r4, #0
    226a:	3024      	adds	r0, #36	; 0x24
    226c:	4b19      	ldr	r3, [pc, #100]	; (22d4 <xQueueGenericSendFromISR+0xe0>)
    226e:	58f3      	ldr	r3, [r6, r3]
    2270:	4798      	blx	r3
    2272:	2800      	cmp	r0, #0
    2274:	d01d      	beq.n	22b2 <xQueueGenericSendFromISR+0xbe>
							{
								/* The task waiting has a higher priority so record that a
								context	switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
    2276:	2f00      	cmp	r7, #0
    2278:	d009      	beq.n	228e <xQueueGenericSendFromISR+0x9a>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
    227a:	2301      	movs	r3, #1
    227c:	603b      	str	r3, [r7, #0]
    227e:	e018      	b.n	22b2 <xQueueGenericSendFromISR+0xbe>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    2280:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    2282:	3301      	adds	r3, #1
    2284:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
    2286:	2501      	movs	r5, #1
    2288:	e013      	b.n	22b2 <xQueueGenericSendFromISR+0xbe>
    228a:	2501      	movs	r5, #1
    228c:	e011      	b.n	22b2 <xQueueGenericSendFromISR+0xbe>
    228e:	2501      	movs	r5, #1
    2290:	e00f      	b.n	22b2 <xQueueGenericSendFromISR+0xbe>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    2292:	4b11      	ldr	r3, [pc, #68]	; (22d8 <xQueueGenericSendFromISR+0xe4>)
    2294:	58f3      	ldr	r3, [r6, r3]
    2296:	4798      	blx	r3
    2298:	4680      	mov	r8, r0
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    229a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    229c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    229e:	4293      	cmp	r3, r2
    22a0:	d3c5      	bcc.n	222e <xQueueGenericSendFromISR+0x3a>
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    22a2:	2500      	movs	r5, #0
    22a4:	e005      	b.n	22b2 <xQueueGenericSendFromISR+0xbe>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    22a6:	4b0c      	ldr	r3, [pc, #48]	; (22d8 <xQueueGenericSendFromISR+0xe4>)
    22a8:	58f3      	ldr	r3, [r6, r3]
    22aa:	4798      	blx	r3
    22ac:	4680      	mov	r8, r0
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    22ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    22b0:	e7bd      	b.n	222e <xQueueGenericSendFromISR+0x3a>
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    22b2:	4640      	mov	r0, r8
    22b4:	4b09      	ldr	r3, [pc, #36]	; (22dc <xQueueGenericSendFromISR+0xe8>)
    22b6:	58f3      	ldr	r3, [r6, r3]
    22b8:	4798      	blx	r3

	return xReturn;
}
    22ba:	1c28      	adds	r0, r5, #0
    22bc:	b003      	add	sp, #12
    22be:	bc0c      	pop	{r2, r3}
    22c0:	4690      	mov	r8, r2
    22c2:	4699      	mov	r9, r3
    22c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    22c6:	46c0      	nop			; (mov r8, r8)
    22c8:	00002500 	.word	0x00002500
    22cc:	fffffb0b 	.word	0xfffffb0b
    22d0:	fffffb85 	.word	0xfffffb85
    22d4:	000000d8 	.word	0x000000d8
    22d8:	000001f0 	.word	0x000001f0
    22dc:	000000f4 	.word	0x000000f4

000022e0 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    22e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    22e2:	465f      	mov	r7, fp
    22e4:	4656      	mov	r6, sl
    22e6:	464d      	mov	r5, r9
    22e8:	4644      	mov	r4, r8
    22ea:	b4f0      	push	{r4, r5, r6, r7}
    22ec:	b087      	sub	sp, #28
    22ee:	1c05      	adds	r5, r0, #0
    22f0:	1c0e      	adds	r6, r1, #0
    22f2:	9203      	str	r2, [sp, #12]
    22f4:	4699      	mov	r9, r3
    22f6:	4c64      	ldr	r4, [pc, #400]	; (2488 <xQueueGenericReceive+0x1a8>)
    22f8:	447c      	add	r4, pc
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
    22fa:	2800      	cmp	r0, #0
    22fc:	d101      	bne.n	2302 <xQueueGenericReceive+0x22>
    22fe:	b672      	cpsid	i
    2300:	e7fe      	b.n	2300 <xQueueGenericReceive+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    2302:	2900      	cmp	r1, #0
    2304:	d104      	bne.n	2310 <xQueueGenericReceive+0x30>
    2306:	6c03      	ldr	r3, [r0, #64]	; 0x40
    2308:	2b00      	cmp	r3, #0
    230a:	d001      	beq.n	2310 <xQueueGenericReceive+0x30>
    230c:	b672      	cpsid	i
    230e:	e7fe      	b.n	230e <xQueueGenericReceive+0x2e>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    2310:	4b5e      	ldr	r3, [pc, #376]	; (248c <xQueueGenericReceive+0x1ac>)
    2312:	58e3      	ldr	r3, [r4, r3]
    2314:	4798      	blx	r3
    2316:	2800      	cmp	r0, #0
    2318:	d102      	bne.n	2320 <xQueueGenericReceive+0x40>
    231a:	9b03      	ldr	r3, [sp, #12]
    231c:	2b00      	cmp	r3, #0
    231e:	d108      	bne.n	2332 <xQueueGenericReceive+0x52>
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    2320:	2300      	movs	r3, #0
    2322:	4698      	mov	r8, r3
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    2324:	4b5a      	ldr	r3, [pc, #360]	; (2490 <xQueueGenericReceive+0x1b0>)
    2326:	58e3      	ldr	r3, [r4, r3]
    2328:	9302      	str	r3, [sp, #8]
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    232a:	af04      	add	r7, sp, #16
					xEntryTimeSet = pdTRUE;
    232c:	2301      	movs	r3, #1
    232e:	469a      	mov	sl, r3
    2330:	e001      	b.n	2336 <xQueueGenericReceive+0x56>

	configASSERT( pxQueue );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    2332:	b672      	cpsid	i
    2334:	e7fe      	b.n	2334 <xQueueGenericReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    2336:	9b02      	ldr	r3, [sp, #8]
    2338:	4798      	blx	r3
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    233a:	6bab      	ldr	r3, [r5, #56]	; 0x38
    233c:	2b00      	cmp	r3, #0
    233e:	d033      	beq.n	23a8 <xQueueGenericReceive+0xc8>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    2340:	68ef      	ldr	r7, [r5, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    2342:	1c28      	adds	r0, r5, #0
    2344:	1c31      	adds	r1, r6, #0
    2346:	4b53      	ldr	r3, [pc, #332]	; (2494 <xQueueGenericReceive+0x1b4>)
    2348:	447b      	add	r3, pc
    234a:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
    234c:	464b      	mov	r3, r9
    234e:	2b00      	cmp	r3, #0
    2350:	d117      	bne.n	2382 <xQueueGenericReceive+0xa2>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
    2352:	6bab      	ldr	r3, [r5, #56]	; 0x38
    2354:	3b01      	subs	r3, #1
    2356:	63ab      	str	r3, [r5, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    2358:	682b      	ldr	r3, [r5, #0]
    235a:	2b00      	cmp	r3, #0
    235c:	d103      	bne.n	2366 <xQueueGenericReceive+0x86>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) xTaskGetCurrentTaskHandle(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    235e:	4b4e      	ldr	r3, [pc, #312]	; (2498 <xQueueGenericReceive+0x1b8>)
    2360:	58e3      	ldr	r3, [r4, r3]
    2362:	4798      	blx	r3
    2364:	6068      	str	r0, [r5, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2366:	692b      	ldr	r3, [r5, #16]
    2368:	2b00      	cmp	r3, #0
    236a:	d018      	beq.n	239e <xQueueGenericReceive+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    236c:	1c28      	adds	r0, r5, #0
    236e:	3010      	adds	r0, #16
    2370:	4b4a      	ldr	r3, [pc, #296]	; (249c <xQueueGenericReceive+0x1bc>)
    2372:	58e3      	ldr	r3, [r4, r3]
    2374:	4798      	blx	r3
    2376:	2801      	cmp	r0, #1
    2378:	d111      	bne.n	239e <xQueueGenericReceive+0xbe>
						{
							queueYIELD_IF_USING_PREEMPTION();
    237a:	4b49      	ldr	r3, [pc, #292]	; (24a0 <xQueueGenericReceive+0x1c0>)
    237c:	58e3      	ldr	r3, [r4, r3]
    237e:	4798      	blx	r3
    2380:	e00d      	b.n	239e <xQueueGenericReceive+0xbe>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    2382:	60ef      	str	r7, [r5, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2384:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    2386:	2b00      	cmp	r3, #0
    2388:	d009      	beq.n	239e <xQueueGenericReceive+0xbe>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    238a:	1c28      	adds	r0, r5, #0
    238c:	3024      	adds	r0, #36	; 0x24
    238e:	4b43      	ldr	r3, [pc, #268]	; (249c <xQueueGenericReceive+0x1bc>)
    2390:	58e3      	ldr	r3, [r4, r3]
    2392:	4798      	blx	r3
    2394:	2800      	cmp	r0, #0
    2396:	d002      	beq.n	239e <xQueueGenericReceive+0xbe>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    2398:	4b41      	ldr	r3, [pc, #260]	; (24a0 <xQueueGenericReceive+0x1c0>)
    239a:	58e3      	ldr	r3, [r4, r3]
    239c:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    239e:	4b41      	ldr	r3, [pc, #260]	; (24a4 <xQueueGenericReceive+0x1c4>)
    23a0:	58e3      	ldr	r3, [r4, r3]
    23a2:	4798      	blx	r3
				return pdPASS;
    23a4:	2001      	movs	r0, #1
    23a6:	e068      	b.n	247a <xQueueGenericReceive+0x19a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    23a8:	9b03      	ldr	r3, [sp, #12]
    23aa:	2b00      	cmp	r3, #0
    23ac:	d104      	bne.n	23b8 <xQueueGenericReceive+0xd8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    23ae:	4b3d      	ldr	r3, [pc, #244]	; (24a4 <xQueueGenericReceive+0x1c4>)
    23b0:	58e3      	ldr	r3, [r4, r3]
    23b2:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    23b4:	2000      	movs	r0, #0
    23b6:	e060      	b.n	247a <xQueueGenericReceive+0x19a>
				}
				else if( xEntryTimeSet == pdFALSE )
    23b8:	4643      	mov	r3, r8
    23ba:	2b00      	cmp	r3, #0
    23bc:	d104      	bne.n	23c8 <xQueueGenericReceive+0xe8>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    23be:	1c38      	adds	r0, r7, #0
    23c0:	4b39      	ldr	r3, [pc, #228]	; (24a8 <xQueueGenericReceive+0x1c8>)
    23c2:	58e3      	ldr	r3, [r4, r3]
    23c4:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    23c6:	46d0      	mov	r8, sl
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    23c8:	4b36      	ldr	r3, [pc, #216]	; (24a4 <xQueueGenericReceive+0x1c4>)
    23ca:	58e3      	ldr	r3, [r4, r3]
    23cc:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    23ce:	4b37      	ldr	r3, [pc, #220]	; (24ac <xQueueGenericReceive+0x1cc>)
    23d0:	58e3      	ldr	r3, [r4, r3]
    23d2:	4798      	blx	r3
		prvLockQueue( pxQueue );
    23d4:	4b2e      	ldr	r3, [pc, #184]	; (2490 <xQueueGenericReceive+0x1b0>)
    23d6:	58e3      	ldr	r3, [r4, r3]
    23d8:	4798      	blx	r3
    23da:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    23dc:	3301      	adds	r3, #1
    23de:	d101      	bne.n	23e4 <xQueueGenericReceive+0x104>
    23e0:	2300      	movs	r3, #0
    23e2:	646b      	str	r3, [r5, #68]	; 0x44
    23e4:	6cab      	ldr	r3, [r5, #72]	; 0x48
    23e6:	3301      	adds	r3, #1
    23e8:	d101      	bne.n	23ee <xQueueGenericReceive+0x10e>
    23ea:	2300      	movs	r3, #0
    23ec:	64ab      	str	r3, [r5, #72]	; 0x48
    23ee:	4b2d      	ldr	r3, [pc, #180]	; (24a4 <xQueueGenericReceive+0x1c4>)
    23f0:	58e3      	ldr	r3, [r4, r3]
    23f2:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    23f4:	1c38      	adds	r0, r7, #0
    23f6:	a903      	add	r1, sp, #12
    23f8:	4b2d      	ldr	r3, [pc, #180]	; (24b0 <xQueueGenericReceive+0x1d0>)
    23fa:	58e3      	ldr	r3, [r4, r3]
    23fc:	4798      	blx	r3
    23fe:	2800      	cmp	r0, #0
    2400:	d133      	bne.n	246a <xQueueGenericReceive+0x18a>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    2402:	4b23      	ldr	r3, [pc, #140]	; (2490 <xQueueGenericReceive+0x1b0>)
    2404:	58e3      	ldr	r3, [r4, r3]
    2406:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    2408:	6bab      	ldr	r3, [r5, #56]	; 0x38
    240a:	469b      	mov	fp, r3
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    240c:	4b25      	ldr	r3, [pc, #148]	; (24a4 <xQueueGenericReceive+0x1c4>)
    240e:	58e3      	ldr	r3, [r4, r3]
    2410:	4798      	blx	r3
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    2412:	465b      	mov	r3, fp
    2414:	2b00      	cmp	r3, #0
    2416:	d120      	bne.n	245a <xQueueGenericReceive+0x17a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    2418:	682b      	ldr	r3, [r5, #0]
    241a:	2b00      	cmp	r3, #0
    241c:	d109      	bne.n	2432 <xQueueGenericReceive+0x152>
					{
						taskENTER_CRITICAL();
    241e:	4b1c      	ldr	r3, [pc, #112]	; (2490 <xQueueGenericReceive+0x1b0>)
    2420:	58e3      	ldr	r3, [r4, r3]
    2422:	4798      	blx	r3
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    2424:	6868      	ldr	r0, [r5, #4]
    2426:	4b23      	ldr	r3, [pc, #140]	; (24b4 <xQueueGenericReceive+0x1d4>)
    2428:	58e3      	ldr	r3, [r4, r3]
    242a:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
    242c:	4b1d      	ldr	r3, [pc, #116]	; (24a4 <xQueueGenericReceive+0x1c4>)
    242e:	58e3      	ldr	r3, [r4, r3]
    2430:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    2432:	1c28      	adds	r0, r5, #0
    2434:	3024      	adds	r0, #36	; 0x24
    2436:	9903      	ldr	r1, [sp, #12]
    2438:	4b1f      	ldr	r3, [pc, #124]	; (24b8 <xQueueGenericReceive+0x1d8>)
    243a:	58e3      	ldr	r3, [r4, r3]
    243c:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    243e:	1c28      	adds	r0, r5, #0
    2440:	4b1e      	ldr	r3, [pc, #120]	; (24bc <xQueueGenericReceive+0x1dc>)
    2442:	447b      	add	r3, pc
    2444:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    2446:	4b1e      	ldr	r3, [pc, #120]	; (24c0 <xQueueGenericReceive+0x1e0>)
    2448:	58e3      	ldr	r3, [r4, r3]
    244a:	4798      	blx	r3
    244c:	2800      	cmp	r0, #0
    244e:	d000      	beq.n	2452 <xQueueGenericReceive+0x172>
    2450:	e771      	b.n	2336 <xQueueGenericReceive+0x56>
				{
					portYIELD_WITHIN_API();
    2452:	4b13      	ldr	r3, [pc, #76]	; (24a0 <xQueueGenericReceive+0x1c0>)
    2454:	58e3      	ldr	r3, [r4, r3]
    2456:	4798      	blx	r3
    2458:	e76d      	b.n	2336 <xQueueGenericReceive+0x56>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    245a:	1c28      	adds	r0, r5, #0
    245c:	4b19      	ldr	r3, [pc, #100]	; (24c4 <xQueueGenericReceive+0x1e4>)
    245e:	447b      	add	r3, pc
    2460:	4798      	blx	r3
				( void ) xTaskResumeAll();
    2462:	4b17      	ldr	r3, [pc, #92]	; (24c0 <xQueueGenericReceive+0x1e0>)
    2464:	58e3      	ldr	r3, [r4, r3]
    2466:	4798      	blx	r3
    2468:	e765      	b.n	2336 <xQueueGenericReceive+0x56>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    246a:	1c28      	adds	r0, r5, #0
    246c:	4b16      	ldr	r3, [pc, #88]	; (24c8 <xQueueGenericReceive+0x1e8>)
    246e:	447b      	add	r3, pc
    2470:	4798      	blx	r3
			( void ) xTaskResumeAll();
    2472:	4b13      	ldr	r3, [pc, #76]	; (24c0 <xQueueGenericReceive+0x1e0>)
    2474:	58e3      	ldr	r3, [r4, r3]
    2476:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    2478:	2000      	movs	r0, #0
		}
	}
}
    247a:	b007      	add	sp, #28
    247c:	bc3c      	pop	{r2, r3, r4, r5}
    247e:	4690      	mov	r8, r2
    2480:	4699      	mov	r9, r3
    2482:	46a2      	mov	sl, r4
    2484:	46ab      	mov	fp, r5
    2486:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2488:	00002410 	.word	0x00002410
    248c:	000001f8 	.word	0x000001f8
    2490:	00000218 	.word	0x00000218
    2494:	fffffae5 	.word	0xfffffae5
    2498:	00000174 	.word	0x00000174
    249c:	000000d8 	.word	0x000000d8
    24a0:	00000144 	.word	0x00000144
    24a4:	0000000c 	.word	0x0000000c
    24a8:	00000214 	.word	0x00000214
    24ac:	000000f8 	.word	0x000000f8
    24b0:	000000f0 	.word	0x000000f0
    24b4:	00000118 	.word	0x00000118
    24b8:	00000050 	.word	0x00000050
    24bc:	fffffa23 	.word	0xfffffa23
    24c0:	0000019c 	.word	0x0000019c
    24c4:	fffffa07 	.word	0xfffffa07
    24c8:	fffff9f7 	.word	0xfffff9f7

000024cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
    24cc:	b570      	push	{r4, r5, r6, lr}
    24ce:	b082      	sub	sp, #8
    24d0:	1c04      	adds	r4, r0, #0
    24d2:	1c0e      	adds	r6, r1, #0
    24d4:	4d10      	ldr	r5, [pc, #64]	; (2518 <vQueueWaitForMessageRestricted+0x4c>)
    24d6:	447d      	add	r5, pc
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    24d8:	4b10      	ldr	r3, [pc, #64]	; (251c <vQueueWaitForMessageRestricted+0x50>)
    24da:	58eb      	ldr	r3, [r5, r3]
    24dc:	4798      	blx	r3
    24de:	6c63      	ldr	r3, [r4, #68]	; 0x44
    24e0:	3301      	adds	r3, #1
    24e2:	d101      	bne.n	24e8 <vQueueWaitForMessageRestricted+0x1c>
    24e4:	2300      	movs	r3, #0
    24e6:	6463      	str	r3, [r4, #68]	; 0x44
    24e8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    24ea:	3301      	adds	r3, #1
    24ec:	d101      	bne.n	24f2 <vQueueWaitForMessageRestricted+0x26>
    24ee:	2300      	movs	r3, #0
    24f0:	64a3      	str	r3, [r4, #72]	; 0x48
    24f2:	4b0b      	ldr	r3, [pc, #44]	; (2520 <vQueueWaitForMessageRestricted+0x54>)
    24f4:	58eb      	ldr	r3, [r5, r3]
    24f6:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    24f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    24fa:	2b00      	cmp	r3, #0
    24fc:	d105      	bne.n	250a <vQueueWaitForMessageRestricted+0x3e>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    24fe:	1c20      	adds	r0, r4, #0
    2500:	3024      	adds	r0, #36	; 0x24
    2502:	1c31      	adds	r1, r6, #0
    2504:	4b07      	ldr	r3, [pc, #28]	; (2524 <vQueueWaitForMessageRestricted+0x58>)
    2506:	58eb      	ldr	r3, [r5, r3]
    2508:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    250a:	1c20      	adds	r0, r4, #0
    250c:	4b06      	ldr	r3, [pc, #24]	; (2528 <vQueueWaitForMessageRestricted+0x5c>)
    250e:	447b      	add	r3, pc
    2510:	4798      	blx	r3
	}
    2512:	b002      	add	sp, #8
    2514:	bd70      	pop	{r4, r5, r6, pc}
    2516:	46c0      	nop			; (mov r8, r8)
    2518:	00002232 	.word	0x00002232
    251c:	00000218 	.word	0x00000218
    2520:	0000000c 	.word	0x0000000c
    2524:	00000128 	.word	0x00000128
    2528:	fffff957 	.word	0xfffff957

0000252c <prvTaskIsTaskSuspended>:

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
    252c:	2800      	cmp	r0, #0
    252e:	d101      	bne.n	2534 <prvTaskIsTaskSuspended+0x8>
    2530:	b672      	cpsid	i
    2532:	e7fe      	b.n	2532 <prvTaskIsTaskSuspended+0x6>

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
	BaseType_t xReturn = pdFALSE;
    2534:	2300      	movs	r3, #0

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    2536:	4a08      	ldr	r2, [pc, #32]	; (2558 <prvTaskIsTaskSuspended+0x2c>)
    2538:	447a      	add	r2, pc
    253a:	6941      	ldr	r1, [r0, #20]
    253c:	4291      	cmp	r1, r2
    253e:	d109      	bne.n	2554 <prvTaskIsTaskSuspended+0x28>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
    2540:	6a83      	ldr	r3, [r0, #40]	; 0x28
    2542:	4a06      	ldr	r2, [pc, #24]	; (255c <prvTaskIsTaskSuspended+0x30>)
    2544:	447a      	add	r2, pc
    2546:	3214      	adds	r2, #20
    2548:	4293      	cmp	r3, r2
    254a:	d002      	beq.n	2552 <prvTaskIsTaskSuspended+0x26>

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
	BaseType_t xReturn = pdFALSE;
    254c:	425a      	negs	r2, r3
    254e:	4153      	adcs	r3, r2
    2550:	e000      	b.n	2554 <prvTaskIsTaskSuspended+0x28>
    2552:	2300      	movs	r3, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
    2554:	1c18      	adds	r0, r3, #0
    2556:	4770      	bx	lr
    2558:	1ffff6c8 	.word	0x1ffff6c8
    255c:	1ffff6bc 	.word	0x1ffff6bc

00002560 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    2560:	4b0a      	ldr	r3, [pc, #40]	; (258c <prvResetNextTaskUnblockTime+0x2c>)
    2562:	447b      	add	r3, pc
    2564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2566:	681b      	ldr	r3, [r3, #0]
    2568:	2b00      	cmp	r3, #0
    256a:	d105      	bne.n	2578 <prvResetNextTaskUnblockTime+0x18>
		/* The new current delayed list is empty.  Set
		xNextTaskUnblockTime to the maximum possible value so it is
		extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    256c:	2201      	movs	r2, #1
    256e:	4252      	negs	r2, r2
    2570:	4b07      	ldr	r3, [pc, #28]	; (2590 <prvResetNextTaskUnblockTime+0x30>)
    2572:	447b      	add	r3, pc
    2574:	601a      	str	r2, [r3, #0]
    2576:	e008      	b.n	258a <prvResetNextTaskUnblockTime+0x2a>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    2578:	4b06      	ldr	r3, [pc, #24]	; (2594 <prvResetNextTaskUnblockTime+0x34>)
    257a:	447b      	add	r3, pc
    257c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    257e:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
    2580:	68db      	ldr	r3, [r3, #12]
    2582:	685a      	ldr	r2, [r3, #4]
    2584:	4b04      	ldr	r3, [pc, #16]	; (2598 <prvResetNextTaskUnblockTime+0x38>)
    2586:	447b      	add	r3, pc
    2588:	601a      	str	r2, [r3, #0]
	}
}
    258a:	4770      	bx	lr
    258c:	1ffff69e 	.word	0x1ffff69e
    2590:	1fffda8e 	.word	0x1fffda8e
    2594:	1ffff686 	.word	0x1ffff686
    2598:	1fffda7a 	.word	0x1fffda7a

0000259c <prvAddCurrentTaskToDelayedList>:
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
    259c:	b510      	push	{r4, lr}
    259e:	b082      	sub	sp, #8
    25a0:	1c04      	adds	r4, r0, #0
    25a2:	4b16      	ldr	r3, [pc, #88]	; (25fc <prvAddCurrentTaskToDelayedList+0x60>)
    25a4:	447b      	add	r3, pc
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    25a6:	4a16      	ldr	r2, [pc, #88]	; (2600 <prvAddCurrentTaskToDelayedList+0x64>)
    25a8:	589a      	ldr	r2, [r3, r2]
    25aa:	6812      	ldr	r2, [r2, #0]
    25ac:	6050      	str	r0, [r2, #4]

	if( xTimeToWake < xTickCount )
    25ae:	4a15      	ldr	r2, [pc, #84]	; (2604 <prvAddCurrentTaskToDelayedList+0x68>)
    25b0:	447a      	add	r2, pc
    25b2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    25b4:	4290      	cmp	r0, r2
    25b6:	d20b      	bcs.n	25d0 <prvAddCurrentTaskToDelayedList+0x34>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    25b8:	4a13      	ldr	r2, [pc, #76]	; (2608 <prvAddCurrentTaskToDelayedList+0x6c>)
    25ba:	447a      	add	r2, pc
    25bc:	6b10      	ldr	r0, [r2, #48]	; 0x30
    25be:	4a10      	ldr	r2, [pc, #64]	; (2600 <prvAddCurrentTaskToDelayedList+0x64>)
    25c0:	589a      	ldr	r2, [r3, r2]
    25c2:	6811      	ldr	r1, [r2, #0]
    25c4:	3104      	adds	r1, #4
    25c6:	4a11      	ldr	r2, [pc, #68]	; (260c <prvAddCurrentTaskToDelayedList+0x70>)
    25c8:	589a      	ldr	r2, [r3, r2]
    25ca:	9201      	str	r2, [sp, #4]
    25cc:	4790      	blx	r2
    25ce:	e012      	b.n	25f6 <prvAddCurrentTaskToDelayedList+0x5a>
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    25d0:	4a0f      	ldr	r2, [pc, #60]	; (2610 <prvAddCurrentTaskToDelayedList+0x74>)
    25d2:	447a      	add	r2, pc
    25d4:	6a90      	ldr	r0, [r2, #40]	; 0x28
    25d6:	4a0a      	ldr	r2, [pc, #40]	; (2600 <prvAddCurrentTaskToDelayedList+0x64>)
    25d8:	589a      	ldr	r2, [r3, r2]
    25da:	6811      	ldr	r1, [r2, #0]
    25dc:	3104      	adds	r1, #4
    25de:	4a0b      	ldr	r2, [pc, #44]	; (260c <prvAddCurrentTaskToDelayedList+0x70>)
    25e0:	589a      	ldr	r2, [r3, r2]
    25e2:	9201      	str	r2, [sp, #4]
    25e4:	4790      	blx	r2

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    25e6:	4b0b      	ldr	r3, [pc, #44]	; (2614 <prvAddCurrentTaskToDelayedList+0x78>)
    25e8:	447b      	add	r3, pc
    25ea:	681b      	ldr	r3, [r3, #0]
    25ec:	429c      	cmp	r4, r3
    25ee:	d202      	bcs.n	25f6 <prvAddCurrentTaskToDelayedList+0x5a>
		{
			xNextTaskUnblockTime = xTimeToWake;
    25f0:	4b09      	ldr	r3, [pc, #36]	; (2618 <prvAddCurrentTaskToDelayedList+0x7c>)
    25f2:	447b      	add	r3, pc
    25f4:	601c      	str	r4, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
    25f6:	b002      	add	sp, #8
    25f8:	bd10      	pop	{r4, pc}
    25fa:	46c0      	nop			; (mov r8, r8)
    25fc:	00002164 	.word	0x00002164
    2600:	00000038 	.word	0x00000038
    2604:	1ffff650 	.word	0x1ffff650
    2608:	1ffff646 	.word	0x1ffff646
    260c:	00000158 	.word	0x00000158
    2610:	1ffff62e 	.word	0x1ffff62e
    2614:	1fffda18 	.word	0x1fffda18
    2618:	1fffda0e 	.word	0x1fffda0e

0000261c <xTaskGenericCreate>:
static void prvResetNextTaskUnblockTime( void );

/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    261c:	b5f0      	push	{r4, r5, r6, r7, lr}
    261e:	465f      	mov	r7, fp
    2620:	4656      	mov	r6, sl
    2622:	464d      	mov	r5, r9
    2624:	4644      	mov	r4, r8
    2626:	b4f0      	push	{r4, r5, r6, r7}
    2628:	b085      	sub	sp, #20
    262a:	4680      	mov	r8, r0
    262c:	1c0f      	adds	r7, r1, #0
    262e:	1c16      	adds	r6, r2, #0
    2630:	469b      	mov	fp, r3
    2632:	4d75      	ldr	r5, [pc, #468]	; (2808 <xTaskGenericCreate+0x1ec>)
    2634:	447d      	add	r5, pc
BaseType_t xReturn;
TCB_t * pxNewTCB;

	configASSERT( pxTaskCode );
    2636:	2800      	cmp	r0, #0
    2638:	d101      	bne.n	263e <xTaskGenericCreate+0x22>
    263a:	b672      	cpsid	i
    263c:	e7fe      	b.n	263c <xTaskGenericCreate+0x20>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
    263e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    2640:	2a04      	cmp	r2, #4
    2642:	d901      	bls.n	2648 <xTaskGenericCreate+0x2c>
    2644:	b672      	cpsid	i
    2646:	e7fe      	b.n	2646 <xTaskGenericCreate+0x2a>
{
TCB_t *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
    2648:	2040      	movs	r0, #64	; 0x40
    264a:	4b70      	ldr	r3, [pc, #448]	; (280c <xTaskGenericCreate+0x1f0>)
    264c:	58eb      	ldr	r3, [r5, r3]
    264e:	4798      	blx	r3
    2650:	1e04      	subs	r4, r0, #0

	if( pxNewTCB != NULL )
    2652:	d100      	bne.n	2656 <xTaskGenericCreate+0x3a>
    2654:	e0ce      	b.n	27f4 <xTaskGenericCreate+0x1d8>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2656:	9b10      	ldr	r3, [sp, #64]	; 0x40
    2658:	2b00      	cmp	r3, #0
    265a:	d000      	beq.n	265e <xTaskGenericCreate+0x42>
    265c:	e0b7      	b.n	27ce <xTaskGenericCreate+0x1b2>
    265e:	00b0      	lsls	r0, r6, #2
    2660:	4b6a      	ldr	r3, [pc, #424]	; (280c <xTaskGenericCreate+0x1f0>)
    2662:	58eb      	ldr	r3, [r5, r3]
    2664:	4798      	blx	r3
    2666:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
    2668:	2800      	cmp	r0, #0
    266a:	d000      	beq.n	266e <xTaskGenericCreate+0x52>
    266c:	e0b1      	b.n	27d2 <xTaskGenericCreate+0x1b6>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    266e:	1c20      	adds	r0, r4, #0
    2670:	4b67      	ldr	r3, [pc, #412]	; (2810 <xTaskGenericCreate+0x1f4>)
    2672:	58eb      	ldr	r3, [r5, r3]
    2674:	4798      	blx	r3
    2676:	e0bd      	b.n	27f4 <xTaskGenericCreate+0x1d8>
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
    2678:	5cf9      	ldrb	r1, [r7, r3]
    267a:	18e2      	adds	r2, r4, r3
    267c:	3234      	adds	r2, #52	; 0x34
    267e:	7011      	strb	r1, [r2, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    2680:	5cfa      	ldrb	r2, [r7, r3]
    2682:	2a00      	cmp	r2, #0
    2684:	d002      	beq.n	268c <xTaskGenericCreate+0x70>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    2686:	3301      	adds	r3, #1
    2688:	2b05      	cmp	r3, #5
    268a:	d1f5      	bne.n	2678 <xTaskGenericCreate+0x5c>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    268c:	2200      	movs	r2, #0
    268e:	2338      	movs	r3, #56	; 0x38
    2690:	54e2      	strb	r2, [r4, r3]
    2692:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    2694:	2f04      	cmp	r7, #4
    2696:	d900      	bls.n	269a <xTaskGenericCreate+0x7e>
    2698:	2704      	movs	r7, #4
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
    269a:	62e7      	str	r7, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    269c:	63e7      	str	r7, [r4, #60]	; 0x3c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    269e:	1d22      	adds	r2, r4, #4
    26a0:	4691      	mov	r9, r2
    26a2:	1c10      	adds	r0, r2, #0
    26a4:	4b5b      	ldr	r3, [pc, #364]	; (2814 <xTaskGenericCreate+0x1f8>)
    26a6:	58eb      	ldr	r3, [r5, r3]
    26a8:	9301      	str	r3, [sp, #4]
    26aa:	4798      	blx	r3
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    26ac:	1c20      	adds	r0, r4, #0
    26ae:	3018      	adds	r0, #24
    26b0:	9b01      	ldr	r3, [sp, #4]
    26b2:	4798      	blx	r3

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    26b4:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    26b6:	2305      	movs	r3, #5
    26b8:	1bdf      	subs	r7, r3, r7
    26ba:	61a7      	str	r7, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    26bc:	6264      	str	r4, [r4, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    26be:	1c30      	adds	r0, r6, #0
    26c0:	4641      	mov	r1, r8
    26c2:	465a      	mov	r2, fp
    26c4:	4b54      	ldr	r3, [pc, #336]	; (2818 <xTaskGenericCreate+0x1fc>)
    26c6:	58eb      	ldr	r3, [r5, r3]
    26c8:	4798      	blx	r3
    26ca:	6020      	str	r0, [r4, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
    26cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    26ce:	2a00      	cmp	r2, #0
    26d0:	d000      	beq.n	26d4 <xTaskGenericCreate+0xb8>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    26d2:	6014      	str	r4, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
    26d4:	4b51      	ldr	r3, [pc, #324]	; (281c <xTaskGenericCreate+0x200>)
    26d6:	58eb      	ldr	r3, [r5, r3]
    26d8:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
    26da:	4b51      	ldr	r3, [pc, #324]	; (2820 <xTaskGenericCreate+0x204>)
    26dc:	447b      	add	r3, pc
    26de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    26e0:	3201      	adds	r2, #1
    26e2:	635a      	str	r2, [r3, #52]	; 0x34
			if( pxCurrentTCB == NULL )
    26e4:	4b4f      	ldr	r3, [pc, #316]	; (2824 <xTaskGenericCreate+0x208>)
    26e6:	58eb      	ldr	r3, [r5, r3]
    26e8:	681b      	ldr	r3, [r3, #0]
    26ea:	2b00      	cmp	r3, #0
    26ec:	d134      	bne.n	2758 <xTaskGenericCreate+0x13c>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    26ee:	4b4d      	ldr	r3, [pc, #308]	; (2824 <xTaskGenericCreate+0x208>)
    26f0:	58eb      	ldr	r3, [r5, r3]
    26f2:	601c      	str	r4, [r3, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    26f4:	4b4c      	ldr	r3, [pc, #304]	; (2828 <xTaskGenericCreate+0x20c>)
    26f6:	447b      	add	r3, pc
    26f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    26fa:	2b01      	cmp	r3, #1
    26fc:	d13b      	bne.n	2776 <xTaskGenericCreate+0x15a>
    26fe:	4b4b      	ldr	r3, [pc, #300]	; (282c <xTaskGenericCreate+0x210>)
    2700:	447b      	add	r3, pc
    2702:	1c1e      	adds	r6, r3, #0
    2704:	3638      	adds	r6, #56	; 0x38
    2706:	1c1f      	adds	r7, r3, #0
    2708:	379c      	adds	r7, #156	; 0x9c
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    270a:	4b49      	ldr	r3, [pc, #292]	; (2830 <xTaskGenericCreate+0x214>)
    270c:	58eb      	ldr	r3, [r5, r3]
    270e:	9300      	str	r3, [sp, #0]
    2710:	1c30      	adds	r0, r6, #0
    2712:	9b00      	ldr	r3, [sp, #0]
    2714:	4798      	blx	r3
    2716:	3614      	adds	r6, #20

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    2718:	42be      	cmp	r6, r7
    271a:	d1f9      	bne.n	2710 <xTaskGenericCreate+0xf4>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
    271c:	4a45      	ldr	r2, [pc, #276]	; (2834 <xTaskGenericCreate+0x218>)
    271e:	447a      	add	r2, pc
    2720:	4690      	mov	r8, r2
    2722:	231c      	movs	r3, #28
    2724:	469b      	mov	fp, r3
    2726:	44c3      	add	fp, r8
    2728:	4658      	mov	r0, fp
    272a:	4b41      	ldr	r3, [pc, #260]	; (2830 <xTaskGenericCreate+0x214>)
    272c:	58ee      	ldr	r6, [r5, r3]
    272e:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
    2730:	2230      	movs	r2, #48	; 0x30
    2732:	4692      	mov	sl, r2
    2734:	44c2      	add	sl, r8
    2736:	4650      	mov	r0, sl
    2738:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
    273a:	4f3f      	ldr	r7, [pc, #252]	; (2838 <xTaskGenericCreate+0x21c>)
    273c:	447f      	add	r7, pc
    273e:	1c38      	adds	r0, r7, #0
    2740:	3014      	adds	r0, #20
    2742:	47b0      	blx	r6

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    2744:	4640      	mov	r0, r8
    2746:	3044      	adds	r0, #68	; 0x44
    2748:	47b0      	blx	r6
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    274a:	1c38      	adds	r0, r7, #0
    274c:	47b0      	blx	r6
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    274e:	465b      	mov	r3, fp
    2750:	62bb      	str	r3, [r7, #40]	; 0x28
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    2752:	4652      	mov	r2, sl
    2754:	633a      	str	r2, [r7, #48]	; 0x30
    2756:	e00e      	b.n	2776 <xTaskGenericCreate+0x15a>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    2758:	4b38      	ldr	r3, [pc, #224]	; (283c <xTaskGenericCreate+0x220>)
    275a:	447b      	add	r3, pc
    275c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    275e:	2b00      	cmp	r3, #0
    2760:	d109      	bne.n	2776 <xTaskGenericCreate+0x15a>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    2762:	4b30      	ldr	r3, [pc, #192]	; (2824 <xTaskGenericCreate+0x208>)
    2764:	58eb      	ldr	r3, [r5, r3]
    2766:	681b      	ldr	r3, [r3, #0]
    2768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    276a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    276c:	429a      	cmp	r2, r3
    276e:	d302      	bcc.n	2776 <xTaskGenericCreate+0x15a>
					{
						pxCurrentTCB = pxNewTCB;
    2770:	4b2c      	ldr	r3, [pc, #176]	; (2824 <xTaskGenericCreate+0x208>)
    2772:	58eb      	ldr	r3, [r5, r3]
    2774:	601c      	str	r4, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
    2776:	4a32      	ldr	r2, [pc, #200]	; (2840 <xTaskGenericCreate+0x224>)
    2778:	447a      	add	r2, pc
    277a:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
    277c:	3301      	adds	r3, #1
    277e:	65d3      	str	r3, [r2, #92]	; 0x5c
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
    2780:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2782:	6e12      	ldr	r2, [r2, #96]	; 0x60
    2784:	4293      	cmp	r3, r2
    2786:	d902      	bls.n	278e <xTaskGenericCreate+0x172>
    2788:	4a2e      	ldr	r2, [pc, #184]	; (2844 <xTaskGenericCreate+0x228>)
    278a:	447a      	add	r2, pc
    278c:	6613      	str	r3, [r2, #96]	; 0x60
    278e:	009a      	lsls	r2, r3, #2
    2790:	18d3      	adds	r3, r2, r3
    2792:	009b      	lsls	r3, r3, #2
    2794:	482c      	ldr	r0, [pc, #176]	; (2848 <xTaskGenericCreate+0x22c>)
    2796:	4478      	add	r0, pc
    2798:	3038      	adds	r0, #56	; 0x38
    279a:	18c0      	adds	r0, r0, r3
    279c:	4649      	mov	r1, r9
    279e:	4b2b      	ldr	r3, [pc, #172]	; (284c <xTaskGenericCreate+0x230>)
    27a0:	58eb      	ldr	r3, [r5, r3]
    27a2:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
    27a4:	4b2a      	ldr	r3, [pc, #168]	; (2850 <xTaskGenericCreate+0x234>)
    27a6:	58eb      	ldr	r3, [r5, r3]
    27a8:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
    27aa:	4b2a      	ldr	r3, [pc, #168]	; (2854 <xTaskGenericCreate+0x238>)
    27ac:	447b      	add	r3, pc
    27ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );

			xReturn = pdPASS;
    27b0:	2001      	movs	r0, #1
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
    27b2:	2b00      	cmp	r3, #0
    27b4:	d020      	beq.n	27f8 <xTaskGenericCreate+0x1dc>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    27b6:	4b1b      	ldr	r3, [pc, #108]	; (2824 <xTaskGenericCreate+0x208>)
    27b8:	58eb      	ldr	r3, [r5, r3]
    27ba:	681b      	ldr	r3, [r3, #0]
    27bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    27be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    27c0:	429a      	cmp	r2, r3
    27c2:	d919      	bls.n	27f8 <xTaskGenericCreate+0x1dc>
			{
				taskYIELD_IF_USING_PREEMPTION();
    27c4:	4b24      	ldr	r3, [pc, #144]	; (2858 <xTaskGenericCreate+0x23c>)
    27c6:	58eb      	ldr	r3, [r5, r3]
    27c8:	4798      	blx	r3
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );

			xReturn = pdPASS;
    27ca:	2001      	movs	r0, #1
    27cc:	e014      	b.n	27f8 <xTaskGenericCreate+0x1dc>
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    27ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
    27d0:	6303      	str	r3, [r0, #48]	; 0x30
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
    27d2:	4a22      	ldr	r2, [pc, #136]	; (285c <xTaskGenericCreate+0x240>)
    27d4:	18b3      	adds	r3, r6, r2
    27d6:	009b      	lsls	r3, r3, #2
    27d8:	6b22      	ldr	r2, [r4, #48]	; 0x30
    27da:	18d3      	adds	r3, r2, r3
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    27dc:	2207      	movs	r2, #7
    27de:	1c1e      	adds	r6, r3, #0
    27e0:	4396      	bics	r6, r2
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
    27e2:	783a      	ldrb	r2, [r7, #0]
    27e4:	2334      	movs	r3, #52	; 0x34
    27e6:	54e2      	strb	r2, [r4, r3]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    27e8:	783b      	ldrb	r3, [r7, #0]
    27ea:	2b00      	cmp	r3, #0
    27ec:	d100      	bne.n	27f0 <xTaskGenericCreate+0x1d4>
    27ee:	e74d      	b.n	268c <xTaskGenericCreate+0x70>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    27f0:	2301      	movs	r3, #1
    27f2:	e741      	b.n	2678 <xTaskGenericCreate+0x5c>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    27f4:	2001      	movs	r0, #1
    27f6:	4240      	negs	r0, r0
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
}
    27f8:	b005      	add	sp, #20
    27fa:	bc3c      	pop	{r2, r3, r4, r5}
    27fc:	4690      	mov	r8, r2
    27fe:	4699      	mov	r9, r3
    2800:	46a2      	mov	sl, r4
    2802:	46ab      	mov	fp, r5
    2804:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2806:	46c0      	nop			; (mov r8, r8)
    2808:	000020d4 	.word	0x000020d4
    280c:	000000ac 	.word	0x000000ac
    2810:	00000068 	.word	0x00000068
    2814:	0000008c 	.word	0x0000008c
    2818:	00000208 	.word	0x00000208
    281c:	00000218 	.word	0x00000218
    2820:	1ffff524 	.word	0x1ffff524
    2824:	00000038 	.word	0x00000038
    2828:	1ffff50a 	.word	0x1ffff50a
    282c:	1ffff500 	.word	0x1ffff500
    2830:	000000b4 	.word	0x000000b4
    2834:	1ffff562 	.word	0x1ffff562
    2838:	1ffff4c4 	.word	0x1ffff4c4
    283c:	1ffff526 	.word	0x1ffff526
    2840:	1ffff508 	.word	0x1ffff508
    2844:	1ffff4f6 	.word	0x1ffff4f6
    2848:	1ffff46a 	.word	0x1ffff46a
    284c:	00000078 	.word	0x00000078
    2850:	0000000c 	.word	0x0000000c
    2854:	1ffff4d4 	.word	0x1ffff4d4
    2858:	00000144 	.word	0x00000144
    285c:	3fffffff 	.word	0x3fffffff

00002860 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
    2860:	b570      	push	{r4, r5, r6, lr}
    2862:	b082      	sub	sp, #8
    2864:	1c05      	adds	r5, r0, #0
    2866:	4c1e      	ldr	r4, [pc, #120]	; (28e0 <vTaskResume+0x80>)
    2868:	447c      	add	r4, pc
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
    286a:	2800      	cmp	r0, #0
    286c:	d101      	bne.n	2872 <vTaskResume+0x12>
    286e:	b672      	cpsid	i
    2870:	e7fe      	b.n	2870 <vTaskResume+0x10>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    2872:	4b1c      	ldr	r3, [pc, #112]	; (28e4 <vTaskResume+0x84>)
    2874:	58e3      	ldr	r3, [r4, r3]
    2876:	681b      	ldr	r3, [r3, #0]
    2878:	4298      	cmp	r0, r3
    287a:	d02e      	beq.n	28da <vTaskResume+0x7a>
		{
			taskENTER_CRITICAL();
    287c:	4b1a      	ldr	r3, [pc, #104]	; (28e8 <vTaskResume+0x88>)
    287e:	58e3      	ldr	r3, [r4, r3]
    2880:	4798      	blx	r3
			{
				if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    2882:	1c28      	adds	r0, r5, #0
    2884:	4b19      	ldr	r3, [pc, #100]	; (28ec <vTaskResume+0x8c>)
    2886:	447b      	add	r3, pc
    2888:	4798      	blx	r3
    288a:	2801      	cmp	r0, #1
    288c:	d122      	bne.n	28d4 <vTaskResume+0x74>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
    288e:	1d2e      	adds	r6, r5, #4
    2890:	1c30      	adds	r0, r6, #0
    2892:	4b17      	ldr	r3, [pc, #92]	; (28f0 <vTaskResume+0x90>)
    2894:	58e3      	ldr	r3, [r4, r3]
    2896:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    2898:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    289a:	4a16      	ldr	r2, [pc, #88]	; (28f4 <vTaskResume+0x94>)
    289c:	447a      	add	r2, pc
    289e:	6e12      	ldr	r2, [r2, #96]	; 0x60
    28a0:	4293      	cmp	r3, r2
    28a2:	d902      	bls.n	28aa <vTaskResume+0x4a>
    28a4:	4a14      	ldr	r2, [pc, #80]	; (28f8 <vTaskResume+0x98>)
    28a6:	447a      	add	r2, pc
    28a8:	6613      	str	r3, [r2, #96]	; 0x60
    28aa:	009a      	lsls	r2, r3, #2
    28ac:	18d3      	adds	r3, r2, r3
    28ae:	009b      	lsls	r3, r3, #2
    28b0:	4812      	ldr	r0, [pc, #72]	; (28fc <vTaskResume+0x9c>)
    28b2:	4478      	add	r0, pc
    28b4:	3038      	adds	r0, #56	; 0x38
    28b6:	18c0      	adds	r0, r0, r3
    28b8:	1c31      	adds	r1, r6, #0
    28ba:	4b11      	ldr	r3, [pc, #68]	; (2900 <vTaskResume+0xa0>)
    28bc:	58e3      	ldr	r3, [r4, r3]
    28be:	4798      	blx	r3

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    28c0:	4b08      	ldr	r3, [pc, #32]	; (28e4 <vTaskResume+0x84>)
    28c2:	58e3      	ldr	r3, [r4, r3]
    28c4:	681b      	ldr	r3, [r3, #0]
    28c6:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    28c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    28ca:	429a      	cmp	r2, r3
    28cc:	d302      	bcc.n	28d4 <vTaskResume+0x74>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
    28ce:	4b0d      	ldr	r3, [pc, #52]	; (2904 <vTaskResume+0xa4>)
    28d0:	58e3      	ldr	r3, [r4, r3]
    28d2:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
    28d4:	4b0c      	ldr	r3, [pc, #48]	; (2908 <vTaskResume+0xa8>)
    28d6:	58e3      	ldr	r3, [r4, r3]
    28d8:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    28da:	b002      	add	sp, #8
    28dc:	bd70      	pop	{r4, r5, r6, pc}
    28de:	46c0      	nop			; (mov r8, r8)
    28e0:	00001ea0 	.word	0x00001ea0
    28e4:	00000038 	.word	0x00000038
    28e8:	00000218 	.word	0x00000218
    28ec:	fffffca3 	.word	0xfffffca3
    28f0:	00000104 	.word	0x00000104
    28f4:	1ffff3e4 	.word	0x1ffff3e4
    28f8:	1ffff3da 	.word	0x1ffff3da
    28fc:	1ffff34e 	.word	0x1ffff34e
    2900:	00000078 	.word	0x00000078
    2904:	00000144 	.word	0x00000144
    2908:	0000000c 	.word	0x0000000c

0000290c <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
    290c:	b5f0      	push	{r4, r5, r6, r7, lr}
    290e:	4647      	mov	r7, r8
    2910:	b480      	push	{r7}
    2912:	b082      	sub	sp, #8
    2914:	1c05      	adds	r5, r0, #0
    2916:	4c24      	ldr	r4, [pc, #144]	; (29a8 <xTaskResumeFromISR+0x9c>)
    2918:	447c      	add	r4, pc
	BaseType_t xYieldRequired = pdFALSE;
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
    291a:	2800      	cmp	r0, #0
    291c:	d101      	bne.n	2922 <xTaskResumeFromISR+0x16>
    291e:	b672      	cpsid	i
    2920:	e7fe      	b.n	2920 <xTaskResumeFromISR+0x14>
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    2922:	4b22      	ldr	r3, [pc, #136]	; (29ac <xTaskResumeFromISR+0xa0>)
    2924:	58e3      	ldr	r3, [r4, r3]
    2926:	4798      	blx	r3
    2928:	4680      	mov	r8, r0
		{
			if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    292a:	1c28      	adds	r0, r5, #0
    292c:	4b20      	ldr	r3, [pc, #128]	; (29b0 <xTaskResumeFromISR+0xa4>)
    292e:	447b      	add	r3, pc
    2930:	4798      	blx	r3

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
	BaseType_t xYieldRequired = pdFALSE;
    2932:	2600      	movs	r6, #0
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
		{
			if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    2934:	2801      	cmp	r0, #1
    2936:	d12e      	bne.n	2996 <xTaskResumeFromISR+0x8a>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    2938:	4b1e      	ldr	r3, [pc, #120]	; (29b4 <xTaskResumeFromISR+0xa8>)
    293a:	447b      	add	r3, pc
    293c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    293e:	2b00      	cmp	r3, #0
    2940:	d120      	bne.n	2984 <xTaskResumeFromISR+0x78>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    2942:	4b1d      	ldr	r3, [pc, #116]	; (29b8 <xTaskResumeFromISR+0xac>)
    2944:	58e3      	ldr	r3, [r4, r3]
    2946:	681b      	ldr	r3, [r3, #0]
    2948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    294a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    294c:	429a      	cmp	r2, r3
    294e:	4176      	adcs	r6, r6
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
    2950:	1d2f      	adds	r7, r5, #4
    2952:	1c38      	adds	r0, r7, #0
    2954:	4b19      	ldr	r3, [pc, #100]	; (29bc <xTaskResumeFromISR+0xb0>)
    2956:	58e3      	ldr	r3, [r4, r3]
    2958:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    295a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    295c:	4a18      	ldr	r2, [pc, #96]	; (29c0 <xTaskResumeFromISR+0xb4>)
    295e:	447a      	add	r2, pc
    2960:	6e12      	ldr	r2, [r2, #96]	; 0x60
    2962:	4293      	cmp	r3, r2
    2964:	d902      	bls.n	296c <xTaskResumeFromISR+0x60>
    2966:	4a17      	ldr	r2, [pc, #92]	; (29c4 <xTaskResumeFromISR+0xb8>)
    2968:	447a      	add	r2, pc
    296a:	6613      	str	r3, [r2, #96]	; 0x60
    296c:	009a      	lsls	r2, r3, #2
    296e:	18d3      	adds	r3, r2, r3
    2970:	009b      	lsls	r3, r3, #2
    2972:	4815      	ldr	r0, [pc, #84]	; (29c8 <xTaskResumeFromISR+0xbc>)
    2974:	4478      	add	r0, pc
    2976:	3038      	adds	r0, #56	; 0x38
    2978:	18c0      	adds	r0, r0, r3
    297a:	1c39      	adds	r1, r7, #0
    297c:	4b13      	ldr	r3, [pc, #76]	; (29cc <xTaskResumeFromISR+0xc0>)
    297e:	58e3      	ldr	r3, [r4, r3]
    2980:	4798      	blx	r3
    2982:	e008      	b.n	2996 <xTaskResumeFromISR+0x8a>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    2984:	1c29      	adds	r1, r5, #0
    2986:	3118      	adds	r1, #24
    2988:	4811      	ldr	r0, [pc, #68]	; (29d0 <xTaskResumeFromISR+0xc4>)
    298a:	4478      	add	r0, pc
    298c:	3014      	adds	r0, #20
    298e:	4b0f      	ldr	r3, [pc, #60]	; (29cc <xTaskResumeFromISR+0xc0>)
    2990:	58e3      	ldr	r3, [r4, r3]
    2992:	4798      	blx	r3

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
	BaseType_t xYieldRequired = pdFALSE;
    2994:	2600      	movs	r6, #0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    2996:	4640      	mov	r0, r8
    2998:	4b0e      	ldr	r3, [pc, #56]	; (29d4 <xTaskResumeFromISR+0xc8>)
    299a:	58e3      	ldr	r3, [r4, r3]
    299c:	4798      	blx	r3

		return xYieldRequired;
	}
    299e:	1c30      	adds	r0, r6, #0
    29a0:	b002      	add	sp, #8
    29a2:	bc04      	pop	{r2}
    29a4:	4690      	mov	r8, r2
    29a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    29a8:	00001df0 	.word	0x00001df0
    29ac:	000001f0 	.word	0x000001f0
    29b0:	fffffbfb 	.word	0xfffffbfb
    29b4:	1ffff346 	.word	0x1ffff346
    29b8:	00000038 	.word	0x00000038
    29bc:	00000104 	.word	0x00000104
    29c0:	1ffff322 	.word	0x1ffff322
    29c4:	1ffff318 	.word	0x1ffff318
    29c8:	1ffff28c 	.word	0x1ffff28c
    29cc:	00000078 	.word	0x00000078
    29d0:	1ffff276 	.word	0x1ffff276
    29d4:	000000f4 	.word	0x000000f4

000029d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    29d8:	b530      	push	{r4, r5, lr}
    29da:	b087      	sub	sp, #28
    29dc:	4c14      	ldr	r4, [pc, #80]	; (2a30 <vTaskStartScheduler+0x58>)
    29de:	447c      	add	r4, pc
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
    29e0:	2300      	movs	r3, #0
    29e2:	9300      	str	r3, [sp, #0]
    29e4:	9301      	str	r3, [sp, #4]
    29e6:	9302      	str	r3, [sp, #8]
    29e8:	9303      	str	r3, [sp, #12]
    29ea:	4812      	ldr	r0, [pc, #72]	; (2a34 <vTaskStartScheduler+0x5c>)
    29ec:	4478      	add	r0, pc
    29ee:	4912      	ldr	r1, [pc, #72]	; (2a38 <vTaskStartScheduler+0x60>)
    29f0:	4479      	add	r1, pc
    29f2:	228c      	movs	r2, #140	; 0x8c
    29f4:	4d11      	ldr	r5, [pc, #68]	; (2a3c <vTaskStartScheduler+0x64>)
    29f6:	5965      	ldr	r5, [r4, r5]
    29f8:	47a8      	blx	r5
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
    29fa:	2801      	cmp	r0, #1
    29fc:	d111      	bne.n	2a22 <vTaskStartScheduler+0x4a>
		{
			xReturn = xTimerCreateTimerTask();
    29fe:	4b10      	ldr	r3, [pc, #64]	; (2a40 <vTaskStartScheduler+0x68>)
    2a00:	58e3      	ldr	r3, [r4, r3]
    2a02:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    2a04:	2801      	cmp	r0, #1
    2a06:	d10c      	bne.n	2a22 <vTaskStartScheduler+0x4a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
    2a08:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xSchedulerRunning = pdTRUE;
    2a0a:	2201      	movs	r2, #1
    2a0c:	4b0d      	ldr	r3, [pc, #52]	; (2a44 <vTaskStartScheduler+0x6c>)
    2a0e:	447b      	add	r3, pc
    2a10:	659a      	str	r2, [r3, #88]	; 0x58
		xTickCount = ( TickType_t ) 0U;
    2a12:	2200      	movs	r2, #0
    2a14:	4b0c      	ldr	r3, [pc, #48]	; (2a48 <vTaskStartScheduler+0x70>)
    2a16:	447b      	add	r3, pc
    2a18:	62da      	str	r2, [r3, #44]	; 0x2c
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    2a1a:	4b0c      	ldr	r3, [pc, #48]	; (2a4c <vTaskStartScheduler+0x74>)
    2a1c:	58e3      	ldr	r3, [r4, r3]
    2a1e:	4798      	blx	r3
    2a20:	e003      	b.n	2a2a <vTaskStartScheduler+0x52>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
    2a22:	2800      	cmp	r0, #0
    2a24:	d101      	bne.n	2a2a <vTaskStartScheduler+0x52>
    2a26:	b672      	cpsid	i
    2a28:	e7fe      	b.n	2a28 <vTaskStartScheduler+0x50>
	}
}
    2a2a:	b007      	add	sp, #28
    2a2c:	bd30      	pop	{r4, r5, pc}
    2a2e:	46c0      	nop			; (mov r8, r8)
    2a30:	00001d2a 	.word	0x00001d2a
    2a34:	000003bd 	.word	0x000003bd
    2a38:	00001cdc 	.word	0x00001cdc
    2a3c:	00000054 	.word	0x00000054
    2a40:	00000160 	.word	0x00000160
    2a44:	1ffff272 	.word	0x1ffff272
    2a48:	1ffff1ea 	.word	0x1ffff1ea
    2a4c:	00000048 	.word	0x00000048

00002a50 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    2a50:	4b02      	ldr	r3, [pc, #8]	; (2a5c <vTaskSuspendAll+0xc>)
    2a52:	447b      	add	r3, pc
    2a54:	6e9a      	ldr	r2, [r3, #104]	; 0x68
    2a56:	3201      	adds	r2, #1
    2a58:	669a      	str	r2, [r3, #104]	; 0x68
}
    2a5a:	4770      	bx	lr
    2a5c:	1ffff22e 	.word	0x1ffff22e

00002a60 <xTaskGetTickCount>:
	return xAlreadyYielded;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    2a60:	b530      	push	{r4, r5, lr}
    2a62:	b083      	sub	sp, #12
    2a64:	4c06      	ldr	r4, [pc, #24]	; (2a80 <xTaskGetTickCount+0x20>)
    2a66:	447c      	add	r4, pc
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    2a68:	4b06      	ldr	r3, [pc, #24]	; (2a84 <xTaskGetTickCount+0x24>)
    2a6a:	58e3      	ldr	r3, [r4, r3]
    2a6c:	4798      	blx	r3
	{
		xTicks = xTickCount;
    2a6e:	4b06      	ldr	r3, [pc, #24]	; (2a88 <xTaskGetTickCount+0x28>)
    2a70:	447b      	add	r3, pc
    2a72:	6add      	ldr	r5, [r3, #44]	; 0x2c
	}
	taskEXIT_CRITICAL();
    2a74:	4b05      	ldr	r3, [pc, #20]	; (2a8c <xTaskGetTickCount+0x2c>)
    2a76:	58e3      	ldr	r3, [r4, r3]
    2a78:	4798      	blx	r3

	return xTicks;
}
    2a7a:	1c28      	adds	r0, r5, #0
    2a7c:	b003      	add	sp, #12
    2a7e:	bd30      	pop	{r4, r5, pc}
    2a80:	00001ca2 	.word	0x00001ca2
    2a84:	00000218 	.word	0x00000218
    2a88:	1ffff190 	.word	0x1ffff190
    2a8c:	0000000c 	.word	0x0000000c

00002a90 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
    2a90:	b530      	push	{r4, r5, lr}
    2a92:	b083      	sub	sp, #12
    2a94:	4c06      	ldr	r4, [pc, #24]	; (2ab0 <xTaskGetTickCountFromISR+0x20>)
    2a96:	447c      	add	r4, pc
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    2a98:	4b06      	ldr	r3, [pc, #24]	; (2ab4 <xTaskGetTickCountFromISR+0x24>)
    2a9a:	58e3      	ldr	r3, [r4, r3]
    2a9c:	4798      	blx	r3
	{
		xReturn = xTickCount;
    2a9e:	4b06      	ldr	r3, [pc, #24]	; (2ab8 <xTaskGetTickCountFromISR+0x28>)
    2aa0:	447b      	add	r3, pc
    2aa2:	6add      	ldr	r5, [r3, #44]	; 0x2c
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    2aa4:	4b05      	ldr	r3, [pc, #20]	; (2abc <xTaskGetTickCountFromISR+0x2c>)
    2aa6:	58e3      	ldr	r3, [r4, r3]
    2aa8:	4798      	blx	r3

	return xReturn;
}
    2aaa:	1c28      	adds	r0, r5, #0
    2aac:	b003      	add	sp, #12
    2aae:	bd30      	pop	{r4, r5, pc}
    2ab0:	00001c72 	.word	0x00001c72
    2ab4:	000001f0 	.word	0x000001f0
    2ab8:	1ffff160 	.word	0x1ffff160
    2abc:	000000f4 	.word	0x000000f4

00002ac0 <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    2ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ac2:	4657      	mov	r7, sl
    2ac4:	464e      	mov	r6, r9
    2ac6:	4645      	mov	r5, r8
    2ac8:	b4e0      	push	{r5, r6, r7}
    2aca:	b082      	sub	sp, #8
    2acc:	4d4a      	ldr	r5, [pc, #296]	; (2bf8 <xTaskIncrementTick+0x138>)
    2ace:	447d      	add	r5, pc

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    2ad0:	4b4a      	ldr	r3, [pc, #296]	; (2bfc <xTaskIncrementTick+0x13c>)
    2ad2:	447b      	add	r3, pc
    2ad4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    2ad6:	2b00      	cmp	r3, #0
    2ad8:	d000      	beq.n	2adc <xTaskIncrementTick+0x1c>
    2ada:	e078      	b.n	2bce <xTaskIncrementTick+0x10e>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
    2adc:	4b48      	ldr	r3, [pc, #288]	; (2c00 <xTaskIncrementTick+0x140>)
    2ade:	447b      	add	r3, pc
    2ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2ae2:	3201      	adds	r2, #1
    2ae4:	62da      	str	r2, [r3, #44]	; 0x2c

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
    2ae6:	6adf      	ldr	r7, [r3, #44]	; 0x2c

			if( xConstTickCount == ( TickType_t ) 0U )
    2ae8:	2f00      	cmp	r7, #0
    2aea:	d115      	bne.n	2b18 <xTaskIncrementTick+0x58>
			{
				taskSWITCH_DELAYED_LISTS();
    2aec:	4b45      	ldr	r3, [pc, #276]	; (2c04 <xTaskIncrementTick+0x144>)
    2aee:	447b      	add	r3, pc
    2af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2af2:	681b      	ldr	r3, [r3, #0]
    2af4:	2b00      	cmp	r3, #0
    2af6:	d001      	beq.n	2afc <xTaskIncrementTick+0x3c>
    2af8:	b672      	cpsid	i
    2afa:	e7fe      	b.n	2afa <xTaskIncrementTick+0x3a>
    2afc:	4b42      	ldr	r3, [pc, #264]	; (2c08 <xTaskIncrementTick+0x148>)
    2afe:	447b      	add	r3, pc
    2b00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2b02:	6b19      	ldr	r1, [r3, #48]	; 0x30
    2b04:	6299      	str	r1, [r3, #40]	; 0x28
    2b06:	631a      	str	r2, [r3, #48]	; 0x30
    2b08:	4b40      	ldr	r3, [pc, #256]	; (2c0c <xTaskIncrementTick+0x14c>)
    2b0a:	447b      	add	r3, pc
    2b0c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    2b0e:	3201      	adds	r2, #1
    2b10:	66da      	str	r2, [r3, #108]	; 0x6c
    2b12:	4b3f      	ldr	r3, [pc, #252]	; (2c10 <xTaskIncrementTick+0x150>)
    2b14:	447b      	add	r3, pc
    2b16:	4798      	blx	r3

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
    2b18:	4b3e      	ldr	r3, [pc, #248]	; (2c14 <xTaskIncrementTick+0x154>)
    2b1a:	447b      	add	r3, pc
    2b1c:	681b      	ldr	r3, [r3, #0]

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    2b1e:	2400      	movs	r4, #0

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
    2b20:	429f      	cmp	r7, r3
    2b22:	d346      	bcc.n	2bb2 <xTaskIncrementTick+0xf2>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    2b24:	4a3c      	ldr	r2, [pc, #240]	; (2c18 <xTaskIncrementTick+0x158>)
    2b26:	447a      	add	r2, pc
    2b28:	4692      	mov	sl, r2
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
    2b2a:	4b3c      	ldr	r3, [pc, #240]	; (2c1c <xTaskIncrementTick+0x15c>)
    2b2c:	447b      	add	r3, pc
    2b2e:	3338      	adds	r3, #56	; 0x38
    2b30:	4699      	mov	r9, r3
    2b32:	e000      	b.n	2b36 <xTaskIncrementTick+0x76>
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
							{
								xSwitchRequired = pdTRUE;
    2b34:	2401      	movs	r4, #1
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    2b36:	4652      	mov	r2, sl
    2b38:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2b3a:	681b      	ldr	r3, [r3, #0]
    2b3c:	2b00      	cmp	r3, #0
    2b3e:	d105      	bne.n	2b4c <xTaskIncrementTick+0x8c>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
    2b40:	2201      	movs	r2, #1
    2b42:	4252      	negs	r2, r2
    2b44:	4b36      	ldr	r3, [pc, #216]	; (2c20 <xTaskIncrementTick+0x160>)
    2b46:	447b      	add	r3, pc
    2b48:	601a      	str	r2, [r3, #0]
						break;
    2b4a:	e032      	b.n	2bb2 <xTaskIncrementTick+0xf2>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    2b4c:	4b35      	ldr	r3, [pc, #212]	; (2c24 <xTaskIncrementTick+0x164>)
    2b4e:	447b      	add	r3, pc
    2b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2b52:	68db      	ldr	r3, [r3, #12]
    2b54:	68de      	ldr	r6, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    2b56:	6873      	ldr	r3, [r6, #4]

						if( xConstTickCount < xItemValue )
    2b58:	429f      	cmp	r7, r3
    2b5a:	d203      	bcs.n	2b64 <xTaskIncrementTick+0xa4>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
    2b5c:	4a32      	ldr	r2, [pc, #200]	; (2c28 <xTaskIncrementTick+0x168>)
    2b5e:	447a      	add	r2, pc
    2b60:	6013      	str	r3, [r2, #0]
							break;
    2b62:	e026      	b.n	2bb2 <xTaskIncrementTick+0xf2>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    2b64:	1d33      	adds	r3, r6, #4
    2b66:	4698      	mov	r8, r3
    2b68:	1c18      	adds	r0, r3, #0
    2b6a:	4b30      	ldr	r3, [pc, #192]	; (2c2c <xTaskIncrementTick+0x16c>)
    2b6c:	58eb      	ldr	r3, [r5, r3]
    2b6e:	4798      	blx	r3

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    2b70:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    2b72:	2a00      	cmp	r2, #0
    2b74:	d004      	beq.n	2b80 <xTaskIncrementTick+0xc0>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    2b76:	1c30      	adds	r0, r6, #0
    2b78:	3018      	adds	r0, #24
    2b7a:	4b2c      	ldr	r3, [pc, #176]	; (2c2c <xTaskIncrementTick+0x16c>)
    2b7c:	58eb      	ldr	r3, [r5, r3]
    2b7e:	4798      	blx	r3
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
    2b80:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    2b82:	4a2b      	ldr	r2, [pc, #172]	; (2c30 <xTaskIncrementTick+0x170>)
    2b84:	447a      	add	r2, pc
    2b86:	6e12      	ldr	r2, [r2, #96]	; 0x60
    2b88:	4293      	cmp	r3, r2
    2b8a:	d902      	bls.n	2b92 <xTaskIncrementTick+0xd2>
    2b8c:	4a29      	ldr	r2, [pc, #164]	; (2c34 <xTaskIncrementTick+0x174>)
    2b8e:	447a      	add	r2, pc
    2b90:	6613      	str	r3, [r2, #96]	; 0x60
    2b92:	0098      	lsls	r0, r3, #2
    2b94:	18c0      	adds	r0, r0, r3
    2b96:	0080      	lsls	r0, r0, #2
    2b98:	4448      	add	r0, r9
    2b9a:	4641      	mov	r1, r8
    2b9c:	4b26      	ldr	r3, [pc, #152]	; (2c38 <xTaskIncrementTick+0x178>)
    2b9e:	58eb      	ldr	r3, [r5, r3]
    2ba0:	4798      	blx	r3
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    2ba2:	4b26      	ldr	r3, [pc, #152]	; (2c3c <xTaskIncrementTick+0x17c>)
    2ba4:	58eb      	ldr	r3, [r5, r3]
    2ba6:	681b      	ldr	r3, [r3, #0]
    2ba8:	6af2      	ldr	r2, [r6, #44]	; 0x2c
    2baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2bac:	429a      	cmp	r2, r3
    2bae:	d2c1      	bcs.n	2b34 <xTaskIncrementTick+0x74>
    2bb0:	e7c1      	b.n	2b36 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    2bb2:	4b22      	ldr	r3, [pc, #136]	; (2c3c <xTaskIncrementTick+0x17c>)
    2bb4:	58eb      	ldr	r3, [r5, r3]
    2bb6:	681b      	ldr	r3, [r3, #0]
    2bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2bba:	009a      	lsls	r2, r3, #2
    2bbc:	18d3      	adds	r3, r2, r3
    2bbe:	009b      	lsls	r3, r3, #2
    2bc0:	4a1f      	ldr	r2, [pc, #124]	; (2c40 <xTaskIncrementTick+0x180>)
    2bc2:	447a      	add	r2, pc
    2bc4:	18d3      	adds	r3, r2, r3
    2bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2bc8:	2b01      	cmp	r3, #1
    2bca:	d807      	bhi.n	2bdc <xTaskIncrementTick+0x11c>
    2bcc:	e007      	b.n	2bde <xTaskIncrementTick+0x11e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    2bce:	4b1d      	ldr	r3, [pc, #116]	; (2c44 <xTaskIncrementTick+0x184>)
    2bd0:	447b      	add	r3, pc
    2bd2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    2bd4:	3201      	adds	r2, #1
    2bd6:	671a      	str	r2, [r3, #112]	; 0x70

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    2bd8:	2400      	movs	r4, #0
    2bda:	e000      	b.n	2bde <xTaskIncrementTick+0x11e>
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
			{
				xSwitchRequired = pdTRUE;
    2bdc:	2401      	movs	r4, #1
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    2bde:	4b1a      	ldr	r3, [pc, #104]	; (2c48 <xTaskIncrementTick+0x188>)
    2be0:	447b      	add	r3, pc
    2be2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    2be4:	2b00      	cmp	r3, #0
    2be6:	d000      	beq.n	2bea <xTaskIncrementTick+0x12a>
		{
			xSwitchRequired = pdTRUE;
    2be8:	2401      	movs	r4, #1
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
    2bea:	1c20      	adds	r0, r4, #0
    2bec:	b002      	add	sp, #8
    2bee:	bc1c      	pop	{r2, r3, r4}
    2bf0:	4690      	mov	r8, r2
    2bf2:	4699      	mov	r9, r3
    2bf4:	46a2      	mov	sl, r4
    2bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2bf8:	00001c3a 	.word	0x00001c3a
    2bfc:	1ffff1ae 	.word	0x1ffff1ae
    2c00:	1ffff122 	.word	0x1ffff122
    2c04:	1ffff112 	.word	0x1ffff112
    2c08:	1ffff102 	.word	0x1ffff102
    2c0c:	1ffff176 	.word	0x1ffff176
    2c10:	fffffa49 	.word	0xfffffa49
    2c14:	1fffd4e6 	.word	0x1fffd4e6
    2c18:	1ffff0da 	.word	0x1ffff0da
    2c1c:	1ffff0d4 	.word	0x1ffff0d4
    2c20:	1fffd4ba 	.word	0x1fffd4ba
    2c24:	1ffff0b2 	.word	0x1ffff0b2
    2c28:	1fffd4a2 	.word	0x1fffd4a2
    2c2c:	00000104 	.word	0x00000104
    2c30:	1ffff0fc 	.word	0x1ffff0fc
    2c34:	1ffff0f2 	.word	0x1ffff0f2
    2c38:	00000078 	.word	0x00000078
    2c3c:	00000038 	.word	0x00000038
    2c40:	1ffff03e 	.word	0x1ffff03e
    2c44:	1ffff0b0 	.word	0x1ffff0b0
    2c48:	1ffff0a0 	.word	0x1ffff0a0

00002c4c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    2c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c4e:	464f      	mov	r7, r9
    2c50:	b480      	push	{r7}
    2c52:	b082      	sub	sp, #8
    2c54:	4c3f      	ldr	r4, [pc, #252]	; (2d54 <xTaskResumeAll+0x108>)
    2c56:	447c      	add	r4, pc
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
    2c58:	4b3f      	ldr	r3, [pc, #252]	; (2d58 <xTaskResumeAll+0x10c>)
    2c5a:	447b      	add	r3, pc
    2c5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    2c5e:	2b00      	cmp	r3, #0
    2c60:	d101      	bne.n	2c66 <xTaskResumeAll+0x1a>
    2c62:	b672      	cpsid	i
    2c64:	e7fe      	b.n	2c64 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    2c66:	4b3d      	ldr	r3, [pc, #244]	; (2d5c <xTaskResumeAll+0x110>)
    2c68:	58e3      	ldr	r3, [r4, r3]
    2c6a:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
    2c6c:	4b3c      	ldr	r3, [pc, #240]	; (2d60 <xTaskResumeAll+0x114>)
    2c6e:	447b      	add	r3, pc
    2c70:	6e9a      	ldr	r2, [r3, #104]	; 0x68
    2c72:	3a01      	subs	r2, #1
    2c74:	669a      	str	r2, [r3, #104]	; 0x68

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    2c76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
    2c78:	2500      	movs	r5, #0
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
	{
		--uxSchedulerSuspended;

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    2c7a:	2b00      	cmp	r3, #0
    2c7c:	d161      	bne.n	2d42 <xTaskResumeAll+0xf6>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    2c7e:	4b39      	ldr	r3, [pc, #228]	; (2d64 <xTaskResumeAll+0x118>)
    2c80:	447b      	add	r3, pc
    2c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    2c84:	2b00      	cmp	r3, #0
    2c86:	d05c      	beq.n	2d42 <xTaskResumeAll+0xf6>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    2c88:	4a37      	ldr	r2, [pc, #220]	; (2d68 <xTaskResumeAll+0x11c>)
    2c8a:	447a      	add	r2, pc
    2c8c:	4691      	mov	r9, r2
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyList( pxTCB );
    2c8e:	4b37      	ldr	r3, [pc, #220]	; (2d6c <xTaskResumeAll+0x120>)
    2c90:	447b      	add	r3, pc
    2c92:	1c1e      	adds	r6, r3, #0
    2c94:	3638      	adds	r6, #56	; 0x38
    2c96:	e029      	b.n	2cec <xTaskResumeAll+0xa0>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    2c98:	4b35      	ldr	r3, [pc, #212]	; (2d70 <xTaskResumeAll+0x124>)
    2c9a:	447b      	add	r3, pc
    2c9c:	6a1b      	ldr	r3, [r3, #32]
    2c9e:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    2ca0:	1c28      	adds	r0, r5, #0
    2ca2:	3018      	adds	r0, #24
    2ca4:	4b33      	ldr	r3, [pc, #204]	; (2d74 <xTaskResumeAll+0x128>)
    2ca6:	58e3      	ldr	r3, [r4, r3]
    2ca8:	9301      	str	r3, [sp, #4]
    2caa:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    2cac:	1d2f      	adds	r7, r5, #4
    2cae:	1c38      	adds	r0, r7, #0
    2cb0:	9b01      	ldr	r3, [sp, #4]
    2cb2:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    2cb4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    2cb6:	4a30      	ldr	r2, [pc, #192]	; (2d78 <xTaskResumeAll+0x12c>)
    2cb8:	447a      	add	r2, pc
    2cba:	6e12      	ldr	r2, [r2, #96]	; 0x60
    2cbc:	4293      	cmp	r3, r2
    2cbe:	d902      	bls.n	2cc6 <xTaskResumeAll+0x7a>
    2cc0:	4a2e      	ldr	r2, [pc, #184]	; (2d7c <xTaskResumeAll+0x130>)
    2cc2:	447a      	add	r2, pc
    2cc4:	6613      	str	r3, [r2, #96]	; 0x60
    2cc6:	0098      	lsls	r0, r3, #2
    2cc8:	18c0      	adds	r0, r0, r3
    2cca:	0080      	lsls	r0, r0, #2
    2ccc:	1830      	adds	r0, r6, r0
    2cce:	1c39      	adds	r1, r7, #0
    2cd0:	4b2b      	ldr	r3, [pc, #172]	; (2d80 <xTaskResumeAll+0x134>)
    2cd2:	58e3      	ldr	r3, [r4, r3]
    2cd4:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    2cd6:	4b2b      	ldr	r3, [pc, #172]	; (2d84 <xTaskResumeAll+0x138>)
    2cd8:	58e3      	ldr	r3, [r4, r3]
    2cda:	681b      	ldr	r3, [r3, #0]
    2cdc:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    2cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2ce0:	429a      	cmp	r2, r3
    2ce2:	d303      	bcc.n	2cec <xTaskResumeAll+0xa0>
					{
						xYieldPending = pdTRUE;
    2ce4:	2201      	movs	r2, #1
    2ce6:	4b28      	ldr	r3, [pc, #160]	; (2d88 <xTaskResumeAll+0x13c>)
    2ce8:	447b      	add	r3, pc
    2cea:	675a      	str	r2, [r3, #116]	; 0x74
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    2cec:	464a      	mov	r2, r9
    2cee:	6952      	ldr	r2, [r2, #20]
    2cf0:	2a00      	cmp	r2, #0
    2cf2:	d1d1      	bne.n	2c98 <xTaskResumeAll+0x4c>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
    2cf4:	4b25      	ldr	r3, [pc, #148]	; (2d8c <xTaskResumeAll+0x140>)
    2cf6:	447b      	add	r3, pc
    2cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    2cfa:	2b00      	cmp	r3, #0
    2cfc:	d017      	beq.n	2d2e <xTaskResumeAll+0xe2>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
    2cfe:	4b24      	ldr	r3, [pc, #144]	; (2d90 <xTaskResumeAll+0x144>)
    2d00:	447b      	add	r3, pc
    2d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    2d04:	2b00      	cmp	r3, #0
    2d06:	d012      	beq.n	2d2e <xTaskResumeAll+0xe2>
					{
						if( xTaskIncrementTick() != pdFALSE )
    2d08:	4b22      	ldr	r3, [pc, #136]	; (2d94 <xTaskResumeAll+0x148>)
    2d0a:	58e3      	ldr	r3, [r4, r3]
    2d0c:	9301      	str	r3, [sp, #4]
						{
							xYieldPending = pdTRUE;
    2d0e:	4e22      	ldr	r6, [pc, #136]	; (2d98 <xTaskResumeAll+0x14c>)
    2d10:	447e      	add	r6, pc
    2d12:	2501      	movs	r5, #1
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
					{
						if( xTaskIncrementTick() != pdFALSE )
    2d14:	9b01      	ldr	r3, [sp, #4]
    2d16:	4798      	blx	r3
    2d18:	2800      	cmp	r0, #0
    2d1a:	d000      	beq.n	2d1e <xTaskResumeAll+0xd2>
						{
							xYieldPending = pdTRUE;
    2d1c:	6775      	str	r5, [r6, #116]	; 0x74
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
    2d1e:	4b1f      	ldr	r3, [pc, #124]	; (2d9c <xTaskResumeAll+0x150>)
    2d20:	447b      	add	r3, pc
    2d22:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    2d24:	3a01      	subs	r2, #1
    2d26:	671a      	str	r2, [r3, #112]	; 0x70
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
    2d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    2d2a:	2b00      	cmp	r3, #0
    2d2c:	d1f2      	bne.n	2d14 <xTaskResumeAll+0xc8>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
    2d2e:	4b1c      	ldr	r3, [pc, #112]	; (2da0 <xTaskResumeAll+0x154>)
    2d30:	447b      	add	r3, pc
    2d32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
    2d34:	2500      	movs	r5, #0
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
    2d36:	2b01      	cmp	r3, #1
    2d38:	d103      	bne.n	2d42 <xTaskResumeAll+0xf6>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    2d3a:	4b1a      	ldr	r3, [pc, #104]	; (2da4 <xTaskResumeAll+0x158>)
    2d3c:	58e3      	ldr	r3, [r4, r3]
    2d3e:	4798      	blx	r3

				if( xYieldPending == pdTRUE )
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    2d40:	2501      	movs	r5, #1
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    2d42:	4b19      	ldr	r3, [pc, #100]	; (2da8 <xTaskResumeAll+0x15c>)
    2d44:	58e3      	ldr	r3, [r4, r3]
    2d46:	4798      	blx	r3

	return xAlreadyYielded;
}
    2d48:	1c28      	adds	r0, r5, #0
    2d4a:	b002      	add	sp, #8
    2d4c:	bc04      	pop	{r2}
    2d4e:	4691      	mov	r9, r2
    2d50:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d52:	46c0      	nop			; (mov r8, r8)
    2d54:	00001ab2 	.word	0x00001ab2
    2d58:	1ffff026 	.word	0x1ffff026
    2d5c:	00000218 	.word	0x00000218
    2d60:	1ffff012 	.word	0x1ffff012
    2d64:	1fffef80 	.word	0x1fffef80
    2d68:	1fffef76 	.word	0x1fffef76
    2d6c:	1fffef70 	.word	0x1fffef70
    2d70:	1fffef66 	.word	0x1fffef66
    2d74:	00000104 	.word	0x00000104
    2d78:	1fffefc8 	.word	0x1fffefc8
    2d7c:	1fffefbe 	.word	0x1fffefbe
    2d80:	00000078 	.word	0x00000078
    2d84:	00000038 	.word	0x00000038
    2d88:	1fffef98 	.word	0x1fffef98
    2d8c:	1fffef8a 	.word	0x1fffef8a
    2d90:	1fffef80 	.word	0x1fffef80
    2d94:	000001cc 	.word	0x000001cc
    2d98:	1fffef70 	.word	0x1fffef70
    2d9c:	1fffef60 	.word	0x1fffef60
    2da0:	1fffef50 	.word	0x1fffef50
    2da4:	00000144 	.word	0x00000144
    2da8:	0000000c 	.word	0x0000000c

00002dac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    2dac:	b5f0      	push	{r4, r5, r6, r7, lr}
    2dae:	464f      	mov	r7, r9
    2db0:	4646      	mov	r6, r8
    2db2:	b4c0      	push	{r6, r7}
    2db4:	b083      	sub	sp, #12
    2db6:	4c1e      	ldr	r4, [pc, #120]	; (2e30 <prvIdleTask+0x84>)
    2db8:	447c      	add	r4, pc
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
    2dba:	4e1e      	ldr	r6, [pc, #120]	; (2e34 <prvIdleTask+0x88>)
    2dbc:	447e      	add	r6, pc

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    2dbe:	4a1e      	ldr	r2, [pc, #120]	; (2e38 <prvIdleTask+0x8c>)
    2dc0:	447a      	add	r2, pc
    2dc2:	4690      	mov	r8, r2
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    2dc4:	4f1d      	ldr	r7, [pc, #116]	; (2e3c <prvIdleTask+0x90>)
    2dc6:	447f      	add	r7, pc
    2dc8:	e027      	b.n	2e1a <prvIdleTask+0x6e>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
    2dca:	4b1d      	ldr	r3, [pc, #116]	; (2e40 <prvIdleTask+0x94>)
    2dcc:	58e3      	ldr	r3, [r4, r3]
    2dce:	4798      	blx	r3
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    2dd0:	6c7d      	ldr	r5, [r7, #68]	; 0x44
			}
			( void ) xTaskResumeAll();
    2dd2:	4b1c      	ldr	r3, [pc, #112]	; (2e44 <prvIdleTask+0x98>)
    2dd4:	58e3      	ldr	r3, [r4, r3]
    2dd6:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
    2dd8:	2d00      	cmp	r5, #0
    2dda:	d01e      	beq.n	2e1a <prvIdleTask+0x6e>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
    2ddc:	4b1a      	ldr	r3, [pc, #104]	; (2e48 <prvIdleTask+0x9c>)
    2dde:	58e3      	ldr	r3, [r4, r3]
    2de0:	4798      	blx	r3
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    2de2:	4d1a      	ldr	r5, [pc, #104]	; (2e4c <prvIdleTask+0xa0>)
    2de4:	447d      	add	r5, pc
    2de6:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    2de8:	68da      	ldr	r2, [r3, #12]
    2dea:	4691      	mov	r9, r2
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    2dec:	1c10      	adds	r0, r2, #0
    2dee:	3004      	adds	r0, #4
    2df0:	4b17      	ldr	r3, [pc, #92]	; (2e50 <prvIdleTask+0xa4>)
    2df2:	58e3      	ldr	r3, [r4, r3]
    2df4:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
    2df6:	4b17      	ldr	r3, [pc, #92]	; (2e54 <prvIdleTask+0xa8>)
    2df8:	447b      	add	r3, pc
    2dfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    2dfc:	3a01      	subs	r2, #1
    2dfe:	635a      	str	r2, [r3, #52]	; 0x34
					--uxTasksDeleted;
    2e00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    2e02:	3b01      	subs	r3, #1
    2e04:	666b      	str	r3, [r5, #100]	; 0x64
				}
				taskEXIT_CRITICAL();
    2e06:	4b14      	ldr	r3, [pc, #80]	; (2e58 <prvIdleTask+0xac>)
    2e08:	58e3      	ldr	r3, [r4, r3]
    2e0a:	4798      	blx	r3
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
		vPortFreeAligned( pxTCB->pxStack );
    2e0c:	464b      	mov	r3, r9
    2e0e:	6b18      	ldr	r0, [r3, #48]	; 0x30
    2e10:	4b12      	ldr	r3, [pc, #72]	; (2e5c <prvIdleTask+0xb0>)
    2e12:	58e5      	ldr	r5, [r4, r3]
    2e14:	47a8      	blx	r5
		vPortFree( pxTCB );
    2e16:	4648      	mov	r0, r9
    2e18:	47a8      	blx	r5
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
    2e1a:	6e73      	ldr	r3, [r6, #100]	; 0x64
    2e1c:	2b00      	cmp	r3, #0
    2e1e:	d1d4      	bne.n	2dca <prvIdleTask+0x1e>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    2e20:	4642      	mov	r2, r8
    2e22:	6b92      	ldr	r2, [r2, #56]	; 0x38
    2e24:	2a01      	cmp	r2, #1
    2e26:	d9f8      	bls.n	2e1a <prvIdleTask+0x6e>
			{
				taskYIELD();
    2e28:	4b0d      	ldr	r3, [pc, #52]	; (2e60 <prvIdleTask+0xb4>)
    2e2a:	58e3      	ldr	r3, [r4, r3]
    2e2c:	4798      	blx	r3
    2e2e:	e7f4      	b.n	2e1a <prvIdleTask+0x6e>
    2e30:	00001950 	.word	0x00001950
    2e34:	1fffeec4 	.word	0x1fffeec4
    2e38:	1fffee40 	.word	0x1fffee40
    2e3c:	1fffeeba 	.word	0x1fffeeba
    2e40:	000000f8 	.word	0x000000f8
    2e44:	0000019c 	.word	0x0000019c
    2e48:	00000218 	.word	0x00000218
    2e4c:	1fffee9c 	.word	0x1fffee9c
    2e50:	00000104 	.word	0x00000104
    2e54:	1fffee08 	.word	0x1fffee08
    2e58:	0000000c 	.word	0x0000000c
    2e5c:	00000068 	.word	0x00000068
    2e60:	00000144 	.word	0x00000144

00002e64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    2e64:	b530      	push	{r4, r5, lr}
    2e66:	4827      	ldr	r0, [pc, #156]	; (2f04 <vTaskSwitchContext+0xa0>)
    2e68:	4478      	add	r0, pc
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    2e6a:	4b27      	ldr	r3, [pc, #156]	; (2f08 <vTaskSwitchContext+0xa4>)
    2e6c:	447b      	add	r3, pc
    2e6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    2e70:	2b00      	cmp	r3, #0
    2e72:	d004      	beq.n	2e7e <vTaskSwitchContext+0x1a>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    2e74:	2201      	movs	r2, #1
    2e76:	4b25      	ldr	r3, [pc, #148]	; (2f0c <vTaskSwitchContext+0xa8>)
    2e78:	447b      	add	r3, pc
    2e7a:	675a      	str	r2, [r3, #116]	; 0x74
    2e7c:	e041      	b.n	2f02 <vTaskSwitchContext+0x9e>
	}
	else
	{
		xYieldPending = pdFALSE;
    2e7e:	4b24      	ldr	r3, [pc, #144]	; (2f10 <vTaskSwitchContext+0xac>)
    2e80:	447b      	add	r3, pc
    2e82:	2200      	movs	r2, #0
    2e84:	675a      	str	r2, [r3, #116]	; 0x74
		#endif /* configGENERATE_RUN_TIME_STATS */

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
    2e86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    2e88:	009a      	lsls	r2, r3, #2
    2e8a:	18d3      	adds	r3, r2, r3
    2e8c:	009b      	lsls	r3, r3, #2
    2e8e:	4a21      	ldr	r2, [pc, #132]	; (2f14 <vTaskSwitchContext+0xb0>)
    2e90:	447a      	add	r2, pc
    2e92:	18d3      	adds	r3, r2, r3
    2e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2e96:	2b00      	cmp	r3, #0
    2e98:	d11b      	bne.n	2ed2 <vTaskSwitchContext+0x6e>
    2e9a:	4b1f      	ldr	r3, [pc, #124]	; (2f18 <vTaskSwitchContext+0xb4>)
    2e9c:	447b      	add	r3, pc
    2e9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    2ea0:	2b00      	cmp	r3, #0
    2ea2:	d105      	bne.n	2eb0 <vTaskSwitchContext+0x4c>
    2ea4:	e002      	b.n	2eac <vTaskSwitchContext+0x48>
    2ea6:	6e22      	ldr	r2, [r4, #96]	; 0x60
    2ea8:	2a00      	cmp	r2, #0
    2eaa:	d107      	bne.n	2ebc <vTaskSwitchContext+0x58>
    2eac:	b672      	cpsid	i
    2eae:	e7fe      	b.n	2eae <vTaskSwitchContext+0x4a>
    2eb0:	4b1a      	ldr	r3, [pc, #104]	; (2f1c <vTaskSwitchContext+0xb8>)
    2eb2:	447b      	add	r3, pc
    2eb4:	4d1a      	ldr	r5, [pc, #104]	; (2f20 <vTaskSwitchContext+0xbc>)
    2eb6:	447d      	add	r5, pc
    2eb8:	4c1a      	ldr	r4, [pc, #104]	; (2f24 <vTaskSwitchContext+0xc0>)
    2eba:	447c      	add	r4, pc
    2ebc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    2ebe:	3a01      	subs	r2, #1
    2ec0:	661a      	str	r2, [r3, #96]	; 0x60
    2ec2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    2ec4:	0091      	lsls	r1, r2, #2
    2ec6:	188a      	adds	r2, r1, r2
    2ec8:	0092      	lsls	r2, r2, #2
    2eca:	18aa      	adds	r2, r5, r2
    2ecc:	6b92      	ldr	r2, [r2, #56]	; 0x38
    2ece:	2a00      	cmp	r2, #0
    2ed0:	d0e9      	beq.n	2ea6 <vTaskSwitchContext+0x42>
    2ed2:	4b15      	ldr	r3, [pc, #84]	; (2f28 <vTaskSwitchContext+0xc4>)
    2ed4:	447b      	add	r3, pc
    2ed6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    2ed8:	009a      	lsls	r2, r3, #2
    2eda:	18d3      	adds	r3, r2, r3
    2edc:	009b      	lsls	r3, r3, #2
    2ede:	4a13      	ldr	r2, [pc, #76]	; (2f2c <vTaskSwitchContext+0xc8>)
    2ee0:	447a      	add	r2, pc
    2ee2:	3238      	adds	r2, #56	; 0x38
    2ee4:	18d3      	adds	r3, r2, r3
    2ee6:	685a      	ldr	r2, [r3, #4]
    2ee8:	6852      	ldr	r2, [r2, #4]
    2eea:	605a      	str	r2, [r3, #4]
    2eec:	1c19      	adds	r1, r3, #0
    2eee:	3108      	adds	r1, #8
    2ef0:	428a      	cmp	r2, r1
    2ef2:	d101      	bne.n	2ef8 <vTaskSwitchContext+0x94>
    2ef4:	6852      	ldr	r2, [r2, #4]
    2ef6:	605a      	str	r2, [r3, #4]
    2ef8:	685b      	ldr	r3, [r3, #4]
    2efa:	68da      	ldr	r2, [r3, #12]
    2efc:	4b0c      	ldr	r3, [pc, #48]	; (2f30 <vTaskSwitchContext+0xcc>)
    2efe:	58c3      	ldr	r3, [r0, r3]
    2f00:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    2f02:	bd30      	pop	{r4, r5, pc}
    2f04:	000018a0 	.word	0x000018a0
    2f08:	1fffee14 	.word	0x1fffee14
    2f0c:	1fffee08 	.word	0x1fffee08
    2f10:	1fffee00 	.word	0x1fffee00
    2f14:	1fffed70 	.word	0x1fffed70
    2f18:	1fffede4 	.word	0x1fffede4
    2f1c:	1fffedce 	.word	0x1fffedce
    2f20:	1fffed4a 	.word	0x1fffed4a
    2f24:	1fffedc6 	.word	0x1fffedc6
    2f28:	1fffedac 	.word	0x1fffedac
    2f2c:	1fffed20 	.word	0x1fffed20
    2f30:	00000038 	.word	0x00000038

00002f34 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
    2f34:	b570      	push	{r4, r5, r6, lr}
    2f36:	b082      	sub	sp, #8
    2f38:	1c05      	adds	r5, r0, #0
    2f3a:	4c2a      	ldr	r4, [pc, #168]	; (2fe4 <vTaskSuspend+0xb0>)
    2f3c:	447c      	add	r4, pc
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    2f3e:	4b2a      	ldr	r3, [pc, #168]	; (2fe8 <vTaskSuspend+0xb4>)
    2f40:	58e3      	ldr	r3, [r4, r3]
    2f42:	4798      	blx	r3
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
    2f44:	2d00      	cmp	r5, #0
    2f46:	d102      	bne.n	2f4e <vTaskSuspend+0x1a>
    2f48:	4b28      	ldr	r3, [pc, #160]	; (2fec <vTaskSuspend+0xb8>)
    2f4a:	58e3      	ldr	r3, [r4, r3]
    2f4c:	681d      	ldr	r5, [r3, #0]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    2f4e:	1d2e      	adds	r6, r5, #4
    2f50:	1c30      	adds	r0, r6, #0
    2f52:	4b27      	ldr	r3, [pc, #156]	; (2ff0 <vTaskSuspend+0xbc>)
    2f54:	58e3      	ldr	r3, [r4, r3]
    2f56:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    2f58:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2f5a:	2b00      	cmp	r3, #0
    2f5c:	d004      	beq.n	2f68 <vTaskSuspend+0x34>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    2f5e:	1c28      	adds	r0, r5, #0
    2f60:	3018      	adds	r0, #24
    2f62:	4b23      	ldr	r3, [pc, #140]	; (2ff0 <vTaskSuspend+0xbc>)
    2f64:	58e3      	ldr	r3, [r4, r3]
    2f66:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
    2f68:	4822      	ldr	r0, [pc, #136]	; (2ff4 <vTaskSuspend+0xc0>)
    2f6a:	4478      	add	r0, pc
    2f6c:	1c31      	adds	r1, r6, #0
    2f6e:	4b22      	ldr	r3, [pc, #136]	; (2ff8 <vTaskSuspend+0xc4>)
    2f70:	58e3      	ldr	r3, [r4, r3]
    2f72:	4798      	blx	r3
		}
		taskEXIT_CRITICAL();
    2f74:	4b21      	ldr	r3, [pc, #132]	; (2ffc <vTaskSuspend+0xc8>)
    2f76:	58e3      	ldr	r3, [r4, r3]
    2f78:	4798      	blx	r3

		if( pxTCB == pxCurrentTCB )
    2f7a:	4b1c      	ldr	r3, [pc, #112]	; (2fec <vTaskSuspend+0xb8>)
    2f7c:	58e3      	ldr	r3, [r4, r3]
    2f7e:	681b      	ldr	r3, [r3, #0]
    2f80:	429d      	cmp	r5, r3
    2f82:	d11e      	bne.n	2fc2 <vTaskSuspend+0x8e>
		{
			if( xSchedulerRunning != pdFALSE )
    2f84:	4b1e      	ldr	r3, [pc, #120]	; (3000 <vTaskSuspend+0xcc>)
    2f86:	447b      	add	r3, pc
    2f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    2f8a:	2b00      	cmp	r3, #0
    2f8c:	d00a      	beq.n	2fa4 <vTaskSuspend+0x70>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
    2f8e:	4b1d      	ldr	r3, [pc, #116]	; (3004 <vTaskSuspend+0xd0>)
    2f90:	447b      	add	r3, pc
    2f92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    2f94:	2b00      	cmp	r3, #0
    2f96:	d001      	beq.n	2f9c <vTaskSuspend+0x68>
    2f98:	b672      	cpsid	i
    2f9a:	e7fe      	b.n	2f9a <vTaskSuspend+0x66>
				portYIELD_WITHIN_API();
    2f9c:	4b1a      	ldr	r3, [pc, #104]	; (3008 <vTaskSuspend+0xd4>)
    2f9e:	58e3      	ldr	r3, [r4, r3]
    2fa0:	4798      	blx	r3
    2fa2:	e01c      	b.n	2fde <vTaskSuspend+0xaa>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    2fa4:	4b19      	ldr	r3, [pc, #100]	; (300c <vTaskSuspend+0xd8>)
    2fa6:	447b      	add	r3, pc
    2fa8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    2faa:	681b      	ldr	r3, [r3, #0]
    2fac:	4293      	cmp	r3, r2
    2fae:	d104      	bne.n	2fba <vTaskSuspend+0x86>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    2fb0:	4b0e      	ldr	r3, [pc, #56]	; (2fec <vTaskSuspend+0xb8>)
    2fb2:	58e3      	ldr	r3, [r4, r3]
    2fb4:	2200      	movs	r2, #0
    2fb6:	601a      	str	r2, [r3, #0]
    2fb8:	e011      	b.n	2fde <vTaskSuspend+0xaa>
				}
				else
				{
					vTaskSwitchContext();
    2fba:	4b15      	ldr	r3, [pc, #84]	; (3010 <vTaskSuspend+0xdc>)
    2fbc:	58e3      	ldr	r3, [r4, r3]
    2fbe:	4798      	blx	r3
    2fc0:	e00d      	b.n	2fde <vTaskSuspend+0xaa>
				}
			}
		}
		else
		{
			if( xSchedulerRunning != pdFALSE )
    2fc2:	4b14      	ldr	r3, [pc, #80]	; (3014 <vTaskSuspend+0xe0>)
    2fc4:	447b      	add	r3, pc
    2fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    2fc8:	2b00      	cmp	r3, #0
    2fca:	d008      	beq.n	2fde <vTaskSuspend+0xaa>
			{
				/* A task other than the currently running task was suspended,
				reset the next expected unblock time in case it referred to the
				task that is now in the Suspended state. */
				taskENTER_CRITICAL();
    2fcc:	4b06      	ldr	r3, [pc, #24]	; (2fe8 <vTaskSuspend+0xb4>)
    2fce:	58e3      	ldr	r3, [r4, r3]
    2fd0:	4798      	blx	r3
				{
					prvResetNextTaskUnblockTime();
    2fd2:	4b11      	ldr	r3, [pc, #68]	; (3018 <vTaskSuspend+0xe4>)
    2fd4:	447b      	add	r3, pc
    2fd6:	4798      	blx	r3
				}
				taskEXIT_CRITICAL();
    2fd8:	4b08      	ldr	r3, [pc, #32]	; (2ffc <vTaskSuspend+0xc8>)
    2fda:	58e3      	ldr	r3, [r4, r3]
    2fdc:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
    2fde:	b002      	add	sp, #8
    2fe0:	bd70      	pop	{r4, r5, r6, pc}
    2fe2:	46c0      	nop			; (mov r8, r8)
    2fe4:	000017cc 	.word	0x000017cc
    2fe8:	00000218 	.word	0x00000218
    2fec:	00000038 	.word	0x00000038
    2ff0:	00000104 	.word	0x00000104
    2ff4:	1fffec96 	.word	0x1fffec96
    2ff8:	00000078 	.word	0x00000078
    2ffc:	0000000c 	.word	0x0000000c
    3000:	1fffecfa 	.word	0x1fffecfa
    3004:	1fffecf0 	.word	0x1fffecf0
    3008:	00000144 	.word	0x00000144
    300c:	1fffec5a 	.word	0x1fffec5a
    3010:	00000120 	.word	0x00000120
    3014:	1fffecbc 	.word	0x1fffecbc
    3018:	fffff589 	.word	0xfffff589

0000301c <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    301c:	b570      	push	{r4, r5, r6, lr}
    301e:	b082      	sub	sp, #8
    3020:	1c0d      	adds	r5, r1, #0
    3022:	4c13      	ldr	r4, [pc, #76]	; (3070 <vTaskPlaceOnEventList+0x54>)
    3024:	447c      	add	r4, pc
TickType_t xTimeToWake;

	configASSERT( pxEventList );
    3026:	2800      	cmp	r0, #0
    3028:	d101      	bne.n	302e <vTaskPlaceOnEventList+0x12>
    302a:	b672      	cpsid	i
    302c:	e7fe      	b.n	302c <vTaskPlaceOnEventList+0x10>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    302e:	4b11      	ldr	r3, [pc, #68]	; (3074 <vTaskPlaceOnEventList+0x58>)
    3030:	58e6      	ldr	r6, [r4, r3]
    3032:	6831      	ldr	r1, [r6, #0]
    3034:	3118      	adds	r1, #24
    3036:	4b10      	ldr	r3, [pc, #64]	; (3078 <vTaskPlaceOnEventList+0x5c>)
    3038:	58e3      	ldr	r3, [r4, r3]
    303a:	4798      	blx	r3

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    303c:	6830      	ldr	r0, [r6, #0]
    303e:	3004      	adds	r0, #4
    3040:	4b0e      	ldr	r3, [pc, #56]	; (307c <vTaskPlaceOnEventList+0x60>)
    3042:	58e3      	ldr	r3, [r4, r3]
    3044:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    3046:	1c6b      	adds	r3, r5, #1
    3048:	d109      	bne.n	305e <vTaskPlaceOnEventList+0x42>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    304a:	4b0a      	ldr	r3, [pc, #40]	; (3074 <vTaskPlaceOnEventList+0x58>)
    304c:	58e3      	ldr	r3, [r4, r3]
    304e:	6819      	ldr	r1, [r3, #0]
    3050:	3104      	adds	r1, #4
    3052:	480b      	ldr	r0, [pc, #44]	; (3080 <vTaskPlaceOnEventList+0x64>)
    3054:	4478      	add	r0, pc
    3056:	4b0b      	ldr	r3, [pc, #44]	; (3084 <vTaskPlaceOnEventList+0x68>)
    3058:	58e3      	ldr	r3, [r4, r3]
    305a:	4798      	blx	r3
    305c:	e006      	b.n	306c <vTaskPlaceOnEventList+0x50>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
    305e:	4b0a      	ldr	r3, [pc, #40]	; (3088 <vTaskPlaceOnEventList+0x6c>)
    3060:	447b      	add	r3, pc
    3062:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    3064:	1828      	adds	r0, r5, r0
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    3066:	4b09      	ldr	r3, [pc, #36]	; (308c <vTaskPlaceOnEventList+0x70>)
    3068:	447b      	add	r3, pc
    306a:	4798      	blx	r3
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    306c:	b002      	add	sp, #8
    306e:	bd70      	pop	{r4, r5, r6, pc}
    3070:	000016e4 	.word	0x000016e4
    3074:	00000038 	.word	0x00000038
    3078:	00000158 	.word	0x00000158
    307c:	00000104 	.word	0x00000104
    3080:	1fffebac 	.word	0x1fffebac
    3084:	00000078 	.word	0x00000078
    3088:	1fffeba0 	.word	0x1fffeba0
    308c:	fffff531 	.word	0xfffff531

00003090 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait )
	{
    3090:	b570      	push	{r4, r5, r6, lr}
    3092:	b082      	sub	sp, #8
    3094:	1c0e      	adds	r6, r1, #0
    3096:	4c0d      	ldr	r4, [pc, #52]	; (30cc <vTaskPlaceOnEventListRestricted+0x3c>)
    3098:	447c      	add	r4, pc
	TickType_t xTimeToWake;

		configASSERT( pxEventList );
    309a:	2800      	cmp	r0, #0
    309c:	d101      	bne.n	30a2 <vTaskPlaceOnEventListRestricted+0x12>
    309e:	b672      	cpsid	i
    30a0:	e7fe      	b.n	30a0 <vTaskPlaceOnEventListRestricted+0x10>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    30a2:	4b0b      	ldr	r3, [pc, #44]	; (30d0 <vTaskPlaceOnEventListRestricted+0x40>)
    30a4:	58e5      	ldr	r5, [r4, r3]
    30a6:	6829      	ldr	r1, [r5, #0]
    30a8:	3118      	adds	r1, #24
    30aa:	4b0a      	ldr	r3, [pc, #40]	; (30d4 <vTaskPlaceOnEventListRestricted+0x44>)
    30ac:	58e3      	ldr	r3, [r4, r3]
    30ae:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    30b0:	6828      	ldr	r0, [r5, #0]
    30b2:	3004      	adds	r0, #4
    30b4:	4b08      	ldr	r3, [pc, #32]	; (30d8 <vTaskPlaceOnEventListRestricted+0x48>)
    30b6:	58e3      	ldr	r3, [r4, r3]
    30b8:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
    30ba:	4b08      	ldr	r3, [pc, #32]	; (30dc <vTaskPlaceOnEventListRestricted+0x4c>)
    30bc:	447b      	add	r3, pc
    30be:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    30c0:	1830      	adds	r0, r6, r0

		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
    30c2:	4b07      	ldr	r3, [pc, #28]	; (30e0 <vTaskPlaceOnEventListRestricted+0x50>)
    30c4:	447b      	add	r3, pc
    30c6:	4798      	blx	r3
	}
    30c8:	b002      	add	sp, #8
    30ca:	bd70      	pop	{r4, r5, r6, pc}
    30cc:	00001670 	.word	0x00001670
    30d0:	00000038 	.word	0x00000038
    30d4:	00000078 	.word	0x00000078
    30d8:	00000104 	.word	0x00000104
    30dc:	1fffeb44 	.word	0x1fffeb44
    30e0:	fffff4d5 	.word	0xfffff4d5

000030e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    30e4:	b570      	push	{r4, r5, r6, lr}
    30e6:	b082      	sub	sp, #8
    30e8:	4c21      	ldr	r4, [pc, #132]	; (3170 <xTaskRemoveFromEventList+0x8c>)
    30ea:	447c      	add	r4, pc
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    30ec:	68c3      	ldr	r3, [r0, #12]
    30ee:	68dd      	ldr	r5, [r3, #12]
	configASSERT( pxUnblockedTCB );
    30f0:	2d00      	cmp	r5, #0
    30f2:	d101      	bne.n	30f8 <xTaskRemoveFromEventList+0x14>
    30f4:	b672      	cpsid	i
    30f6:	e7fe      	b.n	30f6 <xTaskRemoveFromEventList+0x12>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    30f8:	1c2e      	adds	r6, r5, #0
    30fa:	3618      	adds	r6, #24
    30fc:	1c30      	adds	r0, r6, #0
    30fe:	4b1d      	ldr	r3, [pc, #116]	; (3174 <xTaskRemoveFromEventList+0x90>)
    3100:	58e3      	ldr	r3, [r4, r3]
    3102:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    3104:	4b1c      	ldr	r3, [pc, #112]	; (3178 <xTaskRemoveFromEventList+0x94>)
    3106:	447b      	add	r3, pc
    3108:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    310a:	2b00      	cmp	r3, #0
    310c:	d119      	bne.n	3142 <xTaskRemoveFromEventList+0x5e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    310e:	1d2e      	adds	r6, r5, #4
    3110:	1c30      	adds	r0, r6, #0
    3112:	4b18      	ldr	r3, [pc, #96]	; (3174 <xTaskRemoveFromEventList+0x90>)
    3114:	58e3      	ldr	r3, [r4, r3]
    3116:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
    3118:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    311a:	4a18      	ldr	r2, [pc, #96]	; (317c <xTaskRemoveFromEventList+0x98>)
    311c:	447a      	add	r2, pc
    311e:	6e12      	ldr	r2, [r2, #96]	; 0x60
    3120:	4293      	cmp	r3, r2
    3122:	d902      	bls.n	312a <xTaskRemoveFromEventList+0x46>
    3124:	4a16      	ldr	r2, [pc, #88]	; (3180 <xTaskRemoveFromEventList+0x9c>)
    3126:	447a      	add	r2, pc
    3128:	6613      	str	r3, [r2, #96]	; 0x60
    312a:	009a      	lsls	r2, r3, #2
    312c:	18d3      	adds	r3, r2, r3
    312e:	009b      	lsls	r3, r3, #2
    3130:	4814      	ldr	r0, [pc, #80]	; (3184 <xTaskRemoveFromEventList+0xa0>)
    3132:	4478      	add	r0, pc
    3134:	3038      	adds	r0, #56	; 0x38
    3136:	18c0      	adds	r0, r0, r3
    3138:	1c31      	adds	r1, r6, #0
    313a:	4b13      	ldr	r3, [pc, #76]	; (3188 <xTaskRemoveFromEventList+0xa4>)
    313c:	58e3      	ldr	r3, [r4, r3]
    313e:	4798      	blx	r3
    3140:	e006      	b.n	3150 <xTaskRemoveFromEventList+0x6c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    3142:	4812      	ldr	r0, [pc, #72]	; (318c <xTaskRemoveFromEventList+0xa8>)
    3144:	4478      	add	r0, pc
    3146:	3014      	adds	r0, #20
    3148:	1c31      	adds	r1, r6, #0
    314a:	4b0f      	ldr	r3, [pc, #60]	; (3188 <xTaskRemoveFromEventList+0xa4>)
    314c:	58e3      	ldr	r3, [r4, r3]
    314e:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    3150:	4b0f      	ldr	r3, [pc, #60]	; (3190 <xTaskRemoveFromEventList+0xac>)
    3152:	58e3      	ldr	r3, [r4, r3]
    3154:	681b      	ldr	r3, [r3, #0]
    3156:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    3158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xReturn = pdFALSE;
    315a:	2000      	movs	r0, #0
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    315c:	429a      	cmp	r2, r3
    315e:	d904      	bls.n	316a <xTaskRemoveFromEventList+0x86>
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    3160:	2201      	movs	r2, #1
    3162:	4b0c      	ldr	r3, [pc, #48]	; (3194 <xTaskRemoveFromEventList+0xb0>)
    3164:	447b      	add	r3, pc
    3166:	675a      	str	r2, [r3, #116]	; 0x74
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    3168:	2001      	movs	r0, #1
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
    316a:	b002      	add	sp, #8
    316c:	bd70      	pop	{r4, r5, r6, pc}
    316e:	46c0      	nop			; (mov r8, r8)
    3170:	0000161e 	.word	0x0000161e
    3174:	00000104 	.word	0x00000104
    3178:	1fffeb7a 	.word	0x1fffeb7a
    317c:	1fffeb64 	.word	0x1fffeb64
    3180:	1fffeb5a 	.word	0x1fffeb5a
    3184:	1fffeace 	.word	0x1fffeace
    3188:	00000078 	.word	0x00000078
    318c:	1fffeabc 	.word	0x1fffeabc
    3190:	00000038 	.word	0x00000038
    3194:	1fffeb1c 	.word	0x1fffeb1c

00003198 <vTaskSetTimeOutState>:
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	configASSERT( pxTimeOut );
    3198:	2800      	cmp	r0, #0
    319a:	d101      	bne.n	31a0 <vTaskSetTimeOutState+0x8>
    319c:	b672      	cpsid	i
    319e:	e7fe      	b.n	319e <vTaskSetTimeOutState+0x6>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    31a0:	4b04      	ldr	r3, [pc, #16]	; (31b4 <vTaskSetTimeOutState+0x1c>)
    31a2:	447b      	add	r3, pc
    31a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    31a6:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    31a8:	4b03      	ldr	r3, [pc, #12]	; (31b8 <vTaskSetTimeOutState+0x20>)
    31aa:	447b      	add	r3, pc
    31ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    31ae:	6043      	str	r3, [r0, #4]
}
    31b0:	4770      	bx	lr
    31b2:	46c0      	nop			; (mov r8, r8)
    31b4:	1fffeade 	.word	0x1fffeade
    31b8:	1fffea56 	.word	0x1fffea56

000031bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    31bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    31be:	b083      	sub	sp, #12
    31c0:	1c04      	adds	r4, r0, #0
    31c2:	1c0f      	adds	r7, r1, #0
    31c4:	4e18      	ldr	r6, [pc, #96]	; (3228 <xTaskCheckForTimeOut+0x6c>)
    31c6:	447e      	add	r6, pc
BaseType_t xReturn;

	configASSERT( pxTimeOut );
    31c8:	2800      	cmp	r0, #0
    31ca:	d101      	bne.n	31d0 <xTaskCheckForTimeOut+0x14>
    31cc:	b672      	cpsid	i
    31ce:	e7fe      	b.n	31ce <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
    31d0:	2900      	cmp	r1, #0
    31d2:	d101      	bne.n	31d8 <xTaskCheckForTimeOut+0x1c>
    31d4:	b672      	cpsid	i
    31d6:	e7fe      	b.n	31d6 <xTaskCheckForTimeOut+0x1a>

	taskENTER_CRITICAL();
    31d8:	4b14      	ldr	r3, [pc, #80]	; (322c <xTaskCheckForTimeOut+0x70>)
    31da:	58f3      	ldr	r3, [r6, r3]
    31dc:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    31de:	4b14      	ldr	r3, [pc, #80]	; (3230 <xTaskCheckForTimeOut+0x74>)
    31e0:	447b      	add	r3, pc
    31e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    31e4:	683b      	ldr	r3, [r7, #0]
    31e6:	1c58      	adds	r0, r3, #1
    31e8:	d017      	beq.n	321a <xTaskCheckForTimeOut+0x5e>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    31ea:	4912      	ldr	r1, [pc, #72]	; (3234 <xTaskCheckForTimeOut+0x78>)
    31ec:	4479      	add	r1, pc
    31ee:	6ec9      	ldr	r1, [r1, #108]	; 0x6c
    31f0:	6820      	ldr	r0, [r4, #0]
    31f2:	4288      	cmp	r0, r1
    31f4:	d003      	beq.n	31fe <xTaskCheckForTimeOut+0x42>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    31f6:	2501      	movs	r5, #1
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    31f8:	6861      	ldr	r1, [r4, #4]
    31fa:	428a      	cmp	r2, r1
    31fc:	d20e      	bcs.n	321c <xTaskCheckForTimeOut+0x60>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
    31fe:	6861      	ldr	r1, [r4, #4]
    3200:	1a50      	subs	r0, r2, r1
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
    3202:	2501      	movs	r5, #1
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
    3204:	4283      	cmp	r3, r0
    3206:	d909      	bls.n	321c <xTaskCheckForTimeOut+0x60>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
    3208:	1a8a      	subs	r2, r1, r2
    320a:	18d3      	adds	r3, r2, r3
    320c:	603b      	str	r3, [r7, #0]
			vTaskSetTimeOutState( pxTimeOut );
    320e:	1c20      	adds	r0, r4, #0
    3210:	4b09      	ldr	r3, [pc, #36]	; (3238 <xTaskCheckForTimeOut+0x7c>)
    3212:	58f3      	ldr	r3, [r6, r3]
    3214:	4798      	blx	r3
			xReturn = pdFALSE;
    3216:	2500      	movs	r5, #0
    3218:	e000      	b.n	321c <xTaskCheckForTimeOut+0x60>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
    321a:	2500      	movs	r5, #0
		else
		{
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
    321c:	4b07      	ldr	r3, [pc, #28]	; (323c <xTaskCheckForTimeOut+0x80>)
    321e:	58f3      	ldr	r3, [r6, r3]
    3220:	4798      	blx	r3

	return xReturn;
}
    3222:	1c28      	adds	r0, r5, #0
    3224:	b003      	add	sp, #12
    3226:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3228:	00001542 	.word	0x00001542
    322c:	00000218 	.word	0x00000218
    3230:	1fffea20 	.word	0x1fffea20
    3234:	1fffea94 	.word	0x1fffea94
    3238:	00000214 	.word	0x00000214
    323c:	0000000c 	.word	0x0000000c

00003240 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
    3240:	2201      	movs	r2, #1
    3242:	4b02      	ldr	r3, [pc, #8]	; (324c <vTaskMissedYield+0xc>)
    3244:	447b      	add	r3, pc
    3246:	675a      	str	r2, [r3, #116]	; 0x74
}
    3248:	4770      	bx	lr
    324a:	46c0      	nop			; (mov r8, r8)
    324c:	1fffea3c 	.word	0x1fffea3c

00003250 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
    3250:	4b02      	ldr	r3, [pc, #8]	; (325c <xTaskGetCurrentTaskHandle+0xc>)
    3252:	447b      	add	r3, pc
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    3254:	4a02      	ldr	r2, [pc, #8]	; (3260 <xTaskGetCurrentTaskHandle+0x10>)
    3256:	589b      	ldr	r3, [r3, r2]
    3258:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
    325a:	4770      	bx	lr
    325c:	000014b6 	.word	0x000014b6
    3260:	00000038 	.word	0x00000038

00003264 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    3264:	4b06      	ldr	r3, [pc, #24]	; (3280 <xTaskGetSchedulerState+0x1c>)
    3266:	447b      	add	r3, pc
    3268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    326a:	2001      	movs	r0, #1

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    326c:	2b00      	cmp	r3, #0
    326e:	d005      	beq.n	327c <xTaskGetSchedulerState+0x18>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    3270:	4b04      	ldr	r3, [pc, #16]	; (3284 <xTaskGetSchedulerState+0x20>)
    3272:	447b      	add	r3, pc
    3274:	6e98      	ldr	r0, [r3, #104]	; 0x68
			{
				xReturn = taskSCHEDULER_RUNNING;
    3276:	4243      	negs	r3, r0
    3278:	4158      	adcs	r0, r3
    327a:	0040      	lsls	r0, r0, #1
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
    327c:	4770      	bx	lr
    327e:	46c0      	nop			; (mov r8, r8)
    3280:	1fffea1a 	.word	0x1fffea1a
    3284:	1fffea0e 	.word	0x1fffea0e

00003288 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
    3288:	b570      	push	{r4, r5, r6, lr}
    328a:	b082      	sub	sp, #8
    328c:	1c04      	adds	r4, r0, #0
    328e:	4d22      	ldr	r5, [pc, #136]	; (3318 <vTaskPriorityInherit+0x90>)
    3290:	447d      	add	r5, pc
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
    3292:	2800      	cmp	r0, #0
    3294:	d03d      	beq.n	3312 <vTaskPriorityInherit+0x8a>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    3296:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    3298:	4a20      	ldr	r2, [pc, #128]	; (331c <vTaskPriorityInherit+0x94>)
    329a:	58aa      	ldr	r2, [r5, r2]
    329c:	6812      	ldr	r2, [r2, #0]
    329e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    32a0:	4293      	cmp	r3, r2
    32a2:	d236      	bcs.n	3312 <vTaskPriorityInherit+0x8a>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    32a4:	6982      	ldr	r2, [r0, #24]
    32a6:	2a00      	cmp	r2, #0
    32a8:	db06      	blt.n	32b8 <vTaskPriorityInherit+0x30>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    32aa:	4a1c      	ldr	r2, [pc, #112]	; (331c <vTaskPriorityInherit+0x94>)
    32ac:	58aa      	ldr	r2, [r5, r2]
    32ae:	6812      	ldr	r2, [r2, #0]
    32b0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    32b2:	2105      	movs	r1, #5
    32b4:	1a8a      	subs	r2, r1, r2
    32b6:	6182      	str	r2, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    32b8:	009a      	lsls	r2, r3, #2
    32ba:	18d3      	adds	r3, r2, r3
    32bc:	009b      	lsls	r3, r3, #2
    32be:	4a18      	ldr	r2, [pc, #96]	; (3320 <vTaskPriorityInherit+0x98>)
    32c0:	447a      	add	r2, pc
    32c2:	3238      	adds	r2, #56	; 0x38
    32c4:	18d3      	adds	r3, r2, r3
    32c6:	6962      	ldr	r2, [r4, #20]
    32c8:	429a      	cmp	r2, r3
    32ca:	d11d      	bne.n	3308 <vTaskPriorityInherit+0x80>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    32cc:	1d26      	adds	r6, r4, #4
    32ce:	1c30      	adds	r0, r6, #0
    32d0:	4b14      	ldr	r3, [pc, #80]	; (3324 <vTaskPriorityInherit+0x9c>)
    32d2:	58eb      	ldr	r3, [r5, r3]
    32d4:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    32d6:	4b11      	ldr	r3, [pc, #68]	; (331c <vTaskPriorityInherit+0x94>)
    32d8:	58eb      	ldr	r3, [r5, r3]
    32da:	681b      	ldr	r3, [r3, #0]
    32dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    32de:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
    32e0:	4a11      	ldr	r2, [pc, #68]	; (3328 <vTaskPriorityInherit+0xa0>)
    32e2:	447a      	add	r2, pc
    32e4:	6e12      	ldr	r2, [r2, #96]	; 0x60
    32e6:	4293      	cmp	r3, r2
    32e8:	d902      	bls.n	32f0 <vTaskPriorityInherit+0x68>
    32ea:	4a10      	ldr	r2, [pc, #64]	; (332c <vTaskPriorityInherit+0xa4>)
    32ec:	447a      	add	r2, pc
    32ee:	6613      	str	r3, [r2, #96]	; 0x60
    32f0:	0098      	lsls	r0, r3, #2
    32f2:	18c3      	adds	r3, r0, r3
    32f4:	009b      	lsls	r3, r3, #2
    32f6:	480e      	ldr	r0, [pc, #56]	; (3330 <vTaskPriorityInherit+0xa8>)
    32f8:	4478      	add	r0, pc
    32fa:	3038      	adds	r0, #56	; 0x38
    32fc:	18c0      	adds	r0, r0, r3
    32fe:	1c31      	adds	r1, r6, #0
    3300:	4b0c      	ldr	r3, [pc, #48]	; (3334 <vTaskPriorityInherit+0xac>)
    3302:	58eb      	ldr	r3, [r5, r3]
    3304:	4798      	blx	r3
    3306:	e004      	b.n	3312 <vTaskPriorityInherit+0x8a>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    3308:	4b04      	ldr	r3, [pc, #16]	; (331c <vTaskPriorityInherit+0x94>)
    330a:	58eb      	ldr	r3, [r5, r3]
    330c:	681b      	ldr	r3, [r3, #0]
    330e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3310:	62e3      	str	r3, [r4, #44]	; 0x2c
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    3312:	b002      	add	sp, #8
    3314:	bd70      	pop	{r4, r5, r6, pc}
    3316:	46c0      	nop			; (mov r8, r8)
    3318:	00001478 	.word	0x00001478
    331c:	00000038 	.word	0x00000038
    3320:	1fffe940 	.word	0x1fffe940
    3324:	00000104 	.word	0x00000104
    3328:	1fffe99e 	.word	0x1fffe99e
    332c:	1fffe994 	.word	0x1fffe994
    3330:	1fffe908 	.word	0x1fffe908
    3334:	00000078 	.word	0x00000078

00003338 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    3338:	b570      	push	{r4, r5, r6, lr}
    333a:	b082      	sub	sp, #8
    333c:	1c04      	adds	r4, r0, #0
    333e:	4d15      	ldr	r5, [pc, #84]	; (3394 <vTaskPriorityDisinherit+0x5c>)
    3340:	447d      	add	r5, pc
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
    3342:	2800      	cmp	r0, #0
    3344:	d023      	beq.n	338e <vTaskPriorityDisinherit+0x56>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    3346:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    3348:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    334a:	429a      	cmp	r2, r3
    334c:	d01f      	beq.n	338e <vTaskPriorityDisinherit+0x56>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    334e:	1d06      	adds	r6, r0, #4
    3350:	1c30      	adds	r0, r6, #0
    3352:	4b11      	ldr	r3, [pc, #68]	; (3398 <vTaskPriorityDisinherit+0x60>)
    3354:	58eb      	ldr	r3, [r5, r3]
    3356:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    3358:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    335a:	62e3      	str	r3, [r4, #44]	; 0x2c

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    335c:	69a2      	ldr	r2, [r4, #24]
    335e:	2a00      	cmp	r2, #0
    3360:	db02      	blt.n	3368 <vTaskPriorityDisinherit+0x30>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3362:	2205      	movs	r2, #5
    3364:	1ad2      	subs	r2, r2, r3
    3366:	61a2      	str	r2, [r4, #24]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddTaskToReadyList( pxTCB );
    3368:	4a0c      	ldr	r2, [pc, #48]	; (339c <vTaskPriorityDisinherit+0x64>)
    336a:	447a      	add	r2, pc
    336c:	6e12      	ldr	r2, [r2, #96]	; 0x60
    336e:	4293      	cmp	r3, r2
    3370:	d902      	bls.n	3378 <vTaskPriorityDisinherit+0x40>
    3372:	4a0b      	ldr	r2, [pc, #44]	; (33a0 <vTaskPriorityDisinherit+0x68>)
    3374:	447a      	add	r2, pc
    3376:	6613      	str	r3, [r2, #96]	; 0x60
    3378:	0098      	lsls	r0, r3, #2
    337a:	18c3      	adds	r3, r0, r3
    337c:	009b      	lsls	r3, r3, #2
    337e:	4809      	ldr	r0, [pc, #36]	; (33a4 <vTaskPriorityDisinherit+0x6c>)
    3380:	4478      	add	r0, pc
    3382:	3038      	adds	r0, #56	; 0x38
    3384:	18c0      	adds	r0, r0, r3
    3386:	1c31      	adds	r1, r6, #0
    3388:	4b07      	ldr	r3, [pc, #28]	; (33a8 <vTaskPriorityDisinherit+0x70>)
    338a:	58eb      	ldr	r3, [r5, r3]
    338c:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    338e:	b002      	add	sp, #8
    3390:	bd70      	pop	{r4, r5, r6, pc}
    3392:	46c0      	nop			; (mov r8, r8)
    3394:	000013c8 	.word	0x000013c8
    3398:	00000104 	.word	0x00000104
    339c:	1fffe916 	.word	0x1fffe916
    33a0:	1fffe90c 	.word	0x1fffe90c
    33a4:	1fffe880 	.word	0x1fffe880
    33a8:	00000078 	.word	0x00000078

000033ac <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    33ac:	b530      	push	{r4, r5, lr}
    33ae:	b083      	sub	sp, #12
    33b0:	1c04      	adds	r4, r0, #0
    33b2:	4d11      	ldr	r5, [pc, #68]	; (33f8 <prvInsertTimerInActiveList+0x4c>)
    33b4:	447d      	add	r5, pc
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    33b6:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    33b8:	6120      	str	r0, [r4, #16]

	if( xNextExpiryTime <= xTimeNow )
    33ba:	4291      	cmp	r1, r2
    33bc:	d80d      	bhi.n	33da <prvInsertTimerInActiveList+0x2e>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
    33be:	1ad2      	subs	r2, r2, r3
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    33c0:	2001      	movs	r0, #1

	if( xNextExpiryTime <= xTimeNow )
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
    33c2:	69a3      	ldr	r3, [r4, #24]
    33c4:	429a      	cmp	r2, r3
    33c6:	d215      	bcs.n	33f4 <prvInsertTimerInActiveList+0x48>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    33c8:	4b0c      	ldr	r3, [pc, #48]	; (33fc <prvInsertTimerInActiveList+0x50>)
    33ca:	447b      	add	r3, pc
    33cc:	6818      	ldr	r0, [r3, #0]
    33ce:	1d21      	adds	r1, r4, #4
    33d0:	4b0b      	ldr	r3, [pc, #44]	; (3400 <prvInsertTimerInActiveList+0x54>)
    33d2:	58eb      	ldr	r3, [r5, r3]
    33d4:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
    33d6:	2000      	movs	r0, #0
    33d8:	e00c      	b.n	33f4 <prvInsertTimerInActiveList+0x48>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    33da:	429a      	cmp	r2, r3
    33dc:	d202      	bcs.n	33e4 <prvInsertTimerInActiveList+0x38>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    33de:	2001      	movs	r0, #1
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    33e0:	4299      	cmp	r1, r3
    33e2:	d207      	bcs.n	33f4 <prvInsertTimerInActiveList+0x48>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    33e4:	4b07      	ldr	r3, [pc, #28]	; (3404 <prvInsertTimerInActiveList+0x58>)
    33e6:	447b      	add	r3, pc
    33e8:	6858      	ldr	r0, [r3, #4]
    33ea:	1d21      	adds	r1, r4, #4
    33ec:	4b04      	ldr	r3, [pc, #16]	; (3400 <prvInsertTimerInActiveList+0x54>)
    33ee:	58eb      	ldr	r3, [r5, r3]
    33f0:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
    33f2:	2000      	movs	r0, #0
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
    33f4:	b003      	add	sp, #12
    33f6:	bd30      	pop	{r4, r5, pc}
    33f8:	00001354 	.word	0x00001354
    33fc:	1fffe932 	.word	0x1fffe932
    3400:	00000158 	.word	0x00000158
    3404:	1fffe916 	.word	0x1fffe916

00003408 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    3408:	b5f0      	push	{r4, r5, r6, r7, lr}
    340a:	b083      	sub	sp, #12
    340c:	4c16      	ldr	r4, [pc, #88]	; (3468 <prvCheckForValidListAndQueue+0x60>)
    340e:	447c      	add	r4, pc
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    3410:	4b16      	ldr	r3, [pc, #88]	; (346c <prvCheckForValidListAndQueue+0x64>)
    3412:	58e3      	ldr	r3, [r4, r3]
    3414:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
    3416:	4b16      	ldr	r3, [pc, #88]	; (3470 <prvCheckForValidListAndQueue+0x68>)
    3418:	447b      	add	r3, pc
    341a:	689b      	ldr	r3, [r3, #8]
    341c:	2b00      	cmp	r3, #0
    341e:	d11d      	bne.n	345c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
    3420:	4d14      	ldr	r5, [pc, #80]	; (3474 <prvCheckForValidListAndQueue+0x6c>)
    3422:	447d      	add	r5, pc
    3424:	1c2e      	adds	r6, r5, #0
    3426:	360c      	adds	r6, #12
    3428:	1c30      	adds	r0, r6, #0
    342a:	4b13      	ldr	r3, [pc, #76]	; (3478 <prvCheckForValidListAndQueue+0x70>)
    342c:	58e3      	ldr	r3, [r4, r3]
    342e:	9301      	str	r3, [sp, #4]
    3430:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
    3432:	1c2f      	adds	r7, r5, #0
    3434:	3720      	adds	r7, #32
    3436:	1c38      	adds	r0, r7, #0
    3438:	9b01      	ldr	r3, [sp, #4]
    343a:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
    343c:	606e      	str	r6, [r5, #4]
			pxOverflowTimerList = &xActiveTimerList2;
    343e:	602f      	str	r7, [r5, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    3440:	2002      	movs	r0, #2
    3442:	210c      	movs	r1, #12
    3444:	2200      	movs	r2, #0
    3446:	4b0d      	ldr	r3, [pc, #52]	; (347c <prvCheckForValidListAndQueue+0x74>)
    3448:	58e3      	ldr	r3, [r4, r3]
    344a:	4798      	blx	r3
			configASSERT( xTimerQueue );
    344c:	2800      	cmp	r0, #0
    344e:	d003      	beq.n	3458 <prvCheckForValidListAndQueue+0x50>
		{
			vListInitialise( &xActiveTimerList1 );
			vListInitialise( &xActiveTimerList2 );
			pxCurrentTimerList = &xActiveTimerList1;
			pxOverflowTimerList = &xActiveTimerList2;
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    3450:	4b0b      	ldr	r3, [pc, #44]	; (3480 <prvCheckForValidListAndQueue+0x78>)
    3452:	447b      	add	r3, pc
    3454:	6098      	str	r0, [r3, #8]
    3456:	e001      	b.n	345c <prvCheckForValidListAndQueue+0x54>
			configASSERT( xTimerQueue );
    3458:	b672      	cpsid	i
    345a:	e7fe      	b.n	345a <prvCheckForValidListAndQueue+0x52>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    345c:	4b09      	ldr	r3, [pc, #36]	; (3484 <prvCheckForValidListAndQueue+0x7c>)
    345e:	58e3      	ldr	r3, [r4, r3]
    3460:	4798      	blx	r3
}
    3462:	b003      	add	sp, #12
    3464:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3466:	46c0      	nop			; (mov r8, r8)
    3468:	000012fa 	.word	0x000012fa
    346c:	00000218 	.word	0x00000218
    3470:	1fffe8e4 	.word	0x1fffe8e4
    3474:	1fffe8da 	.word	0x1fffe8da
    3478:	000000b4 	.word	0x000000b4
    347c:	00000178 	.word	0x00000178
    3480:	1fffe8aa 	.word	0x1fffe8aa
    3484:	0000000c 	.word	0x0000000c

00003488 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
    3488:	b530      	push	{r4, r5, lr}
    348a:	b087      	sub	sp, #28
    348c:	4c0f      	ldr	r4, [pc, #60]	; (34cc <xTimerCreateTimerTask+0x44>)
    348e:	447c      	add	r4, pc

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
    3490:	4b0f      	ldr	r3, [pc, #60]	; (34d0 <xTimerCreateTimerTask+0x48>)
    3492:	447b      	add	r3, pc
    3494:	4798      	blx	r3

	if( xTimerQueue != NULL )
    3496:	4b0f      	ldr	r3, [pc, #60]	; (34d4 <xTimerCreateTimerTask+0x4c>)
    3498:	447b      	add	r3, pc
    349a:	689b      	ldr	r3, [r3, #8]
    349c:	2b00      	cmp	r3, #0
    349e:	d010      	beq.n	34c2 <xTimerCreateTimerTask+0x3a>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
    34a0:	2302      	movs	r3, #2
    34a2:	9300      	str	r3, [sp, #0]
    34a4:	2300      	movs	r3, #0
    34a6:	9301      	str	r3, [sp, #4]
    34a8:	9302      	str	r3, [sp, #8]
    34aa:	9303      	str	r3, [sp, #12]
    34ac:	480a      	ldr	r0, [pc, #40]	; (34d8 <xTimerCreateTimerTask+0x50>)
    34ae:	4478      	add	r0, pc
    34b0:	490a      	ldr	r1, [pc, #40]	; (34dc <xTimerCreateTimerTask+0x54>)
    34b2:	4479      	add	r1, pc
    34b4:	2250      	movs	r2, #80	; 0x50
    34b6:	4d0a      	ldr	r5, [pc, #40]	; (34e0 <xTimerCreateTimerTask+0x58>)
    34b8:	5965      	ldr	r5, [r4, r5]
    34ba:	9505      	str	r5, [sp, #20]
    34bc:	47a8      	blx	r5
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
    34be:	2800      	cmp	r0, #0
    34c0:	d101      	bne.n	34c6 <xTimerCreateTimerTask+0x3e>
    34c2:	b672      	cpsid	i
    34c4:	e7fe      	b.n	34c4 <xTimerCreateTimerTask+0x3c>
	return xReturn;
}
    34c6:	b007      	add	sp, #28
    34c8:	bd30      	pop	{r4, r5, pc}
    34ca:	46c0      	nop			; (mov r8, r8)
    34cc:	0000127a 	.word	0x0000127a
    34d0:	ffffff73 	.word	0xffffff73
    34d4:	1fffe864 	.word	0x1fffe864
    34d8:	0000020b 	.word	0x0000020b
    34dc:	00001222 	.word	0x00001222
    34e0:	00000054 	.word	0x00000054

000034e4 <xTimerCreate>:
/*-----------------------------------------------------------*/

TimerHandle_t xTimerCreate( const char * const pcTimerName, const TickType_t xTimerPeriodInTicks, const UBaseType_t uxAutoReload, void * const pvTimerID, TimerCallbackFunction_t pxCallbackFunction ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    34e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    34e6:	464f      	mov	r7, r9
    34e8:	4646      	mov	r6, r8
    34ea:	b4c0      	push	{r6, r7}
    34ec:	b083      	sub	sp, #12
    34ee:	4681      	mov	r9, r0
    34f0:	1c0e      	adds	r6, r1, #0
    34f2:	4690      	mov	r8, r2
    34f4:	1c1f      	adds	r7, r3, #0
    34f6:	4d11      	ldr	r5, [pc, #68]	; (353c <xTimerCreate+0x58>)
    34f8:	447d      	add	r5, pc
Timer_t *pxNewTimer;

	/* Allocate the timer structure. */
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
    34fa:	2900      	cmp	r1, #0
    34fc:	d016      	beq.n	352c <xTimerCreate+0x48>
	{
		pxNewTimer = NULL;
	}
	else
	{
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
    34fe:	2028      	movs	r0, #40	; 0x28
    3500:	4b0f      	ldr	r3, [pc, #60]	; (3540 <xTimerCreate+0x5c>)
    3502:	58eb      	ldr	r3, [r5, r3]
    3504:	4798      	blx	r3
    3506:	1e04      	subs	r4, r0, #0
		if( pxNewTimer != NULL )
    3508:	d012      	beq.n	3530 <xTimerCreate+0x4c>
		{
			/* Ensure the infrastructure used by the timer service task has been
			created/initialised. */
			prvCheckForValidListAndQueue();
    350a:	4b0e      	ldr	r3, [pc, #56]	; (3544 <xTimerCreate+0x60>)
    350c:	447b      	add	r3, pc
    350e:	4798      	blx	r3

			/* Initialise the timer structure members using the function parameters. */
			pxNewTimer->pcTimerName = pcTimerName;
    3510:	464b      	mov	r3, r9
    3512:	6023      	str	r3, [r4, #0]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
    3514:	61a6      	str	r6, [r4, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
    3516:	4643      	mov	r3, r8
    3518:	61e3      	str	r3, [r4, #28]
			pxNewTimer->pvTimerID = pvTimerID;
    351a:	6227      	str	r7, [r4, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
    351c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    351e:	6263      	str	r3, [r4, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
    3520:	1d20      	adds	r0, r4, #4
    3522:	4b09      	ldr	r3, [pc, #36]	; (3548 <xTimerCreate+0x64>)
    3524:	58eb      	ldr	r3, [r5, r3]
    3526:	4798      	blx	r3
    3528:	e002      	b.n	3530 <xTimerCreate+0x4c>
    352a:	e7fe      	b.n	352a <xTimerCreate+0x46>
			traceTIMER_CREATE_FAILED();
		}
	}

	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
    352c:	b672      	cpsid	i
    352e:	e7fc      	b.n	352a <xTimerCreate+0x46>

	return ( TimerHandle_t ) pxNewTimer;
}
    3530:	1c20      	adds	r0, r4, #0
    3532:	b003      	add	sp, #12
    3534:	bc0c      	pop	{r2, r3}
    3536:	4690      	mov	r8, r2
    3538:	4699      	mov	r9, r3
    353a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    353c:	00001210 	.word	0x00001210
    3540:	000000ac 	.word	0x000000ac
    3544:	fffffef9 	.word	0xfffffef9
    3548:	0000008c 	.word	0x0000008c

0000354c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    354c:	b570      	push	{r4, r5, r6, lr}
    354e:	b086      	sub	sp, #24
    3550:	4c19      	ldr	r4, [pc, #100]	; (35b8 <xTimerGenericCommand+0x6c>)
    3552:	447c      	add	r4, pc
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
    3554:	4d19      	ldr	r5, [pc, #100]	; (35bc <xTimerGenericCommand+0x70>)
    3556:	447d      	add	r5, pc
    3558:	68ae      	ldr	r6, [r5, #8]
    355a:	2e00      	cmp	r6, #0
    355c:	d028      	beq.n	35b0 <xTimerGenericCommand+0x64>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
    355e:	9103      	str	r1, [sp, #12]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    3560:	9204      	str	r2, [sp, #16]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    3562:	9005      	str	r0, [sp, #20]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    3564:	2905      	cmp	r1, #5
    3566:	dc1a      	bgt.n	359e <xTimerGenericCommand+0x52>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    3568:	4b15      	ldr	r3, [pc, #84]	; (35c0 <xTimerGenericCommand+0x74>)
    356a:	58e3      	ldr	r3, [r4, r3]
    356c:	4798      	blx	r3
    356e:	2802      	cmp	r0, #2
    3570:	d10a      	bne.n	3588 <xTimerGenericCommand+0x3c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    3572:	4b14      	ldr	r3, [pc, #80]	; (35c4 <xTimerGenericCommand+0x78>)
    3574:	447b      	add	r3, pc
    3576:	6898      	ldr	r0, [r3, #8]
    3578:	a903      	add	r1, sp, #12
    357a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    357c:	2300      	movs	r3, #0
    357e:	4d12      	ldr	r5, [pc, #72]	; (35c8 <xTimerGenericCommand+0x7c>)
    3580:	5965      	ldr	r5, [r4, r5]
    3582:	9501      	str	r5, [sp, #4]
    3584:	47a8      	blx	r5
    3586:	e014      	b.n	35b2 <xTimerGenericCommand+0x66>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    3588:	4b10      	ldr	r3, [pc, #64]	; (35cc <xTimerGenericCommand+0x80>)
    358a:	447b      	add	r3, pc
    358c:	6898      	ldr	r0, [r3, #8]
    358e:	a903      	add	r1, sp, #12
    3590:	2200      	movs	r2, #0
    3592:	2300      	movs	r3, #0
    3594:	4d0c      	ldr	r5, [pc, #48]	; (35c8 <xTimerGenericCommand+0x7c>)
    3596:	5965      	ldr	r5, [r4, r5]
    3598:	9501      	str	r5, [sp, #4]
    359a:	47a8      	blx	r5
    359c:	e009      	b.n	35b2 <xTimerGenericCommand+0x66>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    359e:	1c30      	adds	r0, r6, #0
    35a0:	a903      	add	r1, sp, #12
    35a2:	1c1a      	adds	r2, r3, #0
    35a4:	2300      	movs	r3, #0
    35a6:	4d0a      	ldr	r5, [pc, #40]	; (35d0 <xTimerGenericCommand+0x84>)
    35a8:	5965      	ldr	r5, [r4, r5]
    35aa:	9501      	str	r5, [sp, #4]
    35ac:	47a8      	blx	r5
    35ae:	e000      	b.n	35b2 <xTimerGenericCommand+0x66>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    35b0:	2000      	movs	r0, #0
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
    35b2:	b006      	add	sp, #24
    35b4:	bd70      	pop	{r4, r5, r6, pc}
    35b6:	46c0      	nop			; (mov r8, r8)
    35b8:	000011b6 	.word	0x000011b6
    35bc:	1fffe7a6 	.word	0x1fffe7a6
    35c0:	000001f8 	.word	0x000001f8
    35c4:	1fffe788 	.word	0x1fffe788
    35c8:	000000c0 	.word	0x000000c0
    35cc:	1fffe772 	.word	0x1fffe772
    35d0:	00000020 	.word	0x00000020

000035d4 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    35d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    35d6:	465f      	mov	r7, fp
    35d8:	4656      	mov	r6, sl
    35da:	464d      	mov	r5, r9
    35dc:	4644      	mov	r4, r8
    35de:	b4f0      	push	{r4, r5, r6, r7}
    35e0:	b085      	sub	sp, #20
    35e2:	4682      	mov	sl, r0
    35e4:	4e2b      	ldr	r6, [pc, #172]	; (3694 <prvSampleTimeNow+0xc0>)
    35e6:	447e      	add	r6, pc
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
    35e8:	4b2b      	ldr	r3, [pc, #172]	; (3698 <prvSampleTimeNow+0xc4>)
    35ea:	58f3      	ldr	r3, [r6, r3]
    35ec:	4798      	blx	r3
    35ee:	4681      	mov	r9, r0

	if( xTimeNow < xLastTime )
    35f0:	4b2a      	ldr	r3, [pc, #168]	; (369c <prvSampleTimeNow+0xc8>)
    35f2:	447b      	add	r3, pc
    35f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    35f6:	4298      	cmp	r0, r3
    35f8:	d23d      	bcs.n	3676 <prvSampleTimeNow+0xa2>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    35fa:	4929      	ldr	r1, [pc, #164]	; (36a0 <prvSampleTimeNow+0xcc>)
    35fc:	4479      	add	r1, pc
    35fe:	4688      	mov	r8, r1
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3600:	2200      	movs	r2, #0
    3602:	4693      	mov	fp, r2
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
			if( xReloadTime > xNextExpireTime )
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    3604:	4c27      	ldr	r4, [pc, #156]	; (36a4 <prvSampleTimeNow+0xd0>)
    3606:	447c      	add	r4, pc
    3608:	9403      	str	r4, [sp, #12]
    360a:	e026      	b.n	365a <prvSampleTimeNow+0x86>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    360c:	68db      	ldr	r3, [r3, #12]
    360e:	681f      	ldr	r7, [r3, #0]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    3610:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3612:	1d25      	adds	r5, r4, #4
    3614:	1c28      	adds	r0, r5, #0
    3616:	4b24      	ldr	r3, [pc, #144]	; (36a8 <prvSampleTimeNow+0xd4>)
    3618:	58f3      	ldr	r3, [r6, r3]
    361a:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    361c:	1c20      	adds	r0, r4, #0
    361e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    3620:	4788      	blx	r1

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    3622:	69e2      	ldr	r2, [r4, #28]
    3624:	2a01      	cmp	r2, #1
    3626:	d118      	bne.n	365a <prvSampleTimeNow+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    3628:	69a1      	ldr	r1, [r4, #24]
    362a:	187b      	adds	r3, r7, r1
			if( xReloadTime > xNextExpireTime )
    362c:	42bb      	cmp	r3, r7
    362e:	d908      	bls.n	3642 <prvSampleTimeNow+0x6e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    3630:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    3632:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    3634:	9c03      	ldr	r4, [sp, #12]
    3636:	6860      	ldr	r0, [r4, #4]
    3638:	1c29      	adds	r1, r5, #0
    363a:	4b1c      	ldr	r3, [pc, #112]	; (36ac <prvSampleTimeNow+0xd8>)
    363c:	58f3      	ldr	r3, [r6, r3]
    363e:	4798      	blx	r3
    3640:	e00b      	b.n	365a <prvSampleTimeNow+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3642:	4659      	mov	r1, fp
    3644:	9100      	str	r1, [sp, #0]
    3646:	1c20      	adds	r0, r4, #0
    3648:	1c3a      	adds	r2, r7, #0
    364a:	465b      	mov	r3, fp
    364c:	4c18      	ldr	r4, [pc, #96]	; (36b0 <prvSampleTimeNow+0xdc>)
    364e:	5934      	ldr	r4, [r6, r4]
    3650:	47a0      	blx	r4
				configASSERT( xResult );
    3652:	2800      	cmp	r0, #0
    3654:	d101      	bne.n	365a <prvSampleTimeNow+0x86>
    3656:	b672      	cpsid	i
    3658:	e7fe      	b.n	3658 <prvSampleTimeNow+0x84>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    365a:	4642      	mov	r2, r8
    365c:	6853      	ldr	r3, [r2, #4]
    365e:	681c      	ldr	r4, [r3, #0]
    3660:	2c00      	cmp	r4, #0
    3662:	d1d3      	bne.n	360c <prvSampleTimeNow+0x38>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
    3664:	4a13      	ldr	r2, [pc, #76]	; (36b4 <prvSampleTimeNow+0xe0>)
    3666:	447a      	add	r2, pc
    3668:	6811      	ldr	r1, [r2, #0]
    366a:	6051      	str	r1, [r2, #4]
	pxOverflowTimerList = pxTemp;
    366c:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists();
		*pxTimerListsWereSwitched = pdTRUE;
    366e:	2301      	movs	r3, #1
    3670:	4652      	mov	r2, sl
    3672:	6013      	str	r3, [r2, #0]
    3674:	e002      	b.n	367c <prvSampleTimeNow+0xa8>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
    3676:	2300      	movs	r3, #0
    3678:	4654      	mov	r4, sl
    367a:	6023      	str	r3, [r4, #0]
	}

	xLastTime = xTimeNow;
    367c:	4b0e      	ldr	r3, [pc, #56]	; (36b8 <prvSampleTimeNow+0xe4>)
    367e:	447b      	add	r3, pc
    3680:	4649      	mov	r1, r9
    3682:	6359      	str	r1, [r3, #52]	; 0x34

	return xTimeNow;
}
    3684:	4648      	mov	r0, r9
    3686:	b005      	add	sp, #20
    3688:	bc3c      	pop	{r2, r3, r4, r5}
    368a:	4690      	mov	r8, r2
    368c:	4699      	mov	r9, r3
    368e:	46a2      	mov	sl, r4
    3690:	46ab      	mov	fp, r5
    3692:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3694:	00001122 	.word	0x00001122
    3698:	000000bc 	.word	0x000000bc
    369c:	1fffe70a 	.word	0x1fffe70a
    36a0:	1fffe700 	.word	0x1fffe700
    36a4:	1fffe6f6 	.word	0x1fffe6f6
    36a8:	00000104 	.word	0x00000104
    36ac:	00000158 	.word	0x00000158
    36b0:	00000134 	.word	0x00000134
    36b4:	1fffe696 	.word	0x1fffe696
    36b8:	1fffe67e 	.word	0x1fffe67e

000036bc <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    36bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    36be:	465f      	mov	r7, fp
    36c0:	4656      	mov	r6, sl
    36c2:	464d      	mov	r5, r9
    36c4:	4644      	mov	r4, r8
    36c6:	b4f0      	push	{r4, r5, r6, r7}
    36c8:	b089      	sub	sp, #36	; 0x24
    36ca:	4869      	ldr	r0, [pc, #420]	; (3870 <prvTimerTask+0x1b4>)
    36cc:	4478      	add	r0, pc
    36ce:	4683      	mov	fp, r0
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    36d0:	4968      	ldr	r1, [pc, #416]	; (3874 <prvTimerTask+0x1b8>)
    36d2:	4479      	add	r1, pc
    36d4:	4689      	mov	r9, r1
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    36d6:	ac05      	add	r4, sp, #20
    36d8:	4a67      	ldr	r2, [pc, #412]	; (3878 <prvTimerTask+0x1bc>)
    36da:	447a      	add	r2, pc
    36dc:	4692      	mov	sl, r2
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    36de:	464d      	mov	r5, r9
    36e0:	686b      	ldr	r3, [r5, #4]
	if( *pxListWasEmpty == pdFALSE )
    36e2:	681e      	ldr	r6, [r3, #0]
    36e4:	2e00      	cmp	r6, #0
    36e6:	d100      	bne.n	36ea <prvTimerTask+0x2e>
    36e8:	e0b5      	b.n	3856 <prvTimerTask+0x19a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    36ea:	68db      	ldr	r3, [r3, #12]
    36ec:	681d      	ldr	r5, [r3, #0]
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    36ee:	4b63      	ldr	r3, [pc, #396]	; (387c <prvTimerTask+0x1c0>)
    36f0:	465f      	mov	r7, fp
    36f2:	58fb      	ldr	r3, [r7, r3]
    36f4:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    36f6:	1c20      	adds	r0, r4, #0
    36f8:	4b61      	ldr	r3, [pc, #388]	; (3880 <prvTimerTask+0x1c4>)
    36fa:	447b      	add	r3, pc
    36fc:	4798      	blx	r3
    36fe:	1c06      	adds	r6, r0, #0
		if( xTimerListsWereSwitched == pdFALSE )
    3700:	9805      	ldr	r0, [sp, #20]
    3702:	2800      	cmp	r0, #0
    3704:	d140      	bne.n	3788 <prvTimerTask+0xcc>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    3706:	42b5      	cmp	r5, r6
    3708:	d82d      	bhi.n	3766 <prvTimerTask+0xaa>
			{
				( void ) xTaskResumeAll();
    370a:	4b5e      	ldr	r3, [pc, #376]	; (3884 <prvTimerTask+0x1c8>)
    370c:	58fb      	ldr	r3, [r7, r3]
    370e:	4798      	blx	r3
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    3710:	4b5d      	ldr	r3, [pc, #372]	; (3888 <prvTimerTask+0x1cc>)
    3712:	447b      	add	r3, pc
    3714:	685b      	ldr	r3, [r3, #4]
    3716:	68db      	ldr	r3, [r3, #12]
    3718:	68d9      	ldr	r1, [r3, #12]
    371a:	4688      	mov	r8, r1

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    371c:	1c08      	adds	r0, r1, #0
    371e:	3004      	adds	r0, #4
    3720:	4b5a      	ldr	r3, [pc, #360]	; (388c <prvTimerTask+0x1d0>)
    3722:	58fb      	ldr	r3, [r7, r3]
    3724:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    3726:	4642      	mov	r2, r8
    3728:	69d2      	ldr	r2, [r2, #28]
    372a:	2a01      	cmp	r2, #1
    372c:	d116      	bne.n	375c <prvTimerTask+0xa0>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
    372e:	4643      	mov	r3, r8
    3730:	699b      	ldr	r3, [r3, #24]
    3732:	18e9      	adds	r1, r5, r3
    3734:	4640      	mov	r0, r8
    3736:	1c32      	adds	r2, r6, #0
    3738:	1c2b      	adds	r3, r5, #0
    373a:	4e55      	ldr	r6, [pc, #340]	; (3890 <prvTimerTask+0x1d4>)
    373c:	447e      	add	r6, pc
    373e:	47b0      	blx	r6
    3740:	2801      	cmp	r0, #1
    3742:	d10b      	bne.n	375c <prvTimerTask+0xa0>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3744:	2300      	movs	r3, #0
    3746:	9300      	str	r3, [sp, #0]
    3748:	4640      	mov	r0, r8
    374a:	2100      	movs	r1, #0
    374c:	1c2a      	adds	r2, r5, #0
    374e:	4d51      	ldr	r5, [pc, #324]	; (3894 <prvTimerTask+0x1d8>)
    3750:	597d      	ldr	r5, [r7, r5]
    3752:	47a8      	blx	r5
			configASSERT( xResult );
    3754:	2800      	cmp	r0, #0
    3756:	d101      	bne.n	375c <prvTimerTask+0xa0>
    3758:	b672      	cpsid	i
    375a:	e7fe      	b.n	375a <prvTimerTask+0x9e>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    375c:	4645      	mov	r5, r8
    375e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3760:	4640      	mov	r0, r8
    3762:	4798      	blx	r3
    3764:	e014      	b.n	3790 <prvTimerTask+0xd4>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
    3766:	4b4c      	ldr	r3, [pc, #304]	; (3898 <prvTimerTask+0x1dc>)
    3768:	447b      	add	r3, pc
    376a:	6898      	ldr	r0, [r3, #8]
    376c:	1ba9      	subs	r1, r5, r6
    376e:	4b4b      	ldr	r3, [pc, #300]	; (389c <prvTimerTask+0x1e0>)
    3770:	465e      	mov	r6, fp
    3772:	58f3      	ldr	r3, [r6, r3]
    3774:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
    3776:	4b43      	ldr	r3, [pc, #268]	; (3884 <prvTimerTask+0x1c8>)
    3778:	58f3      	ldr	r3, [r6, r3]
    377a:	4798      	blx	r3
    377c:	2800      	cmp	r0, #0
    377e:	d107      	bne.n	3790 <prvTimerTask+0xd4>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
    3780:	4b47      	ldr	r3, [pc, #284]	; (38a0 <prvTimerTask+0x1e4>)
    3782:	58f3      	ldr	r3, [r6, r3]
    3784:	4798      	blx	r3
    3786:	e003      	b.n	3790 <prvTimerTask+0xd4>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
    3788:	4b3e      	ldr	r3, [pc, #248]	; (3884 <prvTimerTask+0x1c8>)
    378a:	465f      	mov	r7, fp
    378c:	58fb      	ldr	r3, [r7, r3]
    378e:	4798      	blx	r3
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3790:	4e44      	ldr	r6, [pc, #272]	; (38a4 <prvTimerTask+0x1e8>)
    3792:	447e      	add	r6, pc
    3794:	4b44      	ldr	r3, [pc, #272]	; (38a8 <prvTimerTask+0x1ec>)
    3796:	4658      	mov	r0, fp
    3798:	58c5      	ldr	r5, [r0, r3]
    379a:	e054      	b.n	3846 <prvTimerTask+0x18a>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    379c:	6821      	ldr	r1, [r4, #0]
    379e:	2900      	cmp	r1, #0
    37a0:	db51      	blt.n	3846 <prvTimerTask+0x18a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    37a2:	68a2      	ldr	r2, [r4, #8]
    37a4:	4690      	mov	r8, r2

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
    37a6:	6953      	ldr	r3, [r2, #20]
    37a8:	2b00      	cmp	r3, #0
    37aa:	d005      	beq.n	37b8 <prvTimerTask+0xfc>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    37ac:	1c10      	adds	r0, r2, #0
    37ae:	3004      	adds	r0, #4
    37b0:	4b36      	ldr	r3, [pc, #216]	; (388c <prvTimerTask+0x1d0>)
    37b2:	465f      	mov	r7, fp
    37b4:	58fb      	ldr	r3, [r7, r3]
    37b6:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    37b8:	a804      	add	r0, sp, #16
    37ba:	4b3c      	ldr	r3, [pc, #240]	; (38ac <prvTimerTask+0x1f0>)
    37bc:	447b      	add	r3, pc
    37be:	4798      	blx	r3
    37c0:	1c03      	adds	r3, r0, #0

			switch( xMessage.xMessageID )
    37c2:	6820      	ldr	r0, [r4, #0]
    37c4:	2809      	cmp	r0, #9
    37c6:	d83e      	bhi.n	3846 <prvTimerTask+0x18a>
    37c8:	f000 fdf2 	bl	43b0 <__gnu_thumb1_case_uqi>
    37cc:	3d050505 	.word	0x3d050505
    37d0:	0505382a 	.word	0x0505382a
    37d4:	2a3d      	.short	0x2a3d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
    37d6:	6867      	ldr	r7, [r4, #4]
    37d8:	4640      	mov	r0, r8
    37da:	6980      	ldr	r0, [r0, #24]
    37dc:	1839      	adds	r1, r7, r0
    37de:	4640      	mov	r0, r8
    37e0:	1c1a      	adds	r2, r3, #0
    37e2:	1c3b      	adds	r3, r7, #0
    37e4:	4f32      	ldr	r7, [pc, #200]	; (38b0 <prvTimerTask+0x1f4>)
    37e6:	447f      	add	r7, pc
    37e8:	47b8      	blx	r7
    37ea:	2801      	cmp	r0, #1
    37ec:	d12b      	bne.n	3846 <prvTimerTask+0x18a>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    37ee:	4640      	mov	r0, r8
    37f0:	6a41      	ldr	r1, [r0, #36]	; 0x24
    37f2:	4788      	blx	r1
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    37f4:	4642      	mov	r2, r8
    37f6:	69d2      	ldr	r2, [r2, #28]
    37f8:	2a01      	cmp	r2, #1
    37fa:	d124      	bne.n	3846 <prvTimerTask+0x18a>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    37fc:	4643      	mov	r3, r8
    37fe:	699b      	ldr	r3, [r3, #24]
    3800:	6867      	ldr	r7, [r4, #4]
    3802:	19da      	adds	r2, r3, r7
    3804:	2300      	movs	r3, #0
    3806:	9300      	str	r3, [sp, #0]
    3808:	4640      	mov	r0, r8
    380a:	2100      	movs	r1, #0
    380c:	4f21      	ldr	r7, [pc, #132]	; (3894 <prvTimerTask+0x1d8>)
    380e:	46bc      	mov	ip, r7
    3810:	465f      	mov	r7, fp
    3812:	4467      	add	r7, ip
    3814:	683f      	ldr	r7, [r7, #0]
    3816:	47b8      	blx	r7
							configASSERT( xResult );
    3818:	2800      	cmp	r0, #0
    381a:	d114      	bne.n	3846 <prvTimerTask+0x18a>
    381c:	b672      	cpsid	i
    381e:	e7fe      	b.n	381e <prvTimerTask+0x162>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    3820:	6861      	ldr	r1, [r4, #4]
    3822:	4640      	mov	r0, r8
    3824:	6181      	str	r1, [r0, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    3826:	2900      	cmp	r1, #0
    3828:	d101      	bne.n	382e <prvTimerTask+0x172>
    382a:	b672      	cpsid	i
    382c:	e7fe      	b.n	382c <prvTimerTask+0x170>
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    382e:	1859      	adds	r1, r3, r1
    3830:	4640      	mov	r0, r8
    3832:	1c1a      	adds	r2, r3, #0
    3834:	4f1f      	ldr	r7, [pc, #124]	; (38b4 <prvTimerTask+0x1f8>)
    3836:	447f      	add	r7, pc
    3838:	47b8      	blx	r7
    383a:	e004      	b.n	3846 <prvTimerTask+0x18a>
					break;

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
    383c:	4640      	mov	r0, r8
    383e:	4b1e      	ldr	r3, [pc, #120]	; (38b8 <prvTimerTask+0x1fc>)
    3840:	4659      	mov	r1, fp
    3842:	58cb      	ldr	r3, [r1, r3]
    3844:	4798      	blx	r3
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3846:	68b0      	ldr	r0, [r6, #8]
    3848:	1c21      	adds	r1, r4, #0
    384a:	2200      	movs	r2, #0
    384c:	2300      	movs	r3, #0
    384e:	47a8      	blx	r5
    3850:	2800      	cmp	r0, #0
    3852:	d1a3      	bne.n	379c <prvTimerTask+0xe0>
    3854:	e743      	b.n	36de <prvTimerTask+0x22>
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    3856:	4b09      	ldr	r3, [pc, #36]	; (387c <prvTimerTask+0x1c0>)
    3858:	465a      	mov	r2, fp
    385a:	58d3      	ldr	r3, [r2, r3]
    385c:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    385e:	1c20      	adds	r0, r4, #0
    3860:	47d0      	blx	sl
    3862:	1c06      	adds	r6, r0, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
    3864:	2500      	movs	r5, #0
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
		if( xTimerListsWereSwitched == pdFALSE )
    3866:	9b05      	ldr	r3, [sp, #20]
    3868:	42ab      	cmp	r3, r5
    386a:	d100      	bne.n	386e <prvTimerTask+0x1b2>
    386c:	e77b      	b.n	3766 <prvTimerTask+0xaa>
    386e:	e78b      	b.n	3788 <prvTimerTask+0xcc>
    3870:	0000103c 	.word	0x0000103c
    3874:	1fffe62a 	.word	0x1fffe62a
    3878:	fffffef7 	.word	0xfffffef7
    387c:	000000f8 	.word	0x000000f8
    3880:	fffffed7 	.word	0xfffffed7
    3884:	0000019c 	.word	0x0000019c
    3888:	1fffe5ea 	.word	0x1fffe5ea
    388c:	00000104 	.word	0x00000104
    3890:	fffffc6d 	.word	0xfffffc6d
    3894:	00000134 	.word	0x00000134
    3898:	1fffe594 	.word	0x1fffe594
    389c:	00000014 	.word	0x00000014
    38a0:	00000144 	.word	0x00000144
    38a4:	1fffe56a 	.word	0x1fffe56a
    38a8:	000001c4 	.word	0x000001c4
    38ac:	fffffe15 	.word	0xfffffe15
    38b0:	fffffbc3 	.word	0xfffffbc3
    38b4:	fffffb73 	.word	0xfffffb73
    38b8:	00000068 	.word	0x00000068

000038bc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    38bc:	e7fe      	b.n	38bc <Dummy_Handler>
    38be:	46c0      	nop			; (mov r8, r8)

000038c0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    38c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    38c2:	b083      	sub	sp, #12
    38c4:	4c3b      	ldr	r4, [pc, #236]	; (39b4 <Reset_Handler+0xf4>)
    38c6:	447c      	add	r4, pc

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    38c8:	4b3b      	ldr	r3, [pc, #236]	; (39b8 <Reset_Handler+0xf8>)
    38ca:	58e3      	ldr	r3, [r4, r3]
    38cc:	9300      	str	r3, [sp, #0]
    38ce:	4b3b      	ldr	r3, [pc, #236]	; (39bc <Reset_Handler+0xfc>)
    38d0:	58e3      	ldr	r3, [r4, r3]
    38d2:	9800      	ldr	r0, [sp, #0]
    38d4:	4298      	cmp	r0, r3
    38d6:	d007      	beq.n	38e8 <Reset_Handler+0x28>
                for (; pDest < &_erelocate;) {
    38d8:	4b38      	ldr	r3, [pc, #224]	; (39bc <Reset_Handler+0xfc>)
    38da:	58e3      	ldr	r3, [r4, r3]
    38dc:	9300      	str	r3, [sp, #0]
    38de:	4b38      	ldr	r3, [pc, #224]	; (39c0 <Reset_Handler+0x100>)
    38e0:	58e3      	ldr	r3, [r4, r3]
    38e2:	9a00      	ldr	r2, [sp, #0]
    38e4:	429a      	cmp	r2, r3
    38e6:	d308      	bcc.n	38fa <Reset_Handler+0x3a>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    38e8:	4b36      	ldr	r3, [pc, #216]	; (39c4 <Reset_Handler+0x104>)
    38ea:	58e3      	ldr	r3, [r4, r3]
    38ec:	9300      	str	r3, [sp, #0]
    38ee:	4b36      	ldr	r3, [pc, #216]	; (39c8 <Reset_Handler+0x108>)
    38f0:	58e3      	ldr	r3, [r4, r3]
    38f2:	9d00      	ldr	r5, [sp, #0]
    38f4:	429d      	cmp	r5, r3
    38f6:	d318      	bcc.n	392a <Reset_Handler+0x6a>
    38f8:	e026      	b.n	3948 <Reset_Handler+0x88>
    38fa:	4b31      	ldr	r3, [pc, #196]	; (39c0 <Reset_Handler+0x100>)
    38fc:	58e3      	ldr	r3, [r4, r3]
    38fe:	9300      	str	r3, [sp, #0]
    3900:	4b2e      	ldr	r3, [pc, #184]	; (39bc <Reset_Handler+0xfc>)
    3902:	58e3      	ldr	r3, [r4, r3]
    3904:	43d9      	mvns	r1, r3
    3906:	9800      	ldr	r0, [sp, #0]
    3908:	1809      	adds	r1, r1, r0
    390a:	0889      	lsrs	r1, r1, #2
    390c:	3101      	adds	r1, #1
    390e:	0089      	lsls	r1, r1, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    3910:	2300      	movs	r3, #0
                        *pDest++ = *pSrc++;
    3912:	4a2a      	ldr	r2, [pc, #168]	; (39bc <Reset_Handler+0xfc>)
    3914:	58a2      	ldr	r2, [r4, r2]
    3916:	9201      	str	r2, [sp, #4]
    3918:	4a27      	ldr	r2, [pc, #156]	; (39b8 <Reset_Handler+0xf8>)
    391a:	58a2      	ldr	r2, [r4, r2]
    391c:	58d0      	ldr	r0, [r2, r3]
    391e:	9d01      	ldr	r5, [sp, #4]
    3920:	50e8      	str	r0, [r5, r3]
    3922:	3304      	adds	r3, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    3924:	428b      	cmp	r3, r1
    3926:	d1f9      	bne.n	391c <Reset_Handler+0x5c>
    3928:	e7de      	b.n	38e8 <Reset_Handler+0x28>
    392a:	4b26      	ldr	r3, [pc, #152]	; (39c4 <Reset_Handler+0x104>)
    392c:	58e3      	ldr	r3, [r4, r3]
    392e:	1d1a      	adds	r2, r3, #4
    3930:	4925      	ldr	r1, [pc, #148]	; (39c8 <Reset_Handler+0x108>)
    3932:	5861      	ldr	r1, [r4, r1]
    3934:	9100      	str	r1, [sp, #0]
    3936:	3103      	adds	r1, #3
    3938:	1a89      	subs	r1, r1, r2
    393a:	0889      	lsrs	r1, r1, #2
    393c:	0089      	lsls	r1, r1, #2
    393e:	1852      	adds	r2, r2, r1
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
                *pDest++ = 0;
    3940:	2100      	movs	r1, #0
    3942:	c302      	stmia	r3!, {r1}
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    3944:	4293      	cmp	r3, r2
    3946:	d1fc      	bne.n	3942 <Reset_Handler+0x82>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    3948:	4b20      	ldr	r3, [pc, #128]	; (39cc <Reset_Handler+0x10c>)
    394a:	58e3      	ldr	r3, [r4, r3]
    394c:	9300      	str	r3, [sp, #0]
    394e:	23ff      	movs	r3, #255	; 0xff
    3950:	9a00      	ldr	r2, [sp, #0]
    3952:	439a      	bics	r2, r3
    3954:	4b1e      	ldr	r3, [pc, #120]	; (39d0 <Reset_Handler+0x110>)
    3956:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    3958:	2102      	movs	r1, #2
    395a:	2390      	movs	r3, #144	; 0x90
    395c:	005b      	lsls	r3, r3, #1
    395e:	4a1d      	ldr	r2, [pc, #116]	; (39d4 <Reset_Handler+0x114>)
    3960:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    3962:	4b1d      	ldr	r3, [pc, #116]	; (39d8 <Reset_Handler+0x118>)
    3964:	78d8      	ldrb	r0, [r3, #3]
    3966:	2103      	movs	r1, #3
    3968:	4388      	bics	r0, r1
    396a:	2202      	movs	r2, #2
    396c:	4310      	orrs	r0, r2
    396e:	70d8      	strb	r0, [r3, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    3970:	78de      	ldrb	r6, [r3, #3]
    3972:	250c      	movs	r5, #12
    3974:	43ae      	bics	r6, r5
    3976:	2008      	movs	r0, #8
    3978:	4306      	orrs	r6, r0
    397a:	70de      	strb	r6, [r3, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    397c:	4b17      	ldr	r3, [pc, #92]	; (39dc <Reset_Handler+0x11c>)
    397e:	7b9f      	ldrb	r7, [r3, #14]
    3980:	2630      	movs	r6, #48	; 0x30
    3982:	43b7      	bics	r7, r6
    3984:	2620      	movs	r6, #32
    3986:	433e      	orrs	r6, r7
    3988:	739e      	strb	r6, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    398a:	7b9e      	ldrb	r6, [r3, #14]
    398c:	43ae      	bics	r6, r5
    398e:	4330      	orrs	r0, r6
    3990:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    3992:	7b98      	ldrb	r0, [r3, #14]
    3994:	4388      	bics	r0, r1
    3996:	4302      	orrs	r2, r0
    3998:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    399a:	4b11      	ldr	r3, [pc, #68]	; (39e0 <Reset_Handler+0x120>)
    399c:	6859      	ldr	r1, [r3, #4]
    399e:	2280      	movs	r2, #128	; 0x80
    39a0:	430a      	orrs	r2, r1
    39a2:	605a      	str	r2, [r3, #4]

        /* Initialize the C library */
        __libc_init_array();
    39a4:	4b0f      	ldr	r3, [pc, #60]	; (39e4 <Reset_Handler+0x124>)
    39a6:	58e3      	ldr	r3, [r4, r3]
    39a8:	4798      	blx	r3

        /* Branch to main function */
        main();
    39aa:	4b0f      	ldr	r3, [pc, #60]	; (39e8 <Reset_Handler+0x128>)
    39ac:	58e3      	ldr	r3, [r4, r3]
    39ae:	4798      	blx	r3
    39b0:	e7fe      	b.n	39b0 <Reset_Handler+0xf0>
    39b2:	46c0      	nop			; (mov r8, r8)
    39b4:	00000e42 	.word	0x00000e42
    39b8:	0000003c 	.word	0x0000003c
    39bc:	0000005c 	.word	0x0000005c
    39c0:	000001dc 	.word	0x000001dc
    39c4:	00000044 	.word	0x00000044
    39c8:	00000164 	.word	0x00000164
    39cc:	00000030 	.word	0x00000030
    39d0:	e000ed00 	.word	0xe000ed00
    39d4:	41007000 	.word	0x41007000
    39d8:	41005000 	.word	0x41005000
    39dc:	41004800 	.word	0x41004800
    39e0:	41004000 	.word	0x41004000
    39e4:	000000a4 	.word	0x000000a4
    39e8:	00000150 	.word	0x00000150

000039ec <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    39ec:	b500      	push	{lr}
    39ee:	b083      	sub	sp, #12
    39f0:	4b23      	ldr	r3, [pc, #140]	; (3a80 <system_clock_source_get_hz+0x94>)
    39f2:	447b      	add	r3, pc
	switch (clock_source) {
    39f4:	2808      	cmp	r0, #8
    39f6:	d83e      	bhi.n	3a76 <system_clock_source_get_hz+0x8a>
    39f8:	f000 fcda 	bl	43b0 <__gnu_thumb1_case_uqi>
    39fc:	053d3d08 	.word	0x053d3d08
    3a00:	180c1405 	.word	0x180c1405
    3a04:	33          	.byte	0x33
    3a05:	00          	.byte	0x00

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    3a06:	2080      	movs	r0, #128	; 0x80
    3a08:	0200      	lsls	r0, r0, #8
    3a0a:	e037      	b.n	3a7c <system_clock_source_get_hz+0x90>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    3a0c:	4b1d      	ldr	r3, [pc, #116]	; (3a84 <system_clock_source_get_hz+0x98>)
    3a0e:	447b      	add	r3, pc
    3a10:	6918      	ldr	r0, [r3, #16]
    3a12:	e033      	b.n	3a7c <system_clock_source_get_hz+0x90>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    3a14:	4b1c      	ldr	r3, [pc, #112]	; (3a88 <system_clock_source_get_hz+0x9c>)
    3a16:	6a18      	ldr	r0, [r3, #32]
    3a18:	0580      	lsls	r0, r0, #22
    3a1a:	0f80      	lsrs	r0, r0, #30
    3a1c:	4b1b      	ldr	r3, [pc, #108]	; (3a8c <system_clock_source_get_hz+0xa0>)
    3a1e:	40c3      	lsrs	r3, r0
    3a20:	1c18      	adds	r0, r3, #0
    3a22:	e02b      	b.n	3a7c <system_clock_source_get_hz+0x90>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    3a24:	4b1a      	ldr	r3, [pc, #104]	; (3a90 <system_clock_source_get_hz+0xa4>)
    3a26:	447b      	add	r3, pc
    3a28:	6958      	ldr	r0, [r3, #20]
    3a2a:	e027      	b.n	3a7c <system_clock_source_get_hz+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    3a2c:	4a19      	ldr	r2, [pc, #100]	; (3a94 <system_clock_source_get_hz+0xa8>)
    3a2e:	447a      	add	r2, pc
    3a30:	6812      	ldr	r2, [r2, #0]
    3a32:	2002      	movs	r0, #2
    3a34:	4010      	ands	r0, r2
    3a36:	d021      	beq.n	3a7c <system_clock_source_get_hz+0x90>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    3a38:	4813      	ldr	r0, [pc, #76]	; (3a88 <system_clock_source_get_hz+0x9c>)
    3a3a:	2110      	movs	r1, #16
    3a3c:	68c2      	ldr	r2, [r0, #12]
    3a3e:	4211      	tst	r1, r2
    3a40:	d0fc      	beq.n	3a3c <system_clock_source_get_hz+0x50>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    3a42:	4a15      	ldr	r2, [pc, #84]	; (3a98 <system_clock_source_get_hz+0xac>)
    3a44:	447a      	add	r2, pc
    3a46:	6812      	ldr	r2, [r2, #0]
    3a48:	0751      	lsls	r1, r2, #29
    3a4a:	d516      	bpl.n	3a7a <system_clock_source_get_hz+0x8e>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    3a4c:	2000      	movs	r0, #0
    3a4e:	4a13      	ldr	r2, [pc, #76]	; (3a9c <system_clock_source_get_hz+0xb0>)
    3a50:	589a      	ldr	r2, [r3, r2]
    3a52:	4790      	blx	r2
					(_system_clock_inst.dfll.mul & 0xffff);
    3a54:	4b12      	ldr	r3, [pc, #72]	; (3aa0 <system_clock_source_get_hz+0xb4>)
    3a56:	447b      	add	r3, pc
    3a58:	689b      	ldr	r3, [r3, #8]
    3a5a:	041b      	lsls	r3, r3, #16
    3a5c:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    3a5e:	4358      	muls	r0, r3
    3a60:	e00c      	b.n	3a7c <system_clock_source_get_hz+0x90>

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    3a62:	2350      	movs	r3, #80	; 0x50
    3a64:	4a08      	ldr	r2, [pc, #32]	; (3a88 <system_clock_source_get_hz+0x9c>)
    3a66:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    3a68:	2000      	movs	r0, #0

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    3a6a:	075a      	lsls	r2, r3, #29
    3a6c:	d506      	bpl.n	3a7c <system_clock_source_get_hz+0x90>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    3a6e:	4b0d      	ldr	r3, [pc, #52]	; (3aa4 <system_clock_source_get_hz+0xb8>)
    3a70:	447b      	add	r3, pc
    3a72:	68d8      	ldr	r0, [r3, #12]
    3a74:	e002      	b.n	3a7c <system_clock_source_get_hz+0x90>
#endif

	default:
		return 0;
    3a76:	2000      	movs	r0, #0
    3a78:	e000      	b.n	3a7c <system_clock_source_get_hz+0x90>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    3a7a:	480b      	ldr	r0, [pc, #44]	; (3aa8 <system_clock_source_get_hz+0xbc>)
#endif

	default:
		return 0;
	}
}
    3a7c:	b003      	add	sp, #12
    3a7e:	bd00      	pop	{pc}
    3a80:	00000d16 	.word	0x00000d16
    3a84:	1fffe326 	.word	0x1fffe326
    3a88:	40000800 	.word	0x40000800
    3a8c:	007a1200 	.word	0x007a1200
    3a90:	1fffe30e 	.word	0x1fffe30e
    3a94:	1fffe306 	.word	0x1fffe306
    3a98:	1fffe2f0 	.word	0x1fffe2f0
    3a9c:	00000110 	.word	0x00000110
    3aa0:	1fffe2de 	.word	0x1fffe2de
    3aa4:	1fffe2c4 	.word	0x1fffe2c4
    3aa8:	02dc6c00 	.word	0x02dc6c00

00003aac <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    3aac:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    3aae:	4b0c      	ldr	r3, [pc, #48]	; (3ae0 <system_clock_source_osc8m_set_config+0x34>)
    3ab0:	6a1c      	ldr	r4, [r3, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    3ab2:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    3ab4:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    3ab6:	7840      	ldrb	r0, [r0, #1]
    3ab8:	2201      	movs	r2, #1
    3aba:	4010      	ands	r0, r2
    3abc:	0180      	lsls	r0, r0, #6
    3abe:	2640      	movs	r6, #64	; 0x40
    3ac0:	43b4      	bics	r4, r6
    3ac2:	4304      	orrs	r4, r0
    3ac4:	402a      	ands	r2, r5
    3ac6:	01d0      	lsls	r0, r2, #7
    3ac8:	2280      	movs	r2, #128	; 0x80
    3aca:	4394      	bics	r4, r2
    3acc:	1c22      	adds	r2, r4, #0
    3ace:	4302      	orrs	r2, r0
    3ad0:	2003      	movs	r0, #3
    3ad2:	4001      	ands	r1, r0
    3ad4:	0209      	lsls	r1, r1, #8
    3ad6:	4803      	ldr	r0, [pc, #12]	; (3ae4 <system_clock_source_osc8m_set_config+0x38>)
    3ad8:	4002      	ands	r2, r0
    3ada:	430a      	orrs	r2, r1
    3adc:	621a      	str	r2, [r3, #32]
}
    3ade:	bd70      	pop	{r4, r5, r6, pc}
    3ae0:	40000800 	.word	0x40000800
    3ae4:	fffffcff 	.word	0xfffffcff

00003ae8 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    3ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3aea:	465f      	mov	r7, fp
    3aec:	4656      	mov	r6, sl
    3aee:	464d      	mov	r5, r9
    3af0:	4644      	mov	r4, r8
    3af2:	b4f0      	push	{r4, r5, r6, r7}
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    3af4:	4a26      	ldr	r2, [pc, #152]	; (3b90 <system_clock_source_xosc32k_set_config+0xa8>)
    3af6:	8a94      	ldrh	r4, [r2, #20]

	temp.bit.STARTUP = config->startup_time;
    3af8:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    3afa:	7803      	ldrb	r3, [r0, #0]
    3afc:	4259      	negs	r1, r3
    3afe:	4159      	adcs	r1, r3
    3b00:	468a      	mov	sl, r1
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    3b02:	7883      	ldrb	r3, [r0, #2]
    3b04:	469c      	mov	ip, r3
	temp.bit.EN1K = config->enable_1khz_output;
    3b06:	78c1      	ldrb	r1, [r0, #3]
    3b08:	4688      	mov	r8, r1
	temp.bit.EN32K = config->enable_32khz_output;
    3b0a:	7903      	ldrb	r3, [r0, #4]
    3b0c:	4699      	mov	r9, r3

	temp.bit.ONDEMAND = config->on_demand;
    3b0e:	7b46      	ldrb	r6, [r0, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    3b10:	7b07      	ldrb	r7, [r0, #12]
	temp.bit.WRTLOCK  = config->write_once;
    3b12:	7b81      	ldrb	r1, [r0, #14]
    3b14:	468b      	mov	fp, r1

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    3b16:	6880      	ldr	r0, [r0, #8]
    3b18:	4b1e      	ldr	r3, [pc, #120]	; (3b94 <system_clock_source_xosc32k_set_config+0xac>)
    3b1a:	447b      	add	r3, pc
    3b1c:	6158      	str	r0, [r3, #20]

	SYSCTRL->XOSC32K = temp;
    3b1e:	2301      	movs	r3, #1
    3b20:	4651      	mov	r1, sl
    3b22:	0088      	lsls	r0, r1, #2
    3b24:	2104      	movs	r1, #4
    3b26:	438c      	bics	r4, r1
    3b28:	4304      	orrs	r4, r0
    3b2a:	4648      	mov	r0, r9
    3b2c:	4018      	ands	r0, r3
    3b2e:	00c0      	lsls	r0, r0, #3
    3b30:	2108      	movs	r1, #8
    3b32:	438c      	bics	r4, r1
    3b34:	4304      	orrs	r4, r0
    3b36:	4640      	mov	r0, r8
    3b38:	4018      	ands	r0, r3
    3b3a:	0100      	lsls	r0, r0, #4
    3b3c:	2110      	movs	r1, #16
    3b3e:	438c      	bics	r4, r1
    3b40:	4304      	orrs	r4, r0
    3b42:	4660      	mov	r0, ip
    3b44:	4018      	ands	r0, r3
    3b46:	0140      	lsls	r0, r0, #5
    3b48:	2120      	movs	r1, #32
    3b4a:	438c      	bics	r4, r1
    3b4c:	4304      	orrs	r4, r0
    3b4e:	1c18      	adds	r0, r3, #0
    3b50:	4038      	ands	r0, r7
    3b52:	0180      	lsls	r0, r0, #6
    3b54:	2740      	movs	r7, #64	; 0x40
    3b56:	43bc      	bics	r4, r7
    3b58:	4304      	orrs	r4, r0
    3b5a:	1c18      	adds	r0, r3, #0
    3b5c:	4030      	ands	r0, r6
    3b5e:	01c0      	lsls	r0, r0, #7
    3b60:	2680      	movs	r6, #128	; 0x80
    3b62:	43b4      	bics	r4, r6
    3b64:	4304      	orrs	r4, r0
    3b66:	2007      	movs	r0, #7
    3b68:	4028      	ands	r0, r5
    3b6a:	0200      	lsls	r0, r0, #8
    3b6c:	4d0a      	ldr	r5, [pc, #40]	; (3b98 <system_clock_source_xosc32k_set_config+0xb0>)
    3b6e:	402c      	ands	r4, r5
    3b70:	4304      	orrs	r4, r0
    3b72:	4659      	mov	r1, fp
    3b74:	400b      	ands	r3, r1
    3b76:	0319      	lsls	r1, r3, #12
    3b78:	4808      	ldr	r0, [pc, #32]	; (3b9c <system_clock_source_xosc32k_set_config+0xb4>)
    3b7a:	1c23      	adds	r3, r4, #0
    3b7c:	4003      	ands	r3, r0
    3b7e:	430b      	orrs	r3, r1
    3b80:	8293      	strh	r3, [r2, #20]
}
    3b82:	bc3c      	pop	{r2, r3, r4, r5}
    3b84:	4690      	mov	r8, r2
    3b86:	4699      	mov	r9, r3
    3b88:	46a2      	mov	sl, r4
    3b8a:	46ab      	mov	fp, r5
    3b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b8e:	46c0      	nop			; (mov r8, r8)
    3b90:	40000800 	.word	0x40000800
    3b94:	1fffe21a 	.word	0x1fffe21a
    3b98:	fffff8ff 	.word	0xfffff8ff
    3b9c:	ffffefff 	.word	0xffffefff

00003ba0 <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
    3ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ba2:	b083      	sub	sp, #12
    3ba4:	1c04      	adds	r4, r0, #0
    3ba6:	4e26      	ldr	r6, [pc, #152]	; (3c40 <system_clock_source_dpll_set_config+0xa0>)
    3ba8:	447e      	add	r6, pc

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
    3baa:	68c5      	ldr	r5, [r0, #12]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
    3bac:	7d03      	ldrb	r3, [r0, #20]
    3bae:	2b01      	cmp	r3, #1
    3bb0:	d107      	bne.n	3bc2 <system_clock_source_dpll_set_config+0x22>
		refclk = refclk / (2 * (config->reference_divider + 1));
    3bb2:	8a01      	ldrh	r1, [r0, #16]
    3bb4:	3101      	adds	r1, #1
    3bb6:	0049      	lsls	r1, r1, #1
    3bb8:	4b22      	ldr	r3, [pc, #136]	; (3c44 <system_clock_source_dpll_set_config+0xa4>)
    3bba:	58f3      	ldr	r3, [r6, r3]
    3bbc:	1c28      	adds	r0, r5, #0
    3bbe:	4798      	blx	r3
    3bc0:	1c05      	adds	r5, r0, #0
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
    3bc2:	68a3      	ldr	r3, [r4, #8]
    3bc4:	0118      	lsls	r0, r3, #4
    3bc6:	4b1f      	ldr	r3, [pc, #124]	; (3c44 <system_clock_source_dpll_set_config+0xa4>)
    3bc8:	58f3      	ldr	r3, [r6, r3]
    3bca:	1c29      	adds	r1, r5, #0
    3bcc:	4798      	blx	r3
	tmpldrfrac = tmpldr & 0x0f;
    3bce:	220f      	movs	r2, #15
    3bd0:	4002      	ands	r2, r0
	tmpldr = (tmpldr >> 4) - 1;
    3bd2:	0900      	lsrs	r0, r0, #4

	SYSCTRL->DPLLCTRLA.reg =
    3bd4:	7866      	ldrb	r6, [r4, #1]
    3bd6:	01b6      	lsls	r6, r6, #6
    3bd8:	7823      	ldrb	r3, [r4, #0]
    3bda:	01db      	lsls	r3, r3, #7
    3bdc:	431e      	orrs	r6, r3
    3bde:	b2f6      	uxtb	r6, r6
    3be0:	4b19      	ldr	r3, [pc, #100]	; (3c48 <system_clock_source_dpll_set_config+0xa8>)
    3be2:	2144      	movs	r1, #68	; 0x44
    3be4:	545e      	strb	r6, [r3, r1]
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);

	SYSCTRL->DPLLRATIO.reg =
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    3be6:	0416      	lsls	r6, r2, #16
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
	tmpldrfrac = tmpldr & 0x0f;
	tmpldr = (tmpldr >> 4) - 1;
    3be8:	1e41      	subs	r1, r0, #1
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);

	SYSCTRL->DPLLRATIO.reg =
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
			SYSCTRL_DPLLRATIO_LDR(tmpldr);
    3bea:	0509      	lsls	r1, r1, #20
    3bec:	0d09      	lsrs	r1, r1, #20
	SYSCTRL->DPLLCTRLA.reg =
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);

	SYSCTRL->DPLLRATIO.reg =
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    3bee:	4331      	orrs	r1, r6

	SYSCTRL->DPLLCTRLA.reg =
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);

	SYSCTRL->DPLLRATIO.reg =
    3bf0:	6499      	str	r1, [r3, #72]	; 0x48
	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
    3bf2:	78e6      	ldrb	r6, [r4, #3]
    3bf4:	00f6      	lsls	r6, r6, #3
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
			SYSCTRL_DPLLRATIO_LDR(tmpldr);

	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
    3bf6:	78a1      	ldrb	r1, [r4, #2]
    3bf8:	0309      	lsls	r1, r1, #12
	SYSCTRL->DPLLRATIO.reg =
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
			SYSCTRL_DPLLRATIO_LDR(tmpldr);

	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
    3bfa:	4331      	orrs	r1, r6
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
    3bfc:	7926      	ldrb	r6, [r4, #4]
    3bfe:	00b6      	lsls	r6, r6, #2
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
			SYSCTRL_DPLLRATIO_LDR(tmpldr);

	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
    3c00:	4331      	orrs	r1, r6
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);
    3c02:	7ca6      	ldrb	r6, [r4, #18]
    3c04:	2703      	movs	r7, #3
    3c06:	403e      	ands	r6, r7
			SYSCTRL_DPLLRATIO_LDR(tmpldr);

	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
    3c08:	4331      	orrs	r1, r6
	SYSCTRL->DPLLRATIO.reg =
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
			SYSCTRL_DPLLRATIO_LDR(tmpldr);

	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
    3c0a:	8a26      	ldrh	r6, [r4, #16]
    3c0c:	0436      	lsls	r6, r6, #16
    3c0e:	4f0f      	ldr	r7, [pc, #60]	; (3c4c <system_clock_source_dpll_set_config+0xac>)
    3c10:	403e      	ands	r6, r7
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
    3c12:	4331      	orrs	r1, r6
			SYSCTRL_DPLLRATIO_LDR(tmpldr);

	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
    3c14:	7ce7      	ldrb	r7, [r4, #19]
    3c16:	023f      	lsls	r7, r7, #8
    3c18:	26e0      	movs	r6, #224	; 0xe0
    3c1a:	00f6      	lsls	r6, r6, #3
    3c1c:	403e      	ands	r6, r7
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
    3c1e:	4331      	orrs	r1, r6

	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
    3c20:	7d24      	ldrb	r4, [r4, #20]
    3c22:	0124      	lsls	r4, r4, #4
    3c24:	2630      	movs	r6, #48	; 0x30
    3c26:	4034      	ands	r4, r6
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
    3c28:	4321      	orrs	r1, r4

	SYSCTRL->DPLLRATIO.reg =
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
			SYSCTRL_DPLLRATIO_LDR(tmpldr);

	SYSCTRL->DPLLCTRLB.reg =
    3c2a:	64d9      	str	r1, [r3, #76]	; 0x4c

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
    3c2c:	0100      	lsls	r0, r0, #4
    3c2e:	1812      	adds	r2, r2, r0
    3c30:	4355      	muls	r5, r2
    3c32:	092d      	lsrs	r5, r5, #4
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
    3c34:	4b06      	ldr	r3, [pc, #24]	; (3c50 <system_clock_source_dpll_set_config+0xb0>)
    3c36:	447b      	add	r3, pc
    3c38:	60dd      	str	r5, [r3, #12]
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
}
    3c3a:	b003      	add	sp, #12
    3c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3c3e:	46c0      	nop			; (mov r8, r8)
    3c40:	00000b60 	.word	0x00000b60
    3c44:	0000015c 	.word	0x0000015c
    3c48:	40000800 	.word	0x40000800
    3c4c:	07ff0000 	.word	0x07ff0000
    3c50:	1fffe0fe 	.word	0x1fffe0fe

00003c54 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    3c54:	b500      	push	{lr}
	switch (clock_source) {
    3c56:	2808      	cmp	r0, #8
    3c58:	d84f      	bhi.n	3cfa <system_clock_source_enable+0xa6>
    3c5a:	f000 fba9 	bl	43b0 <__gnu_thumb1_case_uqi>
    3c5e:	4e15      	.short	0x4e15
    3c60:	1c0e054e 	.word	0x1c0e054e
    3c64:	2307      	.short	0x2307
    3c66:	46          	.byte	0x46
    3c67:	00          	.byte	0x00
		break;
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    3c68:	2000      	movs	r0, #0
    3c6a:	e047      	b.n	3cfc <system_clock_source_enable+0xa8>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    3c6c:	4b24      	ldr	r3, [pc, #144]	; (3d00 <system_clock_source_enable+0xac>)
    3c6e:	6a19      	ldr	r1, [r3, #32]
    3c70:	2202      	movs	r2, #2
    3c72:	430a      	orrs	r2, r1
    3c74:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    3c76:	2000      	movs	r0, #0
    3c78:	e040      	b.n	3cfc <system_clock_source_enable+0xa8>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    3c7a:	4b21      	ldr	r3, [pc, #132]	; (3d00 <system_clock_source_enable+0xac>)
    3c7c:	6999      	ldr	r1, [r3, #24]
    3c7e:	2202      	movs	r2, #2
    3c80:	430a      	orrs	r2, r1
    3c82:	619a      	str	r2, [r3, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    3c84:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
    3c86:	e039      	b.n	3cfc <system_clock_source_enable+0xa8>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    3c88:	4b1d      	ldr	r3, [pc, #116]	; (3d00 <system_clock_source_enable+0xac>)
    3c8a:	8a19      	ldrh	r1, [r3, #16]
    3c8c:	2202      	movs	r2, #2
    3c8e:	430a      	orrs	r2, r1
    3c90:	821a      	strh	r2, [r3, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    3c92:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
    3c94:	e032      	b.n	3cfc <system_clock_source_enable+0xa8>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    3c96:	4b1a      	ldr	r3, [pc, #104]	; (3d00 <system_clock_source_enable+0xac>)
    3c98:	8a99      	ldrh	r1, [r3, #20]
    3c9a:	2202      	movs	r2, #2
    3c9c:	430a      	orrs	r2, r1
    3c9e:	829a      	strh	r2, [r3, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    3ca0:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
    3ca2:	e02b      	b.n	3cfc <system_clock_source_enable+0xa8>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    3ca4:	4a17      	ldr	r2, [pc, #92]	; (3d04 <system_clock_source_enable+0xb0>)
    3ca6:	447a      	add	r2, pc
    3ca8:	6811      	ldr	r1, [r2, #0]
    3caa:	2302      	movs	r3, #2
    3cac:	4319      	orrs	r1, r3
    3cae:	6011      	str	r1, [r2, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    3cb0:	4a13      	ldr	r2, [pc, #76]	; (3d00 <system_clock_source_enable+0xac>)
    3cb2:	8493      	strh	r3, [r2, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    3cb4:	1c11      	adds	r1, r2, #0
    3cb6:	2210      	movs	r2, #16
    3cb8:	68cb      	ldr	r3, [r1, #12]
    3cba:	421a      	tst	r2, r3
    3cbc:	d0fc      	beq.n	3cb8 <system_clock_source_enable+0x64>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    3cbe:	4a12      	ldr	r2, [pc, #72]	; (3d08 <system_clock_source_enable+0xb4>)
    3cc0:	447a      	add	r2, pc
    3cc2:	6891      	ldr	r1, [r2, #8]
    3cc4:	4b0e      	ldr	r3, [pc, #56]	; (3d00 <system_clock_source_enable+0xac>)
    3cc6:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    3cc8:	6852      	ldr	r2, [r2, #4]
    3cca:	629a      	str	r2, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    3ccc:	2200      	movs	r2, #0
    3cce:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    3cd0:	1c19      	adds	r1, r3, #0
    3cd2:	2210      	movs	r2, #16
    3cd4:	68cb      	ldr	r3, [r1, #12]
    3cd6:	421a      	tst	r2, r3
    3cd8:	d0fc      	beq.n	3cd4 <system_clock_source_enable+0x80>
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
	_system_dfll_wait_for_sync();
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    3cda:	4b0c      	ldr	r3, [pc, #48]	; (3d0c <system_clock_source_enable+0xb8>)
    3cdc:	447b      	add	r3, pc
    3cde:	681a      	ldr	r2, [r3, #0]
    3ce0:	b292      	uxth	r2, r2
    3ce2:	4b07      	ldr	r3, [pc, #28]	; (3d00 <system_clock_source_enable+0xac>)
    3ce4:	849a      	strh	r2, [r3, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    3ce6:	2000      	movs	r0, #0
    3ce8:	e008      	b.n	3cfc <system_clock_source_enable+0xa8>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    3cea:	4a05      	ldr	r2, [pc, #20]	; (3d00 <system_clock_source_enable+0xac>)
    3cec:	2344      	movs	r3, #68	; 0x44
    3cee:	5cd0      	ldrb	r0, [r2, r3]
    3cf0:	2102      	movs	r1, #2
    3cf2:	4301      	orrs	r1, r0
    3cf4:	54d1      	strb	r1, [r2, r3]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    3cf6:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
    3cf8:	e000      	b.n	3cfc <system_clock_source_enable+0xa8>
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    3cfa:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
    3cfc:	bd00      	pop	{pc}
    3cfe:	46c0      	nop			; (mov r8, r8)
    3d00:	40000800 	.word	0x40000800
    3d04:	1fffe08e 	.word	0x1fffe08e
    3d08:	1fffe074 	.word	0x1fffe074
    3d0c:	1fffe058 	.word	0x1fffe058

00003d10 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    3d10:	b500      	push	{lr}
	uint32_t mask = 0;

	switch (clock_source) {
    3d12:	2808      	cmp	r0, #8
    3d14:	d823      	bhi.n	3d5e <system_clock_source_is_ready+0x4e>
    3d16:	f000 fb4b 	bl	43b0 <__gnu_thumb1_case_uqi>
    3d1a:	2207      	.short	0x2207
    3d1c:	09190522 	.word	0x09190522
    3d20:	0b17      	.short	0x0b17
    3d22:	0d          	.byte	0x0d
    3d23:	00          	.byte	0x00
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    3d24:	2001      	movs	r0, #1
    3d26:	e01b      	b.n	3d60 <system_clock_source_is_ready+0x50>
	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    3d28:	2301      	movs	r3, #1
		break;
    3d2a:	e010      	b.n	3d4e <system_clock_source_is_ready+0x3e>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    3d2c:	2302      	movs	r3, #2
		break;
    3d2e:	e00e      	b.n	3d4e <system_clock_source_is_ready+0x3e>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
    3d30:	2310      	movs	r3, #16
		}
		break;
    3d32:	e00c      	b.n	3d4e <system_clock_source_is_ready+0x3e>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    3d34:	2350      	movs	r3, #80	; 0x50
    3d36:	4a0b      	ldr	r2, [pc, #44]	; (3d64 <system_clock_source_is_ready+0x54>)
    3d38:	5cd0      	ldrb	r0, [r2, r3]
    3d3a:	2303      	movs	r3, #3
    3d3c:	4018      	ands	r0, r3
    3d3e:	3803      	subs	r0, #3
    3d40:	4243      	negs	r3, r0
    3d42:	4158      	adcs	r0, r3
    3d44:	b2c0      	uxtb	r0, r0
    3d46:	e00b      	b.n	3d60 <system_clock_source_is_ready+0x50>
{
	uint32_t mask = 0;

	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    3d48:	2308      	movs	r3, #8
    3d4a:	e000      	b.n	3d4e <system_clock_source_is_ready+0x3e>
		break;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    3d4c:	2304      	movs	r3, #4

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    3d4e:	4a05      	ldr	r2, [pc, #20]	; (3d64 <system_clock_source_is_ready+0x54>)
    3d50:	68d0      	ldr	r0, [r2, #12]
    3d52:	4018      	ands	r0, r3
    3d54:	1ac0      	subs	r0, r0, r3
    3d56:	4243      	negs	r3, r0
    3d58:	4158      	adcs	r0, r3
    3d5a:	b2c0      	uxtb	r0, r0
    3d5c:	e000      	b.n	3d60 <system_clock_source_is_ready+0x50>
	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;

	default:
		return false;
    3d5e:	2000      	movs	r0, #0
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
}
    3d60:	bd00      	pop	{pc}
    3d62:	46c0      	nop			; (mov r8, r8)
    3d64:	40000800 	.word	0x40000800

00003d68 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    3d68:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d6a:	b091      	sub	sp, #68	; 0x44
    3d6c:	4f48      	ldr	r7, [pc, #288]	; (3e90 <system_clock_init+0x128>)
    3d6e:	447f      	add	r7, pc
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    3d70:	22c2      	movs	r2, #194	; 0xc2
    3d72:	00d2      	lsls	r2, r2, #3
    3d74:	4b47      	ldr	r3, [pc, #284]	; (3e94 <system_clock_init+0x12c>)
    3d76:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    3d78:	4a47      	ldr	r2, [pc, #284]	; (3e98 <system_clock_init+0x130>)
    3d7a:	6851      	ldr	r1, [r2, #4]
    3d7c:	231e      	movs	r3, #30
    3d7e:	4399      	bics	r1, r3
    3d80:	2302      	movs	r3, #2
    3d82:	4319      	orrs	r1, r3
    3d84:	6051      	str	r1, [r2, #4]
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    3d86:	aa02      	add	r2, sp, #8
    3d88:	7013      	strb	r3, [r2, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    3d8a:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    3d8c:	1c16      	adds	r6, r2, #0
    3d8e:	4b43      	ldr	r3, [pc, #268]	; (3e9c <system_clock_init+0x134>)
    3d90:	58fd      	ldr	r5, [r7, r3]
    3d92:	b2e0      	uxtb	r0, r4
    3d94:	1c31      	adds	r1, r6, #0
    3d96:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    3d98:	3401      	adds	r4, #1
    3d9a:	2c25      	cmp	r4, #37	; 0x25
    3d9c:	d1f9      	bne.n	3d92 <system_clock_init+0x2a>
static inline void system_clock_source_xosc32k_get_config_defaults(
		struct system_clock_source_xosc32k_config *const config)
{
	Assert(config);

	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    3d9e:	2300      	movs	r3, #0
    3da0:	a80c      	add	r0, sp, #48	; 0x30
    3da2:	7003      	strb	r3, [r0, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
	config->auto_gain_control   = false;
    3da4:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    3da6:	2280      	movs	r2, #128	; 0x80
    3da8:	0212      	lsls	r2, r2, #8
    3daa:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    3dac:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    3dae:	2201      	movs	r2, #1
    3db0:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    3db2:	7303      	strb	r3, [r0, #12]
	config->on_demand           = true;
	config->write_once          = false;
    3db4:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    3db6:	2206      	movs	r2, #6
    3db8:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    3dba:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    3dbc:	4b38      	ldr	r3, [pc, #224]	; (3ea0 <system_clock_init+0x138>)
    3dbe:	58fb      	ldr	r3, [r7, r3]
    3dc0:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    3dc2:	2005      	movs	r0, #5
    3dc4:	4b37      	ldr	r3, [pc, #220]	; (3ea4 <system_clock_init+0x13c>)
    3dc6:	58fb      	ldr	r3, [r7, r3]
    3dc8:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    3dca:	4b37      	ldr	r3, [pc, #220]	; (3ea8 <system_clock_init+0x140>)
    3dcc:	58fc      	ldr	r4, [r7, r3]
    3dce:	2005      	movs	r0, #5
    3dd0:	47a0      	blx	r4
    3dd2:	2800      	cmp	r0, #0
    3dd4:	d0fb      	beq.n	3dce <system_clock_init+0x66>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    3dd6:	4b2f      	ldr	r3, [pc, #188]	; (3e94 <system_clock_init+0x12c>)
    3dd8:	8a99      	ldrh	r1, [r3, #20]
    3dda:	2280      	movs	r2, #128	; 0x80
    3ddc:	430a      	orrs	r2, r1
    3dde:	829a      	strh	r2, [r3, #20]
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
    3de0:	2400      	movs	r4, #0
    3de2:	a80b      	add	r0, sp, #44	; 0x2c
    3de4:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    3de6:	2601      	movs	r6, #1
    3de8:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    3dea:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    3dec:	4b2f      	ldr	r3, [pc, #188]	; (3eac <system_clock_init+0x144>)
    3dee:	58fb      	ldr	r3, [r7, r3]
    3df0:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    3df2:	2006      	movs	r0, #6
    3df4:	4b2b      	ldr	r3, [pc, #172]	; (3ea4 <system_clock_init+0x13c>)
    3df6:	58fd      	ldr	r5, [r7, r3]
    3df8:	47a8      	blx	r5


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    3dfa:	4b2d      	ldr	r3, [pc, #180]	; (3eb0 <system_clock_init+0x148>)
    3dfc:	58fb      	ldr	r3, [r7, r3]
    3dfe:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    3e00:	a902      	add	r1, sp, #8
    3e02:	604e      	str	r6, [r1, #4]
	config->high_when_disabled = false;
    3e04:	704c      	strb	r4, [r1, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    3e06:	720c      	strb	r4, [r1, #8]
	config->output_enable      = false;
    3e08:	724c      	strb	r4, [r1, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    3e0a:	2304      	movs	r3, #4
    3e0c:	700b      	strb	r3, [r1, #0]
    3e0e:	2001      	movs	r0, #1
    3e10:	4b28      	ldr	r3, [pc, #160]	; (3eb4 <system_clock_init+0x14c>)
    3e12:	58fb      	ldr	r3, [r7, r3]
    3e14:	4798      	blx	r3
    3e16:	2001      	movs	r0, #1
    3e18:	4b27      	ldr	r3, [pc, #156]	; (3eb8 <system_clock_init+0x150>)
    3e1a:	58fb      	ldr	r3, [r7, r3]
    3e1c:	4798      	blx	r3
 */
static inline void system_clock_source_dpll_get_config_defaults(
		struct system_clock_source_dpll_config *const config)
{
	config->on_demand           = true;
	config->run_in_standby      = false;
    3e1e:	a805      	add	r0, sp, #20
    3e20:	7044      	strb	r4, [r0, #1]
	config->lock_bypass         = false;
    3e22:	7084      	strb	r4, [r0, #2]
	config->wake_up_fast        = false;
    3e24:	70c4      	strb	r4, [r0, #3]
	config->low_power_enable    = false;
    3e26:	7104      	strb	r4, [r0, #4]

	config->output_frequency    = 48000000;
    3e28:	4b24      	ldr	r3, [pc, #144]	; (3ebc <system_clock_init+0x154>)
    3e2a:	6083      	str	r3, [r0, #8]
	config->reference_frequency = 32768;
    3e2c:	2380      	movs	r3, #128	; 0x80
    3e2e:	021b      	lsls	r3, r3, #8
    3e30:	60c3      	str	r3, [r0, #12]
	config->reference_divider   = 1;
    3e32:	8206      	strh	r6, [r0, #16]
	config->reference_clock     = SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC32K;
    3e34:	7504      	strb	r4, [r0, #20]

	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
    3e36:	74c4      	strb	r4, [r0, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
    3e38:	7484      	strb	r4, [r0, #18]
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);

	dpll_config.on_demand        = false;
    3e3a:	7004      	strb	r4, [r0, #0]
	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;

	system_clock_source_dpll_set_config(&dpll_config);
    3e3c:	4b20      	ldr	r3, [pc, #128]	; (3ec0 <system_clock_init+0x158>)
    3e3e:	58fb      	ldr	r3, [r7, r3]
    3e40:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
    3e42:	2008      	movs	r0, #8
    3e44:	47a8      	blx	r5
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
    3e46:	4b18      	ldr	r3, [pc, #96]	; (3ea8 <system_clock_init+0x140>)
    3e48:	58fc      	ldr	r4, [r7, r3]
    3e4a:	2008      	movs	r0, #8
    3e4c:	47a0      	blx	r4
    3e4e:	2800      	cmp	r0, #0
    3e50:	d0fb      	beq.n	3e4a <system_clock_init+0xe2>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		SYSCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
    3e52:	4a10      	ldr	r2, [pc, #64]	; (3e94 <system_clock_init+0x12c>)
    3e54:	2344      	movs	r3, #68	; 0x44
    3e56:	5cd0      	ldrb	r0, [r2, r3]
    3e58:	2180      	movs	r1, #128	; 0x80
    3e5a:	4249      	negs	r1, r1
    3e5c:	4301      	orrs	r1, r0
    3e5e:	54d1      	strb	r1, [r2, r3]
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    3e60:	4a18      	ldr	r2, [pc, #96]	; (3ec4 <system_clock_init+0x15c>)
    3e62:	2300      	movs	r3, #0
    3e64:	7213      	strb	r3, [r2, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    3e66:	7253      	strb	r3, [r2, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    3e68:	7293      	strb	r3, [r2, #10]
			break;
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    3e6a:	72d3      	strb	r3, [r2, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    3e6c:	2201      	movs	r2, #1
    3e6e:	a902      	add	r1, sp, #8
    3e70:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    3e72:	704b      	strb	r3, [r1, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    3e74:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    3e76:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    3e78:	2308      	movs	r3, #8
    3e7a:	700b      	strb	r3, [r1, #0]
    3e7c:	2000      	movs	r0, #0
    3e7e:	4b0d      	ldr	r3, [pc, #52]	; (3eb4 <system_clock_init+0x14c>)
    3e80:	58fb      	ldr	r3, [r7, r3]
    3e82:	4798      	blx	r3
    3e84:	2000      	movs	r0, #0
    3e86:	4b0c      	ldr	r3, [pc, #48]	; (3eb8 <system_clock_init+0x150>)
    3e88:	58fb      	ldr	r3, [r7, r3]
    3e8a:	4798      	blx	r3
#endif
}
    3e8c:	b011      	add	sp, #68	; 0x44
    3e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3e90:	0000099a 	.word	0x0000099a
    3e94:	40000800 	.word	0x40000800
    3e98:	41004000 	.word	0x41004000
    3e9c:	0000006c 	.word	0x0000006c
    3ea0:	00000180 	.word	0x00000180
    3ea4:	000001b8 	.word	0x000001b8
    3ea8:	000001e4 	.word	0x000001e4
    3eac:	000000b8 	.word	0x000000b8
    3eb0:	0000020c 	.word	0x0000020c
    3eb4:	00000098 	.word	0x00000098
    3eb8:	00000130 	.word	0x00000130
    3ebc:	02dc6c00 	.word	0x02dc6c00
    3ec0:	00000000 	.word	0x00000000
    3ec4:	40000400 	.word	0x40000400

00003ec8 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    3ec8:	4b06      	ldr	r3, [pc, #24]	; (3ee4 <system_gclk_init+0x1c>)
    3eca:	6999      	ldr	r1, [r3, #24]
    3ecc:	2208      	movs	r2, #8
    3ece:	430a      	orrs	r2, r1
    3ed0:	619a      	str	r2, [r3, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    3ed2:	2201      	movs	r2, #1
    3ed4:	4b04      	ldr	r3, [pc, #16]	; (3ee8 <system_gclk_init+0x20>)
    3ed6:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    3ed8:	1c19      	adds	r1, r3, #0
    3eda:	780b      	ldrb	r3, [r1, #0]
    3edc:	4213      	tst	r3, r2
    3ede:	d1fc      	bne.n	3eda <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    3ee0:	4770      	bx	lr
    3ee2:	46c0      	nop			; (mov r8, r8)
    3ee4:	40000400 	.word	0x40000400
    3ee8:	40000c00 	.word	0x40000c00

00003eec <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    3eec:	b5f0      	push	{r4, r5, r6, r7, lr}
    3eee:	4647      	mov	r7, r8
    3ef0:	b480      	push	{r7}
    3ef2:	b082      	sub	sp, #8
    3ef4:	1c07      	adds	r7, r0, #0
    3ef6:	4e2d      	ldr	r6, [pc, #180]	; (3fac <system_gclk_gen_set_config+0xc0>)
    3ef8:	447e      	add	r6, pc
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    3efa:	4680      	mov	r8, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    3efc:	780d      	ldrb	r5, [r1, #0]
    3efe:	022d      	lsls	r5, r5, #8
    3f00:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    3f02:	784b      	ldrb	r3, [r1, #1]
    3f04:	2b00      	cmp	r3, #0
    3f06:	d002      	beq.n	3f0e <system_gclk_gen_set_config+0x22>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    3f08:	2380      	movs	r3, #128	; 0x80
    3f0a:	02db      	lsls	r3, r3, #11
    3f0c:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    3f0e:	7a4b      	ldrb	r3, [r1, #9]
    3f10:	2b00      	cmp	r3, #0
    3f12:	d002      	beq.n	3f1a <system_gclk_gen_set_config+0x2e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    3f14:	2380      	movs	r3, #128	; 0x80
    3f16:	031b      	lsls	r3, r3, #12
    3f18:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    3f1a:	684c      	ldr	r4, [r1, #4]
    3f1c:	2c01      	cmp	r4, #1
    3f1e:	d919      	bls.n	3f54 <system_gclk_gen_set_config+0x68>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    3f20:	1e63      	subs	r3, r4, #1
    3f22:	421c      	tst	r4, r3
    3f24:	d110      	bne.n	3f48 <system_gclk_gen_set_config+0x5c>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    3f26:	2c02      	cmp	r4, #2
    3f28:	d906      	bls.n	3f38 <system_gclk_gen_set_config+0x4c>
    3f2a:	2302      	movs	r3, #2
    3f2c:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    3f2e:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    3f30:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    3f32:	429c      	cmp	r4, r3
    3f34:	d8fb      	bhi.n	3f2e <system_gclk_gen_set_config+0x42>
    3f36:	e000      	b.n	3f3a <system_gclk_gen_set_config+0x4e>
    3f38:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    3f3a:	0212      	lsls	r2, r2, #8
    3f3c:	433a      	orrs	r2, r7
    3f3e:	4690      	mov	r8, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    3f40:	2380      	movs	r3, #128	; 0x80
    3f42:	035b      	lsls	r3, r3, #13
    3f44:	431d      	orrs	r5, r3
    3f46:	e005      	b.n	3f54 <system_gclk_gen_set_config+0x68>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    3f48:	0224      	lsls	r4, r4, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    3f4a:	433c      	orrs	r4, r7
    3f4c:	46a0      	mov	r8, r4
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    3f4e:	2380      	movs	r3, #128	; 0x80
    3f50:	029b      	lsls	r3, r3, #10
    3f52:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    3f54:	7a0b      	ldrb	r3, [r1, #8]
    3f56:	2b00      	cmp	r3, #0
    3f58:	d002      	beq.n	3f60 <system_gclk_gen_set_config+0x74>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    3f5a:	2380      	movs	r3, #128	; 0x80
    3f5c:	039b      	lsls	r3, r3, #14
    3f5e:	431d      	orrs	r5, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3f60:	4a13      	ldr	r2, [pc, #76]	; (3fb0 <system_gclk_gen_set_config+0xc4>)
    3f62:	7853      	ldrb	r3, [r2, #1]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing()) {
    3f64:	b25b      	sxtb	r3, r3
    3f66:	2b00      	cmp	r3, #0
    3f68:	dbfb      	blt.n	3f62 <system_gclk_gen_set_config+0x76>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    3f6a:	4b12      	ldr	r3, [pc, #72]	; (3fb4 <system_gclk_gen_set_config+0xc8>)
    3f6c:	58f3      	ldr	r3, [r6, r3]
    3f6e:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    3f70:	4b11      	ldr	r3, [pc, #68]	; (3fb8 <system_gclk_gen_set_config+0xcc>)
    3f72:	701f      	strb	r7, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3f74:	4a0e      	ldr	r2, [pc, #56]	; (3fb0 <system_gclk_gen_set_config+0xc4>)
    3f76:	7853      	ldrb	r3, [r2, #1]

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    3f78:	b25b      	sxtb	r3, r3
    3f7a:	2b00      	cmp	r3, #0
    3f7c:	dbfb      	blt.n	3f76 <system_gclk_gen_set_config+0x8a>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    3f7e:	4b0c      	ldr	r3, [pc, #48]	; (3fb0 <system_gclk_gen_set_config+0xc4>)
    3f80:	4642      	mov	r2, r8
    3f82:	609a      	str	r2, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3f84:	1c1a      	adds	r2, r3, #0
    3f86:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
    3f88:	b25b      	sxtb	r3, r3
    3f8a:	2b00      	cmp	r3, #0
    3f8c:	dbfb      	blt.n	3f86 <system_gclk_gen_set_config+0x9a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    3f8e:	4b08      	ldr	r3, [pc, #32]	; (3fb0 <system_gclk_gen_set_config+0xc4>)
    3f90:	6859      	ldr	r1, [r3, #4]
    3f92:	2280      	movs	r2, #128	; 0x80
    3f94:	0252      	lsls	r2, r2, #9
    3f96:	400a      	ands	r2, r1
    3f98:	4315      	orrs	r5, r2
    3f9a:	605d      	str	r5, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    3f9c:	4b07      	ldr	r3, [pc, #28]	; (3fbc <system_gclk_gen_set_config+0xd0>)
    3f9e:	58f3      	ldr	r3, [r6, r3]
    3fa0:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3fa2:	b002      	add	sp, #8
    3fa4:	bc04      	pop	{r2}
    3fa6:	4690      	mov	r8, r2
    3fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3faa:	46c0      	nop			; (mov r8, r8)
    3fac:	00000810 	.word	0x00000810
    3fb0:	40000c00 	.word	0x40000c00
    3fb4:	00000080 	.word	0x00000080
    3fb8:	40000c08 	.word	0x40000c08
    3fbc:	00000004 	.word	0x00000004

00003fc0 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    3fc0:	b530      	push	{r4, r5, lr}
    3fc2:	b083      	sub	sp, #12
    3fc4:	1c05      	adds	r5, r0, #0
    3fc6:	4c0e      	ldr	r4, [pc, #56]	; (4000 <system_gclk_gen_enable+0x40>)
    3fc8:	447c      	add	r4, pc
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3fca:	4a0e      	ldr	r2, [pc, #56]	; (4004 <system_gclk_gen_enable+0x44>)
    3fcc:	7853      	ldrb	r3, [r2, #1]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    3fce:	b25b      	sxtb	r3, r3
    3fd0:	2b00      	cmp	r3, #0
    3fd2:	dbfb      	blt.n	3fcc <system_gclk_gen_enable+0xc>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    3fd4:	4b0c      	ldr	r3, [pc, #48]	; (4008 <system_gclk_gen_enable+0x48>)
    3fd6:	58e3      	ldr	r3, [r4, r3]
    3fd8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    3fda:	4b0c      	ldr	r3, [pc, #48]	; (400c <system_gclk_gen_enable+0x4c>)
    3fdc:	701d      	strb	r5, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3fde:	4a09      	ldr	r2, [pc, #36]	; (4004 <system_gclk_gen_enable+0x44>)
    3fe0:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    3fe2:	b25b      	sxtb	r3, r3
    3fe4:	2b00      	cmp	r3, #0
    3fe6:	dbfb      	blt.n	3fe0 <system_gclk_gen_enable+0x20>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    3fe8:	4b06      	ldr	r3, [pc, #24]	; (4004 <system_gclk_gen_enable+0x44>)
    3fea:	6859      	ldr	r1, [r3, #4]
    3fec:	2280      	movs	r2, #128	; 0x80
    3fee:	0252      	lsls	r2, r2, #9
    3ff0:	430a      	orrs	r2, r1
    3ff2:	605a      	str	r2, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    3ff4:	4b06      	ldr	r3, [pc, #24]	; (4010 <system_gclk_gen_enable+0x50>)
    3ff6:	58e3      	ldr	r3, [r4, r3]
    3ff8:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3ffa:	b003      	add	sp, #12
    3ffc:	bd30      	pop	{r4, r5, pc}
    3ffe:	46c0      	nop			; (mov r8, r8)
    4000:	00000740 	.word	0x00000740
    4004:	40000c00 	.word	0x40000c00
    4008:	00000080 	.word	0x00000080
    400c:	40000c04 	.word	0x40000c04
    4010:	00000004 	.word	0x00000004

00004014 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    4014:	b5f0      	push	{r4, r5, r6, r7, lr}
    4016:	b083      	sub	sp, #12
    4018:	1c05      	adds	r5, r0, #0
    401a:	4c1e      	ldr	r4, [pc, #120]	; (4094 <system_gclk_gen_get_hz+0x80>)
    401c:	447c      	add	r4, pc
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    401e:	4a1e      	ldr	r2, [pc, #120]	; (4098 <system_gclk_gen_get_hz+0x84>)
    4020:	7853      	ldrb	r3, [r2, #1]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    4022:	b25b      	sxtb	r3, r3
    4024:	2b00      	cmp	r3, #0
    4026:	dbfb      	blt.n	4020 <system_gclk_gen_get_hz+0xc>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    4028:	4b1c      	ldr	r3, [pc, #112]	; (409c <system_gclk_gen_get_hz+0x88>)
    402a:	58e3      	ldr	r3, [r4, r3]
    402c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    402e:	4b1c      	ldr	r3, [pc, #112]	; (40a0 <system_gclk_gen_get_hz+0x8c>)
    4030:	701d      	strb	r5, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4032:	4a19      	ldr	r2, [pc, #100]	; (4098 <system_gclk_gen_get_hz+0x84>)
    4034:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    4036:	b25b      	sxtb	r3, r3
    4038:	2b00      	cmp	r3, #0
    403a:	dbfb      	blt.n	4034 <system_gclk_gen_get_hz+0x20>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    403c:	4f16      	ldr	r7, [pc, #88]	; (4098 <system_gclk_gen_get_hz+0x84>)
    403e:	6878      	ldr	r0, [r7, #4]
    4040:	04c0      	lsls	r0, r0, #19
    4042:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    4044:	4b17      	ldr	r3, [pc, #92]	; (40a4 <system_gclk_gen_get_hz+0x90>)
    4046:	58e3      	ldr	r3, [r4, r3]
    4048:	4798      	blx	r3
    404a:	1c06      	adds	r6, r0, #0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    404c:	4b14      	ldr	r3, [pc, #80]	; (40a0 <system_gclk_gen_get_hz+0x8c>)
    404e:	701d      	strb	r5, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    4050:	687f      	ldr	r7, [r7, #4]
    4052:	02ff      	lsls	r7, r7, #11
    4054:	0fff      	lsrs	r7, r7, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    4056:	4b14      	ldr	r3, [pc, #80]	; (40a8 <system_gclk_gen_get_hz+0x94>)
    4058:	701d      	strb	r5, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    405a:	4a0f      	ldr	r2, [pc, #60]	; (4098 <system_gclk_gen_get_hz+0x84>)
    405c:	7853      	ldrb	r3, [r2, #1]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
	while (system_gclk_is_syncing()) {
    405e:	b25b      	sxtb	r3, r3
    4060:	2b00      	cmp	r3, #0
    4062:	dbfb      	blt.n	405c <system_gclk_gen_get_hz+0x48>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    4064:	4b0c      	ldr	r3, [pc, #48]	; (4098 <system_gclk_gen_get_hz+0x84>)
    4066:	689d      	ldr	r5, [r3, #8]
    4068:	0a2d      	lsrs	r5, r5, #8
    406a:	b2ad      	uxth	r5, r5
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    406c:	4b0f      	ldr	r3, [pc, #60]	; (40ac <system_gclk_gen_get_hz+0x98>)
    406e:	58e3      	ldr	r3, [r4, r3]
    4070:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    4072:	2f00      	cmp	r7, #0
    4074:	d108      	bne.n	4088 <system_gclk_gen_get_hz+0x74>
    4076:	2d01      	cmp	r5, #1
    4078:	d908      	bls.n	408c <system_gclk_gen_get_hz+0x78>
		gen_input_hz /= divider;
    407a:	4b0d      	ldr	r3, [pc, #52]	; (40b0 <system_gclk_gen_get_hz+0x9c>)
    407c:	58e3      	ldr	r3, [r4, r3]
    407e:	1c30      	adds	r0, r6, #0
    4080:	1c29      	adds	r1, r5, #0
    4082:	4798      	blx	r3
    4084:	1c06      	adds	r6, r0, #0
    4086:	e001      	b.n	408c <system_gclk_gen_get_hz+0x78>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    4088:	3501      	adds	r5, #1
    408a:	40ee      	lsrs	r6, r5
	}

	return gen_input_hz;
}
    408c:	1c30      	adds	r0, r6, #0
    408e:	b003      	add	sp, #12
    4090:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4092:	46c0      	nop			; (mov r8, r8)
    4094:	000006ec 	.word	0x000006ec
    4098:	40000c00 	.word	0x40000c00
    409c:	00000080 	.word	0x00000080
    40a0:	40000c04 	.word	0x40000c04
    40a4:	000001d0 	.word	0x000001d0
    40a8:	40000c08 	.word	0x40000c08
    40ac:	00000004 	.word	0x00000004
    40b0:	0000015c 	.word	0x0000015c

000040b4 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    40b4:	b530      	push	{r4, r5, lr}
    40b6:	b083      	sub	sp, #12
    40b8:	1c05      	adds	r5, r0, #0
    40ba:	4c09      	ldr	r4, [pc, #36]	; (40e0 <system_gclk_chan_enable+0x2c>)
    40bc:	447c      	add	r4, pc
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    40be:	4b09      	ldr	r3, [pc, #36]	; (40e4 <system_gclk_chan_enable+0x30>)
    40c0:	58e3      	ldr	r3, [r4, r3]
    40c2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    40c4:	4b08      	ldr	r3, [pc, #32]	; (40e8 <system_gclk_chan_enable+0x34>)
    40c6:	701d      	strb	r5, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    40c8:	4b08      	ldr	r3, [pc, #32]	; (40ec <system_gclk_chan_enable+0x38>)
    40ca:	8859      	ldrh	r1, [r3, #2]
    40cc:	2280      	movs	r2, #128	; 0x80
    40ce:	01d2      	lsls	r2, r2, #7
    40d0:	430a      	orrs	r2, r1
    40d2:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    40d4:	4b06      	ldr	r3, [pc, #24]	; (40f0 <system_gclk_chan_enable+0x3c>)
    40d6:	58e3      	ldr	r3, [r4, r3]
    40d8:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    40da:	b003      	add	sp, #12
    40dc:	bd30      	pop	{r4, r5, pc}
    40de:	46c0      	nop			; (mov r8, r8)
    40e0:	0000064c 	.word	0x0000064c
    40e4:	00000080 	.word	0x00000080
    40e8:	40000c02 	.word	0x40000c02
    40ec:	40000c00 	.word	0x40000c00
    40f0:	00000004 	.word	0x00000004

000040f4 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    40f4:	b530      	push	{r4, r5, lr}
    40f6:	b083      	sub	sp, #12
    40f8:	1c05      	adds	r5, r0, #0
    40fa:	4c12      	ldr	r4, [pc, #72]	; (4144 <system_gclk_chan_disable+0x50>)
    40fc:	447c      	add	r4, pc
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    40fe:	4b12      	ldr	r3, [pc, #72]	; (4148 <system_gclk_chan_disable+0x54>)
    4100:	58e3      	ldr	r3, [r4, r3]
    4102:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4104:	4b11      	ldr	r3, [pc, #68]	; (414c <system_gclk_chan_disable+0x58>)
    4106:	701d      	strb	r5, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    4108:	4b11      	ldr	r3, [pc, #68]	; (4150 <system_gclk_chan_disable+0x5c>)
    410a:	8858      	ldrh	r0, [r3, #2]
    410c:	0500      	lsls	r0, r0, #20
    410e:	0f00      	lsrs	r0, r0, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    4110:	8859      	ldrh	r1, [r3, #2]
    4112:	4a10      	ldr	r2, [pc, #64]	; (4154 <system_gclk_chan_disable+0x60>)
    4114:	400a      	ands	r2, r1
    4116:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    4118:	8859      	ldrh	r1, [r3, #2]
    411a:	4a0f      	ldr	r2, [pc, #60]	; (4158 <system_gclk_chan_disable+0x64>)
    411c:	400a      	ands	r2, r1
    411e:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    4120:	1c19      	adds	r1, r3, #0
    4122:	2280      	movs	r2, #128	; 0x80
    4124:	01d2      	lsls	r2, r2, #7
    4126:	884b      	ldrh	r3, [r1, #2]
    4128:	4213      	tst	r3, r2
    412a:	d1fc      	bne.n	4126 <system_gclk_chan_disable+0x32>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    412c:	4b08      	ldr	r3, [pc, #32]	; (4150 <system_gclk_chan_disable+0x5c>)
    412e:	0201      	lsls	r1, r0, #8
    4130:	8858      	ldrh	r0, [r3, #2]
    4132:	4a08      	ldr	r2, [pc, #32]	; (4154 <system_gclk_chan_disable+0x60>)
    4134:	4002      	ands	r2, r0
    4136:	430a      	orrs	r2, r1
    4138:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    413a:	4b08      	ldr	r3, [pc, #32]	; (415c <system_gclk_chan_disable+0x68>)
    413c:	58e3      	ldr	r3, [r4, r3]
    413e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    4140:	b003      	add	sp, #12
    4142:	bd30      	pop	{r4, r5, pc}
    4144:	0000060c 	.word	0x0000060c
    4148:	00000080 	.word	0x00000080
    414c:	40000c02 	.word	0x40000c02
    4150:	40000c00 	.word	0x40000c00
    4154:	fffff0ff 	.word	0xfffff0ff
    4158:	ffffbfff 	.word	0xffffbfff
    415c:	00000004 	.word	0x00000004

00004160 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    4160:	b510      	push	{r4, lr}
    4162:	b082      	sub	sp, #8
    4164:	4b06      	ldr	r3, [pc, #24]	; (4180 <system_gclk_chan_set_config+0x20>)
    4166:	447b      	add	r3, pc

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    4168:	780c      	ldrb	r4, [r1, #0]
    416a:	0224      	lsls	r4, r4, #8
    416c:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    416e:	4a05      	ldr	r2, [pc, #20]	; (4184 <system_gclk_chan_set_config+0x24>)
    4170:	589a      	ldr	r2, [r3, r2]
    4172:	9201      	str	r2, [sp, #4]
    4174:	4790      	blx	r2

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    4176:	b2a4      	uxth	r4, r4
    4178:	4b03      	ldr	r3, [pc, #12]	; (4188 <system_gclk_chan_set_config+0x28>)
    417a:	805c      	strh	r4, [r3, #2]
}
    417c:	b002      	add	sp, #8
    417e:	bd10      	pop	{r4, pc}
    4180:	000005a2 	.word	0x000005a2
    4184:	000001ec 	.word	0x000001ec
    4188:	40000c00 	.word	0x40000c00

0000418c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    418c:	b530      	push	{r4, r5, lr}
    418e:	b083      	sub	sp, #12
    4190:	1c05      	adds	r5, r0, #0
    4192:	4c0a      	ldr	r4, [pc, #40]	; (41bc <system_gclk_chan_get_hz+0x30>)
    4194:	447c      	add	r4, pc
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    4196:	4b0a      	ldr	r3, [pc, #40]	; (41c0 <system_gclk_chan_get_hz+0x34>)
    4198:	58e3      	ldr	r3, [r4, r3]
    419a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    419c:	4b09      	ldr	r3, [pc, #36]	; (41c4 <system_gclk_chan_get_hz+0x38>)
    419e:	701d      	strb	r5, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    41a0:	4b09      	ldr	r3, [pc, #36]	; (41c8 <system_gclk_chan_get_hz+0x3c>)
    41a2:	885d      	ldrh	r5, [r3, #2]
    41a4:	052d      	lsls	r5, r5, #20
    41a6:	0f2d      	lsrs	r5, r5, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    41a8:	4b08      	ldr	r3, [pc, #32]	; (41cc <system_gclk_chan_get_hz+0x40>)
    41aa:	58e3      	ldr	r3, [r4, r3]
    41ac:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    41ae:	1c28      	adds	r0, r5, #0
    41b0:	4b07      	ldr	r3, [pc, #28]	; (41d0 <system_gclk_chan_get_hz+0x44>)
    41b2:	58e3      	ldr	r3, [r4, r3]
    41b4:	4798      	blx	r3
}
    41b6:	b003      	add	sp, #12
    41b8:	bd30      	pop	{r4, r5, pc}
    41ba:	46c0      	nop			; (mov r8, r8)
    41bc:	00000574 	.word	0x00000574
    41c0:	00000080 	.word	0x00000080
    41c4:	40000c02 	.word	0x40000c02
    41c8:	40000c00 	.word	0x40000c00
    41cc:	00000004 	.word	0x00000004
    41d0:	00000084 	.word	0x00000084

000041d4 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    41d4:	4770      	bx	lr
    41d6:	46c0      	nop			; (mov r8, r8)

000041d8 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    41d8:	b510      	push	{r4, lr}
    41da:	b082      	sub	sp, #8
    41dc:	4c09      	ldr	r4, [pc, #36]	; (4204 <system_init+0x2c>)
    41de:	447c      	add	r4, pc
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    41e0:	4b09      	ldr	r3, [pc, #36]	; (4208 <system_init+0x30>)
    41e2:	58e3      	ldr	r3, [r4, r3]
    41e4:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    41e6:	4b09      	ldr	r3, [pc, #36]	; (420c <system_init+0x34>)
    41e8:	58e3      	ldr	r3, [r4, r3]
    41ea:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    41ec:	4b08      	ldr	r3, [pc, #32]	; (4210 <system_init+0x38>)
    41ee:	58e3      	ldr	r3, [r4, r3]
    41f0:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    41f2:	4b08      	ldr	r3, [pc, #32]	; (4214 <system_init+0x3c>)
    41f4:	58e3      	ldr	r3, [r4, r3]
    41f6:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    41f8:	4b07      	ldr	r3, [pc, #28]	; (4218 <system_init+0x40>)
    41fa:	58e3      	ldr	r3, [r4, r3]
    41fc:	4798      	blx	r3
}
    41fe:	b002      	add	sp, #8
    4200:	bd10      	pop	{r4, pc}
    4202:	46c0      	nop			; (mov r8, r8)
    4204:	0000052a 	.word	0x0000052a
    4208:	000001b0 	.word	0x000001b0
    420c:	0000012c 	.word	0x0000012c
    4210:	000001ac 	.word	0x000001ac
    4214:	000000ec 	.word	0x000000ec
    4218:	0000007c 	.word	0x0000007c

0000421c <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    421c:	b082      	sub	sp, #8
    421e:	4b11      	ldr	r3, [pc, #68]	; (4264 <cpu_irq_enter_critical+0x48>)
    4220:	447b      	add	r3, pc
	if (cpu_irq_critical_section_counter == 0) {
    4222:	4a11      	ldr	r2, [pc, #68]	; (4268 <cpu_irq_enter_critical+0x4c>)
    4224:	447a      	add	r2, pc
    4226:	6812      	ldr	r2, [r2, #0]
    4228:	2a00      	cmp	r2, #0
    422a:	d113      	bne.n	4254 <cpu_irq_enter_critical+0x38>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    422c:	f3ef 8210 	mrs	r2, PRIMASK
		if (cpu_irq_is_enabled()) {
    4230:	2a00      	cmp	r2, #0
    4232:	d10b      	bne.n	424c <cpu_irq_enter_critical+0x30>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    4234:	b672      	cpsid	i
    4236:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    423a:	4a0c      	ldr	r2, [pc, #48]	; (426c <cpu_irq_enter_critical+0x50>)
    423c:	589a      	ldr	r2, [r3, r2]
    423e:	2300      	movs	r3, #0
    4240:	7013      	strb	r3, [r2, #0]
			cpu_irq_prev_interrupt_state = true;
    4242:	2201      	movs	r2, #1
    4244:	4b0a      	ldr	r3, [pc, #40]	; (4270 <cpu_irq_enter_critical+0x54>)
    4246:	447b      	add	r3, pc
    4248:	711a      	strb	r2, [r3, #4]
    424a:	e003      	b.n	4254 <cpu_irq_enter_critical+0x38>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    424c:	2200      	movs	r2, #0
    424e:	4b09      	ldr	r3, [pc, #36]	; (4274 <cpu_irq_enter_critical+0x58>)
    4250:	447b      	add	r3, pc
    4252:	711a      	strb	r2, [r3, #4]
		}

	}

	cpu_irq_critical_section_counter++;
    4254:	4b08      	ldr	r3, [pc, #32]	; (4278 <cpu_irq_enter_critical+0x5c>)
    4256:	447b      	add	r3, pc
    4258:	681a      	ldr	r2, [r3, #0]
    425a:	3201      	adds	r2, #1
    425c:	601a      	str	r2, [r3, #0]
}
    425e:	b002      	add	sp, #8
    4260:	4770      	bx	lr
    4262:	46c0      	nop			; (mov r8, r8)
    4264:	000004e8 	.word	0x000004e8
    4268:	1fffdb30 	.word	0x1fffdb30
    426c:	00000090 	.word	0x00000090
    4270:	1fffdb0e 	.word	0x1fffdb0e
    4274:	1fffdb04 	.word	0x1fffdb04
    4278:	1fffdafe 	.word	0x1fffdafe

0000427c <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    427c:	b082      	sub	sp, #8
    427e:	4a0d      	ldr	r2, [pc, #52]	; (42b4 <cpu_irq_leave_critical+0x38>)
    4280:	447a      	add	r2, pc
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    4282:	4b0d      	ldr	r3, [pc, #52]	; (42b8 <cpu_irq_leave_critical+0x3c>)
    4284:	447b      	add	r3, pc
    4286:	6819      	ldr	r1, [r3, #0]
    4288:	3901      	subs	r1, #1
    428a:	6019      	str	r1, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    428c:	681b      	ldr	r3, [r3, #0]
    428e:	2b00      	cmp	r3, #0
    4290:	d10d      	bne.n	42ae <cpu_irq_leave_critical+0x32>
    4292:	4b0a      	ldr	r3, [pc, #40]	; (42bc <cpu_irq_leave_critical+0x40>)
    4294:	447b      	add	r3, pc
    4296:	791b      	ldrb	r3, [r3, #4]
    4298:	2b00      	cmp	r3, #0
    429a:	d008      	beq.n	42ae <cpu_irq_leave_critical+0x32>
		cpu_irq_enable();
    429c:	4b08      	ldr	r3, [pc, #32]	; (42c0 <cpu_irq_leave_critical+0x44>)
    429e:	58d3      	ldr	r3, [r2, r3]
    42a0:	9301      	str	r3, [sp, #4]
    42a2:	2301      	movs	r3, #1
    42a4:	9a01      	ldr	r2, [sp, #4]
    42a6:	7013      	strb	r3, [r2, #0]
    42a8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    42ac:	b662      	cpsie	i
	}
}
    42ae:	b002      	add	sp, #8
    42b0:	4770      	bx	lr
    42b2:	46c0      	nop			; (mov r8, r8)
    42b4:	00000488 	.word	0x00000488
    42b8:	1fffdad0 	.word	0x1fffdad0
    42bc:	1fffdac0 	.word	0x1fffdac0
    42c0:	00000090 	.word	0x00000090

000042c4 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    42c4:	b510      	push	{r4, lr}
    42c6:	b084      	sub	sp, #16
    42c8:	4a08      	ldr	r2, [pc, #32]	; (42ec <port_pin_set_config+0x28>)
    42ca:	447a      	add	r2, pc
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    42cc:	2480      	movs	r4, #128	; 0x80
    42ce:	ab03      	add	r3, sp, #12
    42d0:	701c      	strb	r4, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    42d2:	780c      	ldrb	r4, [r1, #0]
    42d4:	705c      	strb	r4, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    42d6:	784c      	ldrb	r4, [r1, #1]
    42d8:	709c      	strb	r4, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    42da:	7889      	ldrb	r1, [r1, #2]
    42dc:	70d9      	strb	r1, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    42de:	1c19      	adds	r1, r3, #0
    42e0:	4b03      	ldr	r3, [pc, #12]	; (42f0 <port_pin_set_config+0x2c>)
    42e2:	58d3      	ldr	r3, [r2, r3]
    42e4:	4798      	blx	r3
}
    42e6:	b004      	add	sp, #16
    42e8:	bd10      	pop	{r4, pc}
    42ea:	46c0      	nop			; (mov r8, r8)
    42ec:	0000043e 	.word	0x0000043e
    42f0:	00000204 	.word	0x00000204

000042f4 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    42f4:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    42f6:	78d3      	ldrb	r3, [r2, #3]
    42f8:	2b00      	cmp	r3, #0
    42fa:	d11e      	bne.n	433a <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    42fc:	7813      	ldrb	r3, [r2, #0]
    42fe:	2b80      	cmp	r3, #128	; 0x80
    4300:	d004      	beq.n	430c <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    4302:	061b      	lsls	r3, r3, #24
    4304:	2480      	movs	r4, #128	; 0x80
    4306:	0264      	lsls	r4, r4, #9
    4308:	4323      	orrs	r3, r4
    430a:	e000      	b.n	430e <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    430c:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    430e:	7854      	ldrb	r4, [r2, #1]
    4310:	2502      	movs	r5, #2
    4312:	43ac      	bics	r4, r5
    4314:	d10a      	bne.n	432c <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    4316:	7894      	ldrb	r4, [r2, #2]
    4318:	2c00      	cmp	r4, #0
    431a:	d103      	bne.n	4324 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    431c:	2480      	movs	r4, #128	; 0x80
    431e:	02a4      	lsls	r4, r4, #10
    4320:	4323      	orrs	r3, r4
    4322:	e002      	b.n	432a <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    4324:	24c0      	movs	r4, #192	; 0xc0
    4326:	02e4      	lsls	r4, r4, #11
    4328:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    432a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    432c:	7854      	ldrb	r4, [r2, #1]
    432e:	3c01      	subs	r4, #1
    4330:	2c01      	cmp	r4, #1
    4332:	d804      	bhi.n	433e <_system_pinmux_config+0x4a>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    4334:	4c11      	ldr	r4, [pc, #68]	; (437c <_system_pinmux_config+0x88>)
    4336:	4023      	ands	r3, r4
    4338:	e001      	b.n	433e <_system_pinmux_config+0x4a>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    433a:	6041      	str	r1, [r0, #4]
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    433c:	2300      	movs	r3, #0
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    433e:	040d      	lsls	r5, r1, #16
    4340:	0c2d      	lsrs	r5, r5, #16
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4342:	24a0      	movs	r4, #160	; 0xa0
    4344:	05e4      	lsls	r4, r4, #23
    4346:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    4348:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    434a:	6284      	str	r4, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    434c:	0c0d      	lsrs	r5, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    434e:	24d0      	movs	r4, #208	; 0xd0
    4350:	0624      	lsls	r4, r4, #24
    4352:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    4354:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4356:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    4358:	78d4      	ldrb	r4, [r2, #3]
    435a:	2c00      	cmp	r4, #0
    435c:	d10c      	bne.n	4378 <_system_pinmux_config+0x84>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    435e:	035c      	lsls	r4, r3, #13
    4360:	d505      	bpl.n	436e <_system_pinmux_config+0x7a>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    4362:	7893      	ldrb	r3, [r2, #2]
    4364:	2b01      	cmp	r3, #1
    4366:	d101      	bne.n	436c <_system_pinmux_config+0x78>
				port->OUTSET.reg = pin_mask;
    4368:	6181      	str	r1, [r0, #24]
    436a:	e000      	b.n	436e <_system_pinmux_config+0x7a>
			} else {
				port->OUTCLR.reg = pin_mask;
    436c:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    436e:	7853      	ldrb	r3, [r2, #1]
    4370:	3b01      	subs	r3, #1
    4372:	2b01      	cmp	r3, #1
    4374:	d800      	bhi.n	4378 <_system_pinmux_config+0x84>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    4376:	6081      	str	r1, [r0, #8]
		}
	}
}
    4378:	bd30      	pop	{r4, r5, pc}
    437a:	46c0      	nop			; (mov r8, r8)
    437c:	fffbffff 	.word	0xfffbffff

00004380 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    4380:	b508      	push	{r3, lr}
    4382:	1c03      	adds	r3, r0, #0
    4384:	1c0a      	adds	r2, r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    4386:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    4388:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    438a:	2900      	cmp	r1, #0
    438c:	d103      	bne.n	4396 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    438e:	0958      	lsrs	r0, r3, #5
    4390:	01c0      	lsls	r0, r0, #7
    4392:	4905      	ldr	r1, [pc, #20]	; (43a8 <system_pinmux_pin_set_config+0x28>)
    4394:	1840      	adds	r0, r0, r1
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    4396:	211f      	movs	r1, #31
    4398:	400b      	ands	r3, r1
    439a:	2101      	movs	r1, #1
    439c:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    439e:	4b03      	ldr	r3, [pc, #12]	; (43ac <system_pinmux_pin_set_config+0x2c>)
    43a0:	447b      	add	r3, pc
    43a2:	4798      	blx	r3
}
    43a4:	bd08      	pop	{r3, pc}
    43a6:	46c0      	nop			; (mov r8, r8)
    43a8:	41004400 	.word	0x41004400
    43ac:	ffffff51 	.word	0xffffff51

000043b0 <__gnu_thumb1_case_uqi>:
    43b0:	b402      	push	{r1}
    43b2:	4671      	mov	r1, lr
    43b4:	0849      	lsrs	r1, r1, #1
    43b6:	0049      	lsls	r1, r1, #1
    43b8:	5c09      	ldrb	r1, [r1, r0]
    43ba:	0049      	lsls	r1, r1, #1
    43bc:	448e      	add	lr, r1
    43be:	bc02      	pop	{r1}
    43c0:	4770      	bx	lr
    43c2:	46c0      	nop			; (mov r8, r8)

000043c4 <__udivsi3>:
    43c4:	2900      	cmp	r1, #0
    43c6:	d034      	beq.n	4432 <.udivsi3_skip_div0_test+0x6a>

000043c8 <.udivsi3_skip_div0_test>:
    43c8:	2301      	movs	r3, #1
    43ca:	2200      	movs	r2, #0
    43cc:	b410      	push	{r4}
    43ce:	4288      	cmp	r0, r1
    43d0:	d32c      	bcc.n	442c <.udivsi3_skip_div0_test+0x64>
    43d2:	2401      	movs	r4, #1
    43d4:	0724      	lsls	r4, r4, #28
    43d6:	42a1      	cmp	r1, r4
    43d8:	d204      	bcs.n	43e4 <.udivsi3_skip_div0_test+0x1c>
    43da:	4281      	cmp	r1, r0
    43dc:	d202      	bcs.n	43e4 <.udivsi3_skip_div0_test+0x1c>
    43de:	0109      	lsls	r1, r1, #4
    43e0:	011b      	lsls	r3, r3, #4
    43e2:	e7f8      	b.n	43d6 <.udivsi3_skip_div0_test+0xe>
    43e4:	00e4      	lsls	r4, r4, #3
    43e6:	42a1      	cmp	r1, r4
    43e8:	d204      	bcs.n	43f4 <.udivsi3_skip_div0_test+0x2c>
    43ea:	4281      	cmp	r1, r0
    43ec:	d202      	bcs.n	43f4 <.udivsi3_skip_div0_test+0x2c>
    43ee:	0049      	lsls	r1, r1, #1
    43f0:	005b      	lsls	r3, r3, #1
    43f2:	e7f8      	b.n	43e6 <.udivsi3_skip_div0_test+0x1e>
    43f4:	4288      	cmp	r0, r1
    43f6:	d301      	bcc.n	43fc <.udivsi3_skip_div0_test+0x34>
    43f8:	1a40      	subs	r0, r0, r1
    43fa:	431a      	orrs	r2, r3
    43fc:	084c      	lsrs	r4, r1, #1
    43fe:	42a0      	cmp	r0, r4
    4400:	d302      	bcc.n	4408 <.udivsi3_skip_div0_test+0x40>
    4402:	1b00      	subs	r0, r0, r4
    4404:	085c      	lsrs	r4, r3, #1
    4406:	4322      	orrs	r2, r4
    4408:	088c      	lsrs	r4, r1, #2
    440a:	42a0      	cmp	r0, r4
    440c:	d302      	bcc.n	4414 <.udivsi3_skip_div0_test+0x4c>
    440e:	1b00      	subs	r0, r0, r4
    4410:	089c      	lsrs	r4, r3, #2
    4412:	4322      	orrs	r2, r4
    4414:	08cc      	lsrs	r4, r1, #3
    4416:	42a0      	cmp	r0, r4
    4418:	d302      	bcc.n	4420 <.udivsi3_skip_div0_test+0x58>
    441a:	1b00      	subs	r0, r0, r4
    441c:	08dc      	lsrs	r4, r3, #3
    441e:	4322      	orrs	r2, r4
    4420:	2800      	cmp	r0, #0
    4422:	d003      	beq.n	442c <.udivsi3_skip_div0_test+0x64>
    4424:	091b      	lsrs	r3, r3, #4
    4426:	d001      	beq.n	442c <.udivsi3_skip_div0_test+0x64>
    4428:	0909      	lsrs	r1, r1, #4
    442a:	e7e3      	b.n	43f4 <.udivsi3_skip_div0_test+0x2c>
    442c:	1c10      	adds	r0, r2, #0
    442e:	bc10      	pop	{r4}
    4430:	4770      	bx	lr
    4432:	2800      	cmp	r0, #0
    4434:	d001      	beq.n	443a <.udivsi3_skip_div0_test+0x72>
    4436:	2000      	movs	r0, #0
    4438:	43c0      	mvns	r0, r0
    443a:	b407      	push	{r0, r1, r2}
    443c:	4802      	ldr	r0, [pc, #8]	; (4448 <.udivsi3_skip_div0_test+0x80>)
    443e:	a102      	add	r1, pc, #8	; (adr r1, 4448 <.udivsi3_skip_div0_test+0x80>)
    4440:	1840      	adds	r0, r0, r1
    4442:	9002      	str	r0, [sp, #8]
    4444:	bd03      	pop	{r0, r1, pc}
    4446:	46c0      	nop			; (mov r8, r8)
    4448:	00000019 	.word	0x00000019

0000444c <__aeabi_uidivmod>:
    444c:	2900      	cmp	r1, #0
    444e:	d0f0      	beq.n	4432 <.udivsi3_skip_div0_test+0x6a>
    4450:	b503      	push	{r0, r1, lr}
    4452:	f7ff ffb9 	bl	43c8 <.udivsi3_skip_div0_test>
    4456:	bc0e      	pop	{r1, r2, r3}
    4458:	4342      	muls	r2, r0
    445a:	1a89      	subs	r1, r1, r2
    445c:	4718      	bx	r3
    445e:	46c0      	nop			; (mov r8, r8)

00004460 <__aeabi_idiv0>:
    4460:	4770      	bx	lr
    4462:	46c0      	nop			; (mov r8, r8)

00004464 <__muldi3>:
    4464:	469c      	mov	ip, r3
    4466:	0403      	lsls	r3, r0, #16
    4468:	b5f0      	push	{r4, r5, r6, r7, lr}
    446a:	0c1b      	lsrs	r3, r3, #16
    446c:	0417      	lsls	r7, r2, #16
    446e:	0c3f      	lsrs	r7, r7, #16
    4470:	0c15      	lsrs	r5, r2, #16
    4472:	1c1e      	adds	r6, r3, #0
    4474:	1c04      	adds	r4, r0, #0
    4476:	0c00      	lsrs	r0, r0, #16
    4478:	437e      	muls	r6, r7
    447a:	436b      	muls	r3, r5
    447c:	4347      	muls	r7, r0
    447e:	4345      	muls	r5, r0
    4480:	18fb      	adds	r3, r7, r3
    4482:	0c30      	lsrs	r0, r6, #16
    4484:	1818      	adds	r0, r3, r0
    4486:	4287      	cmp	r7, r0
    4488:	d902      	bls.n	4490 <__muldi3+0x2c>
    448a:	2380      	movs	r3, #128	; 0x80
    448c:	025b      	lsls	r3, r3, #9
    448e:	18ed      	adds	r5, r5, r3
    4490:	0c03      	lsrs	r3, r0, #16
    4492:	18ed      	adds	r5, r5, r3
    4494:	4663      	mov	r3, ip
    4496:	435c      	muls	r4, r3
    4498:	434a      	muls	r2, r1
    449a:	0436      	lsls	r6, r6, #16
    449c:	0c36      	lsrs	r6, r6, #16
    449e:	18a1      	adds	r1, r4, r2
    44a0:	0400      	lsls	r0, r0, #16
    44a2:	1980      	adds	r0, r0, r6
    44a4:	1949      	adds	r1, r1, r5
    44a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000044a8 <__libc_init_array>:
    44a8:	b570      	push	{r4, r5, r6, lr}
    44aa:	4e0d      	ldr	r6, [pc, #52]	; (44e0 <__libc_init_array+0x38>)
    44ac:	4d0d      	ldr	r5, [pc, #52]	; (44e4 <__libc_init_array+0x3c>)
    44ae:	2400      	movs	r4, #0
    44b0:	1bad      	subs	r5, r5, r6
    44b2:	10ad      	asrs	r5, r5, #2
    44b4:	d005      	beq.n	44c2 <__libc_init_array+0x1a>
    44b6:	00a3      	lsls	r3, r4, #2
    44b8:	58f3      	ldr	r3, [r6, r3]
    44ba:	3401      	adds	r4, #1
    44bc:	4798      	blx	r3
    44be:	42a5      	cmp	r5, r4
    44c0:	d1f9      	bne.n	44b6 <__libc_init_array+0xe>
    44c2:	f000 f911 	bl	46e8 <_init>
    44c6:	4e08      	ldr	r6, [pc, #32]	; (44e8 <__libc_init_array+0x40>)
    44c8:	4d08      	ldr	r5, [pc, #32]	; (44ec <__libc_init_array+0x44>)
    44ca:	2400      	movs	r4, #0
    44cc:	1bad      	subs	r5, r5, r6
    44ce:	10ad      	asrs	r5, r5, #2
    44d0:	d005      	beq.n	44de <__libc_init_array+0x36>
    44d2:	00a3      	lsls	r3, r4, #2
    44d4:	58f3      	ldr	r3, [r6, r3]
    44d6:	3401      	adds	r4, #1
    44d8:	4798      	blx	r3
    44da:	42a5      	cmp	r5, r4
    44dc:	d1f9      	bne.n	44d2 <__libc_init_array+0x2a>
    44de:	bd70      	pop	{r4, r5, r6, pc}
    44e0:	000046f4 	.word	0x000046f4
    44e4:	000046f4 	.word	0x000046f4
    44e8:	000046f4 	.word	0x000046f4
    44ec:	000046fc 	.word	0x000046fc

000044f0 <memcpy>:
    44f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    44f2:	2a0f      	cmp	r2, #15
    44f4:	d935      	bls.n	4562 <memcpy+0x72>
    44f6:	1c03      	adds	r3, r0, #0
    44f8:	430b      	orrs	r3, r1
    44fa:	079c      	lsls	r4, r3, #30
    44fc:	d135      	bne.n	456a <memcpy+0x7a>
    44fe:	1c16      	adds	r6, r2, #0
    4500:	3e10      	subs	r6, #16
    4502:	0936      	lsrs	r6, r6, #4
    4504:	0135      	lsls	r5, r6, #4
    4506:	1945      	adds	r5, r0, r5
    4508:	3510      	adds	r5, #16
    450a:	1c0c      	adds	r4, r1, #0
    450c:	1c03      	adds	r3, r0, #0
    450e:	6827      	ldr	r7, [r4, #0]
    4510:	601f      	str	r7, [r3, #0]
    4512:	6867      	ldr	r7, [r4, #4]
    4514:	605f      	str	r7, [r3, #4]
    4516:	68a7      	ldr	r7, [r4, #8]
    4518:	609f      	str	r7, [r3, #8]
    451a:	68e7      	ldr	r7, [r4, #12]
    451c:	3410      	adds	r4, #16
    451e:	60df      	str	r7, [r3, #12]
    4520:	3310      	adds	r3, #16
    4522:	42ab      	cmp	r3, r5
    4524:	d1f3      	bne.n	450e <memcpy+0x1e>
    4526:	1c73      	adds	r3, r6, #1
    4528:	011b      	lsls	r3, r3, #4
    452a:	18c5      	adds	r5, r0, r3
    452c:	18c9      	adds	r1, r1, r3
    452e:	230f      	movs	r3, #15
    4530:	4013      	ands	r3, r2
    4532:	2b03      	cmp	r3, #3
    4534:	d91b      	bls.n	456e <memcpy+0x7e>
    4536:	1f1c      	subs	r4, r3, #4
    4538:	08a4      	lsrs	r4, r4, #2
    453a:	3401      	adds	r4, #1
    453c:	00a4      	lsls	r4, r4, #2
    453e:	2300      	movs	r3, #0
    4540:	58ce      	ldr	r6, [r1, r3]
    4542:	50ee      	str	r6, [r5, r3]
    4544:	3304      	adds	r3, #4
    4546:	42a3      	cmp	r3, r4
    4548:	d1fa      	bne.n	4540 <memcpy+0x50>
    454a:	18ed      	adds	r5, r5, r3
    454c:	18c9      	adds	r1, r1, r3
    454e:	2303      	movs	r3, #3
    4550:	401a      	ands	r2, r3
    4552:	d005      	beq.n	4560 <memcpy+0x70>
    4554:	2300      	movs	r3, #0
    4556:	5ccc      	ldrb	r4, [r1, r3]
    4558:	54ec      	strb	r4, [r5, r3]
    455a:	3301      	adds	r3, #1
    455c:	4293      	cmp	r3, r2
    455e:	d1fa      	bne.n	4556 <memcpy+0x66>
    4560:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4562:	1c05      	adds	r5, r0, #0
    4564:	2a00      	cmp	r2, #0
    4566:	d1f5      	bne.n	4554 <memcpy+0x64>
    4568:	e7fa      	b.n	4560 <memcpy+0x70>
    456a:	1c05      	adds	r5, r0, #0
    456c:	e7f2      	b.n	4554 <memcpy+0x64>
    456e:	1c1a      	adds	r2, r3, #0
    4570:	e7f8      	b.n	4564 <memcpy+0x74>
    4572:	46c0      	nop			; (mov r8, r8)

00004574 <register_fini>:
    4574:	b508      	push	{r3, lr}
    4576:	4b03      	ldr	r3, [pc, #12]	; (4584 <register_fini+0x10>)
    4578:	2b00      	cmp	r3, #0
    457a:	d002      	beq.n	4582 <register_fini+0xe>
    457c:	4802      	ldr	r0, [pc, #8]	; (4588 <register_fini+0x14>)
    457e:	f000 f805 	bl	458c <atexit>
    4582:	bd08      	pop	{r3, pc}
    4584:	00000000 	.word	0x00000000
    4588:	0000459d 	.word	0x0000459d

0000458c <atexit>:
    458c:	b508      	push	{r3, lr}
    458e:	1c01      	adds	r1, r0, #0
    4590:	2200      	movs	r2, #0
    4592:	2000      	movs	r0, #0
    4594:	2300      	movs	r3, #0
    4596:	f000 f819 	bl	45cc <__register_exitproc>
    459a:	bd08      	pop	{r3, pc}

0000459c <__libc_fini_array>:
    459c:	b538      	push	{r3, r4, r5, lr}
    459e:	4b09      	ldr	r3, [pc, #36]	; (45c4 <__libc_fini_array+0x28>)
    45a0:	4d09      	ldr	r5, [pc, #36]	; (45c8 <__libc_fini_array+0x2c>)
    45a2:	1aed      	subs	r5, r5, r3
    45a4:	10ad      	asrs	r5, r5, #2
    45a6:	d009      	beq.n	45bc <__libc_fini_array+0x20>
    45a8:	3d01      	subs	r5, #1
    45aa:	00ac      	lsls	r4, r5, #2
    45ac:	18e4      	adds	r4, r4, r3
    45ae:	e000      	b.n	45b2 <__libc_fini_array+0x16>
    45b0:	3d01      	subs	r5, #1
    45b2:	6823      	ldr	r3, [r4, #0]
    45b4:	4798      	blx	r3
    45b6:	3c04      	subs	r4, #4
    45b8:	2d00      	cmp	r5, #0
    45ba:	d1f9      	bne.n	45b0 <__libc_fini_array+0x14>
    45bc:	f000 f89e 	bl	46fc <_fini>
    45c0:	bd38      	pop	{r3, r4, r5, pc}
    45c2:	46c0      	nop			; (mov r8, r8)
    45c4:	00004708 	.word	0x00004708
    45c8:	0000470c 	.word	0x0000470c

000045cc <__register_exitproc>:
    45cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    45ce:	464f      	mov	r7, r9
    45d0:	4646      	mov	r6, r8
    45d2:	b4c0      	push	{r6, r7}
    45d4:	4698      	mov	r8, r3
    45d6:	4b2b      	ldr	r3, [pc, #172]	; (4684 <__register_exitproc+0xb8>)
    45d8:	25a4      	movs	r5, #164	; 0xa4
    45da:	681b      	ldr	r3, [r3, #0]
    45dc:	006d      	lsls	r5, r5, #1
    45de:	595c      	ldr	r4, [r3, r5]
    45e0:	b083      	sub	sp, #12
    45e2:	1c06      	adds	r6, r0, #0
    45e4:	1c0f      	adds	r7, r1, #0
    45e6:	4691      	mov	r9, r2
    45e8:	9301      	str	r3, [sp, #4]
    45ea:	2c00      	cmp	r4, #0
    45ec:	d044      	beq.n	4678 <__register_exitproc+0xac>
    45ee:	6865      	ldr	r5, [r4, #4]
    45f0:	2d1f      	cmp	r5, #31
    45f2:	dd1a      	ble.n	462a <__register_exitproc+0x5e>
    45f4:	4b24      	ldr	r3, [pc, #144]	; (4688 <__register_exitproc+0xbc>)
    45f6:	2b00      	cmp	r3, #0
    45f8:	d102      	bne.n	4600 <__register_exitproc+0x34>
    45fa:	2001      	movs	r0, #1
    45fc:	4240      	negs	r0, r0
    45fe:	e01c      	b.n	463a <__register_exitproc+0x6e>
    4600:	20c8      	movs	r0, #200	; 0xc8
    4602:	0040      	lsls	r0, r0, #1
    4604:	e000      	b.n	4608 <__register_exitproc+0x3c>
    4606:	bf00      	nop
    4608:	1e04      	subs	r4, r0, #0
    460a:	d0f6      	beq.n	45fa <__register_exitproc+0x2e>
    460c:	2500      	movs	r5, #0
    460e:	6045      	str	r5, [r0, #4]
    4610:	23a4      	movs	r3, #164	; 0xa4
    4612:	9801      	ldr	r0, [sp, #4]
    4614:	005b      	lsls	r3, r3, #1
    4616:	58c0      	ldr	r0, [r0, r3]
    4618:	9901      	ldr	r1, [sp, #4]
    461a:	6020      	str	r0, [r4, #0]
    461c:	50cc      	str	r4, [r1, r3]
    461e:	23c4      	movs	r3, #196	; 0xc4
    4620:	005b      	lsls	r3, r3, #1
    4622:	50e5      	str	r5, [r4, r3]
    4624:	23c6      	movs	r3, #198	; 0xc6
    4626:	005b      	lsls	r3, r3, #1
    4628:	50e5      	str	r5, [r4, r3]
    462a:	2e00      	cmp	r6, #0
    462c:	d10a      	bne.n	4644 <__register_exitproc+0x78>
    462e:	1c6b      	adds	r3, r5, #1
    4630:	3502      	adds	r5, #2
    4632:	00ad      	lsls	r5, r5, #2
    4634:	6063      	str	r3, [r4, #4]
    4636:	2000      	movs	r0, #0
    4638:	512f      	str	r7, [r5, r4]
    463a:	b003      	add	sp, #12
    463c:	bc0c      	pop	{r2, r3}
    463e:	4690      	mov	r8, r2
    4640:	4699      	mov	r9, r3
    4642:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4644:	00ab      	lsls	r3, r5, #2
    4646:	18e3      	adds	r3, r4, r3
    4648:	2288      	movs	r2, #136	; 0x88
    464a:	4648      	mov	r0, r9
    464c:	5098      	str	r0, [r3, r2]
    464e:	20c4      	movs	r0, #196	; 0xc4
    4650:	0040      	lsls	r0, r0, #1
    4652:	1822      	adds	r2, r4, r0
    4654:	6810      	ldr	r0, [r2, #0]
    4656:	2101      	movs	r1, #1
    4658:	40a9      	lsls	r1, r5
    465a:	4308      	orrs	r0, r1
    465c:	6010      	str	r0, [r2, #0]
    465e:	2284      	movs	r2, #132	; 0x84
    4660:	0052      	lsls	r2, r2, #1
    4662:	4640      	mov	r0, r8
    4664:	5098      	str	r0, [r3, r2]
    4666:	2e02      	cmp	r6, #2
    4668:	d1e1      	bne.n	462e <__register_exitproc+0x62>
    466a:	22c6      	movs	r2, #198	; 0xc6
    466c:	0052      	lsls	r2, r2, #1
    466e:	18a3      	adds	r3, r4, r2
    4670:	6818      	ldr	r0, [r3, #0]
    4672:	4301      	orrs	r1, r0
    4674:	6019      	str	r1, [r3, #0]
    4676:	e7da      	b.n	462e <__register_exitproc+0x62>
    4678:	1c1c      	adds	r4, r3, #0
    467a:	344d      	adds	r4, #77	; 0x4d
    467c:	34ff      	adds	r4, #255	; 0xff
    467e:	515c      	str	r4, [r3, r5]
    4680:	e7b5      	b.n	45ee <__register_exitproc+0x22>
    4682:	46c0      	nop			; (mov r8, r8)
    4684:	000046e4 	.word	0x000046e4
    4688:	00000000 	.word	0x00000000
    468c:	41447249 	.word	0x41447249
    4690:	00000000 	.word	0x00000000
    4694:	676e6950 	.word	0x676e6950
    4698:	00000000 	.word	0x00000000
    469c:	636e7953 	.word	0x636e7953
    46a0:	00000000 	.word	0x00000000
    46a4:	42000800 	.word	0x42000800
    46a8:	42000c00 	.word	0x42000c00
    46ac:	42001000 	.word	0x42001000
    46b0:	42001400 	.word	0x42001400
    46b4:	78545f43 	.word	0x78545f43
    46b8:	00000000 	.word	0x00000000
    46bc:	78525f43 	.word	0x78525f43
    46c0:	00000000 	.word	0x00000000
    46c4:	00787243 	.word	0x00787243
    46c8:	00787443 	.word	0x00787443
    46cc:	0c0b0a09 	.word	0x0c0b0a09
    46d0:	454c4449 	.word	0x454c4449
    46d4:	00000000 	.word	0x00000000
    46d8:	20726d54 	.word	0x20726d54
    46dc:	00637653 	.word	0x00637653
    46e0:	00000043 	.word	0x00000043

000046e4 <_global_impure_ptr>:
    46e4:	20000010                                ... 

000046e8 <_init>:
    46e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    46ea:	46c0      	nop			; (mov r8, r8)
    46ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
    46ee:	bc08      	pop	{r3}
    46f0:	469e      	mov	lr, r3
    46f2:	4770      	bx	lr

000046f4 <__init_array_start>:
    46f4:	00004575 	.word	0x00004575

000046f8 <__frame_dummy_init_array_entry>:
    46f8:	000000d9                                ....

000046fc <_fini>:
    46fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    46fe:	46c0      	nop			; (mov r8, r8)
    4700:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4702:	bc08      	pop	{r3}
    4704:	469e      	mov	lr, r3
    4706:	4770      	bx	lr

00004708 <__fini_array_start>:
    4708:	000000b1 	.word	0x000000b1
