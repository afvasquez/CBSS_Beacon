
Bastian_freeRTOS-TRACE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006a3c  00000000  00000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .got          00000290  00006a3c  00006a3c  0000ea3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .got.plt      0000000c  00006ccc  00006ccc  0000eccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .relocate     00000440  20000000  00006cd8  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000026b0  20000440  00007118  00010440  2**2
                  ALLOC
  5 .stack        00002000  20002af0  000097c8  00010440  2**0
                  ALLOC
  6 .ARM.attributes 00000028  00000000  00000000  00010440  2**0
                  CONTENTS, READONLY
  7 .comment      0000005b  00000000  00000000  00010468  2**0
                  CONTENTS, READONLY
  8 .debug_info   00022074  00000000  00000000  000104c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000038ab  00000000  00000000  00032537  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000a7b6  00000000  00000000  00035de2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000009a8  00000000  00000000  00040598  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a80  00000000  00000000  00040f40  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000195f8  00000000  00000000  000419c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000efdd  00000000  00000000  0005afb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000907c2  00000000  00000000  00069f95  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00001d0c  00000000  00000000  000fa758  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20004af0 	.word	0x20004af0
       4:	00004ab1 	.word	0x00004ab1
       8:	00004aad 	.word	0x00004aad
       c:	00004aad 	.word	0x00004aad
	...
      2c:	00002631 	.word	0x00002631
	...
      38:	000026a5 	.word	0x000026a5
      3c:	000026e9 	.word	0x000026e9
      40:	00004aad 	.word	0x00004aad
      44:	00004aad 	.word	0x00004aad
      48:	00004aad 	.word	0x00004aad
      4c:	00004aad 	.word	0x00004aad
      50:	00004aad 	.word	0x00004aad
      54:	00004aad 	.word	0x00004aad
      58:	00004aad 	.word	0x00004aad
      5c:	00004aad 	.word	0x00004aad
      60:	00004aad 	.word	0x00004aad
      64:	000009e5 	.word	0x000009e5
      68:	000009f9 	.word	0x000009f9
      6c:	00000a0d 	.word	0x00000a0d
      70:	00000a21 	.word	0x00000a21
	...
      7c:	00004aad 	.word	0x00004aad
      80:	00004aad 	.word	0x00004aad
      84:	00004aad 	.word	0x00004aad
      88:	00004aad 	.word	0x00004aad
      8c:	00004aad 	.word	0x00004aad
      90:	00004aad 	.word	0x00004aad
	...
      9c:	00004aad 	.word	0x00004aad
      a0:	00004aad 	.word	0x00004aad
      a4:	00004aad 	.word	0x00004aad
      a8:	00004aad 	.word	0x00004aad
      ac:	00004aad 	.word	0x00004aad

000000b0 <__do_global_dtors_aux>:
      b0:	b510      	push	{r4, lr}
      b2:	4c06      	ldr	r4, [pc, #24]	; (cc <__do_global_dtors_aux+0x1c>)
      b4:	7823      	ldrb	r3, [r4, #0]
      b6:	2b00      	cmp	r3, #0
      b8:	d107      	bne.n	ca <__do_global_dtors_aux+0x1a>
      ba:	4b05      	ldr	r3, [pc, #20]	; (d0 <__do_global_dtors_aux+0x20>)
      bc:	2b00      	cmp	r3, #0
      be:	d002      	beq.n	c6 <__do_global_dtors_aux+0x16>
      c0:	4804      	ldr	r0, [pc, #16]	; (d4 <__do_global_dtors_aux+0x24>)
      c2:	e000      	b.n	c6 <__do_global_dtors_aux+0x16>
      c4:	bf00      	nop
      c6:	2301      	movs	r3, #1
      c8:	7023      	strb	r3, [r4, #0]
      ca:	bd10      	pop	{r4, pc}
      cc:	20000440 	.word	0x20000440
      d0:	00000000 	.word	0x00000000
      d4:	00006a3c 	.word	0x00006a3c

000000d8 <frame_dummy>:
      d8:	b508      	push	{r3, lr}
      da:	4b08      	ldr	r3, [pc, #32]	; (fc <frame_dummy+0x24>)
      dc:	2b00      	cmp	r3, #0
      de:	d003      	beq.n	e8 <frame_dummy+0x10>
      e0:	4807      	ldr	r0, [pc, #28]	; (100 <frame_dummy+0x28>)
      e2:	4908      	ldr	r1, [pc, #32]	; (104 <frame_dummy+0x2c>)
      e4:	e000      	b.n	e8 <frame_dummy+0x10>
      e6:	bf00      	nop
      e8:	4807      	ldr	r0, [pc, #28]	; (108 <frame_dummy+0x30>)
      ea:	6803      	ldr	r3, [r0, #0]
      ec:	2b00      	cmp	r3, #0
      ee:	d003      	beq.n	f8 <frame_dummy+0x20>
      f0:	4b06      	ldr	r3, [pc, #24]	; (10c <frame_dummy+0x34>)
      f2:	2b00      	cmp	r3, #0
      f4:	d000      	beq.n	f8 <frame_dummy+0x20>
      f6:	4798      	blx	r3
      f8:	bd08      	pop	{r3, pc}
      fa:	46c0      	nop			; (mov r8, r8)
      fc:	00000000 	.word	0x00000000
     100:	00006a3c 	.word	0x00006a3c
     104:	20000444 	.word	0x20000444
     108:	00006a3c 	.word	0x00006a3c
     10c:	00000000 	.word	0x00000000

00000110 <timer_irda_sync_callback>:
		break;
	}
}

void timer_irda_sync_callback(TimerHandle_t pxTimer)
{
     110:	b082      	sub	sp, #8
     112:	4b09      	ldr	r3, [pc, #36]	; (138 <timer_irda_sync_callback+0x28>)
     114:	447b      	add	r3, pc
	configASSERT( pxTimer );
     116:	2800      	cmp	r0, #0
     118:	d101      	bne.n	11e <timer_irda_sync_callback+0xe>
     11a:	b672      	cpsid	i
     11c:	e7fe      	b.n	11c <timer_irda_sync_callback+0xc>
	// This is the timeout timer that should perform the following if reached
	
	switch ( irda_comm_state ) {
     11e:	4a07      	ldr	r2, [pc, #28]	; (13c <timer_irda_sync_callback+0x2c>)
     120:	589a      	ldr	r2, [r3, r2]
     122:	9201      	str	r2, [sp, #4]
     124:	7812      	ldrb	r2, [r2, #0]
     126:	2a02      	cmp	r2, #2
     128:	d103      	bne.n	132 <timer_irda_sync_callback+0x22>
		case IRDA_BEACON_BACK_PING:
			// There was no Back-Ping detected
			irda_comm_state = IRDA_BEACON_PING;
     12a:	4a04      	ldr	r2, [pc, #16]	; (13c <timer_irda_sync_callback+0x2c>)
     12c:	589a      	ldr	r2, [r3, r2]
     12e:	2301      	movs	r3, #1
     130:	7013      	strb	r3, [r2, #0]
		break;
	}
     132:	b002      	add	sp, #8
     134:	4770      	bx	lr
     136:	46c0      	nop			; (mov r8, r8)
     138:	00006924 	.word	0x00006924
     13c:	000000fc 	.word	0x000000fc

00000140 <irda_communication_task>:

//#define IRDA_BEACON_PING	(( uint8_t ) 0x01 )		// This is the 
uint8_t irda_comm_state;
uint8_t irda_tx_array[6] = { 0 };
uint8_t irda_rx_array[6] = { 0 };
void irda_communication_task(void) {
     140:	b5f0      	push	{r4, r5, r6, r7, lr}
     142:	464f      	mov	r7, r9
     144:	4646      	mov	r6, r8
     146:	b4c0      	push	{r6, r7}
     148:	b085      	sub	sp, #20
     14a:	4c1f      	ldr	r4, [pc, #124]	; (1c8 <irda_communication_task+0x88>)
     14c:	447c      	add	r4, pc
	
	// Start this task by pinging out
	irda_comm_state = IRDA_BEACON_PING;
     14e:	4b1f      	ldr	r3, [pc, #124]	; (1cc <irda_communication_task+0x8c>)
     150:	58e3      	ldr	r3, [r4, r3]
     152:	9303      	str	r3, [sp, #12]
     154:	2301      	movs	r3, #1
     156:	9a03      	ldr	r2, [sp, #12]
     158:	7013      	strb	r3, [r2, #0]
	
	while (1) {
		//port_pin_toggle_output_level(LED_BUSY);
		switch( irda_comm_state )
     15a:	4b1c      	ldr	r3, [pc, #112]	; (1cc <irda_communication_task+0x8c>)
     15c:	58e6      	ldr	r6, [r4, r3]
		{
			case IRDA_BEACON_PING:
				// Send out the ping and wait
				irda_tx_array[0] = 0xAA;
     15e:	23aa      	movs	r3, #170	; 0xaa
     160:	4699      	mov	r9, r3
				irda_tx_array[1] = 0xAA;
				irda_tx_array[2] = 0xAA;
				
				// Reset the Sync Timer
				xTimerReset(timer_IrDA_Ping, 0);	// Reset the Ping timer immediately
     162:	2500      	movs	r5, #0
	// Start this task by pinging out
	irda_comm_state = IRDA_BEACON_PING;
	
	while (1) {
		//port_pin_toggle_output_level(LED_BUSY);
		switch( irda_comm_state )
     164:	7832      	ldrb	r2, [r6, #0]
     166:	2a01      	cmp	r2, #1
     168:	d129      	bne.n	1be <irda_communication_task+0x7e>
		{
			case IRDA_BEACON_PING:
				// Send out the ping and wait
				irda_tx_array[0] = 0xAA;
     16a:	4b19      	ldr	r3, [pc, #100]	; (1d0 <irda_communication_task+0x90>)
     16c:	58e3      	ldr	r3, [r4, r3]
     16e:	464f      	mov	r7, r9
     170:	701f      	strb	r7, [r3, #0]
				irda_tx_array[1] = 0xAA;
     172:	705f      	strb	r7, [r3, #1]
				irda_tx_array[2] = 0xAA;
     174:	709f      	strb	r7, [r3, #2]
				
				// Reset the Sync Timer
				xTimerReset(timer_IrDA_Ping, 0);	// Reset the Ping timer immediately
     176:	4b17      	ldr	r3, [pc, #92]	; (1d4 <irda_communication_task+0x94>)
     178:	58e3      	ldr	r3, [r4, r3]
     17a:	681a      	ldr	r2, [r3, #0]
     17c:	4690      	mov	r8, r2
     17e:	4b16      	ldr	r3, [pc, #88]	; (1d8 <irda_communication_task+0x98>)
     180:	58e3      	ldr	r3, [r4, r3]
     182:	4798      	blx	r3
     184:	1c02      	adds	r2, r0, #0
     186:	9500      	str	r5, [sp, #0]
     188:	4640      	mov	r0, r8
     18a:	2102      	movs	r1, #2
     18c:	1c2b      	adds	r3, r5, #0
     18e:	4f13      	ldr	r7, [pc, #76]	; (1dc <irda_communication_task+0x9c>)
     190:	59e7      	ldr	r7, [r4, r7]
     192:	47b8      	blx	r7
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     194:	4b12      	ldr	r3, [pc, #72]	; (1e0 <irda_communication_task+0xa0>)
     196:	58e3      	ldr	r3, [r4, r3]
     198:	6819      	ldr	r1, [r3, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     19a:	69ca      	ldr	r2, [r1, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     19c:	2a00      	cmp	r2, #0
     19e:	d1fc      	bne.n	19a <irda_communication_task+0x5a>
	_usart_wait_for_sync(module);

	switch (transceiver_type) {
		case USART_TRANSCEIVER_RX:
			/* Disable RX */
			usart_hw->CTRLB.reg &= ~SERCOM_USART_CTRLB_RXEN;
     1a0:	684a      	ldr	r2, [r1, #4]
     1a2:	4b10      	ldr	r3, [pc, #64]	; (1e4 <irda_communication_task+0xa4>)
     1a4:	4013      	ands	r3, r2
     1a6:	604b      	str	r3, [r1, #4]
			module->receiver_enabled = false;
     1a8:	4b0d      	ldr	r3, [pc, #52]	; (1e0 <irda_communication_task+0xa0>)
     1aa:	58e0      	ldr	r0, [r4, r3]
     1ac:	7185      	strb	r5, [r0, #6]
				usart_disable_transceiver(&irda_master, USART_TRANSCEIVER_RX);
				usart_write_buffer_job(&irda_master, irda_tx_array,3);	// Send three bytes over IR
     1ae:	4b08      	ldr	r3, [pc, #32]	; (1d0 <irda_communication_task+0x90>)
     1b0:	58e3      	ldr	r3, [r4, r3]
     1b2:	9303      	str	r3, [sp, #12]
     1b4:	1c19      	adds	r1, r3, #0
     1b6:	2203      	movs	r2, #3
     1b8:	4b0b      	ldr	r3, [pc, #44]	; (1e8 <irda_communication_task+0xa8>)
     1ba:	58e3      	ldr	r3, [r4, r3]
     1bc:	4798      	blx	r3
			break;
		}
		
		//xTimerStart(timer_IrDA_link, 0);
		vTaskSuspend( NULL );
     1be:	1c28      	adds	r0, r5, #0
     1c0:	4a0a      	ldr	r2, [pc, #40]	; (1ec <irda_communication_task+0xac>)
     1c2:	58a2      	ldr	r2, [r4, r2]
     1c4:	4790      	blx	r2
	}
     1c6:	e7cd      	b.n	164 <irda_communication_task+0x24>
     1c8:	000068ec 	.word	0x000068ec
     1cc:	000000fc 	.word	0x000000fc
     1d0:	000000bc 	.word	0x000000bc
     1d4:	00000178 	.word	0x00000178
     1d8:	000000f0 	.word	0x000000f0
     1dc:	00000168 	.word	0x00000168
     1e0:	0000016c 	.word	0x0000016c
     1e4:	fffdffff 	.word	0xfffdffff
     1e8:	00000260 	.word	0x00000260
     1ec:	00000170 	.word	0x00000170

000001f0 <timer_irda_ping_callback>:
}

void timer_irda_ping_callback(TimerHandle_t pxTimer) 
{
     1f0:	b510      	push	{r4, lr}
     1f2:	b082      	sub	sp, #8
     1f4:	4c12      	ldr	r4, [pc, #72]	; (240 <timer_irda_ping_callback+0x50>)
     1f6:	447c      	add	r4, pc
	configASSERT( pxTimer );
     1f8:	2800      	cmp	r0, #0
     1fa:	d101      	bne.n	200 <timer_irda_ping_callback+0x10>
     1fc:	b672      	cpsid	i
     1fe:	e7fe      	b.n	1fe <timer_irda_ping_callback+0xe>
	// This is the timeout timer that should perform the following if reached
	
	switch ( irda_comm_state ) {
     200:	4b10      	ldr	r3, [pc, #64]	; (244 <timer_irda_ping_callback+0x54>)
     202:	58e3      	ldr	r3, [r4, r3]
     204:	9301      	str	r3, [sp, #4]
     206:	781b      	ldrb	r3, [r3, #0]
     208:	2b01      	cmp	r3, #1
     20a:	d117      	bne.n	23c <timer_irda_ping_callback+0x4c>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     20c:	4b0e      	ldr	r3, [pc, #56]	; (248 <timer_irda_ping_callback+0x58>)
     20e:	58e3      	ldr	r3, [r4, r3]
     210:	681b      	ldr	r3, [r3, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     212:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     214:	2a00      	cmp	r2, #0
     216:	d1fc      	bne.n	212 <timer_irda_ping_callback+0x22>
	_usart_wait_for_sync(module);

	switch (transceiver_type) {
		case USART_TRANSCEIVER_RX:
			/* Disable RX */
			usart_hw->CTRLB.reg &= ~SERCOM_USART_CTRLB_RXEN;
     218:	6859      	ldr	r1, [r3, #4]
     21a:	4a0c      	ldr	r2, [pc, #48]	; (24c <timer_irda_ping_callback+0x5c>)
     21c:	400a      	ands	r2, r1
     21e:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = false;
     220:	4b09      	ldr	r3, [pc, #36]	; (248 <timer_irda_ping_callback+0x58>)
     222:	58e0      	ldr	r0, [r4, r3]
     224:	2300      	movs	r3, #0
     226:	7183      	strb	r3, [r0, #6]
		case IRDA_BEACON_PING:
				// There was no significant response to the ping, 
					// Reset accordingly
			usart_disable_transceiver(&irda_master, USART_TRANSCEIVER_RX);
			usart_abort_job( &irda_master, USART_TRANSCEIVER_RX );
     228:	2100      	movs	r1, #0
     22a:	4b09      	ldr	r3, [pc, #36]	; (250 <timer_irda_ping_callback+0x60>)
     22c:	58e3      	ldr	r3, [r4, r3]
     22e:	4798      	blx	r3
			
				// The IrDA task is now to reset and ping again
			vTaskResume( irda_task_handler );
     230:	4b08      	ldr	r3, [pc, #32]	; (254 <timer_irda_ping_callback+0x64>)
     232:	58e3      	ldr	r3, [r4, r3]
     234:	6818      	ldr	r0, [r3, #0]
     236:	4b08      	ldr	r3, [pc, #32]	; (258 <timer_irda_ping_callback+0x68>)
     238:	58e3      	ldr	r3, [r4, r3]
     23a:	4798      	blx	r3
		break;
	}
}
     23c:	b002      	add	sp, #8
     23e:	bd10      	pop	{r4, pc}
     240:	00006842 	.word	0x00006842
     244:	000000fc 	.word	0x000000fc
     248:	0000016c 	.word	0x0000016c
     24c:	fffdffff 	.word	0xfffdffff
     250:	00000040 	.word	0x00000040
     254:	000001ac 	.word	0x000001ac
     258:	0000014c 	.word	0x0000014c

0000025c <main>:
TaskHandle_t irda_task_handler;

//struct tc_module tc_instance;

int main(void)
{
     25c:	b5f0      	push	{r4, r5, r6, r7, lr}
     25e:	4647      	mov	r7, r8
     260:	b480      	push	{r7}
     262:	b088      	sub	sp, #32
     264:	4c35      	ldr	r4, [pc, #212]	; (33c <main+0xe0>)
     266:	447c      	add	r4, pc
    /* Initialize the SAM system */
	system_init();
     268:	4b35      	ldr	r3, [pc, #212]	; (340 <main+0xe4>)
     26a:	58e3      	ldr	r3, [r4, r3]
     26c:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     26e:	2701      	movs	r7, #1
     270:	ae07      	add	r6, sp, #28
     272:	7077      	strb	r7, [r6, #1]
	config->powersave  = false;
     274:	2500      	movs	r5, #0
     276:	70b5      	strb	r5, [r6, #2]
	//////////////////////////////////////////////////////////////////////////
	// Set the LED outputs for this board.
	struct port_config led_out;
	port_get_config_defaults(&led_out);
	
	led_out.direction = PORT_PIN_DIR_OUTPUT;
     278:	7037      	strb	r7, [r6, #0]
	port_pin_set_config(LED_BUSY, &led_out);
     27a:	201b      	movs	r0, #27
     27c:	1c31      	adds	r1, r6, #0
     27e:	4b31      	ldr	r3, [pc, #196]	; (344 <main+0xe8>)
     280:	58e3      	ldr	r3, [r4, r3]
     282:	9304      	str	r3, [sp, #16]
     284:	4798      	blx	r3
	port_pin_set_config(LED_ERROR, &led_out);
     286:	2019      	movs	r0, #25
     288:	1c31      	adds	r1, r6, #0
     28a:	9e04      	ldr	r6, [sp, #16]
     28c:	47b0      	blx	r6
	//////////////////////////////////////////////////////////////////////////
	
	//////////////////////////////////////////////////////////////////////////
	// Start the IrDA communication port
	bastian_IrDA_configuration();
     28e:	4b2e      	ldr	r3, [pc, #184]	; (348 <main+0xec>)
     290:	58e3      	ldr	r3, [r4, r3]
     292:	4798      	blx	r3
	
	// Start the trace logger
	vTraceInitTraceData();
     294:	4b2d      	ldr	r3, [pc, #180]	; (34c <main+0xf0>)
     296:	58e3      	ldr	r3, [r4, r3]
     298:	4798      	blx	r3
	
	// Start the trace
	uiTraceStart();
     29a:	4b2d      	ldr	r3, [pc, #180]	; (350 <main+0xf4>)
     29c:	58e3      	ldr	r3, [r4, r3]
     29e:	4798      	blx	r3
	
	// Create the task
	xTaskCreate(irda_communication_task,
     2a0:	4b2c      	ldr	r3, [pc, #176]	; (354 <main+0xf8>)
     2a2:	58e3      	ldr	r3, [r4, r3]
     2a4:	9304      	str	r3, [sp, #16]
     2a6:	2302      	movs	r3, #2
     2a8:	9300      	str	r3, [sp, #0]
     2aa:	4b2b      	ldr	r3, [pc, #172]	; (358 <main+0xfc>)
     2ac:	58e3      	ldr	r3, [r4, r3]
     2ae:	9301      	str	r3, [sp, #4]
     2b0:	9502      	str	r5, [sp, #8]
     2b2:	9503      	str	r5, [sp, #12]
     2b4:	9804      	ldr	r0, [sp, #16]
     2b6:	4929      	ldr	r1, [pc, #164]	; (35c <main+0x100>)
     2b8:	4479      	add	r1, pc
     2ba:	2246      	movs	r2, #70	; 0x46
     2bc:	2300      	movs	r3, #0
     2be:	4e28      	ldr	r6, [pc, #160]	; (360 <main+0x104>)
     2c0:	59a6      	ldr	r6, [r4, r6]
     2c2:	47b0      	blx	r6
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
     2c4:	4b27      	ldr	r3, [pc, #156]	; (364 <main+0x108>)
     2c6:	58e3      	ldr	r3, [r4, r3]
     2c8:	701f      	strb	r7, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     2ca:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     2ce:	b662      	cpsie	i
	
	// Enable global interrupts
	system_interrupt_enable_global();
	
	// Create the necessary timer
	timer_IrDA_Ping = xTimerCreate("Ping", 3, pdFALSE, 0, timer_irda_ping_callback);
     2d0:	4b25      	ldr	r3, [pc, #148]	; (368 <main+0x10c>)
     2d2:	58e3      	ldr	r3, [r4, r3]
     2d4:	9300      	str	r3, [sp, #0]
     2d6:	4825      	ldr	r0, [pc, #148]	; (36c <main+0x110>)
     2d8:	4478      	add	r0, pc
     2da:	2103      	movs	r1, #3
     2dc:	2200      	movs	r2, #0
     2de:	2300      	movs	r3, #0
     2e0:	4e23      	ldr	r6, [pc, #140]	; (370 <main+0x114>)
     2e2:	59a6      	ldr	r6, [r4, r6]
     2e4:	47b0      	blx	r6
     2e6:	4b23      	ldr	r3, [pc, #140]	; (374 <main+0x118>)
     2e8:	58e7      	ldr	r7, [r4, r3]
     2ea:	6038      	str	r0, [r7, #0]
	timer_IrDA_Sync = xTimerCreate("Sync", 1, pdFALSE, 1, timer_irda_sync_callback );
     2ec:	4b22      	ldr	r3, [pc, #136]	; (378 <main+0x11c>)
     2ee:	58e3      	ldr	r3, [r4, r3]
     2f0:	9300      	str	r3, [sp, #0]
     2f2:	4822      	ldr	r0, [pc, #136]	; (37c <main+0x120>)
     2f4:	4478      	add	r0, pc
     2f6:	2101      	movs	r1, #1
     2f8:	2200      	movs	r2, #0
     2fa:	2301      	movs	r3, #1
     2fc:	47b0      	blx	r6
     2fe:	4b20      	ldr	r3, [pc, #128]	; (380 <main+0x124>)
     300:	58e2      	ldr	r2, [r4, r3]
     302:	4690      	mov	r8, r2
     304:	6010      	str	r0, [r2, #0]
	xTimerStart(timer_IrDA_Ping, 0);	// Start timer that keeps track of Linking
     306:	683e      	ldr	r6, [r7, #0]
     308:	4b1e      	ldr	r3, [pc, #120]	; (384 <main+0x128>)
     30a:	58e7      	ldr	r7, [r4, r3]
     30c:	47b8      	blx	r7
     30e:	1c02      	adds	r2, r0, #0
     310:	9500      	str	r5, [sp, #0]
     312:	1c30      	adds	r0, r6, #0
     314:	2101      	movs	r1, #1
     316:	2300      	movs	r3, #0
     318:	4e1b      	ldr	r6, [pc, #108]	; (388 <main+0x12c>)
     31a:	59a6      	ldr	r6, [r4, r6]
     31c:	9604      	str	r6, [sp, #16]
     31e:	47b0      	blx	r6
	xTimerStart(timer_IrDA_Sync, 0);	// Start ping timer
     320:	4642      	mov	r2, r8
     322:	6816      	ldr	r6, [r2, #0]
     324:	47b8      	blx	r7
     326:	1c02      	adds	r2, r0, #0
     328:	9500      	str	r5, [sp, #0]
     32a:	1c30      	adds	r0, r6, #0
     32c:	2101      	movs	r1, #1
     32e:	2300      	movs	r3, #0
     330:	9d04      	ldr	r5, [sp, #16]
     332:	47a8      	blx	r5
	
	// ..and let FreeRTOS run tasks!
	vTaskStartScheduler();
     334:	4b15      	ldr	r3, [pc, #84]	; (38c <main+0x130>)
     336:	58e3      	ldr	r3, [r4, r3]
     338:	4798      	blx	r3
     33a:	e7fe      	b.n	33a <main+0xde>
     33c:	000067d2 	.word	0x000067d2
     340:	00000034 	.word	0x00000034
     344:	000001cc 	.word	0x000001cc
     348:	00000190 	.word	0x00000190
     34c:	00000248 	.word	0x00000248
     350:	000000e8 	.word	0x000000e8
     354:	000001e4 	.word	0x000001e4
     358:	000001ac 	.word	0x000001ac
     35c:	00005788 	.word	0x00005788
     360:	00000068 	.word	0x00000068
     364:	000000ac 	.word	0x000000ac
     368:	000001c4 	.word	0x000001c4
     36c:	00005770 	.word	0x00005770
     370:	00000014 	.word	0x00000014
     374:	00000178 	.word	0x00000178
     378:	00000208 	.word	0x00000208
     37c:	0000575c 	.word	0x0000575c
     380:	000000f8 	.word	0x000000f8
     384:	000000f0 	.word	0x000000f0
     388:	00000168 	.word	0x00000168
     38c:	000001e0 	.word	0x000001e0

00000390 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     390:	b510      	push	{r4, lr}
     392:	1c03      	adds	r3, r0, #0
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     394:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     396:	2040      	movs	r0, #64	; 0x40
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     398:	4299      	cmp	r1, r3
     39a:	d30c      	bcc.n	3b6 <_sercom_get_sync_baud_val+0x26>
     39c:	2400      	movs	r4, #0
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
     39e:	1ac9      	subs	r1, r1, r3
		baud_calculated++;
     3a0:	1c60      	adds	r0, r4, #1
     3a2:	b280      	uxth	r0, r0
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     3a4:	428b      	cmp	r3, r1
     3a6:	d801      	bhi.n	3ac <_sercom_get_sync_baud_val+0x1c>
		clock_value = clock_value - baudrate;
		baud_calculated++;
     3a8:	1c04      	adds	r4, r0, #0
     3aa:	e7f8      	b.n	39e <_sercom_get_sync_baud_val+0xe>

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     3ac:	2040      	movs	r0, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     3ae:	2cff      	cmp	r4, #255	; 0xff
     3b0:	d801      	bhi.n	3b6 <_sercom_get_sync_baud_val+0x26>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     3b2:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     3b4:	2000      	movs	r0, #0
	}
}
     3b6:	bd10      	pop	{r4, pc}

000003b8 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     3b8:	b5f0      	push	{r4, r5, r6, r7, lr}
     3ba:	465f      	mov	r7, fp
     3bc:	4656      	mov	r6, sl
     3be:	464d      	mov	r5, r9
     3c0:	4644      	mov	r4, r8
     3c2:	b4f0      	push	{r4, r5, r6, r7}
     3c4:	b087      	sub	sp, #28
     3c6:	1c06      	adds	r6, r0, #0
     3c8:	1c0d      	adds	r5, r1, #0
     3ca:	9204      	str	r2, [sp, #16]
     3cc:	aa10      	add	r2, sp, #64	; 0x40
     3ce:	7810      	ldrb	r0, [r2, #0]
     3d0:	4a67      	ldr	r2, [pc, #412]	; (570 <_sercom_get_async_baud_val+0x1b8>)
     3d2:	447a      	add	r2, pc
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     3d4:	1c31      	adds	r1, r6, #0
     3d6:	4341      	muls	r1, r0
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     3d8:	2440      	movs	r4, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     3da:	42a9      	cmp	r1, r5
     3dc:	d900      	bls.n	3e0 <_sercom_get_async_baud_val+0x28>
     3de:	e0ba      	b.n	556 <_sercom_get_async_baud_val+0x19e>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     3e0:	2b00      	cmp	r3, #0
     3e2:	d14f      	bne.n	484 <_sercom_get_async_baud_val+0xcc>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     3e4:	4b63      	ldr	r3, [pc, #396]	; (574 <_sercom_get_async_baud_val+0x1bc>)
     3e6:	58d3      	ldr	r3, [r2, r3]
     3e8:	9302      	str	r3, [sp, #8]
     3ea:	2100      	movs	r1, #0
     3ec:	1c32      	adds	r2, r6, #0
     3ee:	2300      	movs	r3, #0
     3f0:	9c02      	ldr	r4, [sp, #8]
     3f2:	47a0      	blx	r4
     3f4:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
     3f6:	1c2e      	adds	r6, r5, #0
     3f8:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     3fa:	2000      	movs	r0, #0
     3fc:	2100      	movs	r1, #0
     3fe:	2200      	movs	r2, #0
     400:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     402:	253f      	movs	r5, #63	; 0x3f
     404:	46ac      	mov	ip, r5
		bit_shift = (uint64_t)1 << i;
     406:	2401      	movs	r4, #1
     408:	46a0      	mov	r8, r4
     40a:	9002      	str	r0, [sp, #8]
     40c:	9103      	str	r1, [sp, #12]
     40e:	4661      	mov	r1, ip
     410:	3920      	subs	r1, #32
     412:	d403      	bmi.n	41c <_sercom_get_async_baud_val+0x64>
     414:	4645      	mov	r5, r8
     416:	408d      	lsls	r5, r1
     418:	46a9      	mov	r9, r5
     41a:	e005      	b.n	428 <_sercom_get_async_baud_val+0x70>
     41c:	2020      	movs	r0, #32
     41e:	4661      	mov	r1, ip
     420:	1a44      	subs	r4, r0, r1
     422:	4645      	mov	r5, r8
     424:	40e5      	lsrs	r5, r4
     426:	46a9      	mov	r9, r5
     428:	4640      	mov	r0, r8
     42a:	4661      	mov	r1, ip
     42c:	4088      	lsls	r0, r1
     42e:	4682      	mov	sl, r0

		r = r << 1;
     430:	1c10      	adds	r0, r2, #0
     432:	1c19      	adds	r1, r3, #0
     434:	1880      	adds	r0, r0, r2
     436:	4159      	adcs	r1, r3
     438:	1c02      	adds	r2, r0, #0
     43a:	1c0b      	adds	r3, r1, #0

		if (n & bit_shift) {
     43c:	465c      	mov	r4, fp
     43e:	464d      	mov	r5, r9
     440:	422c      	tst	r4, r5
     442:	d002      	beq.n	44a <_sercom_get_async_baud_val+0x92>
			r |= 0x01;
     444:	4642      	mov	r2, r8
     446:	4302      	orrs	r2, r0
     448:	1c0b      	adds	r3, r1, #0
		}

		if (r >= d) {
     44a:	429f      	cmp	r7, r3
     44c:	d80c      	bhi.n	468 <_sercom_get_async_baud_val+0xb0>
     44e:	d101      	bne.n	454 <_sercom_get_async_baud_val+0x9c>
     450:	4296      	cmp	r6, r2
     452:	d809      	bhi.n	468 <_sercom_get_async_baud_val+0xb0>
			r = r - d;
     454:	1b92      	subs	r2, r2, r6
     456:	41bb      	sbcs	r3, r7
			q |= bit_shift;
     458:	4650      	mov	r0, sl
     45a:	9902      	ldr	r1, [sp, #8]
     45c:	4308      	orrs	r0, r1
     45e:	4649      	mov	r1, r9
     460:	9c03      	ldr	r4, [sp, #12]
     462:	4321      	orrs	r1, r4
     464:	9002      	str	r0, [sp, #8]
     466:	9103      	str	r1, [sp, #12]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     468:	4665      	mov	r5, ip
     46a:	3d01      	subs	r5, #1
     46c:	46ac      	mov	ip, r5
     46e:	d2ce      	bcs.n	40e <_sercom_get_async_baud_val+0x56>
     470:	9802      	ldr	r0, [sp, #8]
     472:	9903      	ldr	r1, [sp, #12]

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
     474:	4b3d      	ldr	r3, [pc, #244]	; (56c <_sercom_get_async_baud_val+0x1b4>)
     476:	4a3c      	ldr	r2, [pc, #240]	; (568 <_sercom_get_async_baud_val+0x1b0>)
     478:	1a12      	subs	r2, r2, r0
     47a:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     47c:	0c11      	lsrs	r1, r2, #16
     47e:	041b      	lsls	r3, r3, #16
     480:	4319      	orrs	r1, r3
     482:	e065      	b.n	550 <_sercom_get_async_baud_val+0x198>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
     484:	2100      	movs	r1, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     486:	2b01      	cmp	r3, #1
     488:	d162      	bne.n	550 <_sercom_get_async_baud_val+0x198>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     48a:	0f6c      	lsrs	r4, r5, #29
     48c:	00ed      	lsls	r5, r5, #3
     48e:	46ab      	mov	fp, r5
			temp2 = ((uint64_t)baudrate * sample_num);
     490:	4b38      	ldr	r3, [pc, #224]	; (574 <_sercom_get_async_baud_val+0x1bc>)
     492:	58d3      	ldr	r3, [r2, r3]
     494:	9302      	str	r3, [sp, #8]
     496:	1c32      	adds	r2, r6, #0
     498:	2300      	movs	r3, #0
     49a:	9e02      	ldr	r6, [sp, #8]
     49c:	47b0      	blx	r6
     49e:	1c06      	adds	r6, r0, #0
     4a0:	1c0f      	adds	r7, r1, #0
     4a2:	2300      	movs	r3, #0
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
     4a4:	2501      	movs	r5, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
     4a6:	9602      	str	r6, [sp, #8]
     4a8:	9703      	str	r7, [sp, #12]
     4aa:	469a      	mov	sl, r3
     4ac:	46a1      	mov	r9, r4
     4ae:	4657      	mov	r7, sl
     4b0:	b2ff      	uxtb	r7, r7
     4b2:	9705      	str	r7, [sp, #20]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     4b4:	2000      	movs	r0, #0
     4b6:	4680      	mov	r8, r0
     4b8:	2200      	movs	r2, #0
     4ba:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     4bc:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     4be:	1c27      	adds	r7, r4, #0
     4c0:	3f20      	subs	r7, #32
     4c2:	d403      	bmi.n	4cc <_sercom_get_async_baud_val+0x114>
     4c4:	1c29      	adds	r1, r5, #0
     4c6:	40b9      	lsls	r1, r7
     4c8:	9101      	str	r1, [sp, #4]
     4ca:	e004      	b.n	4d6 <_sercom_get_async_baud_val+0x11e>
     4cc:	2620      	movs	r6, #32
     4ce:	1b37      	subs	r7, r6, r4
     4d0:	1c28      	adds	r0, r5, #0
     4d2:	40f8      	lsrs	r0, r7
     4d4:	9001      	str	r0, [sp, #4]
     4d6:	1c29      	adds	r1, r5, #0
     4d8:	40a1      	lsls	r1, r4
     4da:	9100      	str	r1, [sp, #0]

		r = r << 1;
     4dc:	1c10      	adds	r0, r2, #0
     4de:	1c19      	adds	r1, r3, #0
     4e0:	1880      	adds	r0, r0, r2
     4e2:	4159      	adcs	r1, r3
     4e4:	1c02      	adds	r2, r0, #0
     4e6:	1c0b      	adds	r3, r1, #0

		if (n & bit_shift) {
     4e8:	465e      	mov	r6, fp
     4ea:	9f00      	ldr	r7, [sp, #0]
     4ec:	403e      	ands	r6, r7
     4ee:	46b4      	mov	ip, r6
     4f0:	9e01      	ldr	r6, [sp, #4]
     4f2:	464f      	mov	r7, r9
     4f4:	403e      	ands	r6, r7
     4f6:	4667      	mov	r7, ip
     4f8:	433e      	orrs	r6, r7
     4fa:	d002      	beq.n	502 <_sercom_get_async_baud_val+0x14a>
			r |= 0x01;
     4fc:	1c2a      	adds	r2, r5, #0
     4fe:	4302      	orrs	r2, r0
     500:	1c0b      	adds	r3, r1, #0
		}

		if (r >= d) {
     502:	9803      	ldr	r0, [sp, #12]
     504:	4298      	cmp	r0, r3
     506:	d80b      	bhi.n	520 <_sercom_get_async_baud_val+0x168>
     508:	d102      	bne.n	510 <_sercom_get_async_baud_val+0x158>
     50a:	9902      	ldr	r1, [sp, #8]
     50c:	4291      	cmp	r1, r2
     50e:	d807      	bhi.n	520 <_sercom_get_async_baud_val+0x168>
			r = r - d;
     510:	9e02      	ldr	r6, [sp, #8]
     512:	9f03      	ldr	r7, [sp, #12]
     514:	1b92      	subs	r2, r2, r6
     516:	41bb      	sbcs	r3, r7
			q |= bit_shift;
     518:	4647      	mov	r7, r8
     51a:	9800      	ldr	r0, [sp, #0]
     51c:	4307      	orrs	r7, r0
     51e:	46b8      	mov	r8, r7
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     520:	3c01      	subs	r4, #1
     522:	d2cc      	bcs.n	4be <_sercom_get_async_baud_val+0x106>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
     524:	4641      	mov	r1, r8
     526:	4652      	mov	r2, sl
     528:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
     52a:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
     52c:	4c12      	ldr	r4, [pc, #72]	; (578 <_sercom_get_async_baud_val+0x1c0>)
     52e:	42a3      	cmp	r3, r4
     530:	d908      	bls.n	544 <_sercom_get_async_baud_val+0x18c>
     532:	9a05      	ldr	r2, [sp, #20]
     534:	3201      	adds	r2, #1
     536:	b2d2      	uxtb	r2, r2
     538:	9205      	str	r2, [sp, #20]
     53a:	2601      	movs	r6, #1
     53c:	44b2      	add	sl, r6
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     53e:	4657      	mov	r7, sl
     540:	2f08      	cmp	r7, #8
     542:	d1b4      	bne.n	4ae <_sercom_get_async_baud_val+0xf6>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     544:	2440      	movs	r4, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
     546:	9805      	ldr	r0, [sp, #20]
     548:	2808      	cmp	r0, #8
     54a:	d004      	beq.n	556 <_sercom_get_async_baud_val+0x19e>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
     54c:	0341      	lsls	r1, r0, #13
     54e:	4319      	orrs	r1, r3
	}

	*baudval = baud_calculated;
     550:	9c04      	ldr	r4, [sp, #16]
     552:	8021      	strh	r1, [r4, #0]
	return STATUS_OK;
     554:	2400      	movs	r4, #0
}
     556:	1c20      	adds	r0, r4, #0
     558:	b007      	add	sp, #28
     55a:	bc3c      	pop	{r2, r3, r4, r5}
     55c:	4690      	mov	r8, r2
     55e:	4699      	mov	r9, r3
     560:	46a2      	mov	sl, r4
     562:	46ab      	mov	fp, r5
     564:	bdf0      	pop	{r4, r5, r6, r7, pc}
     566:	46c0      	nop			; (mov r8, r8)
     568:	00000000 	.word	0x00000000
     56c:	00000001 	.word	0x00000001
     570:	00006666 	.word	0x00006666
     574:	000000c0 	.word	0x000000c0
     578:	00001fff 	.word	0x00001fff
     57c:	46c0      	nop			; (mov r8, r8)
     57e:	46c0      	nop			; (mov r8, r8)

00000580 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     580:	b530      	push	{r4, r5, lr}
     582:	b085      	sub	sp, #20
     584:	1c05      	adds	r5, r0, #0
     586:	4c12      	ldr	r4, [pc, #72]	; (5d0 <sercom_set_gclk_generator+0x50>)
     588:	447c      	add	r4, pc
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     58a:	4b12      	ldr	r3, [pc, #72]	; (5d4 <sercom_set_gclk_generator+0x54>)
     58c:	447b      	add	r3, pc
     58e:	781b      	ldrb	r3, [r3, #0]
     590:	2b00      	cmp	r3, #0
     592:	d001      	beq.n	598 <sercom_set_gclk_generator+0x18>
     594:	2900      	cmp	r1, #0
     596:	d010      	beq.n	5ba <sercom_set_gclk_generator+0x3a>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     598:	a903      	add	r1, sp, #12
     59a:	700d      	strb	r5, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     59c:	2013      	movs	r0, #19
     59e:	4b0e      	ldr	r3, [pc, #56]	; (5d8 <sercom_set_gclk_generator+0x58>)
     5a0:	58e3      	ldr	r3, [r4, r3]
     5a2:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     5a4:	2013      	movs	r0, #19
     5a6:	4b0d      	ldr	r3, [pc, #52]	; (5dc <sercom_set_gclk_generator+0x5c>)
     5a8:	58e3      	ldr	r3, [r4, r3]
     5aa:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
     5ac:	4b0c      	ldr	r3, [pc, #48]	; (5e0 <sercom_set_gclk_generator+0x60>)
     5ae:	447b      	add	r3, pc
     5b0:	705d      	strb	r5, [r3, #1]
		_sercom_config.generator_is_set = true;
     5b2:	2201      	movs	r2, #1
     5b4:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     5b6:	2000      	movs	r0, #0
     5b8:	e008      	b.n	5cc <sercom_set_gclk_generator+0x4c>
	} else if (generator_source == _sercom_config.generator_source) {
     5ba:	4b0a      	ldr	r3, [pc, #40]	; (5e4 <sercom_set_gclk_generator+0x64>)
     5bc:	447b      	add	r3, pc
     5be:	785a      	ldrb	r2, [r3, #1]
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     5c0:	201d      	movs	r0, #29
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config */
		return STATUS_OK;
     5c2:	1b55      	subs	r5, r2, r5
     5c4:	1e6a      	subs	r2, r5, #1
     5c6:	4195      	sbcs	r5, r2
     5c8:	426d      	negs	r5, r5
     5ca:	4028      	ands	r0, r5
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     5cc:	b005      	add	sp, #20
     5ce:	bd30      	pop	{r4, r5, pc}
     5d0:	000064b0 	.word	0x000064b0
     5d4:	1ffffee0 	.word	0x1ffffee0
     5d8:	00000088 	.word	0x00000088
     5dc:	000001c0 	.word	0x000001c0
     5e0:	1ffffebe 	.word	0x1ffffebe
     5e4:	1ffffeb0 	.word	0x1ffffeb0

000005e8 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
     5e8:	b500      	push	{lr}
	switch ((uintptr_t)sercom_module) {
     5ea:	4b28      	ldr	r3, [pc, #160]	; (68c <_sercom_get_default_pad+0xa4>)
     5ec:	4298      	cmp	r0, r3
     5ee:	d019      	beq.n	624 <_sercom_get_default_pad+0x3c>
     5f0:	d803      	bhi.n	5fa <_sercom_get_default_pad+0x12>
     5f2:	4b27      	ldr	r3, [pc, #156]	; (690 <_sercom_get_default_pad+0xa8>)
     5f4:	4298      	cmp	r0, r3
     5f6:	d007      	beq.n	608 <_sercom_get_default_pad+0x20>
     5f8:	e03e      	b.n	678 <_sercom_get_default_pad+0x90>
     5fa:	4b26      	ldr	r3, [pc, #152]	; (694 <_sercom_get_default_pad+0xac>)
     5fc:	4298      	cmp	r0, r3
     5fe:	d01f      	beq.n	640 <_sercom_get_default_pad+0x58>
     600:	4b25      	ldr	r3, [pc, #148]	; (698 <_sercom_get_default_pad+0xb0>)
     602:	4298      	cmp	r0, r3
     604:	d02a      	beq.n	65c <_sercom_get_default_pad+0x74>
     606:	e037      	b.n	678 <_sercom_get_default_pad+0x90>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     608:	2000      	movs	r0, #0
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     60a:	2903      	cmp	r1, #3
     60c:	d83d      	bhi.n	68a <_sercom_get_default_pad+0xa2>
     60e:	1c08      	adds	r0, r1, #0
     610:	f004 ffc6 	bl	55a0 <__gnu_thumb1_case_uqi>
     614:	06043402 	.word	0x06043402
     618:	4820      	ldr	r0, [pc, #128]	; (69c <_sercom_get_default_pad+0xb4>)
     61a:	e036      	b.n	68a <_sercom_get_default_pad+0xa2>
     61c:	4820      	ldr	r0, [pc, #128]	; (6a0 <_sercom_get_default_pad+0xb8>)
     61e:	e034      	b.n	68a <_sercom_get_default_pad+0xa2>
     620:	4820      	ldr	r0, [pc, #128]	; (6a4 <_sercom_get_default_pad+0xbc>)
     622:	e032      	b.n	68a <_sercom_get_default_pad+0xa2>
	}

	Assert(false);
	return 0;
     624:	2000      	movs	r0, #0
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     626:	2903      	cmp	r1, #3
     628:	d82f      	bhi.n	68a <_sercom_get_default_pad+0xa2>
     62a:	1c08      	adds	r0, r1, #0
     62c:	f004 ffb8 	bl	55a0 <__gnu_thumb1_case_uqi>
     630:	06042802 	.word	0x06042802
     634:	2003      	movs	r0, #3
     636:	e028      	b.n	68a <_sercom_get_default_pad+0xa2>
     638:	481b      	ldr	r0, [pc, #108]	; (6a8 <_sercom_get_default_pad+0xc0>)
     63a:	e026      	b.n	68a <_sercom_get_default_pad+0xa2>
     63c:	481b      	ldr	r0, [pc, #108]	; (6ac <_sercom_get_default_pad+0xc4>)
     63e:	e024      	b.n	68a <_sercom_get_default_pad+0xa2>
	}

	Assert(false);
	return 0;
     640:	2000      	movs	r0, #0
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     642:	2903      	cmp	r1, #3
     644:	d821      	bhi.n	68a <_sercom_get_default_pad+0xa2>
     646:	1c08      	adds	r0, r1, #0
     648:	f004 ffaa 	bl	55a0 <__gnu_thumb1_case_uqi>
     64c:	06041c02 	.word	0x06041c02
     650:	4817      	ldr	r0, [pc, #92]	; (6b0 <_sercom_get_default_pad+0xc8>)
     652:	e01a      	b.n	68a <_sercom_get_default_pad+0xa2>
     654:	4817      	ldr	r0, [pc, #92]	; (6b4 <_sercom_get_default_pad+0xcc>)
     656:	e018      	b.n	68a <_sercom_get_default_pad+0xa2>
     658:	4817      	ldr	r0, [pc, #92]	; (6b8 <_sercom_get_default_pad+0xd0>)
     65a:	e016      	b.n	68a <_sercom_get_default_pad+0xa2>
	}

	Assert(false);
	return 0;
     65c:	2000      	movs	r0, #0
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     65e:	2903      	cmp	r1, #3
     660:	d813      	bhi.n	68a <_sercom_get_default_pad+0xa2>
     662:	1c08      	adds	r0, r1, #0
     664:	f004 ff9c 	bl	55a0 <__gnu_thumb1_case_uqi>
     668:	06041002 	.word	0x06041002
     66c:	4813      	ldr	r0, [pc, #76]	; (6bc <_sercom_get_default_pad+0xd4>)
     66e:	e00c      	b.n	68a <_sercom_get_default_pad+0xa2>
     670:	4813      	ldr	r0, [pc, #76]	; (6c0 <_sercom_get_default_pad+0xd8>)
     672:	e00a      	b.n	68a <_sercom_get_default_pad+0xa2>
     674:	4813      	ldr	r0, [pc, #76]	; (6c4 <_sercom_get_default_pad+0xdc>)
     676:	e008      	b.n	68a <_sercom_get_default_pad+0xa2>
	}

	Assert(false);
	return 0;
     678:	2000      	movs	r0, #0
     67a:	e006      	b.n	68a <_sercom_get_default_pad+0xa2>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     67c:	4812      	ldr	r0, [pc, #72]	; (6c8 <_sercom_get_default_pad+0xe0>)
     67e:	e004      	b.n	68a <_sercom_get_default_pad+0xa2>
     680:	4812      	ldr	r0, [pc, #72]	; (6cc <_sercom_get_default_pad+0xe4>)
     682:	e002      	b.n	68a <_sercom_get_default_pad+0xa2>
     684:	4812      	ldr	r0, [pc, #72]	; (6d0 <_sercom_get_default_pad+0xe8>)
     686:	e000      	b.n	68a <_sercom_get_default_pad+0xa2>
     688:	4812      	ldr	r0, [pc, #72]	; (6d4 <_sercom_get_default_pad+0xec>)
	}

	Assert(false);
	return 0;
}
     68a:	bd00      	pop	{pc}
     68c:	42000c00 	.word	0x42000c00
     690:	42000800 	.word	0x42000800
     694:	42001000 	.word	0x42001000
     698:	42001400 	.word	0x42001400
     69c:	00040003 	.word	0x00040003
     6a0:	00060003 	.word	0x00060003
     6a4:	00070003 	.word	0x00070003
     6a8:	001e0003 	.word	0x001e0003
     6ac:	001f0003 	.word	0x001f0003
     6b0:	00080003 	.word	0x00080003
     6b4:	000a0003 	.word	0x000a0003
     6b8:	000b0003 	.word	0x000b0003
     6bc:	00100003 	.word	0x00100003
     6c0:	00120003 	.word	0x00120003
     6c4:	00130003 	.word	0x00130003
     6c8:	00050003 	.word	0x00050003
     6cc:	00010003 	.word	0x00010003
     6d0:	00090003 	.word	0x00090003
     6d4:	00110003 	.word	0x00110003

000006d8 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     6d8:	b570      	push	{r4, r5, r6, lr}
     6da:	b084      	sub	sp, #16
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     6dc:	4a0f      	ldr	r2, [pc, #60]	; (71c <_sercom_get_sercom_inst_index+0x44>)
     6de:	447a      	add	r2, pc
     6e0:	4669      	mov	r1, sp
     6e2:	ca70      	ldmia	r2!, {r4, r5, r6}
     6e4:	c170      	stmia	r1!, {r4, r5, r6}
     6e6:	6812      	ldr	r2, [r2, #0]
     6e8:	600a      	str	r2, [r1, #0]

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     6ea:	1c03      	adds	r3, r0, #0
     6ec:	9a00      	ldr	r2, [sp, #0]
     6ee:	4282      	cmp	r2, r0
     6f0:	d00f      	beq.n	712 <_sercom_get_sercom_inst_index+0x3a>
     6f2:	9c01      	ldr	r4, [sp, #4]
     6f4:	4284      	cmp	r4, r0
     6f6:	d008      	beq.n	70a <_sercom_get_sercom_inst_index+0x32>
     6f8:	9d02      	ldr	r5, [sp, #8]
     6fa:	4285      	cmp	r5, r0
     6fc:	d007      	beq.n	70e <_sercom_get_sercom_inst_index+0x36>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     6fe:	2000      	movs	r0, #0
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     700:	9e03      	ldr	r6, [sp, #12]
     702:	429e      	cmp	r6, r3
     704:	d107      	bne.n	716 <_sercom_get_sercom_inst_index+0x3e>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     706:	2003      	movs	r0, #3
     708:	e004      	b.n	714 <_sercom_get_sercom_inst_index+0x3c>
     70a:	2001      	movs	r0, #1
     70c:	e002      	b.n	714 <_sercom_get_sercom_inst_index+0x3c>
     70e:	2002      	movs	r0, #2
     710:	e000      	b.n	714 <_sercom_get_sercom_inst_index+0x3c>
     712:	2000      	movs	r0, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
     714:	b2c0      	uxtb	r0, r0
	}

	/* Invalid data given */
	Assert(false);
	return 0;
}
     716:	b004      	add	sp, #16
     718:	bd70      	pop	{r4, r5, r6, pc}
     71a:	46c0      	nop			; (mov r8, r8)
     71c:	0000537a 	.word	0x0000537a

00000720 <irda_master_callback_received>:
//////////////////////////////////////////////////////////////////////////
////////////////////// IrDA CALLBACK FUNCTIONS ////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
// IrDA Rx Callback Function
static void irda_master_callback_received(const struct usart_module *const module) {
     720:	b082      	sub	sp, #8
     722:	491f      	ldr	r1, [pc, #124]	; (7a0 <irda_master_callback_received+0x80>)
     724:	4479      	add	r1, pc
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     726:	4b1f      	ldr	r3, [pc, #124]	; (7a4 <irda_master_callback_received+0x84>)
     728:	58cb      	ldr	r3, [r1, r3]
     72a:	681a      	ldr	r2, [r3, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     72c:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     72e:	2b00      	cmp	r3, #0
     730:	d1fc      	bne.n	72c <irda_master_callback_received+0xc>
	_usart_wait_for_sync(module);

	switch (transceiver_type) {
		case USART_TRANSCEIVER_RX:
			/* Disable RX */
			usart_hw->CTRLB.reg &= ~SERCOM_USART_CTRLB_RXEN;
     732:	6850      	ldr	r0, [r2, #4]
     734:	4b1c      	ldr	r3, [pc, #112]	; (7a8 <irda_master_callback_received+0x88>)
     736:	4003      	ands	r3, r0
     738:	6053      	str	r3, [r2, #4]
			module->receiver_enabled = false;
     73a:	4b1a      	ldr	r3, [pc, #104]	; (7a4 <irda_master_callback_received+0x84>)
     73c:	58cb      	ldr	r3, [r1, r3]
     73e:	9301      	str	r3, [sp, #4]
     740:	2300      	movs	r3, #0
     742:	9801      	ldr	r0, [sp, #4]
     744:	7183      	strb	r3, [r0, #6]
	BaseType_t xYieldRequired; 
	
	usart_disable_transceiver(&irda_master, USART_TRANSCEIVER_RX);		// Disable the Rx Transceiver
	
	switch ( irda_comm_state )
     746:	4b19      	ldr	r3, [pc, #100]	; (7ac <irda_master_callback_received+0x8c>)
     748:	58cb      	ldr	r3, [r1, r3]
     74a:	9301      	str	r3, [sp, #4]
     74c:	781b      	ldrb	r3, [r3, #0]
     74e:	2b01      	cmp	r3, #1
     750:	d123      	bne.n	79a <irda_master_callback_received+0x7a>
	{
		case IRDA_BEACON_PING:
			if ( irda_rx_array[0] == irda_rx_array[1] && irda_rx_array[1] == irda_rx_array[2] && irda_rx_array[2] == irda_rx_array[3] &&
     752:	4b17      	ldr	r3, [pc, #92]	; (7b0 <irda_master_callback_received+0x90>)
     754:	58cb      	ldr	r3, [r1, r3]
     756:	781a      	ldrb	r2, [r3, #0]
     758:	785b      	ldrb	r3, [r3, #1]
     75a:	4293      	cmp	r3, r2
     75c:	d11d      	bne.n	79a <irda_master_callback_received+0x7a>
     75e:	4b14      	ldr	r3, [pc, #80]	; (7b0 <irda_master_callback_received+0x90>)
     760:	58cb      	ldr	r3, [r1, r3]
     762:	9301      	str	r3, [sp, #4]
     764:	789b      	ldrb	r3, [r3, #2]
     766:	4293      	cmp	r3, r2
     768:	d117      	bne.n	79a <irda_master_callback_received+0x7a>
     76a:	4b11      	ldr	r3, [pc, #68]	; (7b0 <irda_master_callback_received+0x90>)
     76c:	58cb      	ldr	r3, [r1, r3]
     76e:	9301      	str	r3, [sp, #4]
     770:	78db      	ldrb	r3, [r3, #3]
     772:	4293      	cmp	r3, r2
     774:	d111      	bne.n	79a <irda_master_callback_received+0x7a>
					 irda_rx_array[3] == irda_rx_array[4] && irda_rx_array[0] == 0xBB )
     776:	4b0e      	ldr	r3, [pc, #56]	; (7b0 <irda_master_callback_received+0x90>)
     778:	58cb      	ldr	r3, [r1, r3]
     77a:	9301      	str	r3, [sp, #4]
	usart_disable_transceiver(&irda_master, USART_TRANSCEIVER_RX);		// Disable the Rx Transceiver
	
	switch ( irda_comm_state )
	{
		case IRDA_BEACON_PING:
			if ( irda_rx_array[0] == irda_rx_array[1] && irda_rx_array[1] == irda_rx_array[2] && irda_rx_array[2] == irda_rx_array[3] &&
     77c:	791b      	ldrb	r3, [r3, #4]
     77e:	4293      	cmp	r3, r2
     780:	d10b      	bne.n	79a <irda_master_callback_received+0x7a>
					 irda_rx_array[3] == irda_rx_array[4] && irda_rx_array[0] == 0xBB )
     782:	2abb      	cmp	r2, #187	; 0xbb
     784:	d109      	bne.n	79a <irda_master_callback_received+0x7a>
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
     786:	2280      	movs	r2, #128	; 0x80
     788:	0492      	lsls	r2, r2, #18
     78a:	4b0a      	ldr	r3, [pc, #40]	; (7b4 <irda_master_callback_received+0x94>)
     78c:	61da      	str	r2, [r3, #28]
			{
				port_pin_toggle_output_level(LED_ERROR);
				irda_comm_state = IRDA_BEACON_PING;	// Change state to send first response
     78e:	4b07      	ldr	r3, [pc, #28]	; (7ac <irda_master_callback_received+0x8c>)
     790:	58cb      	ldr	r3, [r1, r3]
     792:	9301      	str	r3, [sp, #4]
     794:	2301      	movs	r3, #1
     796:	9a01      	ldr	r2, [sp, #4]
     798:	7013      	strb	r3, [r2, #0]
			}
		break;
		case IRDA_BEACON_FIRST:
		break;
	}
}
     79a:	b002      	add	sp, #8
     79c:	4770      	bx	lr
     79e:	46c0      	nop			; (mov r8, r8)
     7a0:	00006314 	.word	0x00006314
     7a4:	0000016c 	.word	0x0000016c
     7a8:	fffdffff 	.word	0xfffdffff
     7ac:	000000fc 	.word	0x000000fc
     7b0:	00000038 	.word	0x00000038
     7b4:	41004400 	.word	0x41004400

000007b8 <irda_master_callback_transmitted>:
// IrDA Tx Callback Function
static void irda_master_callback_transmitted(const struct usart_module *const module) {
     7b8:	b530      	push	{r4, r5, lr}
     7ba:	b085      	sub	sp, #20
     7bc:	4c1e      	ldr	r4, [pc, #120]	; (838 <irda_master_callback_transmitted+0x80>)
     7be:	447c      	add	r4, pc
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     7c0:	4b1e      	ldr	r3, [pc, #120]	; (83c <irda_master_callback_transmitted+0x84>)
     7c2:	58e3      	ldr	r3, [r4, r3]
     7c4:	681b      	ldr	r3, [r3, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     7c6:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     7c8:	2a00      	cmp	r2, #0
     7ca:	d1fc      	bne.n	7c6 <irda_master_callback_transmitted+0xe>
	_usart_wait_for_sync(module);

	switch (transceiver_type) {
		case USART_TRANSCEIVER_RX:
			/* Enable RX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
     7cc:	6859      	ldr	r1, [r3, #4]
     7ce:	2280      	movs	r2, #128	; 0x80
     7d0:	0292      	lsls	r2, r2, #10
     7d2:	430a      	orrs	r2, r1
     7d4:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
     7d6:	4a19      	ldr	r2, [pc, #100]	; (83c <irda_master_callback_transmitted+0x84>)
     7d8:	58a2      	ldr	r2, [r4, r2]
     7da:	9202      	str	r2, [sp, #8]
     7dc:	2201      	movs	r2, #1
     7de:	9902      	ldr	r1, [sp, #8]
     7e0:	718a      	strb	r2, [r1, #6]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     7e2:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     7e4:	2a00      	cmp	r2, #0
     7e6:	d1fc      	bne.n	7e2 <irda_master_callback_transmitted+0x2a>
	
	usart_enable_transceiver( &irda_master, USART_TRANSCEIVER_RX );		// Enable the Rx transceiver
	
	switch ( irda_comm_state ) {
     7e8:	4b15      	ldr	r3, [pc, #84]	; (840 <irda_master_callback_transmitted+0x88>)
     7ea:	58e3      	ldr	r3, [r4, r3]
     7ec:	9302      	str	r3, [sp, #8]
     7ee:	781b      	ldrb	r3, [r3, #0]
     7f0:	2b01      	cmp	r3, #1
     7f2:	d11f      	bne.n	834 <irda_master_callback_transmitted+0x7c>
		case IRDA_BEACON_PING:	// The ping has just been transmitted
			// Change the state of the machine
			irda_comm_state = IRDA_BEACON_BACK_PING;	// We are starting to wait for the Back-Ping
     7f4:	4b12      	ldr	r3, [pc, #72]	; (840 <irda_master_callback_transmitted+0x88>)
     7f6:	58e3      	ldr	r3, [r4, r3]
     7f8:	9302      	str	r3, [sp, #8]
     7fa:	2302      	movs	r3, #2
     7fc:	9a02      	ldr	r2, [sp, #8]
     7fe:	7013      	strb	r3, [r2, #0]
			
			// Reset the Sync Timer
			xTimerResetFromISR( timer_IrDA_Sync, 0 );
     800:	4b10      	ldr	r3, [pc, #64]	; (844 <irda_master_callback_transmitted+0x8c>)
     802:	58e3      	ldr	r3, [r4, r3]
     804:	681d      	ldr	r5, [r3, #0]
     806:	4b10      	ldr	r3, [pc, #64]	; (848 <irda_master_callback_transmitted+0x90>)
     808:	58e3      	ldr	r3, [r4, r3]
     80a:	4798      	blx	r3
     80c:	1c02      	adds	r2, r0, #0
     80e:	2300      	movs	r3, #0
     810:	9300      	str	r3, [sp, #0]
     812:	1c28      	adds	r0, r5, #0
     814:	2107      	movs	r1, #7
     816:	4d0d      	ldr	r5, [pc, #52]	; (84c <irda_master_callback_transmitted+0x94>)
     818:	5965      	ldr	r5, [r4, r5]
     81a:	47a8      	blx	r5
			
			usart_read_buffer_job( &irda_master, irda_rx_array, 5);	// Attempt to receive the next 5 bytes
     81c:	4b07      	ldr	r3, [pc, #28]	; (83c <irda_master_callback_transmitted+0x84>)
     81e:	58e3      	ldr	r3, [r4, r3]
     820:	9302      	str	r3, [sp, #8]
     822:	4b0b      	ldr	r3, [pc, #44]	; (850 <irda_master_callback_transmitted+0x98>)
     824:	58e3      	ldr	r3, [r4, r3]
     826:	9303      	str	r3, [sp, #12]
     828:	9802      	ldr	r0, [sp, #8]
     82a:	1c19      	adds	r1, r3, #0
     82c:	2205      	movs	r2, #5
     82e:	4b09      	ldr	r3, [pc, #36]	; (854 <irda_master_callback_transmitted+0x9c>)
     830:	58e3      	ldr	r3, [r4, r3]
     832:	4798      	blx	r3
		break;
	}
}
     834:	b005      	add	sp, #20
     836:	bd30      	pop	{r4, r5, pc}
     838:	0000627a 	.word	0x0000627a
     83c:	0000016c 	.word	0x0000016c
     840:	000000fc 	.word	0x000000fc
     844:	000000f8 	.word	0x000000f8
     848:	00000128 	.word	0x00000128
     84c:	00000168 	.word	0x00000168
     850:	00000038 	.word	0x00000038
     854:	000001ec 	.word	0x000001ec

00000858 <bastian_IrDA_configuration>:
static void irda_master_callback_received(const struct usart_module *const module);
static void irda_master_callback_transmitted(const struct usart_module *const module);

//////////////////////////////////////////////////////////////////////////
// IrDA Port COnfiguration
void bastian_IrDA_configuration (void){
     858:	b5f0      	push	{r4, r5, r6, r7, lr}
     85a:	b093      	sub	sp, #76	; 0x4c
     85c:	4d31      	ldr	r5, [pc, #196]	; (924 <bastian_IrDA_configuration+0xcc>)
     85e:	447d      	add	r5, pc
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     860:	2380      	movs	r3, #128	; 0x80
     862:	05db      	lsls	r3, r3, #23
     864:	9302      	str	r3, [sp, #8]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     866:	2300      	movs	r3, #0
     868:	aa02      	add	r2, sp, #8
     86a:	6053      	str	r3, [r2, #4]
	config->parity           = USART_PARITY_NONE;
	config->stopbits         = USART_STOPBITS_1;
     86c:	2100      	movs	r1, #0
     86e:	7293      	strb	r3, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     870:	72d3      	strb	r3, [r2, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
     872:	2401      	movs	r4, #1
     874:	2024      	movs	r0, #36	; 0x24
     876:	5414      	strb	r4, [r2, r0]
	config->transmitter_enable = true;
     878:	2025      	movs	r0, #37	; 0x25
     87a:	5414      	strb	r4, [r2, r0]
	config->clock_polarity_inverted = false;
     87c:	2026      	movs	r0, #38	; 0x26
     87e:	5413      	strb	r3, [r2, r0]
	config->use_external_clock = false;
     880:	2027      	movs	r0, #39	; 0x27
     882:	5413      	strb	r3, [r2, r0]
	config->ext_clock_freq   = 0;
     884:	6293      	str	r3, [r2, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     886:	202c      	movs	r0, #44	; 0x2c
     888:	5413      	strb	r3, [r2, r0]
	config->generator_source = GCLK_GENERATOR_0;
     88a:	202d      	movs	r0, #45	; 0x2d
     88c:	5413      	strb	r3, [r2, r0]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     88e:	6153      	str	r3, [r2, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     890:	8213      	strh	r3, [r2, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     892:	2000      	movs	r0, #0
     894:	76d0      	strb	r0, [r2, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     896:	7611      	strb	r1, [r2, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     898:	7711      	strb	r1, [r2, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
	config->receive_pulse_length                    = 19;
     89a:	2013      	movs	r0, #19
     89c:	7690      	strb	r0, [r2, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     89e:	7751      	strb	r1, [r2, #29]
	usart_get_config_defaults(&irda_conf);
	
	// Port Configuration
	irda_conf.transfer_mode = USART_TRANSFER_ASYNCHRONOUSLY;	// Asynchronous Communication Mode
	irda_conf.generator_source = GCLK_GENERATOR_0;				// Use the Generic Clock 0 as source
	irda_conf.baudrate = 115200;								// IrDA Baudrate
     8a0:	21e1      	movs	r1, #225	; 0xe1
     8a2:	0249      	lsls	r1, r1, #9
     8a4:	6211      	str	r1, [r2, #32]
	irda_conf.character_size = USART_CHARACTER_SIZE_8BIT;
	irda_conf.stopbits = USART_STOPBITS_1;
	irda_conf.parity = USART_PARITY_EVEN;
     8a6:	8113      	strh	r3, [r2, #8]
	irda_conf.encoding_format_enable = true;	// Enable IrDA Encoding
     8a8:	7654      	strb	r4, [r2, #25]
	
	// Pin Multiplexer Settings
	irda_conf.mux_setting = USART_RX_1_TX_0_XCK_1;
     8aa:	2380      	movs	r3, #128	; 0x80
     8ac:	035b      	lsls	r3, r3, #13
     8ae:	60d3      	str	r3, [r2, #12]
	irda_conf.pinmux_pad0 = PINMUX_PA22C_SERCOM3_PAD0;
     8b0:	4b1d      	ldr	r3, [pc, #116]	; (928 <bastian_IrDA_configuration+0xd0>)
     8b2:	6313      	str	r3, [r2, #48]	; 0x30
	irda_conf.pinmux_pad1 = PINMUX_PA23C_SERCOM3_PAD1;
     8b4:	4b1d      	ldr	r3, [pc, #116]	; (92c <bastian_IrDA_configuration+0xd4>)
     8b6:	6353      	str	r3, [r2, #52]	; 0x34
	irda_conf.pinmux_pad2 = PINMUX_UNUSED;
     8b8:	2301      	movs	r3, #1
     8ba:	425b      	negs	r3, r3
     8bc:	6393      	str	r3, [r2, #56]	; 0x38
	irda_conf.pinmux_pad3 = PINMUX_UNUSED;
     8be:	63d3      	str	r3, [r2, #60]	; 0x3c

	// Initialize the previous settings
	usart_init((struct usart_module*) &irda_master, SERCOM3, &irda_conf);
     8c0:	4b1b      	ldr	r3, [pc, #108]	; (930 <bastian_IrDA_configuration+0xd8>)
     8c2:	58ef      	ldr	r7, [r5, r3]
     8c4:	1c38      	adds	r0, r7, #0
     8c6:	491b      	ldr	r1, [pc, #108]	; (934 <bastian_IrDA_configuration+0xdc>)
     8c8:	4b1b      	ldr	r3, [pc, #108]	; (938 <bastian_IrDA_configuration+0xe0>)
     8ca:	58eb      	ldr	r3, [r5, r3]
     8cc:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     8ce:	683e      	ldr	r6, [r7, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     8d0:	1c30      	adds	r0, r6, #0
     8d2:	4b1a      	ldr	r3, [pc, #104]	; (93c <bastian_IrDA_configuration+0xe4>)
     8d4:	58eb      	ldr	r3, [r5, r3]
     8d6:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     8d8:	231f      	movs	r3, #31
     8da:	4018      	ands	r0, r3
     8dc:	4084      	lsls	r4, r0
     8de:	4b18      	ldr	r3, [pc, #96]	; (940 <bastian_IrDA_configuration+0xe8>)
     8e0:	601c      	str	r4, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     8e2:	683a      	ldr	r2, [r7, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     8e4:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     8e6:	2b00      	cmp	r3, #0
     8e8:	d1fc      	bne.n	8e4 <bastian_IrDA_configuration+0x8c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     8ea:	6832      	ldr	r2, [r6, #0]
     8ec:	2302      	movs	r3, #2
     8ee:	4313      	orrs	r3, r2
     8f0:	6033      	str	r3, [r6, #0]

	// Enable the module
	usart_enable((struct usart_module*) &irda_master);

	// ******** Callback setup
	usart_register_callback((struct usart_module*) &irda_master, (usart_callback_t)irda_master_callback_received, USART_CALLBACK_BUFFER_RECEIVED);
     8f2:	4b0f      	ldr	r3, [pc, #60]	; (930 <bastian_IrDA_configuration+0xd8>)
     8f4:	58ec      	ldr	r4, [r5, r3]
     8f6:	1c20      	adds	r0, r4, #0
     8f8:	4912      	ldr	r1, [pc, #72]	; (944 <bastian_IrDA_configuration+0xec>)
     8fa:	4479      	add	r1, pc
     8fc:	2201      	movs	r2, #1
     8fe:	4b12      	ldr	r3, [pc, #72]	; (948 <bastian_IrDA_configuration+0xf0>)
     900:	58ee      	ldr	r6, [r5, r3]
     902:	47b0      	blx	r6
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     904:	2531      	movs	r5, #49	; 0x31
     906:	5d62      	ldrb	r2, [r4, r5]
     908:	2302      	movs	r3, #2
     90a:	4313      	orrs	r3, r2
     90c:	5563      	strb	r3, [r4, r5]
	usart_enable_callback((struct usart_module*) &irda_master, USART_CALLBACK_BUFFER_RECEIVED);

	usart_register_callback((struct usart_module*) &irda_master, (usart_callback_t)irda_master_callback_transmitted, USART_CALLBACK_BUFFER_TRANSMITTED);
     90e:	1c20      	adds	r0, r4, #0
     910:	490e      	ldr	r1, [pc, #56]	; (94c <bastian_IrDA_configuration+0xf4>)
     912:	4479      	add	r1, pc
     914:	2200      	movs	r2, #0
     916:	47b0      	blx	r6
     918:	5d62      	ldrb	r2, [r4, r5]
     91a:	2301      	movs	r3, #1
     91c:	4313      	orrs	r3, r2
     91e:	5563      	strb	r3, [r4, r5]
	usart_enable_callback((struct usart_module*) &irda_master, USART_CALLBACK_BUFFER_TRANSMITTED);
}
     920:	b013      	add	sp, #76	; 0x4c
     922:	bdf0      	pop	{r4, r5, r6, r7, pc}
     924:	000061da 	.word	0x000061da
     928:	00160002 	.word	0x00160002
     92c:	00170002 	.word	0x00170002
     930:	0000016c 	.word	0x0000016c
     934:	42001400 	.word	0x42001400
     938:	00000180 	.word	0x00000180
     93c:	0000007c 	.word	0x0000007c
     940:	e000e100 	.word	0xe000e100
     944:	fffffe23 	.word	0xfffffe23
     948:	0000000c 	.word	0x0000000c
     94c:	fffffea3 	.word	0xfffffea3

00000950 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     950:	4770      	bx	lr
     952:	46c0      	nop			; (mov r8, r8)

00000954 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     954:	b530      	push	{r4, r5, lr}
     956:	4a0f      	ldr	r2, [pc, #60]	; (994 <_sercom_set_handler+0x40>)
     958:	447a      	add	r2, pc
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     95a:	4b0f      	ldr	r3, [pc, #60]	; (998 <_sercom_set_handler+0x44>)
     95c:	447b      	add	r3, pc
     95e:	781b      	ldrb	r3, [r3, #0]
     960:	2b00      	cmp	r3, #0
     962:	d110      	bne.n	986 <_sercom_set_handler+0x32>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     964:	4b0d      	ldr	r3, [pc, #52]	; (99c <_sercom_set_handler+0x48>)
     966:	447b      	add	r3, pc
     968:	4d0d      	ldr	r5, [pc, #52]	; (9a0 <_sercom_set_handler+0x4c>)
     96a:	447d      	add	r5, pc
     96c:	605d      	str	r5, [r3, #4]
			_sercom_instances[i] = NULL;
     96e:	4c0d      	ldr	r4, [pc, #52]	; (9a4 <_sercom_set_handler+0x50>)
     970:	5912      	ldr	r2, [r2, r4]
     972:	2400      	movs	r4, #0
     974:	6014      	str	r4, [r2, #0]
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     976:	609d      	str	r5, [r3, #8]
			_sercom_instances[i] = NULL;
     978:	6054      	str	r4, [r2, #4]
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     97a:	60dd      	str	r5, [r3, #12]
			_sercom_instances[i] = NULL;
     97c:	6094      	str	r4, [r2, #8]
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     97e:	611d      	str	r5, [r3, #16]
			_sercom_instances[i] = NULL;
     980:	60d4      	str	r4, [r2, #12]
		}

		_handler_table_initialized = true;
     982:	2201      	movs	r2, #1
     984:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     986:	0080      	lsls	r0, r0, #2
     988:	4b07      	ldr	r3, [pc, #28]	; (9a8 <_sercom_set_handler+0x54>)
     98a:	447b      	add	r3, pc
     98c:	1818      	adds	r0, r3, r0
     98e:	6041      	str	r1, [r0, #4]
}
     990:	bd30      	pop	{r4, r5, pc}
     992:	46c0      	nop			; (mov r8, r8)
     994:	000060e0 	.word	0x000060e0
     998:	1ffffb18 	.word	0x1ffffb18
     99c:	1ffffb0e 	.word	0x1ffffb0e
     9a0:	ffffffe3 	.word	0xffffffe3
     9a4:	00000104 	.word	0x00000104
     9a8:	1ffffaea 	.word	0x1ffffaea

000009ac <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     9ac:	b570      	push	{r4, r5, r6, lr}
     9ae:	b084      	sub	sp, #16
     9b0:	1c06      	adds	r6, r0, #0
     9b2:	4c08      	ldr	r4, [pc, #32]	; (9d4 <_sercom_get_interrupt_vector+0x28>)
     9b4:	447c      	add	r4, pc
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     9b6:	ad03      	add	r5, sp, #12
     9b8:	1c28      	adds	r0, r5, #0
     9ba:	4907      	ldr	r1, [pc, #28]	; (9d8 <_sercom_get_interrupt_vector+0x2c>)
     9bc:	4479      	add	r1, pc
     9be:	2204      	movs	r2, #4
     9c0:	4b06      	ldr	r3, [pc, #24]	; (9dc <_sercom_get_interrupt_vector+0x30>)
     9c2:	58e3      	ldr	r3, [r4, r3]
     9c4:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     9c6:	1c30      	adds	r0, r6, #0
     9c8:	4b05      	ldr	r3, [pc, #20]	; (9e0 <_sercom_get_interrupt_vector+0x34>)
     9ca:	58e3      	ldr	r3, [r4, r3]
     9cc:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     9ce:	5628      	ldrsb	r0, [r5, r0]
}
     9d0:	b004      	add	sp, #16
     9d2:	bd70      	pop	{r4, r5, r6, pc}
     9d4:	00006084 	.word	0x00006084
     9d8:	000050ac 	.word	0x000050ac
     9dc:	0000005c 	.word	0x0000005c
     9e0:	00000258 	.word	0x00000258

000009e4 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     9e4:	b508      	push	{r3, lr}
     9e6:	4b03      	ldr	r3, [pc, #12]	; (9f4 <SERCOM0_Handler+0x10>)
     9e8:	447b      	add	r3, pc
     9ea:	685b      	ldr	r3, [r3, #4]
     9ec:	2000      	movs	r0, #0
     9ee:	4798      	blx	r3
     9f0:	bd08      	pop	{r3, pc}
     9f2:	46c0      	nop			; (mov r8, r8)
     9f4:	1ffffa8c 	.word	0x1ffffa8c

000009f8 <SERCOM1_Handler>:
     9f8:	b508      	push	{r3, lr}
     9fa:	4b03      	ldr	r3, [pc, #12]	; (a08 <SERCOM1_Handler+0x10>)
     9fc:	447b      	add	r3, pc
     9fe:	689b      	ldr	r3, [r3, #8]
     a00:	2001      	movs	r0, #1
     a02:	4798      	blx	r3
     a04:	bd08      	pop	{r3, pc}
     a06:	46c0      	nop			; (mov r8, r8)
     a08:	1ffffa78 	.word	0x1ffffa78

00000a0c <SERCOM2_Handler>:
     a0c:	b508      	push	{r3, lr}
     a0e:	4b03      	ldr	r3, [pc, #12]	; (a1c <SERCOM2_Handler+0x10>)
     a10:	447b      	add	r3, pc
     a12:	68db      	ldr	r3, [r3, #12]
     a14:	2002      	movs	r0, #2
     a16:	4798      	blx	r3
     a18:	bd08      	pop	{r3, pc}
     a1a:	46c0      	nop			; (mov r8, r8)
     a1c:	1ffffa64 	.word	0x1ffffa64

00000a20 <SERCOM3_Handler>:
     a20:	b508      	push	{r3, lr}
     a22:	4b03      	ldr	r3, [pc, #12]	; (a30 <SERCOM3_Handler+0x10>)
     a24:	447b      	add	r3, pc
     a26:	691b      	ldr	r3, [r3, #16]
     a28:	2003      	movs	r0, #3
     a2a:	4798      	blx	r3
     a2c:	bd08      	pop	{r3, pc}
     a2e:	46c0      	nop			; (mov r8, r8)
     a30:	1ffffa50 	.word	0x1ffffa50

00000a34 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     a34:	b5f0      	push	{r4, r5, r6, r7, lr}
     a36:	465f      	mov	r7, fp
     a38:	4656      	mov	r6, sl
     a3a:	464d      	mov	r5, r9
     a3c:	4644      	mov	r4, r8
     a3e:	b4f0      	push	{r4, r5, r6, r7}
     a40:	b09b      	sub	sp, #108	; 0x6c
     a42:	1c06      	adds	r6, r0, #0
     a44:	1c0c      	adds	r4, r1, #0
     a46:	9208      	str	r2, [sp, #32]
     a48:	4dc6      	ldr	r5, [pc, #792]	; (d64 <usart_init+0x330>)
     a4a:	447d      	add	r5, pc
     a4c:	9509      	str	r5, [sp, #36]	; 0x24
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     a4e:	6031      	str	r1, [r6, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     a50:	1c08      	adds	r0, r1, #0
     a52:	4bc5      	ldr	r3, [pc, #788]	; (d68 <usart_init+0x334>)
     a54:	58eb      	ldr	r3, [r5, r3]
     a56:	4798      	blx	r3
     a58:	1c02      	adds	r2, r0, #0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     a5a:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     a5c:	2005      	movs	r0, #5
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     a5e:	07df      	lsls	r7, r3, #31
     a60:	d500      	bpl.n	a64 <usart_init+0x30>
     a62:	e177      	b.n	d54 <usart_init+0x320>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     a64:	6823      	ldr	r3, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
     a66:	201c      	movs	r0, #28
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     a68:	0799      	lsls	r1, r3, #30
     a6a:	d500      	bpl.n	a6e <usart_init+0x3a>
     a6c:	e172      	b.n	d54 <usart_init+0x320>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     a6e:	4bbf      	ldr	r3, [pc, #764]	; (d6c <usart_init+0x338>)
     a70:	6a18      	ldr	r0, [r3, #32]
#else
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     a72:	1c95      	adds	r5, r2, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     a74:	2701      	movs	r7, #1
     a76:	1c39      	adds	r1, r7, #0
     a78:	40a9      	lsls	r1, r5
     a7a:	4301      	orrs	r1, r0
     a7c:	6219      	str	r1, [r3, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     a7e:	232d      	movs	r3, #45	; 0x2d
     a80:	9d08      	ldr	r5, [sp, #32]
     a82:	1c1f      	adds	r7, r3, #0
     a84:	5ceb      	ldrb	r3, [r5, r3]
     a86:	a919      	add	r1, sp, #100	; 0x64
     a88:	700b      	strb	r3, [r1, #0]
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     a8a:	3214      	adds	r2, #20

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     a8c:	b2d2      	uxtb	r2, r2
     a8e:	4691      	mov	r9, r2
     a90:	1c10      	adds	r0, r2, #0
     a92:	4bb7      	ldr	r3, [pc, #732]	; (d70 <usart_init+0x33c>)
     a94:	9d09      	ldr	r5, [sp, #36]	; 0x24
     a96:	58eb      	ldr	r3, [r5, r3]
     a98:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     a9a:	4648      	mov	r0, r9
     a9c:	4bb5      	ldr	r3, [pc, #724]	; (d74 <usart_init+0x340>)
     a9e:	58eb      	ldr	r3, [r5, r3]
     aa0:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     aa2:	9d08      	ldr	r5, [sp, #32]
     aa4:	5de8      	ldrb	r0, [r5, r7]
     aa6:	2100      	movs	r1, #0
     aa8:	4bb3      	ldr	r3, [pc, #716]	; (d78 <usart_init+0x344>)
     aaa:	9d09      	ldr	r5, [sp, #36]	; 0x24
     aac:	58eb      	ldr	r3, [r5, r3]
     aae:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
     ab0:	9d08      	ldr	r5, [sp, #32]
     ab2:	7aeb      	ldrb	r3, [r5, #11]
     ab4:	7173      	strb	r3, [r6, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
     ab6:	2324      	movs	r3, #36	; 0x24
     ab8:	5ceb      	ldrb	r3, [r5, r3]
     aba:	71b3      	strb	r3, [r6, #6]
	module->transmitter_enabled = config->transmitter_enable;
     abc:	2325      	movs	r3, #37	; 0x25
     abe:	5ceb      	ldrb	r3, [r5, r3]
     ac0:	71f3      	strb	r3, [r6, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
     ac2:	7eeb      	ldrb	r3, [r5, #27]
     ac4:	7233      	strb	r3, [r6, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     ac6:	7f2b      	ldrb	r3, [r5, #28]
     ac8:	7273      	strb	r3, [r6, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     aca:	6837      	ldr	r7, [r6, #0]
     acc:	46b9      	mov	r9, r7

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     ace:	1c38      	adds	r0, r7, #0
     ad0:	4ba5      	ldr	r3, [pc, #660]	; (d68 <usart_init+0x334>)
     ad2:	9d09      	ldr	r5, [sp, #36]	; 0x24
     ad4:	58eb      	ldr	r3, [r5, r3]
     ad6:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     ad8:	3014      	adds	r0, #20
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
     ada:	2200      	movs	r2, #0
     adc:	466b      	mov	r3, sp
     ade:	334e      	adds	r3, #78	; 0x4e
     ae0:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
     ae2:	9d08      	ldr	r5, [sp, #32]
     ae4:	8a2d      	ldrh	r5, [r5, #16]
     ae6:	46a8      	mov	r8, r5
     ae8:	2380      	movs	r3, #128	; 0x80
     aea:	01db      	lsls	r3, r3, #7
     aec:	429d      	cmp	r5, r3
     aee:	d01c      	beq.n	b2a <usart_init+0xf6>
     af0:	2380      	movs	r3, #128	; 0x80
     af2:	01db      	lsls	r3, r3, #7
     af4:	429d      	cmp	r5, r3
     af6:	d804      	bhi.n	b02 <usart_init+0xce>
     af8:	2380      	movs	r3, #128	; 0x80
     afa:	019b      	lsls	r3, r3, #6
     afc:	429d      	cmp	r5, r3
     afe:	d00e      	beq.n	b1e <usart_init+0xea>
     b00:	e007      	b.n	b12 <usart_init+0xde>
     b02:	23c0      	movs	r3, #192	; 0xc0
     b04:	01db      	lsls	r3, r3, #7
     b06:	429d      	cmp	r5, r3
     b08:	d00c      	beq.n	b24 <usart_init+0xf0>
     b0a:	2380      	movs	r3, #128	; 0x80
     b0c:	021b      	lsls	r3, r3, #8
     b0e:	429d      	cmp	r5, r3
     b10:	d002      	beq.n	b18 <usart_init+0xe4>
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     b12:	2710      	movs	r7, #16
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     b14:	2500      	movs	r5, #0
     b16:	e00a      	b.n	b2e <usart_init+0xfa>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     b18:	2703      	movs	r7, #3
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     b1a:	2500      	movs	r5, #0
     b1c:	e007      	b.n	b2e <usart_init+0xfa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     b1e:	2710      	movs	r7, #16
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     b20:	2501      	movs	r5, #1
     b22:	e004      	b.n	b2e <usart_init+0xfa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     b24:	2708      	movs	r7, #8
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     b26:	2501      	movs	r5, #1
     b28:	e001      	b.n	b2e <usart_init+0xfa>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     b2a:	2708      	movs	r7, #8
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     b2c:	2500      	movs	r5, #0
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     b2e:	9908      	ldr	r1, [sp, #32]
     b30:	6809      	ldr	r1, [r1, #0]
     b32:	910a      	str	r1, [sp, #40]	; 0x28
		(uint32_t)config->mux_setting |
     b34:	9a08      	ldr	r2, [sp, #32]
     b36:	68d2      	ldr	r2, [r2, #12]
     b38:	920c      	str	r2, [sp, #48]	; 0x30
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     b3a:	9b08      	ldr	r3, [sp, #32]
     b3c:	695b      	ldr	r3, [r3, #20]
     b3e:	930d      	str	r3, [sp, #52]	; 0x34
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     b40:	9908      	ldr	r1, [sp, #32]
     b42:	7e09      	ldrb	r1, [r1, #24]
     b44:	910e      	str	r1, [sp, #56]	; 0x38
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     b46:	2326      	movs	r3, #38	; 0x26
     b48:	9a08      	ldr	r2, [sp, #32]
     b4a:	5cd3      	ldrb	r3, [r2, r3]
     b4c:	469b      	mov	fp, r3

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
     b4e:	6853      	ldr	r3, [r2, #4]
     b50:	469a      	mov	sl, r3
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
     b52:	2b00      	cmp	r3, #0
     b54:	d017      	beq.n	b86 <usart_init+0x152>
     b56:	2380      	movs	r3, #128	; 0x80
     b58:	055b      	lsls	r3, r3, #21
     b5a:	459a      	cmp	sl, r3
     b5c:	d13c      	bne.n	bd8 <usart_init+0x1a4>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
     b5e:	2327      	movs	r3, #39	; 0x27
     b60:	5cd3      	ldrb	r3, [r2, r3]
     b62:	2b00      	cmp	r3, #0
     b64:	d13c      	bne.n	be0 <usart_init+0x1ac>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     b66:	6a15      	ldr	r5, [r2, #32]
     b68:	b2c0      	uxtb	r0, r0
     b6a:	4b84      	ldr	r3, [pc, #528]	; (d7c <usart_init+0x348>)
     b6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
     b6e:	58d3      	ldr	r3, [r2, r3]
     b70:	4798      	blx	r3
     b72:	1c01      	adds	r1, r0, #0
     b74:	1c28      	adds	r0, r5, #0
     b76:	466a      	mov	r2, sp
     b78:	324e      	adds	r2, #78	; 0x4e
     b7a:	4b81      	ldr	r3, [pc, #516]	; (d80 <usart_init+0x34c>)
     b7c:	9d09      	ldr	r5, [sp, #36]	; 0x24
     b7e:	58eb      	ldr	r3, [r5, r3]
     b80:	4798      	blx	r3
     b82:	1c03      	adds	r3, r0, #0
     b84:	e029      	b.n	bda <usart_init+0x1a6>
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
     b86:	2327      	movs	r3, #39	; 0x27
     b88:	9908      	ldr	r1, [sp, #32]
     b8a:	5ccb      	ldrb	r3, [r1, r3]
     b8c:	2b00      	cmp	r3, #0
     b8e:	d00f      	beq.n	bb0 <usart_init+0x17c>
				status_code =
     b90:	6a0a      	ldr	r2, [r1, #32]
     b92:	9207      	str	r2, [sp, #28]
     b94:	6a8b      	ldr	r3, [r1, #40]	; 0x28
     b96:	9306      	str	r3, [sp, #24]
     b98:	9700      	str	r7, [sp, #0]
     b9a:	1c10      	adds	r0, r2, #0
     b9c:	1c19      	adds	r1, r3, #0
     b9e:	466a      	mov	r2, sp
     ba0:	324e      	adds	r2, #78	; 0x4e
     ba2:	1c2b      	adds	r3, r5, #0
     ba4:	4d77      	ldr	r5, [pc, #476]	; (d84 <usart_init+0x350>)
     ba6:	9f09      	ldr	r7, [sp, #36]	; 0x24
     ba8:	597f      	ldr	r7, [r7, r5]
     baa:	47b8      	blx	r7
     bac:	1c03      	adds	r3, r0, #0
     bae:	e014      	b.n	bda <usart_init+0x1a6>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
     bb0:	9908      	ldr	r1, [sp, #32]
     bb2:	6a09      	ldr	r1, [r1, #32]
     bb4:	9110      	str	r1, [sp, #64]	; 0x40
     bb6:	b2c0      	uxtb	r0, r0
     bb8:	4b70      	ldr	r3, [pc, #448]	; (d7c <usart_init+0x348>)
     bba:	9a09      	ldr	r2, [sp, #36]	; 0x24
     bbc:	58d3      	ldr	r3, [r2, r3]
     bbe:	4798      	blx	r3
     bc0:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
     bc2:	9700      	str	r7, [sp, #0]
     bc4:	9810      	ldr	r0, [sp, #64]	; 0x40
     bc6:	466a      	mov	r2, sp
     bc8:	324e      	adds	r2, #78	; 0x4e
     bca:	1c2b      	adds	r3, r5, #0
     bcc:	4d6d      	ldr	r5, [pc, #436]	; (d84 <usart_init+0x350>)
     bce:	9f09      	ldr	r7, [sp, #36]	; 0x24
     bd0:	597f      	ldr	r7, [r7, r5]
     bd2:	47b8      	blx	r7
     bd4:	1c03      	adds	r3, r0, #0
     bd6:	e000      	b.n	bda <usart_init+0x1a6>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
     bd8:	2300      	movs	r3, #0
     bda:	1e18      	subs	r0, r3, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
     bdc:	d000      	beq.n	be0 <usart_init+0x1ac>
     bde:	e0b9      	b.n	d54 <usart_init+0x320>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
     be0:	9d08      	ldr	r5, [sp, #32]
     be2:	7e6b      	ldrb	r3, [r5, #25]
     be4:	2b00      	cmp	r3, #0
     be6:	d002      	beq.n	bee <usart_init+0x1ba>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     be8:	7eab      	ldrb	r3, [r5, #26]
     bea:	464f      	mov	r7, r9
     bec:	73bb      	strb	r3, [r7, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     bee:	6832      	ldr	r2, [r6, #0]
     bf0:	9f08      	ldr	r7, [sp, #32]
     bf2:	9d09      	ldr	r5, [sp, #36]	; 0x24

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     bf4:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     bf6:	2b00      	cmp	r3, #0
     bf8:	d1fc      	bne.n	bf4 <usart_init+0x1c0>
     bfa:	9708      	str	r7, [sp, #32]
     bfc:	9509      	str	r5, [sp, #36]	; 0x24

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
     bfe:	466b      	mov	r3, sp
     c00:	334e      	adds	r3, #78	; 0x4e
     c02:	881b      	ldrh	r3, [r3, #0]
     c04:	4648      	mov	r0, r9
     c06:	8183      	strh	r3, [r0, #12]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     c08:	990c      	ldr	r1, [sp, #48]	; 0x30
     c0a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
     c0c:	4329      	orrs	r1, r5
		(uint32_t)config->mux_setting |
     c0e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
     c10:	4339      	orrs	r1, r7
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     c12:	4650      	mov	r0, sl
     c14:	4301      	orrs	r1, r0
		config->sample_rate |
     c16:	4642      	mov	r2, r8
     c18:	4311      	orrs	r1, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     c1a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
     c1c:	022b      	lsls	r3, r5, #8
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     c1e:	4319      	orrs	r1, r3
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     c20:	465f      	mov	r7, fp
     c22:	077b      	lsls	r3, r7, #29

	/*Set baud val */
	usart_hw->BAUD.reg = baud;

	/* Set sample mode */
	ctrla |= transfer_mode;
     c24:	4319      	orrs	r1, r3

	if (config->use_external_clock == false) {
     c26:	2327      	movs	r3, #39	; 0x27
     c28:	9d08      	ldr	r5, [sp, #32]
     c2a:	5ceb      	ldrb	r3, [r5, r3]
     c2c:	2b00      	cmp	r3, #0
     c2e:	d101      	bne.n	c34 <usart_init+0x200>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     c30:	2304      	movs	r3, #4
     c32:	4319      	orrs	r1, r3
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     c34:	9d08      	ldr	r5, [sp, #32]
     c36:	7f28      	ldrb	r0, [r5, #28]
     c38:	0240      	lsls	r0, r0, #9
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     c3a:	7e6b      	ldrb	r3, [r5, #25]
     c3c:	029b      	lsls	r3, r3, #10
     c3e:	4318      	orrs	r0, r3
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     c40:	7f6b      	ldrb	r3, [r5, #29]
     c42:	021b      	lsls	r3, r3, #8
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     c44:	4318      	orrs	r0, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     c46:	2324      	movs	r3, #36	; 0x24
     c48:	5ceb      	ldrb	r3, [r5, r3]
     c4a:	045b      	lsls	r3, r3, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     c4c:	4318      	orrs	r0, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     c4e:	2325      	movs	r3, #37	; 0x25
     c50:	5ceb      	ldrb	r3, [r5, r3]
     c52:	041b      	lsls	r3, r3, #16
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     c54:	4318      	orrs	r0, r3
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->character_size;
     c56:	7aeb      	ldrb	r3, [r5, #11]
     c58:	4318      	orrs	r0, r3
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
     c5a:	892b      	ldrh	r3, [r5, #8]
     c5c:	2bff      	cmp	r3, #255	; 0xff
     c5e:	d004      	beq.n	c6a <usart_init+0x236>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     c60:	2280      	movs	r2, #128	; 0x80
     c62:	0452      	lsls	r2, r2, #17
     c64:	4311      	orrs	r1, r2
		ctrlb |= config->parity;
     c66:	4318      	orrs	r0, r3
     c68:	e006      	b.n	c78 <usart_init+0x244>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
     c6a:	9d08      	ldr	r5, [sp, #32]
     c6c:	7eeb      	ldrb	r3, [r5, #27]
     c6e:	2b00      	cmp	r3, #0
     c70:	d002      	beq.n	c78 <usart_init+0x244>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     c72:	2380      	movs	r3, #128	; 0x80
     c74:	04db      	lsls	r3, r3, #19
     c76:	4319      	orrs	r1, r3
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     c78:	232c      	movs	r3, #44	; 0x2c
     c7a:	9d08      	ldr	r5, [sp, #32]
     c7c:	5ceb      	ldrb	r3, [r5, r3]
     c7e:	2b00      	cmp	r3, #0
     c80:	d103      	bne.n	c8a <usart_init+0x256>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     c82:	4b41      	ldr	r3, [pc, #260]	; (d88 <usart_init+0x354>)
     c84:	789b      	ldrb	r3, [r3, #2]
     c86:	079f      	lsls	r7, r3, #30
     c88:	d501      	bpl.n	c8e <usart_init+0x25a>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     c8a:	2380      	movs	r3, #128	; 0x80
     c8c:	4319      	orrs	r1, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     c8e:	6832      	ldr	r2, [r6, #0]
     c90:	9f08      	ldr	r7, [sp, #32]
     c92:	9d09      	ldr	r5, [sp, #36]	; 0x24

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     c94:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     c96:	2b00      	cmp	r3, #0
     c98:	d1fc      	bne.n	c94 <usart_init+0x260>
     c9a:	9708      	str	r7, [sp, #32]
     c9c:	9509      	str	r5, [sp, #36]	; 0x24

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
     c9e:	464a      	mov	r2, r9
     ca0:	6050      	str	r0, [r2, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     ca2:	6832      	ldr	r2, [r6, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     ca4:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     ca6:	2b00      	cmp	r3, #0
     ca8:	d1fc      	bne.n	ca4 <usart_init+0x270>
     caa:	9708      	str	r7, [sp, #32]
     cac:	9509      	str	r5, [sp, #36]	; 0x24

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
     cae:	464b      	mov	r3, r9
     cb0:	6019      	str	r1, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     cb2:	2280      	movs	r2, #128	; 0x80
     cb4:	ab18      	add	r3, sp, #96	; 0x60
     cb6:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     cb8:	2200      	movs	r2, #0
     cba:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     cbc:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     cbe:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
     cc0:	6b3d      	ldr	r5, [r7, #48]	; 0x30
     cc2:	9514      	str	r5, [sp, #80]	; 0x50
     cc4:	6b7f      	ldr	r7, [r7, #52]	; 0x34
     cc6:	9715      	str	r7, [sp, #84]	; 0x54
     cc8:	9808      	ldr	r0, [sp, #32]
     cca:	6b80      	ldr	r0, [r0, #56]	; 0x38
     ccc:	9016      	str	r0, [sp, #88]	; 0x58
     cce:	9908      	ldr	r1, [sp, #32]
     cd0:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
     cd2:	9117      	str	r1, [sp, #92]	; 0x5c
     cd4:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     cd6:	aa18      	add	r2, sp, #96	; 0x60
     cd8:	9d09      	ldr	r5, [sp, #36]	; 0x24
     cda:	46a0      	mov	r8, r4
     cdc:	1c14      	adds	r4, r2, #0
     cde:	b2f9      	uxtb	r1, r7
     ce0:	00bb      	lsls	r3, r7, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
     ce2:	aa14      	add	r2, sp, #80	; 0x50
     ce4:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
     ce6:	2800      	cmp	r0, #0
     ce8:	d103      	bne.n	cf2 <usart_init+0x2be>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     cea:	4640      	mov	r0, r8
     cec:	4b27      	ldr	r3, [pc, #156]	; (d8c <usart_init+0x358>)
     cee:	58eb      	ldr	r3, [r5, r3]
     cf0:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
     cf2:	1c43      	adds	r3, r0, #1
     cf4:	d006      	beq.n	d04 <usart_init+0x2d0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     cf6:	7020      	strb	r0, [r4, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     cf8:	0c00      	lsrs	r0, r0, #16
     cfa:	b2c0      	uxtb	r0, r0
     cfc:	1c21      	adds	r1, r4, #0
     cfe:	4b24      	ldr	r3, [pc, #144]	; (d90 <usart_init+0x35c>)
     d00:	58eb      	ldr	r3, [r5, r3]
     d02:	4798      	blx	r3
     d04:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     d06:	2f04      	cmp	r7, #4
     d08:	d1e9      	bne.n	cde <usart_init+0x2aa>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
     d0a:	2300      	movs	r3, #0
     d0c:	60f3      	str	r3, [r6, #12]
     d0e:	6133      	str	r3, [r6, #16]
     d10:	6173      	str	r3, [r6, #20]
     d12:	61b3      	str	r3, [r6, #24]
     d14:	61f3      	str	r3, [r6, #28]
     d16:	6233      	str	r3, [r6, #32]
	}

	module->tx_buffer_ptr              = NULL;
     d18:	62b3      	str	r3, [r6, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     d1a:	6273      	str	r3, [r6, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     d1c:	2200      	movs	r2, #0
     d1e:	85f3      	strh	r3, [r6, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     d20:	85b3      	strh	r3, [r6, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     d22:	2330      	movs	r3, #48	; 0x30
     d24:	54f2      	strb	r2, [r6, r3]
	module->callback_enable_mask       = 0x00;
     d26:	2331      	movs	r3, #49	; 0x31
     d28:	54f2      	strb	r2, [r6, r3]
	module->rx_status                  = STATUS_OK;
     d2a:	2332      	movs	r3, #50	; 0x32
     d2c:	54f2      	strb	r2, [r6, r3]
	module->tx_status                  = STATUS_OK;
     d2e:	2333      	movs	r3, #51	; 0x33
     d30:	54f2      	strb	r2, [r6, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     d32:	6830      	ldr	r0, [r6, #0]
     d34:	4b0c      	ldr	r3, [pc, #48]	; (d68 <usart_init+0x334>)
     d36:	58eb      	ldr	r3, [r5, r3]
     d38:	4798      	blx	r3
     d3a:	1c04      	adds	r4, r0, #0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     d3c:	4b15      	ldr	r3, [pc, #84]	; (d94 <usart_init+0x360>)
     d3e:	58eb      	ldr	r3, [r5, r3]
     d40:	930a      	str	r3, [sp, #40]	; 0x28
     d42:	1c19      	adds	r1, r3, #0
     d44:	4b14      	ldr	r3, [pc, #80]	; (d98 <usart_init+0x364>)
     d46:	58eb      	ldr	r3, [r5, r3]
     d48:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     d4a:	4b14      	ldr	r3, [pc, #80]	; (d9c <usart_init+0x368>)
     d4c:	58eb      	ldr	r3, [r5, r3]
     d4e:	00a4      	lsls	r4, r4, #2
     d50:	50e6      	str	r6, [r4, r3]
#endif

	return status_code;
     d52:	2000      	movs	r0, #0
}
     d54:	b01b      	add	sp, #108	; 0x6c
     d56:	bc3c      	pop	{r2, r3, r4, r5}
     d58:	4690      	mov	r8, r2
     d5a:	4699      	mov	r9, r3
     d5c:	46a2      	mov	sl, r4
     d5e:	46ab      	mov	fp, r5
     d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d62:	46c0      	nop			; (mov r8, r8)
     d64:	00005fee 	.word	0x00005fee
     d68:	00000258 	.word	0x00000258
     d6c:	40000400 	.word	0x40000400
     d70:	00000088 	.word	0x00000088
     d74:	000001c0 	.word	0x000001c0
     d78:	000001bc 	.word	0x000001bc
     d7c:	00000138 	.word	0x00000138
     d80:	000000d4 	.word	0x000000d4
     d84:	00000020 	.word	0x00000020
     d88:	41002000 	.word	0x41002000
     d8c:	00000278 	.word	0x00000278
     d90:	00000264 	.word	0x00000264
     d94:	000001d0 	.word	0x000001d0
     d98:	00000114 	.word	0x00000114
     d9c:	00000104 	.word	0x00000104

00000da0 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
     da0:	b5f0      	push	{r4, r5, r6, r7, lr}
     da2:	4647      	mov	r7, r8
     da4:	b480      	push	{r7}
     da6:	b082      	sub	sp, #8
     da8:	1c05      	adds	r5, r0, #0
     daa:	1c0f      	adds	r7, r1, #0
     dac:	4690      	mov	r8, r2
     dae:	4c0f      	ldr	r4, [pc, #60]	; (dec <_usart_write_buffer+0x4c>)
     db0:	447c      	add	r4, pc
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     db2:	6806      	ldr	r6, [r0, #0]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     db4:	4b0e      	ldr	r3, [pc, #56]	; (df0 <_usart_write_buffer+0x50>)
     db6:	58e3      	ldr	r3, [r4, r3]
     db8:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
     dba:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     dbc:	b29b      	uxth	r3, r3
     dbe:	2b00      	cmp	r3, #0
     dc0:	d004      	beq.n	dcc <_usart_write_buffer+0x2c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     dc2:	4b0c      	ldr	r3, [pc, #48]	; (df4 <_usart_write_buffer+0x54>)
     dc4:	58e3      	ldr	r3, [r4, r3]
     dc6:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
     dc8:	2005      	movs	r0, #5
     dca:	e00b      	b.n	de4 <_usart_write_buffer+0x44>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
     dcc:	4643      	mov	r3, r8
     dce:	85eb      	strh	r3, [r5, #46]	; 0x2e
     dd0:	4b08      	ldr	r3, [pc, #32]	; (df4 <_usart_write_buffer+0x54>)
     dd2:	58e3      	ldr	r3, [r4, r3]
     dd4:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	module->tx_buffer_ptr              = tx_data;
     dd6:	62af      	str	r7, [r5, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
     dd8:	2205      	movs	r2, #5
     dda:	2333      	movs	r3, #51	; 0x33
     ddc:	54ea      	strb	r2, [r5, r3]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
     dde:	2301      	movs	r3, #1
     de0:	75b3      	strb	r3, [r6, #22]

	return STATUS_OK;
     de2:	2000      	movs	r0, #0
}
     de4:	b002      	add	sp, #8
     de6:	bc04      	pop	{r2}
     de8:	4690      	mov	r8, r2
     dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
     dec:	00005c88 	.word	0x00005c88
     df0:	000000a0 	.word	0x000000a0
     df4:	00000008 	.word	0x00000008

00000df8 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
     df8:	b5f0      	push	{r4, r5, r6, r7, lr}
     dfa:	4647      	mov	r7, r8
     dfc:	b480      	push	{r7}
     dfe:	b082      	sub	sp, #8
     e00:	1c04      	adds	r4, r0, #0
     e02:	1c0f      	adds	r7, r1, #0
     e04:	4690      	mov	r8, r2
     e06:	4d14      	ldr	r5, [pc, #80]	; (e58 <_usart_read_buffer+0x60>)
     e08:	447d      	add	r5, pc
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     e0a:	6806      	ldr	r6, [r0, #0]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     e0c:	4b13      	ldr	r3, [pc, #76]	; (e5c <_usart_read_buffer+0x64>)
     e0e:	58eb      	ldr	r3, [r5, r3]
     e10:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
     e12:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
     e14:	b29b      	uxth	r3, r3
     e16:	2b00      	cmp	r3, #0
     e18:	d004      	beq.n	e24 <_usart_read_buffer+0x2c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     e1a:	4b11      	ldr	r3, [pc, #68]	; (e60 <_usart_read_buffer+0x68>)
     e1c:	58eb      	ldr	r3, [r5, r3]
     e1e:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
     e20:	2005      	movs	r0, #5
     e22:	e015      	b.n	e50 <_usart_read_buffer+0x58>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
     e24:	4643      	mov	r3, r8
     e26:	85a3      	strh	r3, [r4, #44]	; 0x2c
     e28:	4b0d      	ldr	r3, [pc, #52]	; (e60 <_usart_read_buffer+0x68>)
     e2a:	58eb      	ldr	r3, [r5, r3]
     e2c:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	module->rx_buffer_ptr              = rx_data;
     e2e:	6267      	str	r7, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
     e30:	2205      	movs	r2, #5
     e32:	2332      	movs	r3, #50	; 0x32
     e34:	54e2      	strb	r2, [r4, r3]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
     e36:	2304      	movs	r3, #4
     e38:	75b3      	strb	r3, [r6, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
     e3a:	7a23      	ldrb	r3, [r4, #8]
     e3c:	2b00      	cmp	r3, #0
     e3e:	d001      	beq.n	e44 <_usart_read_buffer+0x4c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
     e40:	2320      	movs	r3, #32
     e42:	75b3      	strb	r3, [r6, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
     e44:	7a63      	ldrb	r3, [r4, #9]
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
     e46:	2000      	movs	r0, #0
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
     e48:	2b00      	cmp	r3, #0
     e4a:	d001      	beq.n	e50 <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
     e4c:	2308      	movs	r3, #8
     e4e:	75b3      	strb	r3, [r6, #22]
	}
#endif

	return STATUS_OK;
}
     e50:	b002      	add	sp, #8
     e52:	bc04      	pop	{r2}
     e54:	4690      	mov	r8, r2
     e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e58:	00005c30 	.word	0x00005c30
     e5c:	000000a0 	.word	0x000000a0
     e60:	00000008 	.word	0x00000008

00000e64 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     e64:	1c93      	adds	r3, r2, #2
     e66:	009b      	lsls	r3, r3, #2
     e68:	18c3      	adds	r3, r0, r3
     e6a:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
     e6c:	2301      	movs	r3, #1
     e6e:	4093      	lsls	r3, r2
     e70:	1c1a      	adds	r2, r3, #0
     e72:	2330      	movs	r3, #48	; 0x30
     e74:	5cc1      	ldrb	r1, [r0, r3]
     e76:	430a      	orrs	r2, r1
     e78:	54c2      	strb	r2, [r0, r3]
}
     e7a:	4770      	bx	lr

00000e7c <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
     e7c:	b530      	push	{r4, r5, lr}
     e7e:	b083      	sub	sp, #12
     e80:	4c07      	ldr	r4, [pc, #28]	; (ea0 <usart_write_buffer_job+0x24>)
     e82:	447c      	add	r4, pc
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     e84:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
     e86:	2a00      	cmp	r2, #0
     e88:	d007      	beq.n	e9a <usart_write_buffer_job+0x1e>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->transmitter_enabled)) {
     e8a:	79c5      	ldrb	r5, [r0, #7]
		return STATUS_ERR_DENIED;
     e8c:	231c      	movs	r3, #28
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->transmitter_enabled)) {
     e8e:	2d00      	cmp	r5, #0
     e90:	d003      	beq.n	e9a <usart_write_buffer_job+0x1e>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
     e92:	4b04      	ldr	r3, [pc, #16]	; (ea4 <usart_write_buffer_job+0x28>)
     e94:	58e3      	ldr	r3, [r4, r3]
     e96:	4798      	blx	r3
     e98:	1c03      	adds	r3, r0, #0
}
     e9a:	1c18      	adds	r0, r3, #0
     e9c:	b003      	add	sp, #12
     e9e:	bd30      	pop	{r4, r5, pc}
     ea0:	00005bb6 	.word	0x00005bb6
     ea4:	000000b4 	.word	0x000000b4

00000ea8 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
     ea8:	b530      	push	{r4, r5, lr}
     eaa:	b083      	sub	sp, #12
     eac:	4c07      	ldr	r4, [pc, #28]	; (ecc <usart_read_buffer_job+0x24>)
     eae:	447c      	add	r4, pc
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     eb0:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
     eb2:	2a00      	cmp	r2, #0
     eb4:	d007      	beq.n	ec6 <usart_read_buffer_job+0x1e>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     eb6:	7985      	ldrb	r5, [r0, #6]
		return STATUS_ERR_DENIED;
     eb8:	231c      	movs	r3, #28
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     eba:	2d00      	cmp	r5, #0
     ebc:	d003      	beq.n	ec6 <usart_read_buffer_job+0x1e>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
     ebe:	4b04      	ldr	r3, [pc, #16]	; (ed0 <usart_read_buffer_job+0x28>)
     ec0:	58e3      	ldr	r3, [r4, r3]
     ec2:	4798      	blx	r3
     ec4:	1c03      	adds	r3, r0, #0
}
     ec6:	1c18      	adds	r0, r3, #0
     ec8:	b003      	add	sp, #12
     eca:	bd30      	pop	{r4, r5, pc}
     ecc:	00005b8a 	.word	0x00005b8a
     ed0:	000000cc 	.word	0x000000cc

00000ed4 <usart_abort_job>:
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     ed4:	6803      	ldr	r3, [r0, #0]

	switch(transceiver_type) {
     ed6:	2900      	cmp	r1, #0
     ed8:	d002      	beq.n	ee0 <usart_abort_job+0xc>
     eda:	2901      	cmp	r1, #1
     edc:	d005      	beq.n	eea <usart_abort_job+0x16>
     ede:	e008      	b.n	ef2 <usart_abort_job+0x1e>
		case USART_TRANSCEIVER_RX:
			/* Clear the interrupt flag in order to prevent the receive
			 * complete callback to fire */
			usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXC;
     ee0:	2204      	movs	r2, #4
     ee2:	761a      	strb	r2, [r3, #24]

			/* Clear the software reception buffer */
			module->remaining_rx_buffer_length = 0;
     ee4:	2300      	movs	r3, #0
     ee6:	8583      	strh	r3, [r0, #44]	; 0x2c

			break;
     ee8:	e003      	b.n	ef2 <usart_abort_job+0x1e>

		case USART_TRANSCEIVER_TX:
			/* Clear the interrupt flag in order to prevent the receive
			 * complete callback to fire */
			usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_TXC;
     eea:	2202      	movs	r2, #2
     eec:	761a      	strb	r2, [r3, #24]

			/* Clear the software reception buffer */
			module->remaining_tx_buffer_length = 0;
     eee:	2300      	movs	r3, #0
     ef0:	85c3      	strh	r3, [r0, #46]	; 0x2e

			break;
	}
}
     ef2:	4770      	bx	lr

00000ef4 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
     ef6:	b083      	sub	sp, #12
     ef8:	4b66      	ldr	r3, [pc, #408]	; (1094 <_usart_interrupt_handler+0x1a0>)
     efa:	447b      	add	r3, pc
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     efc:	4a66      	ldr	r2, [pc, #408]	; (1098 <_usart_interrupt_handler+0x1a4>)
     efe:	589a      	ldr	r2, [r3, r2]
     f00:	0080      	lsls	r0, r0, #2
     f02:	5885      	ldr	r5, [r0, r2]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     f04:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     f06:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     f08:	2b00      	cmp	r3, #0
     f0a:	d1fc      	bne.n	f06 <_usart_interrupt_handler+0x12>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     f0c:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     f0e:	7da6      	ldrb	r6, [r4, #22]
     f10:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
			module->callback_enable_mask;
     f12:	2331      	movs	r3, #49	; 0x31
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
     f14:	5ceb      	ldrb	r3, [r5, r3]
     f16:	2230      	movs	r2, #48	; 0x30
     f18:	5caf      	ldrb	r7, [r5, r2]
     f1a:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     f1c:	07f1      	lsls	r1, r6, #31
     f1e:	d520      	bpl.n	f62 <_usart_interrupt_handler+0x6e>
		if (module->remaining_tx_buffer_length) {
     f20:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     f22:	b29b      	uxth	r3, r3
     f24:	2b00      	cmp	r3, #0
     f26:	d01a      	beq.n	f5e <_usart_interrupt_handler+0x6a>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     f28:	6aab      	ldr	r3, [r5, #40]	; 0x28
     f2a:	781a      	ldrb	r2, [r3, #0]
     f2c:	b2d2      	uxtb	r2, r2
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     f2e:	1c59      	adds	r1, r3, #1
     f30:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     f32:	7969      	ldrb	r1, [r5, #5]
     f34:	2901      	cmp	r1, #1
     f36:	d104      	bne.n	f42 <_usart_interrupt_handler+0x4e>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     f38:	7859      	ldrb	r1, [r3, #1]
     f3a:	0209      	lsls	r1, r1, #8
     f3c:	430a      	orrs	r2, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
     f3e:	3302      	adds	r3, #2
     f40:	62ab      	str	r3, [r5, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     f42:	05d3      	lsls	r3, r2, #23
     f44:	0ddb      	lsrs	r3, r3, #23
     f46:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     f48:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     f4a:	3b01      	subs	r3, #1
     f4c:	b29b      	uxth	r3, r3
     f4e:	85eb      	strh	r3, [r5, #46]	; 0x2e
     f50:	2b00      	cmp	r3, #0
     f52:	d106      	bne.n	f62 <_usart_interrupt_handler+0x6e>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     f54:	2301      	movs	r3, #1
     f56:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     f58:	2302      	movs	r3, #2
     f5a:	75a3      	strb	r3, [r4, #22]
     f5c:	e001      	b.n	f62 <_usart_interrupt_handler+0x6e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     f5e:	2301      	movs	r3, #1
     f60:	7523      	strb	r3, [r4, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     f62:	07b2      	lsls	r2, r6, #30
     f64:	d509      	bpl.n	f7a <_usart_interrupt_handler+0x86>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     f66:	2302      	movs	r3, #2
     f68:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
     f6a:	2200      	movs	r2, #0
     f6c:	2333      	movs	r3, #51	; 0x33
     f6e:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     f70:	07fb      	lsls	r3, r7, #31
     f72:	d502      	bpl.n	f7a <_usart_interrupt_handler+0x86>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     f74:	1c28      	adds	r0, r5, #0
     f76:	68e9      	ldr	r1, [r5, #12]
     f78:	4788      	blx	r1

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     f7a:	0772      	lsls	r2, r6, #29
     f7c:	d56a      	bpl.n	1054 <_usart_interrupt_handler+0x160>

		if (module->remaining_rx_buffer_length) {
     f7e:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     f80:	b29b      	uxth	r3, r3
     f82:	2b00      	cmp	r3, #0
     f84:	d064      	beq.n	1050 <_usart_interrupt_handler+0x15c>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     f86:	8b63      	ldrh	r3, [r4, #26]
     f88:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     f8a:	0719      	lsls	r1, r3, #28
     f8c:	d402      	bmi.n	f94 <_usart_interrupt_handler+0xa0>

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {

		if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     f8e:	223f      	movs	r2, #63	; 0x3f
     f90:	4013      	ands	r3, r2
     f92:	e001      	b.n	f98 <_usart_interrupt_handler+0xa4>
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
				error_code &= ~SERCOM_USART_STATUS_CTS;
     f94:	2237      	movs	r2, #55	; 0x37
     f96:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     f98:	2b00      	cmp	r3, #0
     f9a:	d037      	beq.n	100c <_usart_interrupt_handler+0x118>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     f9c:	079a      	lsls	r2, r3, #30
     f9e:	d507      	bpl.n	fb0 <_usart_interrupt_handler+0xbc>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     fa0:	221a      	movs	r2, #26
     fa2:	2332      	movs	r3, #50	; 0x32
     fa4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
     fa6:	8b62      	ldrh	r2, [r4, #26]
     fa8:	2302      	movs	r3, #2
     faa:	4313      	orrs	r3, r2
     fac:	8363      	strh	r3, [r4, #26]
     fae:	e027      	b.n	1000 <_usart_interrupt_handler+0x10c>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     fb0:	0759      	lsls	r1, r3, #29
     fb2:	d507      	bpl.n	fc4 <_usart_interrupt_handler+0xd0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
     fb4:	221e      	movs	r2, #30
     fb6:	2332      	movs	r3, #50	; 0x32
     fb8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
     fba:	8b62      	ldrh	r2, [r4, #26]
     fbc:	2304      	movs	r3, #4
     fbe:	4313      	orrs	r3, r2
     fc0:	8363      	strh	r3, [r4, #26]
     fc2:	e01d      	b.n	1000 <_usart_interrupt_handler+0x10c>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     fc4:	07da      	lsls	r2, r3, #31
     fc6:	d507      	bpl.n	fd8 <_usart_interrupt_handler+0xe4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
     fc8:	2213      	movs	r2, #19
     fca:	2332      	movs	r3, #50	; 0x32
     fcc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
     fce:	8b62      	ldrh	r2, [r4, #26]
     fd0:	2301      	movs	r3, #1
     fd2:	4313      	orrs	r3, r2
     fd4:	8363      	strh	r3, [r4, #26]
     fd6:	e013      	b.n	1000 <_usart_interrupt_handler+0x10c>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     fd8:	06d9      	lsls	r1, r3, #27
     fda:	d507      	bpl.n	fec <_usart_interrupt_handler+0xf8>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
     fdc:	2242      	movs	r2, #66	; 0x42
     fde:	2332      	movs	r3, #50	; 0x32
     fe0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
     fe2:	8b62      	ldrh	r2, [r4, #26]
     fe4:	2310      	movs	r3, #16
     fe6:	4313      	orrs	r3, r2
     fe8:	8363      	strh	r3, [r4, #26]
     fea:	e009      	b.n	1000 <_usart_interrupt_handler+0x10c>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     fec:	2220      	movs	r2, #32
     fee:	421a      	tst	r2, r3
     ff0:	d006      	beq.n	1000 <_usart_interrupt_handler+0x10c>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
     ff2:	2241      	movs	r2, #65	; 0x41
     ff4:	2332      	movs	r3, #50	; 0x32
     ff6:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
     ff8:	8b62      	ldrh	r2, [r4, #26]
     ffa:	2320      	movs	r3, #32
     ffc:	4313      	orrs	r3, r2
     ffe:	8363      	strh	r3, [r4, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    1000:	077a      	lsls	r2, r7, #29
    1002:	d527      	bpl.n	1054 <_usart_interrupt_handler+0x160>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    1004:	1c28      	adds	r0, r5, #0
    1006:	696b      	ldr	r3, [r5, #20]
    1008:	4798      	blx	r3
    100a:	e023      	b.n	1054 <_usart_interrupt_handler+0x160>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    100c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    100e:	05d2      	lsls	r2, r2, #23
    1010:	0dd2      	lsrs	r2, r2, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    1012:	b2d3      	uxtb	r3, r2
    1014:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1016:	700b      	strb	r3, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    1018:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    101a:	1c59      	adds	r1, r3, #1
    101c:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    101e:	7969      	ldrb	r1, [r5, #5]
    1020:	2901      	cmp	r1, #1
    1022:	d104      	bne.n	102e <_usart_interrupt_handler+0x13a>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1024:	0a12      	lsrs	r2, r2, #8
    1026:	705a      	strb	r2, [r3, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    1028:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    102a:	3301      	adds	r3, #1
    102c:	626b      	str	r3, [r5, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    102e:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1030:	3b01      	subs	r3, #1
    1032:	b29b      	uxth	r3, r3
    1034:	85ab      	strh	r3, [r5, #44]	; 0x2c
    1036:	2b00      	cmp	r3, #0
    1038:	d10c      	bne.n	1054 <_usart_interrupt_handler+0x160>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    103a:	2304      	movs	r3, #4
    103c:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    103e:	2200      	movs	r2, #0
    1040:	2332      	movs	r3, #50	; 0x32
    1042:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    1044:	07ba      	lsls	r2, r7, #30
    1046:	d505      	bpl.n	1054 <_usart_interrupt_handler+0x160>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    1048:	1c28      	adds	r0, r5, #0
    104a:	692b      	ldr	r3, [r5, #16]
    104c:	4798      	blx	r3
    104e:	e001      	b.n	1054 <_usart_interrupt_handler+0x160>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1050:	2304      	movs	r3, #4
    1052:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1054:	06f1      	lsls	r1, r6, #27
    1056:	d507      	bpl.n	1068 <_usart_interrupt_handler+0x174>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    1058:	2310      	movs	r3, #16
    105a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    105c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    105e:	06fa      	lsls	r2, r7, #27
    1060:	d502      	bpl.n	1068 <_usart_interrupt_handler+0x174>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    1062:	1c28      	adds	r0, r5, #0
    1064:	69eb      	ldr	r3, [r5, #28]
    1066:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    1068:	06b1      	lsls	r1, r6, #26
    106a:	d507      	bpl.n	107c <_usart_interrupt_handler+0x188>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    106c:	2320      	movs	r3, #32
    106e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    1070:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    1072:	073a      	lsls	r2, r7, #28
    1074:	d502      	bpl.n	107c <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    1076:	1c28      	adds	r0, r5, #0
    1078:	69ab      	ldr	r3, [r5, #24]
    107a:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    107c:	0731      	lsls	r1, r6, #28
    107e:	d507      	bpl.n	1090 <_usart_interrupt_handler+0x19c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1080:	2308      	movs	r3, #8
    1082:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1084:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    1086:	06ba      	lsls	r2, r7, #26
    1088:	d502      	bpl.n	1090 <_usart_interrupt_handler+0x19c>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    108a:	6a2b      	ldr	r3, [r5, #32]
    108c:	1c28      	adds	r0, r5, #0
    108e:	4798      	blx	r3
		}
	}
#endif
}
    1090:	b003      	add	sp, #12
    1092:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1094:	00005b3e 	.word	0x00005b3e
    1098:	00000104 	.word	0x00000104

0000109c <vTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., NTask) in trcConfig.h is too small.
 ******************************************************************************/
void vTraceError(const char* msg)
{
    109c:	b510      	push	{r4, lr}
    109e:	b082      	sub	sp, #8
    10a0:	1c01      	adds	r1, r0, #0
    10a2:	4c16      	ldr	r4, [pc, #88]	; (10fc <vTraceError+0x60>)
    10a4:	447c      	add	r4, pc
	TRACE_ASSERT(msg != NULL, "vTraceError: msg == NULL", );
    10a6:	2800      	cmp	r0, #0
    10a8:	d105      	bne.n	10b6 <vTraceError+0x1a>
    10aa:	4815      	ldr	r0, [pc, #84]	; (1100 <vTraceError+0x64>)
    10ac:	4478      	add	r0, pc
    10ae:	4b15      	ldr	r3, [pc, #84]	; (1104 <vTraceError+0x68>)
    10b0:	58e3      	ldr	r3, [r4, r3]
    10b2:	4798      	blx	r3
    10b4:	e020      	b.n	10f8 <vTraceError+0x5c>
	TRACE_ASSERT(RecorderDataPtr != NULL, "vTraceError: RecorderDataPtr == NULL", );
    10b6:	4b14      	ldr	r3, [pc, #80]	; (1108 <vTraceError+0x6c>)
    10b8:	58e3      	ldr	r3, [r4, r3]
    10ba:	681b      	ldr	r3, [r3, #0]
    10bc:	2b00      	cmp	r3, #0
    10be:	d105      	bne.n	10cc <vTraceError+0x30>
    10c0:	4812      	ldr	r0, [pc, #72]	; (110c <vTraceError+0x70>)
    10c2:	4478      	add	r0, pc
    10c4:	4b0f      	ldr	r3, [pc, #60]	; (1104 <vTraceError+0x68>)
    10c6:	58e3      	ldr	r3, [r4, r3]
    10c8:	4798      	blx	r3
    10ca:	e015      	b.n	10f8 <vTraceError+0x5c>

	/* Stop the recorder. Note: We do not call vTraceStop, since that adds a weird
	and unnecessary dependency to trcUser.c */

	RecorderDataPtr->recorderActive = 0;
    10cc:	2200      	movs	r2, #0
    10ce:	631a      	str	r2, [r3, #48]	; 0x30

	if (traceErrorMessage == NULL)
    10d0:	4a0f      	ldr	r2, [pc, #60]	; (1110 <vTraceError+0x74>)
    10d2:	58a2      	ldr	r2, [r4, r2]
    10d4:	6812      	ldr	r2, [r2, #0]
    10d6:	2a00      	cmp	r2, #0
    10d8:	d10e      	bne.n	10f8 <vTraceError+0x5c>
	{
		traceErrorMessage = (char*)msg;
    10da:	4a0d      	ldr	r2, [pc, #52]	; (1110 <vTraceError+0x74>)
    10dc:	58a2      	ldr	r2, [r4, r2]
    10de:	6010      	str	r0, [r2, #0]
		(void)strncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
    10e0:	4a0c      	ldr	r2, [pc, #48]	; (1114 <vTraceError+0x78>)
    10e2:	1898      	adds	r0, r3, r2
    10e4:	2250      	movs	r2, #80	; 0x50
    10e6:	4b0c      	ldr	r3, [pc, #48]	; (1118 <vTraceError+0x7c>)
    10e8:	58e3      	ldr	r3, [r4, r3]
    10ea:	4798      	blx	r3
		RecorderDataPtr->internalErrorOccured = 1;	 	 
    10ec:	4b06      	ldr	r3, [pc, #24]	; (1108 <vTraceError+0x6c>)
    10ee:	58e3      	ldr	r3, [r4, r3]
    10f0:	681a      	ldr	r2, [r3, #0]
    10f2:	2101      	movs	r1, #1
    10f4:	4b09      	ldr	r3, [pc, #36]	; (111c <vTraceError+0x80>)
    10f6:	50d1      	str	r1, [r2, r3]
	}
	
}
    10f8:	b002      	add	sp, #8
    10fa:	bd10      	pop	{r4, pc}
    10fc:	00005994 	.word	0x00005994
    1100:	000049c0 	.word	0x000049c0
    1104:	0000010c 	.word	0x0000010c
    1108:	00000024 	.word	0x00000024
    110c:	000049d2 	.word	0x000049d2
    1110:	00000250 	.word	0x00000250
    1114:	000007dc 	.word	0x000007dc
    1118:	00000148 	.word	0x00000148
    111c:	000007d4 	.word	0x000007d4

00001120 <prvTraceInitTraceData>:

RecorderDataType* RecorderDataPtr = NULL;

/* This version of the function dynamically allocates the trace data */
void prvTraceInitTraceData()
{		
    1120:	b5f0      	push	{r4, r5, r6, r7, lr}
    1122:	465f      	mov	r7, fp
    1124:	4656      	mov	r6, sl
    1126:	464d      	mov	r5, r9
    1128:	4644      	mov	r4, r8
    112a:	b4f0      	push	{r4, r5, r6, r7}
    112c:	b083      	sub	sp, #12
    112e:	4d51      	ldr	r5, [pc, #324]	; (1274 <prvTraceInitTraceData+0x154>)
    1130:	447d      	add	r5, pc
	init_hwtc_count = HWTC_COUNT;
    1132:	4b51      	ldr	r3, [pc, #324]	; (1278 <prvTraceInitTraceData+0x158>)
    1134:	681a      	ldr	r2, [r3, #0]
    1136:	4b51      	ldr	r3, [pc, #324]	; (127c <prvTraceInitTraceData+0x15c>)
    1138:	58eb      	ldr	r3, [r5, r3]
    113a:	601a      	str	r2, [r3, #0]
	
#if TRACE_DATA_ALLOCATION == TRACE_DATA_ALLOCATION_STATIC
	RecorderDataPtr = &RecorderData;
    113c:	4b50      	ldr	r3, [pc, #320]	; (1280 <prvTraceInitTraceData+0x160>)
    113e:	58ee      	ldr	r6, [r5, r3]
    1140:	4b50      	ldr	r3, [pc, #320]	; (1284 <prvTraceInitTraceData+0x164>)
    1142:	58ec      	ldr	r4, [r5, r3]
    1144:	6034      	str	r4, [r6, #0]
	{
		vTraceError("No recorder data structure allocated!");
		return;
	}
		
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
    1146:	23bf      	movs	r3, #191	; 0xbf
    1148:	015b      	lsls	r3, r3, #5
    114a:	469b      	mov	fp, r3
    114c:	1c20      	adds	r0, r4, #0
    114e:	2100      	movs	r1, #0
    1150:	1c1a      	adds	r2, r3, #0
    1152:	4b4d      	ldr	r3, [pc, #308]	; (1288 <prvTraceInitTraceData+0x168>)
    1154:	58eb      	ldr	r3, [r5, r3]
    1156:	4798      	blx	r3

	RecorderDataPtr->startmarker0 = 0x00;
	RecorderDataPtr->startmarker1 = 0x01;
    1158:	2101      	movs	r1, #1
    115a:	468a      	mov	sl, r1
    115c:	7061      	strb	r1, [r4, #1]
	RecorderDataPtr->startmarker2 = 0x02;
    115e:	2302      	movs	r3, #2
    1160:	70a3      	strb	r3, [r4, #2]
	RecorderDataPtr->startmarker3 = 0x03;
    1162:	2303      	movs	r3, #3
    1164:	70e3      	strb	r3, [r4, #3]
	RecorderDataPtr->startmarker4 = 0x70;
    1166:	2370      	movs	r3, #112	; 0x70
    1168:	7123      	strb	r3, [r4, #4]
	RecorderDataPtr->startmarker5 = 0x71;
    116a:	2371      	movs	r3, #113	; 0x71
    116c:	4699      	mov	r9, r3
    116e:	7163      	strb	r3, [r4, #5]
	RecorderDataPtr->startmarker6 = 0x72;
    1170:	2272      	movs	r2, #114	; 0x72
    1172:	4690      	mov	r8, r2
    1174:	71a2      	strb	r2, [r4, #6]
	RecorderDataPtr->startmarker7 = 0x73;
    1176:	2773      	movs	r7, #115	; 0x73
    1178:	71e7      	strb	r7, [r4, #7]
	RecorderDataPtr->startmarker8 = 0xF0;
    117a:	23f0      	movs	r3, #240	; 0xf0
    117c:	7223      	strb	r3, [r4, #8]
	RecorderDataPtr->startmarker9 = 0xF1;
    117e:	210f      	movs	r1, #15
    1180:	4249      	negs	r1, r1
    1182:	7261      	strb	r1, [r4, #9]
	RecorderDataPtr->startmarker10 = 0xF2;
    1184:	220e      	movs	r2, #14
    1186:	4252      	negs	r2, r2
    1188:	72a2      	strb	r2, [r4, #10]
	RecorderDataPtr->startmarker11 = 0xF3;
    118a:	230d      	movs	r3, #13
    118c:	425b      	negs	r3, r3
    118e:	72e3      	strb	r3, [r4, #11]

	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
    1190:	4b3e      	ldr	r3, [pc, #248]	; (128c <prvTraceInitTraceData+0x16c>)
    1192:	81a3      	strh	r3, [r4, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
    1194:	2304      	movs	r3, #4
    1196:	73a3      	strb	r3, [r4, #14]
	RecorderDataPtr->irq_priority_order = IRQ_PRIORITY_ORDER;
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
    1198:	4659      	mov	r1, fp
    119a:	6121      	str	r1, [r4, #16]

	RecorderDataPtr->maxEvents = EVENT_BUFFER_SIZE;
    119c:	23fa      	movs	r3, #250	; 0xfa
    119e:	009b      	lsls	r3, r3, #2
    11a0:	61a3      	str	r3, [r4, #24]

	RecorderDataPtr->debugMarker0 = 0xF0F0F0F0;
    11a2:	4b3b      	ldr	r3, [pc, #236]	; (1290 <prvTraceInitTraceData+0x170>)
    11a4:	6563      	str	r3, [r4, #84]	; 0x54

	RecorderDataPtr->isUsing16bitHandles = USE_16BIT_OBJECT_HANDLES;

	/* This function is kernel specific */
	vTraceInitObjectPropertyTable();
    11a6:	4b3b      	ldr	r3, [pc, #236]	; (1294 <prvTraceInitTraceData+0x174>)
    11a8:	58eb      	ldr	r3, [r5, r3]
    11aa:	4798      	blx	r3

	RecorderDataPtr->debugMarker1 = 0xF1F1F1F1;
    11ac:	6830      	ldr	r0, [r6, #0]
    11ae:	4a3a      	ldr	r2, [pc, #232]	; (1298 <prvTraceInitTraceData+0x178>)
    11b0:	4b3a      	ldr	r3, [pc, #232]	; (129c <prvTraceInitTraceData+0x17c>)
    11b2:	50c2      	str	r2, [r0, r3]
	RecorderDataPtr->SymbolTable.symTableSize = SYMBOL_TABLE_SIZE;
    11b4:	22c8      	movs	r2, #200	; 0xc8
    11b6:	0092      	lsls	r2, r2, #2
    11b8:	2385      	movs	r3, #133	; 0x85
    11ba:	00db      	lsls	r3, r3, #3
    11bc:	50c2      	str	r2, [r0, r3]
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
    11be:	4b38      	ldr	r3, [pc, #224]	; (12a0 <prvTraceInitTraceData+0x180>)
    11c0:	4652      	mov	r2, sl
    11c2:	50c2      	str	r2, [r0, r3]
#if (INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
    11c4:	22fe      	movs	r2, #254	; 0xfe
    11c6:	0592      	lsls	r2, r2, #22
    11c8:	23fa      	movs	r3, #250	; 0xfa
    11ca:	00db      	lsls	r3, r3, #3
    11cc:	50c2      	str	r2, [r0, r3]
#endif
	RecorderDataPtr->debugMarker2 = 0xF2F2F2F2;
    11ce:	4a35      	ldr	r2, [pc, #212]	; (12a4 <prvTraceInitTraceData+0x184>)
    11d0:	23fb      	movs	r3, #251	; 0xfb
    11d2:	00db      	lsls	r3, r3, #3
    11d4:	50c2      	str	r2, [r0, r3]
	(void)strncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
    11d6:	4b34      	ldr	r3, [pc, #208]	; (12a8 <prvTraceInitTraceData+0x188>)
    11d8:	18c0      	adds	r0, r0, r3
    11da:	4934      	ldr	r1, [pc, #208]	; (12ac <prvTraceInitTraceData+0x18c>)
    11dc:	4479      	add	r1, pc
    11de:	2250      	movs	r2, #80	; 0x50
    11e0:	4b33      	ldr	r3, [pc, #204]	; (12b0 <prvTraceInitTraceData+0x190>)
    11e2:	58eb      	ldr	r3, [r5, r3]
    11e4:	4798      	blx	r3
	RecorderDataPtr->debugMarker3 = 0xF3F3F3F3;
    11e6:	6833      	ldr	r3, [r6, #0]
    11e8:	4932      	ldr	r1, [pc, #200]	; (12b4 <prvTraceInitTraceData+0x194>)
    11ea:	4a33      	ldr	r2, [pc, #204]	; (12b8 <prvTraceInitTraceData+0x198>)
    11ec:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->endmarker0 = 0x0A;
    11ee:	210a      	movs	r1, #10
    11f0:	4a32      	ldr	r2, [pc, #200]	; (12bc <prvTraceInitTraceData+0x19c>)
    11f2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker1 = 0x0B;
    11f4:	210b      	movs	r1, #11
    11f6:	4a32      	ldr	r2, [pc, #200]	; (12c0 <prvTraceInitTraceData+0x1a0>)
    11f8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker2 = 0x0C;
    11fa:	210c      	movs	r1, #12
    11fc:	4a31      	ldr	r2, [pc, #196]	; (12c4 <prvTraceInitTraceData+0x1a4>)
    11fe:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker3 = 0x0D;
    1200:	210d      	movs	r1, #13
    1202:	4a31      	ldr	r2, [pc, #196]	; (12c8 <prvTraceInitTraceData+0x1a8>)
    1204:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker4 = 0x71;
    1206:	4a31      	ldr	r2, [pc, #196]	; (12cc <prvTraceInitTraceData+0x1ac>)
    1208:	4649      	mov	r1, r9
    120a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker5 = 0x72;
    120c:	4a30      	ldr	r2, [pc, #192]	; (12d0 <prvTraceInitTraceData+0x1b0>)
    120e:	4641      	mov	r1, r8
    1210:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker6 = 0x73;
    1212:	4a30      	ldr	r2, [pc, #192]	; (12d4 <prvTraceInitTraceData+0x1b4>)
    1214:	549f      	strb	r7, [r3, r2]
	RecorderDataPtr->endmarker7 = 0x74;
    1216:	2174      	movs	r1, #116	; 0x74
    1218:	4a2f      	ldr	r2, [pc, #188]	; (12d8 <prvTraceInitTraceData+0x1b8>)
    121a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker8 = 0xF1;
    121c:	4a2f      	ldr	r2, [pc, #188]	; (12dc <prvTraceInitTraceData+0x1bc>)
    121e:	210f      	movs	r1, #15
    1220:	4249      	negs	r1, r1
    1222:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker9 = 0xF2;
    1224:	4a2e      	ldr	r2, [pc, #184]	; (12e0 <prvTraceInitTraceData+0x1c0>)
    1226:	210e      	movs	r1, #14
    1228:	4249      	negs	r1, r1
    122a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker10 = 0xF3;
    122c:	4a2d      	ldr	r2, [pc, #180]	; (12e4 <prvTraceInitTraceData+0x1c4>)
    122e:	210d      	movs	r1, #13
    1230:	4249      	negs	r1, r1
    1232:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker11 = 0xF4;
    1234:	21f4      	movs	r1, #244	; 0xf4
    1236:	4a2c      	ldr	r2, [pc, #176]	; (12e8 <prvTraceInitTraceData+0x1c8>)
    1238:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->userEventBuffer.numberOfSlots = USER_EVENT_BUFFER_SIZE;
	RecorderDataPtr->userEventBuffer.numberOfChannels = CHANNEL_FORMAT_PAIRS + 1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	vTraceInitObjectHandleStack();
    123a:	4b2c      	ldr	r3, [pc, #176]	; (12ec <prvTraceInitTraceData+0x1cc>)
    123c:	58eb      	ldr	r3, [r5, r3]
    123e:	4798      	blx	r3
}

static void vInitStartMarkers()
{
	uint32_t i;
	uint8_t *ptr = (uint8_t*)&(RecorderDataPtr->startmarker0);
    1240:	6831      	ldr	r1, [r6, #0]
	if ((*ptr) == 0)
    1242:	780b      	ldrb	r3, [r1, #0]
    1244:	2b00      	cmp	r3, #0
    1246:	d108      	bne.n	125a <prvTraceInitTraceData+0x13a>
    1248:	1c0b      	adds	r3, r1, #0
    124a:	310c      	adds	r1, #12
	{
		for (i = 0; i < 12; i++)
		{
			ptr[i] += 1;
    124c:	781a      	ldrb	r2, [r3, #0]
    124e:	3201      	adds	r2, #1
    1250:	701a      	strb	r2, [r3, #0]
    1252:	3301      	adds	r3, #1
{
	uint32_t i;
	uint8_t *ptr = (uint8_t*)&(RecorderDataPtr->startmarker0);
	if ((*ptr) == 0)
	{
		for (i = 0; i < 12; i++)
    1254:	428b      	cmp	r3, r1
    1256:	d1f9      	bne.n	124c <prvTraceInitTraceData+0x12c>
    1258:	e004      	b.n	1264 <prvTraceInitTraceData+0x144>
			ptr[i] += 1;
		}
	}
	else
	{
		vTraceError("Trace start markers already initialized!");
    125a:	4825      	ldr	r0, [pc, #148]	; (12f0 <prvTraceInitTraceData+0x1d0>)
    125c:	4478      	add	r0, pc
    125e:	4b25      	ldr	r3, [pc, #148]	; (12f4 <prvTraceInitTraceData+0x1d4>)
    1260:	58eb      	ldr	r3, [r5, r3]
    1262:	4798      	blx	r3
	vInitStartMarkers();
	
	#ifdef PORT_SPECIFIC_INIT
	PORT_SPECIFIC_INIT();
	#endif
}
    1264:	b003      	add	sp, #12
    1266:	bc3c      	pop	{r2, r3, r4, r5}
    1268:	4690      	mov	r8, r2
    126a:	4699      	mov	r9, r3
    126c:	46a2      	mov	sl, r4
    126e:	46ab      	mov	fp, r5
    1270:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1272:	46c0      	nop			; (mov r8, r8)
    1274:	00005908 	.word	0x00005908
    1278:	e000e018 	.word	0xe000e018
    127c:	00000254 	.word	0x00000254
    1280:	00000024 	.word	0x00000024
    1284:	000000b0 	.word	0x000000b0
    1288:	00000188 	.word	0x00000188
    128c:	00001aa1 	.word	0x00001aa1
    1290:	f0f0f0f0 	.word	0xf0f0f0f0
    1294:	0000025c 	.word	0x0000025c
    1298:	f1f1f1f1 	.word	0xf1f1f1f1
    129c:	00000424 	.word	0x00000424
    12a0:	0000042c 	.word	0x0000042c
    12a4:	f2f2f2f2 	.word	0xf2f2f2f2
    12a8:	000007dc 	.word	0x000007dc
    12ac:	000048ec 	.word	0x000048ec
    12b0:	00000148 	.word	0x00000148
    12b4:	f3f3f3f3 	.word	0xf3f3f3f3
    12b8:	0000082c 	.word	0x0000082c
    12bc:	000017d4 	.word	0x000017d4
    12c0:	000017d5 	.word	0x000017d5
    12c4:	000017d6 	.word	0x000017d6
    12c8:	000017d7 	.word	0x000017d7
    12cc:	000017d8 	.word	0x000017d8
    12d0:	000017d9 	.word	0x000017d9
    12d4:	000017da 	.word	0x000017da
    12d8:	000017db 	.word	0x000017db
    12dc:	000017dc 	.word	0x000017dc
    12e0:	000017dd 	.word	0x000017dd
    12e4:	000017de 	.word	0x000017de
    12e8:	000017df 	.word	0x000017df
    12ec:	000001dc 	.word	0x000001dc
    12f0:	00004880 	.word	0x00004880
    12f4:	0000010c 	.word	0x0000010c

000012f8 <xTraceNextFreeEventBufferSlot>:

/* Gives the last error message of the recorder. NULL if no error message. */
char* traceErrorMessage = NULL;

void* xTraceNextFreeEventBufferSlot(void)
{
    12f8:	b500      	push	{lr}
    12fa:	b083      	sub	sp, #12
    12fc:	4a0d      	ldr	r2, [pc, #52]	; (1334 <xTraceNextFreeEventBufferSlot+0x3c>)
    12fe:	447a      	add	r2, pc
	if (! RecorderDataPtr->recorderActive)
    1300:	4b0d      	ldr	r3, [pc, #52]	; (1338 <xTraceNextFreeEventBufferSlot+0x40>)
    1302:	58d3      	ldr	r3, [r2, r3]
    1304:	681b      	ldr	r3, [r3, #0]
    1306:	6b19      	ldr	r1, [r3, #48]	; 0x30
    1308:	2900      	cmp	r1, #0
    130a:	d010      	beq.n	132e <xTraceNextFreeEventBufferSlot+0x36>
	{
		// If the associated XTS or XPS event prio to the main event has filled the buffer and store mode "stop when full".
		return NULL;
	}

	if (RecorderDataPtr->nextFreeIndex >= EVENT_BUFFER_SIZE)
    130c:	69d9      	ldr	r1, [r3, #28]
    130e:	480b      	ldr	r0, [pc, #44]	; (133c <xTraceNextFreeEventBufferSlot+0x44>)
    1310:	4281      	cmp	r1, r0
    1312:	d906      	bls.n	1322 <xTraceNextFreeEventBufferSlot+0x2a>
	{
		vTraceError("Attempt to index outside event buffer!");
    1314:	480a      	ldr	r0, [pc, #40]	; (1340 <xTraceNextFreeEventBufferSlot+0x48>)
    1316:	4478      	add	r0, pc
    1318:	4b0a      	ldr	r3, [pc, #40]	; (1344 <xTraceNextFreeEventBufferSlot+0x4c>)
    131a:	58d3      	ldr	r3, [r2, r3]
    131c:	4798      	blx	r3
		return NULL;
    131e:	2000      	movs	r0, #0
    1320:	e006      	b.n	1330 <xTraceNextFreeEventBufferSlot+0x38>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
    1322:	0088      	lsls	r0, r1, #2
    1324:	2283      	movs	r2, #131	; 0x83
    1326:	0112      	lsls	r2, r2, #4
    1328:	1880      	adds	r0, r0, r2
    132a:	1818      	adds	r0, r3, r0
    132c:	e000      	b.n	1330 <xTraceNextFreeEventBufferSlot+0x38>
void* xTraceNextFreeEventBufferSlot(void)
{
	if (! RecorderDataPtr->recorderActive)
	{
		// If the associated XTS or XPS event prio to the main event has filled the buffer and store mode "stop when full".
		return NULL;
    132e:	2000      	movs	r0, #0
	{
		vTraceError("Attempt to index outside event buffer!");
		return NULL;
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
}
    1330:	b003      	add	sp, #12
    1332:	bd00      	pop	{pc}
    1334:	0000573a 	.word	0x0000573a
    1338:	00000024 	.word	0x00000024
    133c:	000003e7 	.word	0x000003e7
    1340:	000047f2 	.word	0x000047f2
    1344:	0000010c 	.word	0x0000010c

00001348 <uiIndexOfObject>:

uint16_t uiIndexOfObject(objectHandleType objecthandle, uint8_t objectclass)
{
    1348:	b510      	push	{r4, lr}
    134a:	b082      	sub	sp, #8
    134c:	4b15      	ldr	r3, [pc, #84]	; (13a4 <uiIndexOfObject+0x5c>)
    134e:	447b      	add	r3, pc
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
    1350:	2906      	cmp	r1, #6
    1352:	d907      	bls.n	1364 <uiIndexOfObject+0x1c>
    1354:	4814      	ldr	r0, [pc, #80]	; (13a8 <uiIndexOfObject+0x60>)
    1356:	4478      	add	r0, pc
    1358:	4a14      	ldr	r2, [pc, #80]	; (13ac <uiIndexOfObject+0x64>)
    135a:	589a      	ldr	r2, [r3, r2]
    135c:	9201      	str	r2, [sp, #4]
    135e:	4790      	blx	r2
    1360:	2000      	movs	r0, #0
    1362:	e01c      	b.n	139e <uiIndexOfObject+0x56>
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
    1364:	2800      	cmp	r0, #0
    1366:	d007      	beq.n	1378 <uiIndexOfObject+0x30>
    1368:	4a11      	ldr	r2, [pc, #68]	; (13b0 <uiIndexOfObject+0x68>)
    136a:	589a      	ldr	r2, [r3, r2]
    136c:	6812      	ldr	r2, [r2, #0]
    136e:	1854      	adds	r4, r2, r1
    1370:	3460      	adds	r4, #96	; 0x60
    1372:	7924      	ldrb	r4, [r4, #4]
    1374:	4284      	cmp	r4, r0
    1376:	d207      	bcs.n	1388 <uiIndexOfObject+0x40>
    1378:	480e      	ldr	r0, [pc, #56]	; (13b4 <uiIndexOfObject+0x6c>)
    137a:	4478      	add	r0, pc
    137c:	4a0b      	ldr	r2, [pc, #44]	; (13ac <uiIndexOfObject+0x64>)
    137e:	589a      	ldr	r2, [r3, r2]
    1380:	9201      	str	r2, [sp, #4]
    1382:	4790      	blx	r2
    1384:	2000      	movs	r0, #0
    1386:	e00a      	b.n	139e <uiIndexOfObject+0x56>

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
	{
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
    1388:	1853      	adds	r3, r2, r1
    138a:	3370      	adds	r3, #112	; 0x70
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
	{
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
    138c:	791b      	ldrb	r3, [r3, #4]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
    138e:	3801      	subs	r0, #1
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
	{
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
    1390:	4358      	muls	r0, r3
    1392:	313c      	adds	r1, #60	; 0x3c
    1394:	0049      	lsls	r1, r1, #1
    1396:	1852      	adds	r2, r2, r1
    1398:	8893      	ldrh	r3, [r2, #4]
    139a:	18c0      	adds	r0, r0, r3
    139c:	b280      	uxth	r0, r0
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
	}

	vTraceError("Object table lookup with invalid object handle or object class!");
	return 0;
}
    139e:	b002      	add	sp, #8
    13a0:	bd10      	pop	{r4, pc}
    13a2:	46c0      	nop			; (mov r8, r8)
    13a4:	000056ea 	.word	0x000056ea
    13a8:	000047da 	.word	0x000047da
    13ac:	0000010c 	.word	0x0000010c
    13b0:	00000024 	.word	0x00000024
    13b4:	000047f6 	.word	0x000047f6

000013b8 <xTraceGetObjectHandle>:
 * contains the mapping between object handle and object name which was valid up
 * to this point in time. The object name is stored as a symbol table entry.
 ******************************************************************************/

objectHandleType xTraceGetObjectHandle(traceObjectClass objectclass)
{
    13b8:	b570      	push	{r4, r5, r6, lr}
    13ba:	b082      	sub	sp, #8
    13bc:	4c56      	ldr	r4, [pc, #344]	; (1518 <xTraceGetObjectHandle+0x160>)
    13be:	447c      	add	r4, pc
	objectHandleType handle;
	static int indexOfHandle;

	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
    13c0:	2806      	cmp	r0, #6
    13c2:	d906      	bls.n	13d2 <xTraceGetObjectHandle+0x1a>
    13c4:	4855      	ldr	r0, [pc, #340]	; (151c <xTraceGetObjectHandle+0x164>)
    13c6:	4478      	add	r0, pc
    13c8:	4b55      	ldr	r3, [pc, #340]	; (1520 <xTraceGetObjectHandle+0x168>)
    13ca:	58e3      	ldr	r3, [r4, r3]
    13cc:	4798      	blx	r3
    13ce:	2000      	movs	r0, #0
    13d0:	e0a0      	b.n	1514 <xTraceGetObjectHandle+0x15c>
		"xTraceGetObjectHandle: Invalid value for objectclass", (objectHandleType)0);

	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
    13d2:	4b54      	ldr	r3, [pc, #336]	; (1524 <xTraceGetObjectHandle+0x16c>)
    13d4:	58e2      	ldr	r2, [r4, r3]
    13d6:	0043      	lsls	r3, r0, #1
    13d8:	5a9b      	ldrh	r3, [r3, r2]
    13da:	4953      	ldr	r1, [pc, #332]	; (1528 <xTraceGetObjectHandle+0x170>)
    13dc:	4479      	add	r1, pc
    13de:	600b      	str	r3, [r1, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
    13e0:	18d2      	adds	r2, r2, r3
    13e2:	3238      	adds	r2, #56	; 0x38
    13e4:	7812      	ldrb	r2, [r2, #0]
    13e6:	2a00      	cmp	r2, #0
    13e8:	d10a      	bne.n	1400 <xTraceGetObjectHandle+0x48>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
    13ea:	4a4e      	ldr	r2, [pc, #312]	; (1524 <xTraceGetObjectHandle+0x16c>)
    13ec:	58a2      	ldr	r2, [r4, r2]
    13ee:	18d5      	adds	r5, r2, r3
    13f0:	3538      	adds	r5, #56	; 0x38
			(objectHandleType)(1 + indexOfHandle -
    13f2:	1c59      	adds	r1, r3, #1
			objectHandleStacks.lowestIndexOfClass[objectclass]);
    13f4:	1d06      	adds	r6, r0, #4
    13f6:	0076      	lsls	r6, r6, #1
    13f8:	1992      	adds	r2, r2, r6
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
			(objectHandleType)(1 + indexOfHandle -
    13fa:	88d2      	ldrh	r2, [r2, #6]
    13fc:	1a89      	subs	r1, r1, r2
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
    13fe:	7029      	strb	r1, [r5, #0]
			(objectHandleType)(1 + indexOfHandle -
			objectHandleStacks.lowestIndexOfClass[objectclass]);
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
    1400:	4a48      	ldr	r2, [pc, #288]	; (1524 <xTraceGetObjectHandle+0x16c>)
    1402:	58a2      	ldr	r2, [r4, r2]
    1404:	18d1      	adds	r1, r2, r3
    1406:	3138      	adds	r1, #56	; 0x38
    1408:	7809      	ldrb	r1, [r1, #0]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
		> objectHandleStacks.highestIndexOfClass[objectclass])
    140a:	1c05      	adds	r5, r0, #0
    140c:	350c      	adds	r5, #12
    140e:	006d      	lsls	r5, r5, #1
    1410:	1952      	adds	r2, r2, r5
			objectHandleStacks.lowestIndexOfClass[objectclass]);
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
    1412:	8892      	ldrh	r2, [r2, #4]
    1414:	429a      	cmp	r2, r3
    1416:	d207      	bcs.n	1428 <xTraceGetObjectHandle+0x70>
		> objectHandleStacks.highestIndexOfClass[objectclass])
	{
		/* ERROR */
		vTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
    1418:	4b44      	ldr	r3, [pc, #272]	; (152c <xTraceGetObjectHandle+0x174>)
    141a:	58e3      	ldr	r3, [r4, r3]
    141c:	4798      	blx	r3
    141e:	4b40      	ldr	r3, [pc, #256]	; (1520 <xTraceGetObjectHandle+0x168>)
    1420:	58e3      	ldr	r3, [r4, r3]
    1422:	4798      	blx	r3

		handle = 0; /* an invalid/anonymous handle - but the recorder is stopped now... */
    1424:	2000      	movs	r0, #0
    1426:	e075      	b.n	1514 <xTraceGetObjectHandle+0x15c>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
    1428:	3301      	adds	r3, #1
    142a:	b29b      	uxth	r3, r3
    142c:	4a3d      	ldr	r2, [pc, #244]	; (1524 <xTraceGetObjectHandle+0x16c>)
    142e:	58a2      	ldr	r2, [r4, r2]
    1430:	0045      	lsls	r5, r0, #1
    1432:	52ab      	strh	r3, [r5, r2]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
			objectHandleStacks.lowestIndexOfClass[objectclass];
    1434:	1d05      	adds	r5, r0, #4
    1436:	006d      	lsls	r5, r5, #1
    1438:	1955      	adds	r5, r2, r5
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
    143a:	88ed      	ldrh	r5, [r5, #6]
    143c:	1b5b      	subs	r3, r3, r5
			objectHandleStacks.lowestIndexOfClass[objectclass];

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
    143e:	1c05      	adds	r5, r0, #0
    1440:	3514      	adds	r5, #20
    1442:	006d      	lsls	r5, r5, #1
    1444:	1952      	adds	r2, r2, r5
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
			objectHandleStacks.lowestIndexOfClass[objectclass];

		if (hndCount >
    1446:	8852      	ldrh	r2, [r2, #2]
    1448:	4293      	cmp	r3, r2
    144a:	dd07      	ble.n	145c <xTraceGetObjectHandle+0xa4>
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
    144c:	4a35      	ldr	r2, [pc, #212]	; (1524 <xTraceGetObjectHandle+0x16c>)
    144e:	58a2      	ldr	r2, [r4, r2]
    1450:	9201      	str	r2, [sp, #4]
    1452:	1c2a      	adds	r2, r5, #0
    1454:	b2db      	uxtb	r3, r3
    1456:	9d01      	ldr	r5, [sp, #4]
    1458:	18aa      	adds	r2, r5, r2
    145a:	8053      	strh	r3, [r2, #2]
				(objectHandleType)hndCount;
		}

		TRACE_CLEAR_OBJECT_FLAG_ISEXCLUDED(objectclass, handle);
    145c:	2806      	cmp	r0, #6
    145e:	d858      	bhi.n	1512 <xTraceGetObjectHandle+0x15a>
    1460:	f004 f89e 	bl	55a0 <__gnu_thumb1_case_uqi>
    1464:	2d1f1104 	.word	0x2d1f1104
    1468:	3b57      	.short	0x3b57
    146a:	49          	.byte	0x49
    146b:	00          	.byte	0x00
    146c:	08ca      	lsrs	r2, r1, #3
    146e:	4b30      	ldr	r3, [pc, #192]	; (1530 <xTraceGetObjectHandle+0x178>)
    1470:	58e3      	ldr	r3, [r4, r3]
    1472:	2407      	movs	r4, #7
    1474:	400c      	ands	r4, r1
    1476:	2001      	movs	r0, #1
    1478:	40a0      	lsls	r0, r4
    147a:	1c04      	adds	r4, r0, #0
    147c:	5c98      	ldrb	r0, [r3, r2]
    147e:	43a0      	bics	r0, r4
    1480:	5498      	strb	r0, [r3, r2]
		objectHandleStacks.objectHandles[indexOfHandle] =
			(objectHandleType)(1 + indexOfHandle -
			objectHandleStacks.lowestIndexOfClass[objectclass]);
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
    1482:	1c08      	adds	r0, r1, #0
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
				(objectHandleType)hndCount;
		}

		TRACE_CLEAR_OBJECT_FLAG_ISEXCLUDED(objectclass, handle);
    1484:	e046      	b.n	1514 <xTraceGetObjectHandle+0x15c>
    1486:	1c08      	adds	r0, r1, #0
    1488:	300b      	adds	r0, #11
    148a:	10c2      	asrs	r2, r0, #3
    148c:	4b28      	ldr	r3, [pc, #160]	; (1530 <xTraceGetObjectHandle+0x178>)
    148e:	58e3      	ldr	r3, [r4, r3]
    1490:	2407      	movs	r4, #7
    1492:	4020      	ands	r0, r4
    1494:	2401      	movs	r4, #1
    1496:	4084      	lsls	r4, r0
    1498:	5c98      	ldrb	r0, [r3, r2]
    149a:	43a0      	bics	r0, r4
    149c:	5498      	strb	r0, [r3, r2]
		objectHandleStacks.objectHandles[indexOfHandle] =
			(objectHandleType)(1 + indexOfHandle -
			objectHandleStacks.lowestIndexOfClass[objectclass]);
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
    149e:	1c08      	adds	r0, r1, #0
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
				(objectHandleType)hndCount;
		}

		TRACE_CLEAR_OBJECT_FLAG_ISEXCLUDED(objectclass, handle);
    14a0:	e038      	b.n	1514 <xTraceGetObjectHandle+0x15c>
    14a2:	1c08      	adds	r0, r1, #0
    14a4:	3016      	adds	r0, #22
    14a6:	10c2      	asrs	r2, r0, #3
    14a8:	4b21      	ldr	r3, [pc, #132]	; (1530 <xTraceGetObjectHandle+0x178>)
    14aa:	58e3      	ldr	r3, [r4, r3]
    14ac:	2407      	movs	r4, #7
    14ae:	4020      	ands	r0, r4
    14b0:	2401      	movs	r4, #1
    14b2:	4084      	lsls	r4, r0
    14b4:	5c98      	ldrb	r0, [r3, r2]
    14b6:	43a0      	bics	r0, r4
    14b8:	5498      	strb	r0, [r3, r2]
		objectHandleStacks.objectHandles[indexOfHandle] =
			(objectHandleType)(1 + indexOfHandle -
			objectHandleStacks.lowestIndexOfClass[objectclass]);
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
    14ba:	1c08      	adds	r0, r1, #0
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
				(objectHandleType)hndCount;
		}

		TRACE_CLEAR_OBJECT_FLAG_ISEXCLUDED(objectclass, handle);
    14bc:	e02a      	b.n	1514 <xTraceGetObjectHandle+0x15c>
    14be:	1c08      	adds	r0, r1, #0
    14c0:	3021      	adds	r0, #33	; 0x21
    14c2:	10c2      	asrs	r2, r0, #3
    14c4:	4b1a      	ldr	r3, [pc, #104]	; (1530 <xTraceGetObjectHandle+0x178>)
    14c6:	58e3      	ldr	r3, [r4, r3]
    14c8:	2407      	movs	r4, #7
    14ca:	4020      	ands	r0, r4
    14cc:	2401      	movs	r4, #1
    14ce:	4084      	lsls	r4, r0
    14d0:	5c98      	ldrb	r0, [r3, r2]
    14d2:	43a0      	bics	r0, r4
    14d4:	5498      	strb	r0, [r3, r2]
		objectHandleStacks.objectHandles[indexOfHandle] =
			(objectHandleType)(1 + indexOfHandle -
			objectHandleStacks.lowestIndexOfClass[objectclass]);
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
    14d6:	1c08      	adds	r0, r1, #0
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
				(objectHandleType)hndCount;
		}

		TRACE_CLEAR_OBJECT_FLAG_ISEXCLUDED(objectclass, handle);
    14d8:	e01c      	b.n	1514 <xTraceGetObjectHandle+0x15c>
    14da:	1c08      	adds	r0, r1, #0
    14dc:	3031      	adds	r0, #49	; 0x31
    14de:	10c2      	asrs	r2, r0, #3
    14e0:	4b13      	ldr	r3, [pc, #76]	; (1530 <xTraceGetObjectHandle+0x178>)
    14e2:	58e3      	ldr	r3, [r4, r3]
    14e4:	2407      	movs	r4, #7
    14e6:	4020      	ands	r0, r4
    14e8:	2401      	movs	r4, #1
    14ea:	4084      	lsls	r4, r0
    14ec:	5c98      	ldrb	r0, [r3, r2]
    14ee:	43a0      	bics	r0, r4
    14f0:	5498      	strb	r0, [r3, r2]
		objectHandleStacks.objectHandles[indexOfHandle] =
			(objectHandleType)(1 + indexOfHandle -
			objectHandleStacks.lowestIndexOfClass[objectclass]);
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
    14f2:	1c08      	adds	r0, r1, #0
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
				(objectHandleType)hndCount;
		}

		TRACE_CLEAR_OBJECT_FLAG_ISEXCLUDED(objectclass, handle);
    14f4:	e00e      	b.n	1514 <xTraceGetObjectHandle+0x15c>
    14f6:	1c08      	adds	r0, r1, #0
    14f8:	3034      	adds	r0, #52	; 0x34
    14fa:	10c2      	asrs	r2, r0, #3
    14fc:	4b0c      	ldr	r3, [pc, #48]	; (1530 <xTraceGetObjectHandle+0x178>)
    14fe:	58e3      	ldr	r3, [r4, r3]
    1500:	2407      	movs	r4, #7
    1502:	4020      	ands	r0, r4
    1504:	2401      	movs	r4, #1
    1506:	4084      	lsls	r4, r0
    1508:	5c98      	ldrb	r0, [r3, r2]
    150a:	43a0      	bics	r0, r4
    150c:	5498      	strb	r0, [r3, r2]
		objectHandleStacks.objectHandles[indexOfHandle] =
			(objectHandleType)(1 + indexOfHandle -
			objectHandleStacks.lowestIndexOfClass[objectclass]);
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
    150e:	1c08      	adds	r0, r1, #0
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
				(objectHandleType)hndCount;
		}

		TRACE_CLEAR_OBJECT_FLAG_ISEXCLUDED(objectclass, handle);
    1510:	e000      	b.n	1514 <xTraceGetObjectHandle+0x15c>
		objectHandleStacks.objectHandles[indexOfHandle] =
			(objectHandleType)(1 + indexOfHandle -
			objectHandleStacks.lowestIndexOfClass[objectclass]);
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
    1512:	1c08      	adds	r0, r1, #0

		TRACE_CLEAR_OBJECT_FLAG_ISEXCLUDED(objectclass, handle);
	}

	return handle;
}
    1514:	b002      	add	sp, #8
    1516:	bd70      	pop	{r4, r5, r6, pc}
    1518:	0000567a 	.word	0x0000567a
    151c:	000047ea 	.word	0x000047ea
    1520:	0000010c 	.word	0x0000010c
    1524:	00000284 	.word	0x00000284
    1528:	1ffff0b4 	.word	0x1ffff0b4
    152c:	0000002c 	.word	0x0000002c
    1530:	00000110 	.word	0x00000110

00001534 <vTraceFreeObjectHandle>:

void vTraceFreeObjectHandle(traceObjectClass objectclass, objectHandleType handle)
{
    1534:	b570      	push	{r4, r5, r6, lr}
    1536:	b082      	sub	sp, #8
    1538:	4b1c      	ldr	r3, [pc, #112]	; (15ac <vTraceFreeObjectHandle+0x78>)
    153a:	447b      	add	r3, pc
	int indexOfHandle;

	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
    153c:	2806      	cmp	r0, #6
    153e:	d906      	bls.n	154e <vTraceFreeObjectHandle+0x1a>
    1540:	481b      	ldr	r0, [pc, #108]	; (15b0 <vTraceFreeObjectHandle+0x7c>)
    1542:	4478      	add	r0, pc
    1544:	4a1b      	ldr	r2, [pc, #108]	; (15b4 <vTraceFreeObjectHandle+0x80>)
    1546:	589a      	ldr	r2, [r3, r2]
    1548:	9201      	str	r2, [sp, #4]
    154a:	4790      	blx	r2
    154c:	e02b      	b.n	15a6 <vTraceFreeObjectHandle+0x72>
		"vTraceFreeObjectHandle: Invalid value for objectclass", );
	TRACE_ASSERT(handle > 0 && handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
    154e:	2900      	cmp	r1, #0
    1550:	d007      	beq.n	1562 <vTraceFreeObjectHandle+0x2e>
    1552:	4a19      	ldr	r2, [pc, #100]	; (15b8 <vTraceFreeObjectHandle+0x84>)
    1554:	589a      	ldr	r2, [r3, r2]
    1556:	6812      	ldr	r2, [r2, #0]
    1558:	1812      	adds	r2, r2, r0
    155a:	3260      	adds	r2, #96	; 0x60
    155c:	7912      	ldrb	r2, [r2, #4]
    155e:	428a      	cmp	r2, r1
    1560:	d206      	bcs.n	1570 <vTraceFreeObjectHandle+0x3c>
    1562:	4816      	ldr	r0, [pc, #88]	; (15bc <vTraceFreeObjectHandle+0x88>)
    1564:	4478      	add	r0, pc
    1566:	4a13      	ldr	r2, [pc, #76]	; (15b4 <vTraceFreeObjectHandle+0x80>)
    1568:	589a      	ldr	r2, [r3, r2]
    156a:	9201      	str	r2, [sp, #4]
    156c:	4790      	blx	r2
    156e:	e01a      	b.n	15a6 <vTraceFreeObjectHandle+0x72>
		"vTraceFreeObjectHandle: Invalid value for handle", );

	/* Check that there is room to push the handle on the stack */
	if ((objectHandleStacks.indexOfNextAvailableHandle[objectclass] - 1) <
    1570:	4a13      	ldr	r2, [pc, #76]	; (15c0 <vTraceFreeObjectHandle+0x8c>)
    1572:	589a      	ldr	r2, [r3, r2]
    1574:	0044      	lsls	r4, r0, #1
    1576:	5aa4      	ldrh	r4, [r4, r2]
    1578:	1e65      	subs	r5, r4, #1
		objectHandleStacks.lowestIndexOfClass[objectclass])
    157a:	1d06      	adds	r6, r0, #4
    157c:	0076      	lsls	r6, r6, #1
    157e:	1992      	adds	r2, r2, r6
		"vTraceFreeObjectHandle: Invalid value for objectclass", );
	TRACE_ASSERT(handle > 0 && handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
		"vTraceFreeObjectHandle: Invalid value for handle", );

	/* Check that there is room to push the handle on the stack */
	if ((objectHandleStacks.indexOfNextAvailableHandle[objectclass] - 1) <
    1580:	88d2      	ldrh	r2, [r2, #6]
    1582:	4295      	cmp	r5, r2
    1584:	da06      	bge.n	1594 <vTraceFreeObjectHandle+0x60>
		objectHandleStacks.lowestIndexOfClass[objectclass])
	{
		/* Error */
		vTraceError("Attempt to free more handles than allocated!");
    1586:	480f      	ldr	r0, [pc, #60]	; (15c4 <vTraceFreeObjectHandle+0x90>)
    1588:	4478      	add	r0, pc
    158a:	4a0a      	ldr	r2, [pc, #40]	; (15b4 <vTraceFreeObjectHandle+0x80>)
    158c:	589a      	ldr	r2, [r3, r2]
    158e:	9201      	str	r2, [sp, #4]
    1590:	4790      	blx	r2
    1592:	e008      	b.n	15a6 <vTraceFreeObjectHandle+0x72>
	}
	else
	{
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]--;
    1594:	3c01      	subs	r4, #1
    1596:	b2a4      	uxth	r4, r4
    1598:	4a09      	ldr	r2, [pc, #36]	; (15c0 <vTraceFreeObjectHandle+0x8c>)
    159a:	589b      	ldr	r3, [r3, r2]
    159c:	0040      	lsls	r0, r0, #1
    159e:	52c4      	strh	r4, [r0, r3]
		indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
		objectHandleStacks.objectHandles[indexOfHandle] = handle;
    15a0:	191c      	adds	r4, r3, r4
    15a2:	3438      	adds	r4, #56	; 0x38
    15a4:	7021      	strb	r1, [r4, #0]
	}

}
    15a6:	b002      	add	sp, #8
    15a8:	bd70      	pop	{r4, r5, r6, pc}
    15aa:	46c0      	nop			; (mov r8, r8)
    15ac:	000054fe 	.word	0x000054fe
    15b0:	000046b2 	.word	0x000046b2
    15b4:	0000010c 	.word	0x0000010c
    15b8:	00000024 	.word	0x00000024
    15bc:	000046d4 	.word	0x000046d4
    15c0:	00000284 	.word	0x00000284
    15c4:	000046f0 	.word	0x000046f0

000015c8 <vTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void vTraceSetObjectName(traceObjectClass objectclass,
						 objectHandleType handle,
						 const char* name)
{
    15c8:	b570      	push	{r4, r5, r6, lr}
    15ca:	b082      	sub	sp, #8
    15cc:	1c05      	adds	r5, r0, #0
    15ce:	1c16      	adds	r6, r2, #0
    15d0:	4c21      	ldr	r4, [pc, #132]	; (1658 <vTraceSetObjectName+0x90>)
    15d2:	447c      	add	r4, pc
	static uint16_t idx;

	TRACE_ASSERT(name != NULL, "vTraceSetObjectName: name == NULL", );
    15d4:	2a00      	cmp	r2, #0
    15d6:	d105      	bne.n	15e4 <vTraceSetObjectName+0x1c>
    15d8:	4820      	ldr	r0, [pc, #128]	; (165c <vTraceSetObjectName+0x94>)
    15da:	4478      	add	r0, pc
    15dc:	4b20      	ldr	r3, [pc, #128]	; (1660 <vTraceSetObjectName+0x98>)
    15de:	58e3      	ldr	r3, [r4, r3]
    15e0:	4798      	blx	r3
    15e2:	e037      	b.n	1654 <vTraceSetObjectName+0x8c>

	if (objectclass >= TRACE_NCLASSES)
    15e4:	2806      	cmp	r0, #6
    15e6:	d905      	bls.n	15f4 <vTraceSetObjectName+0x2c>
	{
		vTraceError("Illegal object class in vTraceSetObjectName");
    15e8:	481e      	ldr	r0, [pc, #120]	; (1664 <vTraceSetObjectName+0x9c>)
    15ea:	4478      	add	r0, pc
    15ec:	4b1c      	ldr	r3, [pc, #112]	; (1660 <vTraceSetObjectName+0x98>)
    15ee:	58e3      	ldr	r3, [r4, r3]
    15f0:	4798      	blx	r3
		return;
    15f2:	e02f      	b.n	1654 <vTraceSetObjectName+0x8c>
	}

	if (handle == 0)
    15f4:	2900      	cmp	r1, #0
    15f6:	d105      	bne.n	1604 <vTraceSetObjectName+0x3c>
	{
		vTraceError("Illegal handle (0) in vTraceSetObjectName.");
    15f8:	481b      	ldr	r0, [pc, #108]	; (1668 <vTraceSetObjectName+0xa0>)
    15fa:	4478      	add	r0, pc
    15fc:	4b18      	ldr	r3, [pc, #96]	; (1660 <vTraceSetObjectName+0x98>)
    15fe:	58e3      	ldr	r3, [r4, r3]
    1600:	4798      	blx	r3
		return;
    1602:	e027      	b.n	1654 <vTraceSetObjectName+0x8c>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
    1604:	4b19      	ldr	r3, [pc, #100]	; (166c <vTraceSetObjectName+0xa4>)
    1606:	58e3      	ldr	r3, [r4, r3]
    1608:	681b      	ldr	r3, [r3, #0]
    160a:	181b      	adds	r3, r3, r0
    160c:	3360      	adds	r3, #96	; 0x60
    160e:	791b      	ldrb	r3, [r3, #4]
    1610:	428b      	cmp	r3, r1
    1612:	d206      	bcs.n	1622 <vTraceSetObjectName+0x5a>
	{
		/* ERROR */
		vTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
    1614:	4b16      	ldr	r3, [pc, #88]	; (1670 <vTraceSetObjectName+0xa8>)
    1616:	58e3      	ldr	r3, [r4, r3]
    1618:	4798      	blx	r3
    161a:	4b11      	ldr	r3, [pc, #68]	; (1660 <vTraceSetObjectName+0x98>)
    161c:	58e3      	ldr	r3, [r4, r3]
    161e:	4798      	blx	r3
    1620:	e018      	b.n	1654 <vTraceSetObjectName+0x8c>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
    1622:	1c08      	adds	r0, r1, #0
    1624:	1c29      	adds	r1, r5, #0
    1626:	4b13      	ldr	r3, [pc, #76]	; (1674 <vTraceSetObjectName+0xac>)
    1628:	58e3      	ldr	r3, [r4, r3]
    162a:	4798      	blx	r3
    162c:	4b12      	ldr	r3, [pc, #72]	; (1678 <vTraceSetObjectName+0xb0>)
    162e:	447b      	add	r3, pc
    1630:	8098      	strh	r0, [r3, #4]

		if (traceErrorMessage == NULL)
    1632:	4b12      	ldr	r3, [pc, #72]	; (167c <vTraceSetObjectName+0xb4>)
    1634:	58e3      	ldr	r3, [r4, r3]
    1636:	681b      	ldr	r3, [r3, #0]
    1638:	2b00      	cmp	r3, #0
    163a:	d10b      	bne.n	1654 <vTraceSetObjectName+0x8c>
		{
			(void)strncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
    163c:	4b0b      	ldr	r3, [pc, #44]	; (166c <vTraceSetObjectName+0xa4>)
    163e:	58e3      	ldr	r3, [r4, r3]
    1640:	681b      	ldr	r3, [r3, #0]
    1642:	1818      	adds	r0, r3, r0
    1644:	308c      	adds	r0, #140	; 0x8c
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
    1646:	195b      	adds	r3, r3, r5
    1648:	3368      	adds	r3, #104	; 0x68
	{
		idx = uiIndexOfObject(handle, objectclass);

		if (traceErrorMessage == NULL)
		{
			(void)strncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
    164a:	791a      	ldrb	r2, [r3, #4]
    164c:	1c31      	adds	r1, r6, #0
    164e:	4b0c      	ldr	r3, [pc, #48]	; (1680 <vTraceSetObjectName+0xb8>)
    1650:	58e3      	ldr	r3, [r4, r3]
    1652:	4798      	blx	r3
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
		}
	}
}
    1654:	b002      	add	sp, #8
    1656:	bd70      	pop	{r4, r5, r6, pc}
    1658:	00005466 	.word	0x00005466
    165c:	000046ce 	.word	0x000046ce
    1660:	0000010c 	.word	0x0000010c
    1664:	000046ee 	.word	0x000046ee
    1668:	0000470a 	.word	0x0000470a
    166c:	00000024 	.word	0x00000024
    1670:	0000002c 	.word	0x0000002c
    1674:	00000238 	.word	0x00000238
    1678:	1fffee62 	.word	0x1fffee62
    167c:	00000250 	.word	0x00000250
    1680:	00000148 	.word	0x00000148

00001684 <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 *
 * This is assumed to execute within a critical section...
 *****************************************************************************/

void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
    1684:	b5f0      	push	{r4, r5, r6, r7, lr}
    1686:	4647      	mov	r7, r8
    1688:	b480      	push	{r7}
    168a:	b082      	sub	sp, #8
    168c:	4930      	ldr	r1, [pc, #192]	; (1750 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xcc>)
    168e:	4479      	add	r1, pc
    1690:	4688      	mov	r8, r1
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
	unsigned int e = 0;

	TRACE_ASSERT(nofEntriesToCheck != 0, 
    1692:	2800      	cmp	r0, #0
    1694:	d004      	beq.n	16a0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1c>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", );

	while (i < nofEntriesToCheck)
    1696:	1c06      	adds	r6, r0, #0
    1698:	2400      	movs	r4, #0
    169a:	2800      	cmp	r0, #0
    169c:	d106      	bne.n	16ac <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
    169e:	e052      	b.n	1746 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xc2>
{
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
	unsigned int e = 0;

	TRACE_ASSERT(nofEntriesToCheck != 0, 
    16a0:	482c      	ldr	r0, [pc, #176]	; (1754 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xd0>)
    16a2:	4478      	add	r0, pc
    16a4:	4b2c      	ldr	r3, [pc, #176]	; (1758 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xd4>)
    16a6:	58cb      	ldr	r3, [r1, r3]
    16a8:	4798      	blx	r3
    16aa:	e04c      	b.n	1746 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xc2>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", );

	while (i < nofEntriesToCheck)
	{
		e = RecorderDataPtr->nextFreeIndex + i;
    16ac:	4b2b      	ldr	r3, [pc, #172]	; (175c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xd8>)
    16ae:	58cf      	ldr	r7, [r1, r3]
    16b0:	683b      	ldr	r3, [r7, #0]
    16b2:	69d8      	ldr	r0, [r3, #28]
    16b4:	1821      	adds	r1, r4, r0
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
    16b6:	008d      	lsls	r5, r1, #2
    16b8:	195a      	adds	r2, r3, r5
    16ba:	2083      	movs	r0, #131	; 0x83
    16bc:	0100      	lsls	r0, r0, #4
    16be:	1812      	adds	r2, r2, r0
    16c0:	7812      	ldrb	r2, [r2, #0]
    16c2:	1c10      	adds	r0, r2, #0
    16c4:	3067      	adds	r0, #103	; 0x67
    16c6:	b2c0      	uxtb	r0, r0
    16c8:	280e      	cmp	r0, #14
    16ca:	d811      	bhi.n	16f0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x6c>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
    16cc:	3268      	adds	r2, #104	; 0x68
    16ce:	b2d2      	uxtb	r2, r2
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
    16d0:	1851      	adds	r1, r2, r1
    16d2:	6998      	ldr	r0, [r3, #24]
    16d4:	4281      	cmp	r1, r0
    16d6:	d233      	bcs.n	1740 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xbc>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4 * nDataEvents);
    16d8:	3201      	adds	r2, #1
    16da:	0092      	lsls	r2, r2, #2
    16dc:	2183      	movs	r1, #131	; 0x83
    16de:	0109      	lsls	r1, r1, #4
    16e0:	186d      	adds	r5, r5, r1
    16e2:	1958      	adds	r0, r3, r5
    16e4:	2100      	movs	r1, #0
    16e6:	4b1e      	ldr	r3, [pc, #120]	; (1760 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xdc>)
    16e8:	4645      	mov	r5, r8
    16ea:	58eb      	ldr	r3, [r5, r3]
    16ec:	4798      	blx	r3
    16ee:	e027      	b.n	1740 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xbc>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
    16f0:	2a01      	cmp	r2, #1
    16f2:	d125      	bne.n	1740 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xbc>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
    16f4:	3101      	adds	r1, #1
    16f6:	6998      	ldr	r0, [r3, #24]
    16f8:	4281      	cmp	r1, r0
    16fa:	d20d      	bcs.n	1718 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x94>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
    16fc:	2183      	movs	r1, #131	; 0x83
    16fe:	0109      	lsls	r1, r1, #4
    1700:	186d      	adds	r5, r5, r1
    1702:	195b      	adds	r3, r3, r5
    1704:	2200      	movs	r2, #0
    1706:	701a      	strb	r2, [r3, #0]
    1708:	705a      	strb	r2, [r3, #1]
    170a:	709a      	strb	r2, [r3, #2]
    170c:	70da      	strb	r2, [r3, #3]
    170e:	711a      	strb	r2, [r3, #4]
    1710:	715a      	strb	r2, [r3, #5]
    1712:	719a      	strb	r2, [r3, #6]
    1714:	71da      	strb	r2, [r3, #7]
    1716:	e013      	b.n	1740 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xbc>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
    1718:	2283      	movs	r2, #131	; 0x83
    171a:	0112      	lsls	r2, r2, #4
    171c:	189b      	adds	r3, r3, r2
    171e:	2200      	movs	r2, #0
    1720:	701a      	strb	r2, [r3, #0]
    1722:	705a      	strb	r2, [r3, #1]
    1724:	709a      	strb	r2, [r3, #2]
    1726:	70da      	strb	r2, [r3, #3]
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
    1728:	4b0c      	ldr	r3, [pc, #48]	; (175c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xd8>)
    172a:	4640      	mov	r0, r8
    172c:	58c3      	ldr	r3, [r0, r3]
    172e:	2183      	movs	r1, #131	; 0x83
    1730:	0109      	lsls	r1, r1, #4
    1732:	186d      	adds	r5, r5, r1
    1734:	681b      	ldr	r3, [r3, #0]
    1736:	195d      	adds	r5, r3, r5
    1738:	702a      	strb	r2, [r5, #0]
    173a:	706a      	strb	r2, [r5, #1]
    173c:	70aa      	strb	r2, [r5, #2]
    173e:	70ea      	strb	r2, [r5, #3]
			}
		}
		i++;
    1740:	3401      	adds	r4, #1
	unsigned int e = 0;

	TRACE_ASSERT(nofEntriesToCheck != 0, 
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", );

	while (i < nofEntriesToCheck)
    1742:	42b4      	cmp	r4, r6
    1744:	d3b4      	bcc.n	16b0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x2c>
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
			}
		}
		i++;
	}
}
    1746:	b002      	add	sp, #8
    1748:	bc04      	pop	{r2}
    174a:	4690      	mov	r8, r2
    174c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    174e:	46c0      	nop			; (mov r8, r8)
    1750:	000053aa 	.word	0x000053aa
    1754:	0000468e 	.word	0x0000468e
    1758:	0000010c 	.word	0x0000010c
    175c:	00000024 	.word	0x00000024
    1760:	00000188 	.word	0x00000188

00001764 <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
    1764:	b500      	push	{lr}
    1766:	b083      	sub	sp, #12
    1768:	4a0d      	ldr	r2, [pc, #52]	; (17a0 <prvTraceUpdateCounters+0x3c>)
    176a:	447a      	add	r2, pc
	if (RecorderDataPtr->recorderActive == 0)
    176c:	4b0d      	ldr	r3, [pc, #52]	; (17a4 <prvTraceUpdateCounters+0x40>)
    176e:	58d3      	ldr	r3, [r2, r3]
    1770:	681b      	ldr	r3, [r3, #0]
    1772:	6b19      	ldr	r1, [r3, #48]	; 0x30
    1774:	2900      	cmp	r1, #0
    1776:	d010      	beq.n	179a <prvTraceUpdateCounters+0x36>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
    1778:	6959      	ldr	r1, [r3, #20]
    177a:	3101      	adds	r1, #1
    177c:	6159      	str	r1, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
    177e:	69d9      	ldr	r1, [r3, #28]
    1780:	3101      	adds	r1, #1
    1782:	61d9      	str	r1, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= EVENT_BUFFER_SIZE)
    1784:	4808      	ldr	r0, [pc, #32]	; (17a8 <prvTraceUpdateCounters+0x44>)
    1786:	4281      	cmp	r1, r0
    1788:	d903      	bls.n	1792 <prvTraceUpdateCounters+0x2e>
	{
#if (TRACE_RECORDER_STORE_MODE == TRACE_STORE_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
    178a:	2101      	movs	r1, #1
    178c:	6219      	str	r1, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
    178e:	2100      	movs	r1, #0
    1790:	61d9      	str	r1, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRACE_RECORDER_STORE_MODE == TRACE_STORE_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
    1792:	2001      	movs	r0, #1
    1794:	4b05      	ldr	r3, [pc, #20]	; (17ac <prvTraceUpdateCounters+0x48>)
    1796:	58d3      	ldr	r3, [r2, r3]
    1798:	4798      	blx	r3
#endif
}
    179a:	b003      	add	sp, #12
    179c:	bd00      	pop	{pc}
    179e:	46c0      	nop			; (mov r8, r8)
    17a0:	000052ce 	.word	0x000052ce
    17a4:	00000024 	.word	0x00000024
    17a8:	000003e7 	.word	0x000003e7
    17ac:	000001f0 	.word	0x000001f0

000017b0 <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
    17b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    17b2:	4647      	mov	r7, r8
    17b4:	b480      	push	{r7}
    17b6:	b084      	sub	sp, #16
    17b8:	1c05      	adds	r5, r0, #0
    17ba:	4c41      	ldr	r4, [pc, #260]	; (18c0 <prvTraceGetDTS+0x110>)
    17bc:	447c      	add	r4, pc
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
	uint32_t dts = 0;
	uint32_t timestamp = 0;
    17be:	2300      	movs	r3, #0
    17c0:	9303      	str	r3, [sp, #12]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
    17c2:	28ff      	cmp	r0, #255	; 0xff
    17c4:	d009      	beq.n	17da <prvTraceGetDTS+0x2a>
    17c6:	4b3f      	ldr	r3, [pc, #252]	; (18c4 <prvTraceGetDTS+0x114>)
    17c8:	4298      	cmp	r0, r3
    17ca:	d006      	beq.n	17da <prvTraceGetDTS+0x2a>
    17cc:	483e      	ldr	r0, [pc, #248]	; (18c8 <prvTraceGetDTS+0x118>)
    17ce:	4478      	add	r0, pc
    17d0:	4b3e      	ldr	r3, [pc, #248]	; (18cc <prvTraceGetDTS+0x11c>)
    17d2:	58e3      	ldr	r3, [r4, r3]
    17d4:	4798      	blx	r3
    17d6:	2000      	movs	r0, #0
    17d8:	e06d      	b.n	18b6 <prvTraceGetDTS+0x106>

#if (SELECTED_PORT != PORT_ARM_CortexM)

	if (RecorderDataPtr->frequency == 0 && init_hwtc_count != HWTC_COUNT)
    17da:	4b3d      	ldr	r3, [pc, #244]	; (18d0 <prvTraceGetDTS+0x120>)
    17dc:	58e3      	ldr	r3, [r4, r3]
    17de:	681b      	ldr	r3, [r3, #0]
    17e0:	6a58      	ldr	r0, [r3, #36]	; 0x24
    17e2:	2800      	cmp	r0, #0
    17e4:	d10e      	bne.n	1804 <prvTraceGetDTS+0x54>
    17e6:	4a3b      	ldr	r2, [pc, #236]	; (18d4 <prvTraceGetDTS+0x124>)
    17e8:	58a2      	ldr	r2, [r4, r2]
    17ea:	493b      	ldr	r1, [pc, #236]	; (18d8 <prvTraceGetDTS+0x128>)
    17ec:	6809      	ldr	r1, [r1, #0]
    17ee:	6812      	ldr	r2, [r2, #0]
    17f0:	4291      	cmp	r1, r2
    17f2:	d007      	beq.n	1804 <prvTraceGetDTS+0x54>
#if (SELECTED_PORT == PORT_Win32)
		RecorderDataPtr->frequency = 100000;
#elif (SELECTED_PORT == PORT_HWIndependent)
		RecorderDataPtr->frequency = TRACE_TICK_RATE_HZ;
#else
		RecorderDataPtr->frequency = (HWTC_PERIOD * TRACE_TICK_RATE_HZ) / (uint32_t)HWTC_DIVISOR;
    17f4:	4a39      	ldr	r2, [pc, #228]	; (18dc <prvTraceGetDTS+0x12c>)
    17f6:	6811      	ldr	r1, [r2, #0]
    17f8:	3101      	adds	r1, #1
    17fa:	22fa      	movs	r2, #250	; 0xfa
    17fc:	0092      	lsls	r2, r2, #2
    17fe:	434a      	muls	r2, r1
    1800:	0852      	lsrs	r2, r2, #1
    1802:	625a      	str	r2, [r3, #36]	; 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	vTracePortGetTimeStamp(&timestamp);	
    1804:	a803      	add	r0, sp, #12
    1806:	4b36      	ldr	r3, [pc, #216]	; (18e0 <prvTraceGetDTS+0x130>)
    1808:	58e3      	ldr	r3, [r4, r3]
    180a:	4798      	blx	r3
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
    180c:	9b03      	ldr	r3, [sp, #12]
    180e:	4a35      	ldr	r2, [pc, #212]	; (18e4 <prvTraceGetDTS+0x134>)
    1810:	447a      	add	r2, pc
    1812:	6891      	ldr	r1, [r2, #8]
    1814:	1a5e      	subs	r6, r3, r1
	old_timestamp = timestamp;
    1816:	6093      	str	r3, [r2, #8]

	if (RecorderDataPtr->frequency > 0)
    1818:	4a2d      	ldr	r2, [pc, #180]	; (18d0 <prvTraceGetDTS+0x120>)
    181a:	58a2      	ldr	r2, [r4, r2]
    181c:	6817      	ldr	r7, [r2, #0]
    181e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1820:	4690      	mov	r8, r2
    1822:	2a00      	cmp	r2, #0
    1824:	d022      	beq.n	186c <prvTraceGetDTS+0xbc>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
    1826:	4296      	cmp	r6, r2
    1828:	d910      	bls.n	184c <prvTraceGetDTS+0x9c>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
    182a:	4b2f      	ldr	r3, [pc, #188]	; (18e8 <prvTraceGetDTS+0x138>)
    182c:	58e3      	ldr	r3, [r4, r3]
    182e:	1c30      	adds	r0, r6, #0
    1830:	1c11      	adds	r1, r2, #0
    1832:	4798      	blx	r3
    1834:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    1836:	1808      	adds	r0, r1, r0
    1838:	62f8      	str	r0, [r7, #44]	; 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
    183a:	4b2c      	ldr	r3, [pc, #176]	; (18ec <prvTraceGetDTS+0x13c>)
    183c:	58e3      	ldr	r3, [r4, r3]
    183e:	1c30      	adds	r0, r6, #0
    1840:	4641      	mov	r1, r8
    1842:	4798      	blx	r3
    1844:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1846:	1851      	adds	r1, r2, r1
    1848:	62b9      	str	r1, [r7, #40]	; 0x28
    184a:	e002      	b.n	1852 <prvTraceGetDTS+0xa2>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
    184c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    184e:	1983      	adds	r3, r0, r6
    1850:	62bb      	str	r3, [r7, #40]	; 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
    1852:	4b1f      	ldr	r3, [pc, #124]	; (18d0 <prvTraceGetDTS+0x120>)
    1854:	58e3      	ldr	r3, [r4, r3]
    1856:	681b      	ldr	r3, [r3, #0]
    1858:	6a99      	ldr	r1, [r3, #40]	; 0x28
    185a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    185c:	4291      	cmp	r1, r2
    185e:	d306      	bcc.n	186e <prvTraceGetDTS+0xbe>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
    1860:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    1862:	3001      	adds	r0, #1
    1864:	62d8      	str	r0, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
    1866:	1a8a      	subs	r2, r1, r2
    1868:	629a      	str	r2, [r3, #40]	; 0x28
    186a:	e000      	b.n	186e <prvTraceGetDTS+0xbe>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
    186c:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
    186e:	42ae      	cmp	r6, r5
    1870:	d91f      	bls.n	18b2 <prvTraceGetDTS+0x102>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) xTraceNextFreeEventBufferSlot();
    1872:	4b1f      	ldr	r3, [pc, #124]	; (18f0 <prvTraceGetDTS+0x140>)
    1874:	58e3      	ldr	r3, [r4, r3]
    1876:	4798      	blx	r3

		if (xts != NULL)
    1878:	2800      	cmp	r0, #0
    187a:	d01a      	beq.n	18b2 <prvTraceGetDTS+0x102>
		{
			if (param_maxDTS == 0xFFFF)
    187c:	4b11      	ldr	r3, [pc, #68]	; (18c4 <prvTraceGetDTS+0x114>)
    187e:	429d      	cmp	r5, r3
    1880:	d106      	bne.n	1890 <prvTraceGetDTS+0xe0>
			{
				xts->type = XTS16;
    1882:	23a9      	movs	r3, #169	; 0xa9
    1884:	7003      	strb	r3, [r0, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
    1886:	0c33      	lsrs	r3, r6, #16
    1888:	8043      	strh	r3, [r0, #2]
				xts->xts_8 = 0;
    188a:	2300      	movs	r3, #0
    188c:	7043      	strb	r3, [r0, #1]
    188e:	e00d      	b.n	18ac <prvTraceGetDTS+0xfc>
			}
			else if (param_maxDTS == 0xFF)
    1890:	2dff      	cmp	r5, #255	; 0xff
    1892:	d106      	bne.n	18a2 <prvTraceGetDTS+0xf2>
			{
				xts->type = XTS8;
    1894:	23a8      	movs	r3, #168	; 0xa8
    1896:	7003      	strb	r3, [r0, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
    1898:	0a33      	lsrs	r3, r6, #8
    189a:	8043      	strh	r3, [r0, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
    189c:	0e33      	lsrs	r3, r6, #24
    189e:	7043      	strb	r3, [r0, #1]
    18a0:	e004      	b.n	18ac <prvTraceGetDTS+0xfc>
			}
			else
			{
				vTraceError("Bad param_maxDTS in prvTraceGetDTS");
    18a2:	4814      	ldr	r0, [pc, #80]	; (18f4 <prvTraceGetDTS+0x144>)
    18a4:	4478      	add	r0, pc
    18a6:	4b09      	ldr	r3, [pc, #36]	; (18cc <prvTraceGetDTS+0x11c>)
    18a8:	58e3      	ldr	r3, [r4, r3]
    18aa:	4798      	blx	r3
			}
			prvTraceUpdateCounters();
    18ac:	4b12      	ldr	r3, [pc, #72]	; (18f8 <prvTraceGetDTS+0x148>)
    18ae:	58e3      	ldr	r3, [r4, r3]
    18b0:	4798      	blx	r3
		}
	}

	return (uint16_t)dts & param_maxDTS;
    18b2:	1c30      	adds	r0, r6, #0
    18b4:	4028      	ands	r0, r5
}
    18b6:	b004      	add	sp, #16
    18b8:	bc04      	pop	{r2}
    18ba:	4690      	mov	r8, r2
    18bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    18be:	46c0      	nop			; (mov r8, r8)
    18c0:	0000527c 	.word	0x0000527c
    18c4:	0000ffff 	.word	0x0000ffff
    18c8:	000045ba 	.word	0x000045ba
    18cc:	0000010c 	.word	0x0000010c
    18d0:	00000024 	.word	0x00000024
    18d4:	00000254 	.word	0x00000254
    18d8:	e000e018 	.word	0xe000e018
    18dc:	e000e014 	.word	0xe000e014
    18e0:	0000004c 	.word	0x0000004c
    18e4:	1fffec80 	.word	0x1fffec80
    18e8:	00000198 	.word	0x00000198
    18ec:	00000228 	.word	0x00000228
    18f0:	000000d8 	.word	0x000000d8
    18f4:	00004524 	.word	0x00004524
    18f8:	00000218 	.word	0x00000218

000018fc <prvTraceLookupSymbolTableEntry>:
 ******************************************************************************/
traceLabel prvTraceLookupSymbolTableEntry(const char* name,
										 uint8_t crc6,
										 uint8_t len,
										 traceLabel chn)
{
    18fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    18fe:	465f      	mov	r7, fp
    1900:	4656      	mov	r6, sl
    1902:	464d      	mov	r5, r9
    1904:	4644      	mov	r4, r8
    1906:	b4f0      	push	{r4, r5, r6, r7}
    1908:	b083      	sub	sp, #12
    190a:	4683      	mov	fp, r0
    190c:	4692      	mov	sl, r2
    190e:	4831      	ldr	r0, [pc, #196]	; (19d4 <prvTraceLookupSymbolTableEntry+0xd8>)
    1910:	4478      	add	r0, pc
    1912:	4681      	mov	r9, r0
	uint16_t i = RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ];
    1914:	4a30      	ldr	r2, [pc, #192]	; (19d8 <prvTraceLookupSymbolTableEntry+0xdc>)
    1916:	5882      	ldr	r2, [r0, r2]
    1918:	6816      	ldr	r6, [r2, #0]
    191a:	22ea      	movs	r2, #234	; 0xea
    191c:	0092      	lsls	r2, r2, #2
    191e:	1889      	adds	r1, r1, r2
    1920:	0049      	lsls	r1, r1, #1
    1922:	5b8c      	ldrh	r4, [r1, r6]

	TRACE_ASSERT(name != NULL, "prvTraceLookupSymbolTableEntry: name == NULL", (traceLabel)0);
    1924:	4658      	mov	r0, fp
    1926:	2800      	cmp	r0, #0
    1928:	d107      	bne.n	193a <prvTraceLookupSymbolTableEntry+0x3e>
    192a:	482c      	ldr	r0, [pc, #176]	; (19dc <prvTraceLookupSymbolTableEntry+0xe0>)
    192c:	4478      	add	r0, pc
    192e:	4b2c      	ldr	r3, [pc, #176]	; (19e0 <prvTraceLookupSymbolTableEntry+0xe4>)
    1930:	464a      	mov	r2, r9
    1932:	58d3      	ldr	r3, [r2, r3]
    1934:	4798      	blx	r3
    1936:	2000      	movs	r0, #0
    1938:	e044      	b.n	19c4 <prvTraceLookupSymbolTableEntry+0xc8>
	TRACE_ASSERT(len != 0, "prvTraceLookupSymbolTableEntry: len == 0", (traceLabel)0);
    193a:	4650      	mov	r0, sl
    193c:	2800      	cmp	r0, #0
    193e:	d002      	beq.n	1946 <prvTraceLookupSymbolTableEntry+0x4a>

	while (i != 0)
    1940:	1e20      	subs	r0, r4, #0
    1942:	d03f      	beq.n	19c4 <prvTraceLookupSymbolTableEntry+0xc8>
    1944:	e007      	b.n	1956 <prvTraceLookupSymbolTableEntry+0x5a>
										 traceLabel chn)
{
	uint16_t i = RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ];

	TRACE_ASSERT(name != NULL, "prvTraceLookupSymbolTableEntry: name == NULL", (traceLabel)0);
	TRACE_ASSERT(len != 0, "prvTraceLookupSymbolTableEntry: len == 0", (traceLabel)0);
    1946:	4827      	ldr	r0, [pc, #156]	; (19e4 <prvTraceLookupSymbolTableEntry+0xe8>)
    1948:	4478      	add	r0, pc
    194a:	4b25      	ldr	r3, [pc, #148]	; (19e0 <prvTraceLookupSymbolTableEntry+0xe4>)
    194c:	464a      	mov	r2, r9
    194e:	58d3      	ldr	r3, [r2, r3]
    1950:	4798      	blx	r3
    1952:	2000      	movs	r0, #0
    1954:	e036      	b.n	19c4 <prvTraceLookupSymbolTableEntry+0xc8>

	while (i != 0)
	{
		if (RecorderDataPtr->SymbolTable.symbytes[i + 2] == (chn & 0x00FF))
		{
			if (RecorderDataPtr->SymbolTable.symbytes[i + 3] == (chn / 0x100))
    1956:	0a18      	lsrs	r0, r3, #8
    1958:	4680      	mov	r8, r0
	TRACE_ASSERT(name != NULL, "prvTraceLookupSymbolTableEntry: name == NULL", (traceLabel)0);
	TRACE_ASSERT(len != 0, "prvTraceLookupSymbolTableEntry: len == 0", (traceLabel)0);

	while (i != 0)
	{
		if (RecorderDataPtr->SymbolTable.symbytes[i + 2] == (chn & 0x00FF))
    195a:	27ff      	movs	r7, #255	; 0xff
    195c:	401f      	ands	r7, r3
    195e:	1c25      	adds	r5, r4, #0
    1960:	1933      	adds	r3, r6, r4
    1962:	4a21      	ldr	r2, [pc, #132]	; (19e8 <prvTraceLookupSymbolTableEntry+0xec>)
    1964:	189b      	adds	r3, r3, r2
    1966:	781b      	ldrb	r3, [r3, #0]
    1968:	42bb      	cmp	r3, r7
    196a:	d11a      	bne.n	19a2 <prvTraceLookupSymbolTableEntry+0xa6>
		{
			if (RecorderDataPtr->SymbolTable.symbytes[i + 3] == (chn / 0x100))
    196c:	1933      	adds	r3, r6, r4
    196e:	481f      	ldr	r0, [pc, #124]	; (19ec <prvTraceLookupSymbolTableEntry+0xf0>)
    1970:	181b      	adds	r3, r3, r0
    1972:	781b      	ldrb	r3, [r3, #0]
    1974:	4543      	cmp	r3, r8
    1976:	d114      	bne.n	19a2 <prvTraceLookupSymbolTableEntry+0xa6>
			{
				if (RecorderDataPtr->SymbolTable.symbytes[i + 4 + len] == '\0')
    1978:	1d20      	adds	r0, r4, #4
    197a:	1833      	adds	r3, r6, r0
    197c:	4453      	add	r3, sl
    197e:	2286      	movs	r2, #134	; 0x86
    1980:	00d2      	lsls	r2, r2, #3
    1982:	189b      	adds	r3, r3, r2
    1984:	781b      	ldrb	r3, [r3, #0]
    1986:	2b00      	cmp	r3, #0
    1988:	d10b      	bne.n	19a2 <prvTraceLookupSymbolTableEntry+0xa6>
				{
					if (strncmp((char*)(& RecorderDataPtr->SymbolTable.symbytes[i + 4]), name, len) == 0)
    198a:	1880      	adds	r0, r0, r2
    198c:	1830      	adds	r0, r6, r0
    198e:	4659      	mov	r1, fp
    1990:	4652      	mov	r2, sl
    1992:	4b17      	ldr	r3, [pc, #92]	; (19f0 <prvTraceLookupSymbolTableEntry+0xf4>)
    1994:	469c      	mov	ip, r3
    1996:	464b      	mov	r3, r9
    1998:	4463      	add	r3, ip
    199a:	681b      	ldr	r3, [r3, #0]
    199c:	4798      	blx	r3
    199e:	2800      	cmp	r0, #0
    19a0:	d00d      	beq.n	19be <prvTraceLookupSymbolTableEntry+0xc2>
						break; /* found */
					}
				}
			}
		}
		i = (uint16_t)(RecorderDataPtr->SymbolTable.symbytes[i] + (RecorderDataPtr->SymbolTable.symbytes[i + 1] * 0x100));
    19a2:	1975      	adds	r5, r6, r5
    19a4:	4813      	ldr	r0, [pc, #76]	; (19f4 <prvTraceLookupSymbolTableEntry+0xf8>)
    19a6:	182b      	adds	r3, r5, r0
    19a8:	781c      	ldrb	r4, [r3, #0]
    19aa:	0224      	lsls	r4, r4, #8
    19ac:	2286      	movs	r2, #134	; 0x86
    19ae:	00d2      	lsls	r2, r2, #3
    19b0:	18ad      	adds	r5, r5, r2
    19b2:	782b      	ldrb	r3, [r5, #0]
    19b4:	191c      	adds	r4, r3, r4
    19b6:	b2a4      	uxth	r4, r4
	uint16_t i = RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ];

	TRACE_ASSERT(name != NULL, "prvTraceLookupSymbolTableEntry: name == NULL", (traceLabel)0);
	TRACE_ASSERT(len != 0, "prvTraceLookupSymbolTableEntry: len == 0", (traceLabel)0);

	while (i != 0)
    19b8:	2c00      	cmp	r4, #0
    19ba:	d1d0      	bne.n	195e <prvTraceLookupSymbolTableEntry+0x62>
    19bc:	e001      	b.n	19c2 <prvTraceLookupSymbolTableEntry+0xc6>
    19be:	1c20      	adds	r0, r4, #0
    19c0:	e000      	b.n	19c4 <prvTraceLookupSymbolTableEntry+0xc8>
						break; /* found */
					}
				}
			}
		}
		i = (uint16_t)(RecorderDataPtr->SymbolTable.symbytes[i] + (RecorderDataPtr->SymbolTable.symbytes[i + 1] * 0x100));
    19c2:	1c20      	adds	r0, r4, #0
	}
	return i;
}
    19c4:	b003      	add	sp, #12
    19c6:	bc3c      	pop	{r2, r3, r4, r5}
    19c8:	4690      	mov	r8, r2
    19ca:	4699      	mov	r9, r3
    19cc:	46a2      	mov	sl, r4
    19ce:	46ab      	mov	fp, r5
    19d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    19d2:	46c0      	nop			; (mov r8, r8)
    19d4:	00005128 	.word	0x00005128
    19d8:	00000024 	.word	0x00000024
    19dc:	000044c0 	.word	0x000044c0
    19e0:	0000010c 	.word	0x0000010c
    19e4:	000044e0 	.word	0x000044e0
    19e8:	00000432 	.word	0x00000432
    19ec:	00000433 	.word	0x00000433
    19f0:	0000013c 	.word	0x0000013c
    19f4:	00000431 	.word	0x00000431

000019f8 <prvTraceCreateSymbolTableEntry>:
 ******************************************************************************/
uint16_t prvTraceCreateSymbolTableEntry(const char* name,
										uint8_t crc6,
										uint8_t len,
										traceLabel channel)
{
    19f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    19fa:	465f      	mov	r7, fp
    19fc:	4656      	mov	r6, sl
    19fe:	464d      	mov	r5, r9
    1a00:	4644      	mov	r4, r8
    1a02:	b4f0      	push	{r4, r5, r6, r7}
    1a04:	b083      	sub	sp, #12
    1a06:	1c06      	adds	r6, r0, #0
    1a08:	1c15      	adds	r5, r2, #0
    1a0a:	4c31      	ldr	r4, [pc, #196]	; (1ad0 <prvTraceCreateSymbolTableEntry+0xd8>)
    1a0c:	447c      	add	r4, pc
	uint16_t ret = 0;

	TRACE_ASSERT(name != NULL, "prvTraceCreateSymbolTableEntry: name == NULL", 0);
    1a0e:	2800      	cmp	r0, #0
    1a10:	d106      	bne.n	1a20 <prvTraceCreateSymbolTableEntry+0x28>
    1a12:	4830      	ldr	r0, [pc, #192]	; (1ad4 <prvTraceCreateSymbolTableEntry+0xdc>)
    1a14:	4478      	add	r0, pc
    1a16:	4b30      	ldr	r3, [pc, #192]	; (1ad8 <prvTraceCreateSymbolTableEntry+0xe0>)
    1a18:	58e3      	ldr	r3, [r4, r3]
    1a1a:	4798      	blx	r3
    1a1c:	2000      	movs	r0, #0
    1a1e:	e050      	b.n	1ac2 <prvTraceCreateSymbolTableEntry+0xca>
	TRACE_ASSERT(len != 0, "prvTraceCreateSymbolTableEntry: len == 0", 0);
    1a20:	2a00      	cmp	r2, #0
    1a22:	d106      	bne.n	1a32 <prvTraceCreateSymbolTableEntry+0x3a>
    1a24:	482d      	ldr	r0, [pc, #180]	; (1adc <prvTraceCreateSymbolTableEntry+0xe4>)
    1a26:	4478      	add	r0, pc
    1a28:	4b2b      	ldr	r3, [pc, #172]	; (1ad8 <prvTraceCreateSymbolTableEntry+0xe0>)
    1a2a:	58e3      	ldr	r3, [r4, r3]
    1a2c:	4798      	blx	r3
    1a2e:	2000      	movs	r0, #0
    1a30:	e047      	b.n	1ac2 <prvTraceCreateSymbolTableEntry+0xca>

	if (RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + len + 4 >= SYMBOL_TABLE_SIZE)
    1a32:	4a2b      	ldr	r2, [pc, #172]	; (1ae0 <prvTraceCreateSymbolTableEntry+0xe8>)
    1a34:	58a2      	ldr	r2, [r4, r2]
    1a36:	6812      	ldr	r2, [r2, #0]
    1a38:	482a      	ldr	r0, [pc, #168]	; (1ae4 <prvTraceCreateSymbolTableEntry+0xec>)
    1a3a:	5817      	ldr	r7, [r2, r0]
    1a3c:	46ba      	mov	sl, r7
    1a3e:	2004      	movs	r0, #4
    1a40:	4683      	mov	fp, r0
    1a42:	44d3      	add	fp, sl
    1a44:	46a9      	mov	r9, r5
    1a46:	44d9      	add	r9, fp
    1a48:	4827      	ldr	r0, [pc, #156]	; (1ae8 <prvTraceCreateSymbolTableEntry+0xf0>)
    1a4a:	4581      	cmp	r9, r0
    1a4c:	d906      	bls.n	1a5c <prvTraceCreateSymbolTableEntry+0x64>
	{
		vTraceError("Symbol table full. Increase SYMBOL_TABLE_SIZE in trcConfig.h");
    1a4e:	4827      	ldr	r0, [pc, #156]	; (1aec <prvTraceCreateSymbolTableEntry+0xf4>)
    1a50:	4478      	add	r0, pc
    1a52:	4b21      	ldr	r3, [pc, #132]	; (1ad8 <prvTraceCreateSymbolTableEntry+0xe0>)
    1a54:	58e3      	ldr	r3, [r4, r3]
    1a56:	4798      	blx	r3
		ret = 0;
    1a58:	2000      	movs	r0, #0
    1a5a:	e032      	b.n	1ac2 <prvTraceCreateSymbolTableEntry+0xca>
	else
	{

		RecorderDataPtr->SymbolTable.symbytes
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex] =
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] & 0x00FF);
    1a5c:	27ea      	movs	r7, #234	; 0xea
    1a5e:	00bf      	lsls	r7, r7, #2
    1a60:	19c9      	adds	r1, r1, r7
    1a62:	0049      	lsls	r1, r1, #1
    1a64:	4688      	mov	r8, r1
    1a66:	5a88      	ldrh	r0, [r1, r2]
    1a68:	4681      	mov	r9, r0
	}
	else
	{

		RecorderDataPtr->SymbolTable.symbytes
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex] =
    1a6a:	4651      	mov	r1, sl
    1a6c:	1850      	adds	r0, r2, r1
    1a6e:	2786      	movs	r7, #134	; 0x86
    1a70:	00ff      	lsls	r7, r7, #3
    1a72:	4649      	mov	r1, r9
    1a74:	5439      	strb	r1, [r7, r0]
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] & 0x00FF);

		RecorderDataPtr->SymbolTable.symbytes
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 1] =
    1a76:	4f1e      	ldr	r7, [pc, #120]	; (1af0 <prvTraceCreateSymbolTableEntry+0xf8>)
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] / 0x100);
    1a78:	4649      	mov	r1, r9
    1a7a:	0a09      	lsrs	r1, r1, #8
		RecorderDataPtr->SymbolTable.symbytes
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex] =
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] & 0x00FF);

		RecorderDataPtr->SymbolTable.symbytes
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 1] =
    1a7c:	5439      	strb	r1, [r7, r0]
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] / 0x100);

		RecorderDataPtr->SymbolTable.symbytes
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 2] =
    1a7e:	4f1d      	ldr	r7, [pc, #116]	; (1af4 <prvTraceCreateSymbolTableEntry+0xfc>)
    1a80:	543b      	strb	r3, [r7, r0]
			(uint8_t)(channel & 0x00FF);

		RecorderDataPtr->SymbolTable.symbytes
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 3] =
    1a82:	491d      	ldr	r1, [pc, #116]	; (1af8 <prvTraceCreateSymbolTableEntry+0x100>)
    1a84:	1840      	adds	r0, r0, r1
			(uint8_t)(channel / 0x100);
    1a86:	0a1b      	lsrs	r3, r3, #8
		RecorderDataPtr->SymbolTable.symbytes
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 2] =
			(uint8_t)(channel & 0x00FF);

		RecorderDataPtr->SymbolTable.symbytes
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 3] =
    1a88:	7003      	strb	r3, [r0, #0]
			(uint8_t)(channel / 0x100);

		/* set name (bytes 4...4+len-1) */
		(void)strncpy((char*)&(RecorderDataPtr->SymbolTable.symbytes
    1a8a:	2386      	movs	r3, #134	; 0x86
    1a8c:	00db      	lsls	r3, r3, #3
    1a8e:	1c1f      	adds	r7, r3, #0
    1a90:	445f      	add	r7, fp
    1a92:	19d0      	adds	r0, r2, r7
    1a94:	1c31      	adds	r1, r6, #0
    1a96:	1c2a      	adds	r2, r5, #0
    1a98:	4b18      	ldr	r3, [pc, #96]	; (1afc <prvTraceCreateSymbolTableEntry+0x104>)
    1a9a:	58e3      	ldr	r3, [r4, r3]
    1a9c:	4798      	blx	r3
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 4]), name, len);

		/* Set zero termination (at offset 4+len) */
		RecorderDataPtr->SymbolTable.symbytes
			[RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 4 + len] = '\0';
    1a9e:	4b10      	ldr	r3, [pc, #64]	; (1ae0 <prvTraceCreateSymbolTableEntry+0xe8>)
    1aa0:	58e3      	ldr	r3, [r4, r3]
    1aa2:	681b      	ldr	r3, [r3, #0]
    1aa4:	4a0f      	ldr	r2, [pc, #60]	; (1ae4 <prvTraceCreateSymbolTableEntry+0xec>)
    1aa6:	5899      	ldr	r1, [r3, r2]
    1aa8:	1868      	adds	r0, r5, r1
    1aaa:	181c      	adds	r4, r3, r0
    1aac:	4e14      	ldr	r6, [pc, #80]	; (1b00 <prvTraceCreateSymbolTableEntry+0x108>)
    1aae:	19a4      	adds	r4, r4, r6
    1ab0:	2600      	movs	r6, #0
    1ab2:	7026      	strb	r6, [r4, #0]

		/* store index of entry (for return value, and as head of LL[crc6]) */
		RecorderDataPtr->SymbolTable.latestEntryOfChecksum
			[ crc6 ] = (uint16_t)RecorderDataPtr->SymbolTable.nextFreeSymbolIndex;
    1ab4:	4647      	mov	r7, r8
    1ab6:	52f9      	strh	r1, [r7, r3]

		RecorderDataPtr->SymbolTable.nextFreeSymbolIndex += (len + 5);
    1ab8:	3005      	adds	r0, #5
    1aba:	5098      	str	r0, [r3, r2]

		ret = (uint16_t)(RecorderDataPtr->SymbolTable.nextFreeSymbolIndex -
    1abc:	1b40      	subs	r0, r0, r5
    1abe:	3805      	subs	r0, #5
    1ac0:	b280      	uxth	r0, r0
			(len + 5));
	}

	return ret;
}
    1ac2:	b003      	add	sp, #12
    1ac4:	bc3c      	pop	{r2, r3, r4, r5}
    1ac6:	4690      	mov	r8, r2
    1ac8:	4699      	mov	r9, r3
    1aca:	46a2      	mov	sl, r4
    1acc:	46ab      	mov	fp, r5
    1ace:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ad0:	0000502c 	.word	0x0000502c
    1ad4:	0000444c 	.word	0x0000444c
    1ad8:	0000010c 	.word	0x0000010c
    1adc:	00004476 	.word	0x00004476
    1ae0:	00000024 	.word	0x00000024
    1ae4:	0000042c 	.word	0x0000042c
    1ae8:	0000031f 	.word	0x0000031f
    1aec:	00004484 	.word	0x00004484
    1af0:	00000431 	.word	0x00000431
    1af4:	00000432 	.word	0x00000432
    1af8:	00000433 	.word	0x00000433
    1afc:	00000148 	.word	0x00000148
    1b00:	00000434 	.word	0x00000434

00001b04 <prvTraceGetChecksum>:
 *
 * Calculates a simple 6-bit checksum from a string, used to index the string
 * for fast symbol table lookup.
 ******************************************************************************/
void prvTraceGetChecksum(const char *pname, uint8_t* pcrc, uint8_t* plength)
{
    1b04:	b530      	push	{r4, r5, lr}
    1b06:	b083      	sub	sp, #12
    1b08:	4b18      	ldr	r3, [pc, #96]	; (1b6c <prvTraceGetChecksum+0x68>)
    1b0a:	447b      	add	r3, pc
	unsigned char c;
	int length = 1;		/* Should be 1 to account for '\0' */
	int crc = 0;

	TRACE_ASSERT(pname != NULL, "prvTraceGetChecksum: pname == NULL", );
    1b0c:	2800      	cmp	r0, #0
    1b0e:	d106      	bne.n	1b1e <prvTraceGetChecksum+0x1a>
    1b10:	4817      	ldr	r0, [pc, #92]	; (1b70 <prvTraceGetChecksum+0x6c>)
    1b12:	4478      	add	r0, pc
    1b14:	4a17      	ldr	r2, [pc, #92]	; (1b74 <prvTraceGetChecksum+0x70>)
    1b16:	589a      	ldr	r2, [r3, r2]
    1b18:	9201      	str	r2, [sp, #4]
    1b1a:	4790      	blx	r2
    1b1c:	e024      	b.n	1b68 <prvTraceGetChecksum+0x64>
	TRACE_ASSERT(pcrc != NULL, "prvTraceGetChecksum: pcrc == NULL", );
    1b1e:	2900      	cmp	r1, #0
    1b20:	d106      	bne.n	1b30 <prvTraceGetChecksum+0x2c>
    1b22:	4815      	ldr	r0, [pc, #84]	; (1b78 <prvTraceGetChecksum+0x74>)
    1b24:	4478      	add	r0, pc
    1b26:	4a13      	ldr	r2, [pc, #76]	; (1b74 <prvTraceGetChecksum+0x70>)
    1b28:	589a      	ldr	r2, [r3, r2]
    1b2a:	9201      	str	r2, [sp, #4]
    1b2c:	4790      	blx	r2
    1b2e:	e01b      	b.n	1b68 <prvTraceGetChecksum+0x64>
	TRACE_ASSERT(plength != NULL, "prvTraceGetChecksum: plength == NULL", );
    1b30:	2a00      	cmp	r2, #0
    1b32:	d106      	bne.n	1b42 <prvTraceGetChecksum+0x3e>
    1b34:	4811      	ldr	r0, [pc, #68]	; (1b7c <prvTraceGetChecksum+0x78>)
    1b36:	4478      	add	r0, pc
    1b38:	4a0e      	ldr	r2, [pc, #56]	; (1b74 <prvTraceGetChecksum+0x70>)
    1b3a:	589a      	ldr	r2, [r3, r2]
    1b3c:	9201      	str	r2, [sp, #4]
    1b3e:	4790      	blx	r2
    1b40:	e012      	b.n	1b68 <prvTraceGetChecksum+0x64>

	if (pname != (const char *) 0)
	{
		for (; (c = *pname++) != '\0';)
    1b42:	7804      	ldrb	r4, [r0, #0]
    1b44:	2c00      	cmp	r4, #0
    1b46:	d009      	beq.n	1b5c <prvTraceGetChecksum+0x58>
    1b48:	2500      	movs	r5, #0
    1b4a:	2301      	movs	r3, #1
		{
			crc += c;
    1b4c:	192d      	adds	r5, r5, r4
			length++;
    1b4e:	3301      	adds	r3, #1
    1b50:	18c4      	adds	r4, r0, r3
    1b52:	3c01      	subs	r4, #1
	TRACE_ASSERT(pcrc != NULL, "prvTraceGetChecksum: pcrc == NULL", );
	TRACE_ASSERT(plength != NULL, "prvTraceGetChecksum: plength == NULL", );

	if (pname != (const char *) 0)
	{
		for (; (c = *pname++) != '\0';)
    1b54:	7824      	ldrb	r4, [r4, #0]
    1b56:	2c00      	cmp	r4, #0
    1b58:	d1f8      	bne.n	1b4c <prvTraceGetChecksum+0x48>
    1b5a:	e001      	b.n	1b60 <prvTraceGetChecksum+0x5c>
    1b5c:	2500      	movs	r5, #0
    1b5e:	2301      	movs	r3, #1
		{
			crc += c;
			length++;
		}
	}
	*pcrc = (uint8_t)(crc & 0x3F);
    1b60:	203f      	movs	r0, #63	; 0x3f
    1b62:	4005      	ands	r5, r0
    1b64:	700d      	strb	r5, [r1, #0]
	*plength = (uint8_t)length;
    1b66:	7013      	strb	r3, [r2, #0]
}
    1b68:	b003      	add	sp, #12
    1b6a:	bd30      	pop	{r4, r5, pc}
    1b6c:	00004f2e 	.word	0x00004f2e
    1b70:	00004402 	.word	0x00004402
    1b74:	0000010c 	.word	0x0000010c
    1b78:	00004424 	.word	0x00004424
    1b7c:	00004442 	.word	0x00004442

00001b80 <prvTraceOpenSymbol>:
		}
	}
}

traceLabel prvTraceOpenSymbol(const char* name, traceLabel userEventChannel)
{
    1b80:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b82:	464f      	mov	r7, r9
    1b84:	4646      	mov	r6, r8
    1b86:	b4c0      	push	{r6, r7}
    1b88:	b085      	sub	sp, #20
    1b8a:	1c05      	adds	r5, r0, #0
    1b8c:	4688      	mov	r8, r1
    1b8e:	4c22      	ldr	r4, [pc, #136]	; (1c18 <prvTraceOpenSymbol+0x98>)
    1b90:	447c      	add	r4, pc
	uint16_t result;
	uint8_t len;
	uint8_t crc;
	TRACE_SR_ALLOC_CRITICAL_SECTION();
	
	len = 0;
    1b92:	2200      	movs	r2, #0
    1b94:	466b      	mov	r3, sp
    1b96:	73da      	strb	r2, [r3, #15]
	crc = 0;
    1b98:	466b      	mov	r3, sp
    1b9a:	739a      	strb	r2, [r3, #14]
	
	TRACE_ASSERT(name != NULL, "prvTraceOpenSymbol: name == NULL", (traceLabel)0);
    1b9c:	2800      	cmp	r0, #0
    1b9e:	d106      	bne.n	1bae <prvTraceOpenSymbol+0x2e>
    1ba0:	481e      	ldr	r0, [pc, #120]	; (1c1c <prvTraceOpenSymbol+0x9c>)
    1ba2:	4478      	add	r0, pc
    1ba4:	4b1e      	ldr	r3, [pc, #120]	; (1c20 <prvTraceOpenSymbol+0xa0>)
    1ba6:	58e3      	ldr	r3, [r4, r3]
    1ba8:	4798      	blx	r3
    1baa:	2000      	movs	r0, #0
    1bac:	e02e      	b.n	1c0c <prvTraceOpenSymbol+0x8c>

	prvTraceGetChecksum(name, &crc, &len);
    1bae:	466f      	mov	r7, sp
    1bb0:	370e      	adds	r7, #14
    1bb2:	1c39      	adds	r1, r7, #0
    1bb4:	466e      	mov	r6, sp
    1bb6:	360f      	adds	r6, #15
    1bb8:	1c32      	adds	r2, r6, #0
    1bba:	4b1a      	ldr	r3, [pc, #104]	; (1c24 <prvTraceOpenSymbol+0xa4>)
    1bbc:	58e3      	ldr	r3, [r4, r3]
    1bbe:	4798      	blx	r3

	trcCRITICAL_SECTION_BEGIN();
    1bc0:	4b19      	ldr	r3, [pc, #100]	; (1c28 <prvTraceOpenSymbol+0xa8>)
    1bc2:	58e3      	ldr	r3, [r4, r3]
    1bc4:	4798      	blx	r3
    1bc6:	4681      	mov	r9, r0
    1bc8:	4b18      	ldr	r3, [pc, #96]	; (1c2c <prvTraceOpenSymbol+0xac>)
    1bca:	58e3      	ldr	r3, [r4, r3]
    1bcc:	681a      	ldr	r2, [r3, #0]
    1bce:	3201      	adds	r2, #1
    1bd0:	601a      	str	r2, [r3, #0]
	result = prvTraceLookupSymbolTableEntry(name, crc, len, userEventChannel);
    1bd2:	7839      	ldrb	r1, [r7, #0]
    1bd4:	7832      	ldrb	r2, [r6, #0]
    1bd6:	1c28      	adds	r0, r5, #0
    1bd8:	4643      	mov	r3, r8
    1bda:	4e15      	ldr	r6, [pc, #84]	; (1c30 <prvTraceOpenSymbol+0xb0>)
    1bdc:	59a6      	ldr	r6, [r4, r6]
    1bde:	47b0      	blx	r6
    1be0:	1e06      	subs	r6, r0, #0
	if (!result)
    1be2:	d109      	bne.n	1bf8 <prvTraceOpenSymbol+0x78>
	{
		result = prvTraceCreateSymbolTableEntry(name, crc, len, userEventChannel);
    1be4:	466b      	mov	r3, sp
    1be6:	7b99      	ldrb	r1, [r3, #14]
    1be8:	466b      	mov	r3, sp
    1bea:	7bda      	ldrb	r2, [r3, #15]
    1bec:	1c28      	adds	r0, r5, #0
    1bee:	4643      	mov	r3, r8
    1bf0:	4d10      	ldr	r5, [pc, #64]	; (1c34 <prvTraceOpenSymbol+0xb4>)
    1bf2:	5965      	ldr	r5, [r4, r5]
    1bf4:	47a8      	blx	r5
    1bf6:	1c06      	adds	r6, r0, #0
	}
	trcCRITICAL_SECTION_END();
    1bf8:	4b0c      	ldr	r3, [pc, #48]	; (1c2c <prvTraceOpenSymbol+0xac>)
    1bfa:	58e3      	ldr	r3, [r4, r3]
    1bfc:	681a      	ldr	r2, [r3, #0]
    1bfe:	3a01      	subs	r2, #1
    1c00:	601a      	str	r2, [r3, #0]
    1c02:	4648      	mov	r0, r9
    1c04:	4b0c      	ldr	r3, [pc, #48]	; (1c38 <prvTraceOpenSymbol+0xb8>)
    1c06:	58e3      	ldr	r3, [r4, r3]
    1c08:	4798      	blx	r3

	return result;
    1c0a:	1c30      	adds	r0, r6, #0
}
    1c0c:	b005      	add	sp, #20
    1c0e:	bc0c      	pop	{r2, r3}
    1c10:	4690      	mov	r8, r2
    1c12:	4699      	mov	r9, r3
    1c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c16:	46c0      	nop			; (mov r8, r8)
    1c18:	00004ea8 	.word	0x00004ea8
    1c1c:	0000440a 	.word	0x0000440a
    1c20:	0000010c 	.word	0x0000010c
    1c24:	0000015c 	.word	0x0000015c
    1c28:	00000244 	.word	0x00000244
    1c2c:	0000028c 	.word	0x0000028c
    1c30:	000001d8 	.word	0x000001d8
    1c34:	000001e8 	.word	0x000001e8
    1c38:	00000120 	.word	0x00000120

00001c3c <vTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of vTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void vTracePortGetTimeStamp(uint32_t *pTimestamp)
{
    1c3c:	b570      	push	{r4, r5, r6, lr}
    1c3e:	4b1f      	ldr	r3, [pc, #124]	; (1cbc <vTracePortGetTimeStamp+0x80>)
    1c40:	447b      	add	r3, pc
	static uint32_t last_traceTickCount = 0;
	static uint32_t last_hwtc_count = 0;
	uint32_t traceTickCount = 0;
	uint32_t hwtc_count = 0;

	if (trace_disable_timestamp == 1)
    1c42:	4a1f      	ldr	r2, [pc, #124]	; (1cc0 <vTracePortGetTimeStamp+0x84>)
    1c44:	589a      	ldr	r2, [r3, r2]
    1c46:	6812      	ldr	r2, [r2, #0]
    1c48:	2a01      	cmp	r2, #1
    1c4a:	d106      	bne.n	1c5a <vTracePortGetTimeStamp+0x1e>
	{
		if (pTimestamp)
    1c4c:	2800      	cmp	r0, #0
    1c4e:	d034      	beq.n	1cba <vTracePortGetTimeStamp+0x7e>
			*pTimestamp = last_timestamp;
    1c50:	4a1c      	ldr	r2, [pc, #112]	; (1cc4 <vTracePortGetTimeStamp+0x88>)
    1c52:	589b      	ldr	r3, [r3, r2]
    1c54:	681b      	ldr	r3, [r3, #0]
    1c56:	6003      	str	r3, [r0, #0]
    1c58:	e02f      	b.n	1cba <vTracePortGetTimeStamp+0x7e>

	/* Retrieve HWTC_COUNT only once since the same value should be used all throughout this function. */
#if (HWTC_COUNT_DIRECTION == DIRECTION_INCREMENTING)
	hwtc_count = HWTC_COUNT;
#elif (HWTC_COUNT_DIRECTION == DIRECTION_DECREMENTING)
	hwtc_count = HWTC_PERIOD - HWTC_COUNT;
    1c5a:	4a1b      	ldr	r2, [pc, #108]	; (1cc8 <vTracePortGetTimeStamp+0x8c>)
    1c5c:	6814      	ldr	r4, [r2, #0]
    1c5e:	3401      	adds	r4, #1
    1c60:	4a1a      	ldr	r2, [pc, #104]	; (1ccc <vTracePortGetTimeStamp+0x90>)
    1c62:	6811      	ldr	r1, [r2, #0]
    1c64:	1a61      	subs	r1, r4, r1
	{
		hwtc_count = last_hwtc_count;
	}
#endif

	if (last_traceTickCount - uiTraceTickCount - 1 < 0x80000000)
    1c66:	4a1a      	ldr	r2, [pc, #104]	; (1cd0 <vTracePortGetTimeStamp+0x94>)
    1c68:	447a      	add	r2, pc
    1c6a:	6815      	ldr	r5, [r2, #0]
    1c6c:	4a19      	ldr	r2, [pc, #100]	; (1cd4 <vTracePortGetTimeStamp+0x98>)
    1c6e:	589a      	ldr	r2, [r3, r2]
    1c70:	6812      	ldr	r2, [r2, #0]
    1c72:	43d6      	mvns	r6, r2
    1c74:	42ee      	cmn	r6, r5
    1c76:	d502      	bpl.n	1c7e <vTracePortGetTimeStamp+0x42>
		traceTickCount = uiTraceTickCount;
	}

	/* Check for overflow. May occur if the update of uiTraceTickCount has been
	delayed due to disabled interrupts. */
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
    1c78:	4295      	cmp	r5, r2
    1c7a:	d107      	bne.n	1c8c <vTracePortGetTimeStamp+0x50>
		traceTickCount = last_traceTickCount;
	}
	else
	{
		/* Business as usual */
		traceTickCount = uiTraceTickCount;
    1c7c:	1c15      	adds	r5, r2, #0
	}

	/* Check for overflow. May occur if the update of uiTraceTickCount has been
	delayed due to disabled interrupts. */
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
    1c7e:	4a16      	ldr	r2, [pc, #88]	; (1cd8 <vTracePortGetTimeStamp+0x9c>)
    1c80:	447a      	add	r2, pc
    1c82:	6852      	ldr	r2, [r2, #4]
	{
		/* A trace tick has occurred but not been executed by the kernel, so we compensate manually. */
		traceTickCount++;
    1c84:	4291      	cmp	r1, r2
    1c86:	4192      	sbcs	r2, r2
    1c88:	4252      	negs	r2, r2
    1c8a:	18aa      	adds	r2, r5, r2
	}

	/* Check if the return address is OK, then we perform the calculation. */
	if (pTimestamp)
    1c8c:	2800      	cmp	r0, #0
    1c8e:	d010      	beq.n	1cb2 <vTracePortGetTimeStamp+0x76>
	{
		/* Get timestamp from trace ticks. Scale down the period to avoid unwanted overflows. */
		*pTimestamp = traceTickCount * (HWTC_PERIOD / HWTC_DIVISOR);
    1c90:	0864      	lsrs	r4, r4, #1
    1c92:	1c25      	adds	r5, r4, #0
    1c94:	4355      	muls	r5, r2
    1c96:	6005      	str	r5, [r0, #0]
		/* Increase timestamp by (hwtc_count + "lost hardware ticks from scaling down period") / HWTC_DIVISOR. */
		*pTimestamp += (hwtc_count + traceTickCount * (HWTC_PERIOD % HWTC_DIVISOR)) / HWTC_DIVISOR;
    1c98:	4c0b      	ldr	r4, [pc, #44]	; (1cc8 <vTracePortGetTimeStamp+0x8c>)
    1c9a:	6824      	ldr	r4, [r4, #0]
    1c9c:	3401      	adds	r4, #1
    1c9e:	2601      	movs	r6, #1
    1ca0:	4034      	ands	r4, r6
    1ca2:	4354      	muls	r4, r2
    1ca4:	1864      	adds	r4, r4, r1
    1ca6:	0864      	lsrs	r4, r4, #1
    1ca8:	1964      	adds	r4, r4, r5
    1caa:	6004      	str	r4, [r0, #0]

		last_timestamp = *pTimestamp;
    1cac:	4805      	ldr	r0, [pc, #20]	; (1cc4 <vTracePortGetTimeStamp+0x88>)
    1cae:	581b      	ldr	r3, [r3, r0]
    1cb0:	601c      	str	r4, [r3, #0]
	}

	/* Store the previous values. */
	last_traceTickCount = traceTickCount;
    1cb2:	4b0a      	ldr	r3, [pc, #40]	; (1cdc <vTracePortGetTimeStamp+0xa0>)
    1cb4:	447b      	add	r3, pc
    1cb6:	601a      	str	r2, [r3, #0]
	last_hwtc_count = hwtc_count;
    1cb8:	6059      	str	r1, [r3, #4]
}
    1cba:	bd70      	pop	{r4, r5, r6, pc}
    1cbc:	00004df8 	.word	0x00004df8
    1cc0:	000000dc 	.word	0x000000dc
    1cc4:	00000090 	.word	0x00000090
    1cc8:	e000e014 	.word	0xe000e014
    1ccc:	e000e018 	.word	0xe000e018
    1cd0:	1fffe8dc 	.word	0x1fffe8dc
    1cd4:	000001fc 	.word	0x000001fc
    1cd8:	1fffe8c4 	.word	0x1fffe8c4
    1cdc:	1fffe890 	.word	0x1fffe890

00001ce0 <vTraceStoreTaskReady>:
 * vTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void vTraceStoreTaskReady(objectHandleType handle)
{
    1ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ce2:	b083      	sub	sp, #12
    1ce4:	1c05      	adds	r5, r0, #0
    1ce6:	4c2a      	ldr	r4, [pc, #168]	; (1d90 <vTraceStoreTaskReady+0xb0>)
    1ce8:	447c      	add	r4, pc
	TREvent* tr;
	uint8_t hnd8;

	TRACE_SR_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
    1cea:	2800      	cmp	r0, #0
    1cec:	d04e      	beq.n	1d8c <vTraceStoreTaskReady+0xac>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
    1cee:	4b29      	ldr	r3, [pc, #164]	; (1d94 <vTraceStoreTaskReady+0xb4>)
    1cf0:	447b      	add	r3, pc
    1cf2:	681b      	ldr	r3, [r3, #0]
    1cf4:	2b00      	cmp	r3, #0
    1cf6:	d049      	beq.n	1d8c <vTraceStoreTaskReady+0xac>
		a "hidden" (not traced) task, we must therefore disable recording 
		of ready events to avoid an undesired ready event... */
		return;
	}

	TRACE_ASSERT(handle <= NTask, "vTraceStoreTaskReady: Invalid value for handle", );
    1cf8:	280f      	cmp	r0, #15
    1cfa:	d905      	bls.n	1d08 <vTraceStoreTaskReady+0x28>
    1cfc:	4826      	ldr	r0, [pc, #152]	; (1d98 <vTraceStoreTaskReady+0xb8>)
    1cfe:	4478      	add	r0, pc
    1d00:	4b26      	ldr	r3, [pc, #152]	; (1d9c <vTraceStoreTaskReady+0xbc>)
    1d02:	58e3      	ldr	r3, [r4, r3]
    1d04:	4798      	blx	r3
    1d06:	e041      	b.n	1d8c <vTraceStoreTaskReady+0xac>

	if (recorder_busy)
    1d08:	4b25      	ldr	r3, [pc, #148]	; (1da0 <vTraceStoreTaskReady+0xc0>)
    1d0a:	58e3      	ldr	r3, [r4, r3]
    1d0c:	681b      	ldr	r3, [r3, #0]
    1d0e:	2b00      	cmp	r3, #0
    1d10:	d005      	beq.n	1d1e <vTraceStoreTaskReady+0x3e>
	 * This should never occur, as the tick- and kernel call ISR is on lowest
	 * interrupt priority and always are disabled during the critical sections
	 * of the recorder.
	 ***********************************************************************/

	 vTraceError("Recorder busy - high priority ISR using syscall? (1)");
    1d12:	4824      	ldr	r0, [pc, #144]	; (1da4 <vTraceStoreTaskReady+0xc4>)
    1d14:	4478      	add	r0, pc
    1d16:	4b21      	ldr	r3, [pc, #132]	; (1d9c <vTraceStoreTaskReady+0xbc>)
    1d18:	58e3      	ldr	r3, [r4, r3]
    1d1a:	4798      	blx	r3
	 return;
    1d1c:	e036      	b.n	1d8c <vTraceStoreTaskReady+0xac>
	}

	trcCRITICAL_SECTION_BEGIN();
    1d1e:	4b22      	ldr	r3, [pc, #136]	; (1da8 <vTraceStoreTaskReady+0xc8>)
    1d20:	58e3      	ldr	r3, [r4, r3]
    1d22:	4798      	blx	r3
    1d24:	1c06      	adds	r6, r0, #0
    1d26:	4b1e      	ldr	r3, [pc, #120]	; (1da0 <vTraceStoreTaskReady+0xc0>)
    1d28:	58e3      	ldr	r3, [r4, r3]
    1d2a:	681a      	ldr	r2, [r3, #0]
    1d2c:	3201      	adds	r2, #1
    1d2e:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
    1d30:	4b1e      	ldr	r3, [pc, #120]	; (1dac <vTraceStoreTaskReady+0xcc>)
    1d32:	58e3      	ldr	r3, [r4, r3]
    1d34:	681b      	ldr	r3, [r3, #0]
    1d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    1d38:	2b00      	cmp	r3, #0
    1d3a:	d01e      	beq.n	1d7a <vTraceStoreTaskReady+0x9a>
	{
		if (!TRACE_GET_TASK_FLAG_ISEXCLUDED(handle))
    1d3c:	1c2b      	adds	r3, r5, #0
    1d3e:	3321      	adds	r3, #33	; 0x21
    1d40:	4a1b      	ldr	r2, [pc, #108]	; (1db0 <vTraceStoreTaskReady+0xd0>)
    1d42:	58a2      	ldr	r2, [r4, r2]
    1d44:	9201      	str	r2, [sp, #4]
    1d46:	10da      	asrs	r2, r3, #3
    1d48:	9901      	ldr	r1, [sp, #4]
    1d4a:	5c8a      	ldrb	r2, [r1, r2]
    1d4c:	2107      	movs	r1, #7
    1d4e:	400b      	ands	r3, r1
    1d50:	411a      	asrs	r2, r3
    1d52:	1c13      	adds	r3, r2, #0
    1d54:	07da      	lsls	r2, r3, #31
    1d56:	d410      	bmi.n	1d7a <vTraceStoreTaskReady+0x9a>
		{
			dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
    1d58:	4816      	ldr	r0, [pc, #88]	; (1db4 <vTraceStoreTaskReady+0xd4>)
    1d5a:	4b17      	ldr	r3, [pc, #92]	; (1db8 <vTraceStoreTaskReady+0xd8>)
    1d5c:	58e3      	ldr	r3, [r4, r3]
    1d5e:	4798      	blx	r3
    1d60:	1c07      	adds	r7, r0, #0
			hnd8 = prvTraceGet8BitHandle(handle);
			tr = (TREvent*)xTraceNextFreeEventBufferSlot();
    1d62:	4b16      	ldr	r3, [pc, #88]	; (1dbc <vTraceStoreTaskReady+0xdc>)
    1d64:	58e3      	ldr	r3, [r4, r3]
    1d66:	4798      	blx	r3
			if (tr != NULL)
    1d68:	2800      	cmp	r0, #0
    1d6a:	d006      	beq.n	1d7a <vTraceStoreTaskReady+0x9a>
			{
				tr->type = DIV_TASK_READY;
    1d6c:	2202      	movs	r2, #2
    1d6e:	7002      	strb	r2, [r0, #0]
				tr->dts = dts3;
    1d70:	8047      	strh	r7, [r0, #2]
				tr->objHandle = hnd8;
    1d72:	7045      	strb	r5, [r0, #1]
				prvTraceUpdateCounters();
    1d74:	4b12      	ldr	r3, [pc, #72]	; (1dc0 <vTraceStoreTaskReady+0xe0>)
    1d76:	58e3      	ldr	r3, [r4, r3]
    1d78:	4798      	blx	r3
			}
		}
	}
	trcCRITICAL_SECTION_END();
    1d7a:	4b09      	ldr	r3, [pc, #36]	; (1da0 <vTraceStoreTaskReady+0xc0>)
    1d7c:	58e3      	ldr	r3, [r4, r3]
    1d7e:	681a      	ldr	r2, [r3, #0]
    1d80:	3a01      	subs	r2, #1
    1d82:	601a      	str	r2, [r3, #0]
    1d84:	1c30      	adds	r0, r6, #0
    1d86:	4b0f      	ldr	r3, [pc, #60]	; (1dc4 <vTraceStoreTaskReady+0xe4>)
    1d88:	58e3      	ldr	r3, [r4, r3]
    1d8a:	4798      	blx	r3
}
    1d8c:	b003      	add	sp, #12
    1d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d90:	00004d50 	.word	0x00004d50
    1d94:	1fffe30c 	.word	0x1fffe30c
    1d98:	000042de 	.word	0x000042de
    1d9c:	0000010c 	.word	0x0000010c
    1da0:	0000028c 	.word	0x0000028c
    1da4:	00004308 	.word	0x00004308
    1da8:	00000244 	.word	0x00000244
    1dac:	00000024 	.word	0x00000024
    1db0:	00000110 	.word	0x00000110
    1db4:	0000ffff 	.word	0x0000ffff
    1db8:	00000164 	.word	0x00000164
    1dbc:	000000d8 	.word	0x000000d8
    1dc0:	00000218 	.word	0x00000218
    1dc4:	00000120 	.word	0x00000120

00001dc8 <vTraceStoreKernelCall>:
			}
		}
	}
	trcCRITICAL_SECTION_END();
#endif /* TRACE_SCHEDULING_ONLY */
}
    1dc8:	4770      	bx	lr
    1dca:	46c0      	nop			; (mov r8, r8)

00001dcc <vTraceStoreKernelCallWithParam>:
			}
		}
	}
	trcCRITICAL_SECTION_END();
#endif /* TRACE_SCHEDULING_ONLY */
}
    1dcc:	4770      	bx	lr
    1dce:	46c0      	nop			; (mov r8, r8)

00001dd0 <vTraceStoreKernelCallWithNumericParamOnly>:
			}
		}
	}
	trcCRITICAL_SECTION_END();
#endif /* TRACE_SCHEDULING_ONLY */
}
    1dd0:	4770      	bx	lr
    1dd2:	46c0      	nop			; (mov r8, r8)

00001dd4 <vTraceStoreObjectNameOnCloseEvent>:
 * "old" one, valid up until this point.
 ******************************************************************************/
#if (INCLUDE_OBJECT_DELETE == 1)
void vTraceStoreObjectNameOnCloseEvent(objectHandleType handle,
										traceObjectClass objectclass)
{
    1dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1dd6:	b083      	sub	sp, #12
    1dd8:	1c07      	adds	r7, r0, #0
    1dda:	1c0d      	adds	r5, r1, #0
    1ddc:	4c19      	ldr	r4, [pc, #100]	; (1e44 <vTraceStoreObjectNameOnCloseEvent+0x70>)
    1dde:	447c      	add	r4, pc
	ObjCloseNameEvent * ce;
	const char * name;
	traceLabel idx;

	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    1de0:	2906      	cmp	r1, #6
    1de2:	d905      	bls.n	1df0 <vTraceStoreObjectNameOnCloseEvent+0x1c>
    1de4:	4818      	ldr	r0, [pc, #96]	; (1e48 <vTraceStoreObjectNameOnCloseEvent+0x74>)
    1de6:	4478      	add	r0, pc
    1de8:	4b18      	ldr	r3, [pc, #96]	; (1e4c <vTraceStoreObjectNameOnCloseEvent+0x78>)
    1dea:	58e3      	ldr	r3, [r4, r3]
    1dec:	4798      	blx	r3
    1dee:	e026      	b.n	1e3e <vTraceStoreObjectNameOnCloseEvent+0x6a>
		"vTraceStoreObjectNameOnCloseEvent: objectclass >= TRACE_NCLASSES", );
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    1df0:	4b17      	ldr	r3, [pc, #92]	; (1e50 <vTraceStoreObjectNameOnCloseEvent+0x7c>)
    1df2:	58e3      	ldr	r3, [r4, r3]
    1df4:	681e      	ldr	r6, [r3, #0]
    1df6:	1873      	adds	r3, r6, r1
    1df8:	3360      	adds	r3, #96	; 0x60
    1dfa:	791b      	ldrb	r3, [r3, #4]
    1dfc:	4283      	cmp	r3, r0
    1dfe:	d205      	bcs.n	1e0c <vTraceStoreObjectNameOnCloseEvent+0x38>
    1e00:	4814      	ldr	r0, [pc, #80]	; (1e54 <vTraceStoreObjectNameOnCloseEvent+0x80>)
    1e02:	4478      	add	r0, pc
    1e04:	4b11      	ldr	r3, [pc, #68]	; (1e4c <vTraceStoreObjectNameOnCloseEvent+0x78>)
    1e06:	58e3      	ldr	r3, [r4, r3]
    1e08:	4798      	blx	r3
    1e0a:	e018      	b.n	1e3e <vTraceStoreObjectNameOnCloseEvent+0x6a>
		"vTraceStoreObjectNameOnCloseEvent: Invalid value for handle", );

	if (RecorderDataPtr->recorderActive)
    1e0c:	6b33      	ldr	r3, [r6, #48]	; 0x30
    1e0e:	2b00      	cmp	r3, #0
    1e10:	d015      	beq.n	1e3e <vTraceStoreObjectNameOnCloseEvent+0x6a>
	{
		uint8_t hnd8 = prvTraceGet8BitHandle(handle);
		name = TRACE_PROPERTY_NAME_GET(objectclass, handle);
    1e12:	4b11      	ldr	r3, [pc, #68]	; (1e58 <vTraceStoreObjectNameOnCloseEvent+0x84>)
    1e14:	58e3      	ldr	r3, [r4, r3]
    1e16:	4798      	blx	r3
    1e18:	1830      	adds	r0, r6, r0
    1e1a:	308c      	adds	r0, #140	; 0x8c
		idx = prvTraceOpenSymbol(name, 0);
    1e1c:	2100      	movs	r1, #0
    1e1e:	4b0f      	ldr	r3, [pc, #60]	; (1e5c <vTraceStoreObjectNameOnCloseEvent+0x88>)
    1e20:	58e3      	ldr	r3, [r4, r3]
    1e22:	4798      	blx	r3
    1e24:	1c06      	adds	r6, r0, #0

		// Interrupt disable not necessary, already done in trcHooks.h macro
		ce = (ObjCloseNameEvent*) xTraceNextFreeEventBufferSlot();
    1e26:	4b0e      	ldr	r3, [pc, #56]	; (1e60 <vTraceStoreObjectNameOnCloseEvent+0x8c>)
    1e28:	58e3      	ldr	r3, [r4, r3]
    1e2a:	4798      	blx	r3
		if (ce != NULL)
    1e2c:	2800      	cmp	r0, #0
    1e2e:	d006      	beq.n	1e3e <vTraceStoreObjectNameOnCloseEvent+0x6a>
		{
			ce->type = EVENTGROUP_OBJCLOSE_NAME + objectclass;
    1e30:	3508      	adds	r5, #8
    1e32:	7005      	strb	r5, [r0, #0]
			ce->objHandle = hnd8;
    1e34:	7047      	strb	r7, [r0, #1]
			ce->symbolIndex = idx;
    1e36:	8046      	strh	r6, [r0, #2]
			prvTraceUpdateCounters();
    1e38:	4b0a      	ldr	r3, [pc, #40]	; (1e64 <vTraceStoreObjectNameOnCloseEvent+0x90>)
    1e3a:	58e3      	ldr	r3, [r4, r3]
    1e3c:	4798      	blx	r3
		}
	}
}
    1e3e:	b003      	add	sp, #12
    1e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e42:	46c0      	nop			; (mov r8, r8)
    1e44:	00004c5a 	.word	0x00004c5a
    1e48:	000042a6 	.word	0x000042a6
    1e4c:	0000010c 	.word	0x0000010c
    1e50:	00000024 	.word	0x00000024
    1e54:	000042da 	.word	0x000042da
    1e58:	00000238 	.word	0x00000238
    1e5c:	000000e0 	.word	0x000000e0
    1e60:	000000d8 	.word	0x000000d8
    1e64:	00000218 	.word	0x00000218

00001e68 <vTraceStoreObjectPropertiesOnCloseEvent>:

void vTraceStoreObjectPropertiesOnCloseEvent(objectHandleType handle,
											 traceObjectClass objectclass)
{
    1e68:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e6a:	b083      	sub	sp, #12
    1e6c:	1c06      	adds	r6, r0, #0
    1e6e:	1c0d      	adds	r5, r1, #0
    1e70:	4c24      	ldr	r4, [pc, #144]	; (1f04 <vTraceStoreObjectPropertiesOnCloseEvent+0x9c>)
    1e72:	447c      	add	r4, pc
	ObjClosePropEvent * pe;

	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    1e74:	2906      	cmp	r1, #6
    1e76:	d905      	bls.n	1e84 <vTraceStoreObjectPropertiesOnCloseEvent+0x1c>
    1e78:	4823      	ldr	r0, [pc, #140]	; (1f08 <vTraceStoreObjectPropertiesOnCloseEvent+0xa0>)
    1e7a:	4478      	add	r0, pc
    1e7c:	4b23      	ldr	r3, [pc, #140]	; (1f0c <vTraceStoreObjectPropertiesOnCloseEvent+0xa4>)
    1e7e:	58e3      	ldr	r3, [r4, r3]
    1e80:	4798      	blx	r3
    1e82:	e03d      	b.n	1f00 <vTraceStoreObjectPropertiesOnCloseEvent+0x98>
		"vTraceStoreObjectPropertiesOnCloseEvent: objectclass >= TRACE_NCLASSES", );
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    1e84:	4b22      	ldr	r3, [pc, #136]	; (1f10 <vTraceStoreObjectPropertiesOnCloseEvent+0xa8>)
    1e86:	58e3      	ldr	r3, [r4, r3]
    1e88:	681b      	ldr	r3, [r3, #0]
    1e8a:	185a      	adds	r2, r3, r1
    1e8c:	3260      	adds	r2, #96	; 0x60
    1e8e:	7912      	ldrb	r2, [r2, #4]
    1e90:	4282      	cmp	r2, r0
    1e92:	d205      	bcs.n	1ea0 <vTraceStoreObjectPropertiesOnCloseEvent+0x38>
    1e94:	481f      	ldr	r0, [pc, #124]	; (1f14 <vTraceStoreObjectPropertiesOnCloseEvent+0xac>)
    1e96:	4478      	add	r0, pc
    1e98:	4b1c      	ldr	r3, [pc, #112]	; (1f0c <vTraceStoreObjectPropertiesOnCloseEvent+0xa4>)
    1e9a:	58e3      	ldr	r3, [r4, r3]
    1e9c:	4798      	blx	r3
    1e9e:	e02f      	b.n	1f00 <vTraceStoreObjectPropertiesOnCloseEvent+0x98>
		"vTraceStoreObjectPropertiesOnCloseEvent: Invalid value for handle", );

	if (RecorderDataPtr->recorderActive)
    1ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    1ea2:	2b00      	cmp	r3, #0
    1ea4:	d02c      	beq.n	1f00 <vTraceStoreObjectPropertiesOnCloseEvent+0x98>
	{
		// Interrupt disable not necessary, already done in trcHooks.h macro
		pe = (ObjClosePropEvent*) xTraceNextFreeEventBufferSlot();
    1ea6:	4b1c      	ldr	r3, [pc, #112]	; (1f18 <vTraceStoreObjectPropertiesOnCloseEvent+0xb0>)
    1ea8:	58e3      	ldr	r3, [r4, r3]
    1eaa:	4798      	blx	r3
    1eac:	1e07      	subs	r7, r0, #0
		if (pe != NULL)
    1eae:	d027      	beq.n	1f00 <vTraceStoreObjectPropertiesOnCloseEvent+0x98>
		{
			if (objectclass == TRACE_CLASS_TASK)
    1eb0:	2d03      	cmp	r5, #3
    1eb2:	d110      	bne.n	1ed6 <vTraceStoreObjectPropertiesOnCloseEvent+0x6e>
			{
				pe->arg1 = TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, handle);
    1eb4:	1c30      	adds	r0, r6, #0
    1eb6:	2103      	movs	r1, #3
    1eb8:	4b18      	ldr	r3, [pc, #96]	; (1f1c <vTraceStoreObjectPropertiesOnCloseEvent+0xb4>)
    1eba:	58e3      	ldr	r3, [r4, r3]
    1ebc:	4798      	blx	r3
    1ebe:	4b14      	ldr	r3, [pc, #80]	; (1f10 <vTraceStoreObjectPropertiesOnCloseEvent+0xa8>)
    1ec0:	58e2      	ldr	r2, [r4, r3]
    1ec2:	6813      	ldr	r3, [r2, #0]
    1ec4:	195a      	adds	r2, r3, r5
    1ec6:	3268      	adds	r2, #104	; 0x68
    1ec8:	7912      	ldrb	r2, [r2, #4]
    1eca:	181b      	adds	r3, r3, r0
    1ecc:	189b      	adds	r3, r3, r2
    1ece:	3389      	adds	r3, #137	; 0x89
    1ed0:	791b      	ldrb	r3, [r3, #4]
    1ed2:	707b      	strb	r3, [r7, #1]
    1ed4:	e00f      	b.n	1ef6 <vTraceStoreObjectPropertiesOnCloseEvent+0x8e>
			}
			else
			{
				pe->arg1 = TRACE_PROPERTY_OBJECT_STATE(objectclass, handle);
    1ed6:	1c30      	adds	r0, r6, #0
    1ed8:	1c29      	adds	r1, r5, #0
    1eda:	4b10      	ldr	r3, [pc, #64]	; (1f1c <vTraceStoreObjectPropertiesOnCloseEvent+0xb4>)
    1edc:	58e3      	ldr	r3, [r4, r3]
    1ede:	4798      	blx	r3
    1ee0:	4b0b      	ldr	r3, [pc, #44]	; (1f10 <vTraceStoreObjectPropertiesOnCloseEvent+0xa8>)
    1ee2:	58e2      	ldr	r2, [r4, r3]
    1ee4:	6813      	ldr	r3, [r2, #0]
    1ee6:	195a      	adds	r2, r3, r5
    1ee8:	3268      	adds	r2, #104	; 0x68
    1eea:	7912      	ldrb	r2, [r2, #4]
    1eec:	181b      	adds	r3, r3, r0
    1eee:	189b      	adds	r3, r3, r2
    1ef0:	3388      	adds	r3, #136	; 0x88
    1ef2:	791b      	ldrb	r3, [r3, #4]
    1ef4:	707b      	strb	r3, [r7, #1]
			}
			pe->type = EVENTGROUP_OBJCLOSE_PROP + objectclass;
    1ef6:	3510      	adds	r5, #16
    1ef8:	703d      	strb	r5, [r7, #0]
			prvTraceUpdateCounters();
    1efa:	4b09      	ldr	r3, [pc, #36]	; (1f20 <vTraceStoreObjectPropertiesOnCloseEvent+0xb8>)
    1efc:	58e3      	ldr	r3, [r4, r3]
    1efe:	4798      	blx	r3
		}
	}
}
    1f00:	b003      	add	sp, #12
    1f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f04:	00004bc6 	.word	0x00004bc6
    1f08:	000042ae 	.word	0x000042ae
    1f0c:	0000010c 	.word	0x0000010c
    1f10:	00000024 	.word	0x00000024
    1f14:	000042ea 	.word	0x000042ea
    1f18:	000000d8 	.word	0x000000d8
    1f1c:	00000238 	.word	0x00000238
    1f20:	00000218 	.word	0x00000218

00001f24 <vTraceSetPriorityProperty>:
#endif

void vTraceSetPriorityProperty(uint8_t objectclass, objectHandleType id, uint8_t value)
{
    1f24:	b570      	push	{r4, r5, r6, lr}
    1f26:	b082      	sub	sp, #8
    1f28:	1c05      	adds	r5, r0, #0
    1f2a:	1c16      	adds	r6, r2, #0
    1f2c:	4c14      	ldr	r4, [pc, #80]	; (1f80 <vTraceSetPriorityProperty+0x5c>)
    1f2e:	447c      	add	r4, pc
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    1f30:	2806      	cmp	r0, #6
    1f32:	d905      	bls.n	1f40 <vTraceSetPriorityProperty+0x1c>
    1f34:	4813      	ldr	r0, [pc, #76]	; (1f84 <vTraceSetPriorityProperty+0x60>)
    1f36:	4478      	add	r0, pc
    1f38:	4b13      	ldr	r3, [pc, #76]	; (1f88 <vTraceSetPriorityProperty+0x64>)
    1f3a:	58e3      	ldr	r3, [r4, r3]
    1f3c:	4798      	blx	r3
    1f3e:	e01c      	b.n	1f7a <vTraceSetPriorityProperty+0x56>
		"vTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", );
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    1f40:	4b12      	ldr	r3, [pc, #72]	; (1f8c <vTraceSetPriorityProperty+0x68>)
    1f42:	58e3      	ldr	r3, [r4, r3]
    1f44:	681b      	ldr	r3, [r3, #0]
    1f46:	181b      	adds	r3, r3, r0
    1f48:	3360      	adds	r3, #96	; 0x60
    1f4a:	791b      	ldrb	r3, [r3, #4]
    1f4c:	428b      	cmp	r3, r1
    1f4e:	d205      	bcs.n	1f5c <vTraceSetPriorityProperty+0x38>
    1f50:	480f      	ldr	r0, [pc, #60]	; (1f90 <vTraceSetPriorityProperty+0x6c>)
    1f52:	4478      	add	r0, pc
    1f54:	4b0c      	ldr	r3, [pc, #48]	; (1f88 <vTraceSetPriorityProperty+0x64>)
    1f56:	58e3      	ldr	r3, [r4, r3]
    1f58:	4798      	blx	r3
    1f5a:	e00e      	b.n	1f7a <vTraceSetPriorityProperty+0x56>
		"vTraceSetPriorityProperty: Invalid value for id", );

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
    1f5c:	1c08      	adds	r0, r1, #0
    1f5e:	1c29      	adds	r1, r5, #0
    1f60:	4b0c      	ldr	r3, [pc, #48]	; (1f94 <vTraceSetPriorityProperty+0x70>)
    1f62:	58e3      	ldr	r3, [r4, r3]
    1f64:	4798      	blx	r3
    1f66:	4b09      	ldr	r3, [pc, #36]	; (1f8c <vTraceSetPriorityProperty+0x68>)
    1f68:	58e2      	ldr	r2, [r4, r3]
    1f6a:	6813      	ldr	r3, [r2, #0]
    1f6c:	195d      	adds	r5, r3, r5
    1f6e:	3568      	adds	r5, #104	; 0x68
    1f70:	792a      	ldrb	r2, [r5, #4]
    1f72:	181b      	adds	r3, r3, r0
    1f74:	189b      	adds	r3, r3, r2
    1f76:	3389      	adds	r3, #137	; 0x89
    1f78:	711e      	strb	r6, [r3, #4]
}
    1f7a:	b002      	add	sp, #8
    1f7c:	bd70      	pop	{r4, r5, r6, pc}
    1f7e:	46c0      	nop			; (mov r8, r8)
    1f80:	00004b0a 	.word	0x00004b0a
    1f84:	0000429a 	.word	0x0000429a
    1f88:	0000010c 	.word	0x0000010c
    1f8c:	00000024 	.word	0x00000024
    1f90:	000042c6 	.word	0x000042c6
    1f94:	00000238 	.word	0x00000238

00001f98 <uiTraceGetPriorityProperty>:

uint8_t uiTraceGetPriorityProperty(uint8_t objectclass, objectHandleType id)
{
    1f98:	b530      	push	{r4, r5, lr}
    1f9a:	b083      	sub	sp, #12
    1f9c:	1c05      	adds	r5, r0, #0
    1f9e:	4c15      	ldr	r4, [pc, #84]	; (1ff4 <uiTraceGetPriorityProperty+0x5c>)
    1fa0:	447c      	add	r4, pc
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    1fa2:	2806      	cmp	r0, #6
    1fa4:	d906      	bls.n	1fb4 <uiTraceGetPriorityProperty+0x1c>
    1fa6:	4814      	ldr	r0, [pc, #80]	; (1ff8 <uiTraceGetPriorityProperty+0x60>)
    1fa8:	4478      	add	r0, pc
    1faa:	4b14      	ldr	r3, [pc, #80]	; (1ffc <uiTraceGetPriorityProperty+0x64>)
    1fac:	58e3      	ldr	r3, [r4, r3]
    1fae:	4798      	blx	r3
    1fb0:	2000      	movs	r0, #0
    1fb2:	e01d      	b.n	1ff0 <uiTraceGetPriorityProperty+0x58>
		"uiTraceGetPriorityProperty: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    1fb4:	4b12      	ldr	r3, [pc, #72]	; (2000 <STACK_SIZE>)
    1fb6:	58e3      	ldr	r3, [r4, r3]
    1fb8:	681b      	ldr	r3, [r3, #0]
    1fba:	181b      	adds	r3, r3, r0
    1fbc:	3360      	adds	r3, #96	; 0x60
    1fbe:	791b      	ldrb	r3, [r3, #4]
    1fc0:	428b      	cmp	r3, r1
    1fc2:	d206      	bcs.n	1fd2 <uiTraceGetPriorityProperty+0x3a>
    1fc4:	480f      	ldr	r0, [pc, #60]	; (2004 <STACK_SIZE+0x4>)
    1fc6:	4478      	add	r0, pc
    1fc8:	4b0c      	ldr	r3, [pc, #48]	; (1ffc <uiTraceGetPriorityProperty+0x64>)
    1fca:	58e3      	ldr	r3, [r4, r3]
    1fcc:	4798      	blx	r3
    1fce:	2000      	movs	r0, #0
    1fd0:	e00e      	b.n	1ff0 <uiTraceGetPriorityProperty+0x58>
		"uiTraceGetPriorityProperty: Invalid value for id", 0);

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
    1fd2:	1c08      	adds	r0, r1, #0
    1fd4:	1c29      	adds	r1, r5, #0
    1fd6:	4b0c      	ldr	r3, [pc, #48]	; (2008 <STACK_SIZE+0x8>)
    1fd8:	58e3      	ldr	r3, [r4, r3]
    1fda:	4798      	blx	r3
    1fdc:	4b08      	ldr	r3, [pc, #32]	; (2000 <STACK_SIZE>)
    1fde:	58e2      	ldr	r2, [r4, r3]
    1fe0:	6813      	ldr	r3, [r2, #0]
    1fe2:	195d      	adds	r5, r3, r5
    1fe4:	3568      	adds	r5, #104	; 0x68
    1fe6:	792a      	ldrb	r2, [r5, #4]
    1fe8:	181b      	adds	r3, r3, r0
    1fea:	189b      	adds	r3, r3, r2
    1fec:	3389      	adds	r3, #137	; 0x89
    1fee:	7918      	ldrb	r0, [r3, #4]
}
    1ff0:	b003      	add	sp, #12
    1ff2:	bd30      	pop	{r4, r5, pc}
    1ff4:	00004a98 	.word	0x00004a98
    1ff8:	000042b0 	.word	0x000042b0
    1ffc:	0000010c 	.word	0x0000010c
    2000:	00000024 	.word	0x00000024
    2004:	000042da 	.word	0x000042da
    2008:	00000238 	.word	0x00000238

0000200c <vTraceSetObjectState>:

void vTraceSetObjectState(uint8_t objectclass, objectHandleType id, uint8_t value)
{
    200c:	b570      	push	{r4, r5, r6, lr}
    200e:	b082      	sub	sp, #8
    2010:	1c05      	adds	r5, r0, #0
    2012:	1c16      	adds	r6, r2, #0
    2014:	4c14      	ldr	r4, [pc, #80]	; (2068 <vTraceSetObjectState+0x5c>)
    2016:	447c      	add	r4, pc
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    2018:	2806      	cmp	r0, #6
    201a:	d905      	bls.n	2028 <vTraceSetObjectState+0x1c>
    201c:	4813      	ldr	r0, [pc, #76]	; (206c <vTraceSetObjectState+0x60>)
    201e:	4478      	add	r0, pc
    2020:	4b13      	ldr	r3, [pc, #76]	; (2070 <vTraceSetObjectState+0x64>)
    2022:	58e3      	ldr	r3, [r4, r3]
    2024:	4798      	blx	r3
    2026:	e01c      	b.n	2062 <vTraceSetObjectState+0x56>
		"vTraceSetObjectState: objectclass >= TRACE_NCLASSES", );
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    2028:	4b12      	ldr	r3, [pc, #72]	; (2074 <vTraceSetObjectState+0x68>)
    202a:	58e3      	ldr	r3, [r4, r3]
    202c:	681b      	ldr	r3, [r3, #0]
    202e:	181b      	adds	r3, r3, r0
    2030:	3360      	adds	r3, #96	; 0x60
    2032:	791b      	ldrb	r3, [r3, #4]
    2034:	428b      	cmp	r3, r1
    2036:	d205      	bcs.n	2044 <vTraceSetObjectState+0x38>
    2038:	480f      	ldr	r0, [pc, #60]	; (2078 <vTraceSetObjectState+0x6c>)
    203a:	4478      	add	r0, pc
    203c:	4b0c      	ldr	r3, [pc, #48]	; (2070 <vTraceSetObjectState+0x64>)
    203e:	58e3      	ldr	r3, [r4, r3]
    2040:	4798      	blx	r3
    2042:	e00e      	b.n	2062 <vTraceSetObjectState+0x56>
		"vTraceSetObjectState: Invalid value for id", );

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
    2044:	1c08      	adds	r0, r1, #0
    2046:	1c29      	adds	r1, r5, #0
    2048:	4b0c      	ldr	r3, [pc, #48]	; (207c <vTraceSetObjectState+0x70>)
    204a:	58e3      	ldr	r3, [r4, r3]
    204c:	4798      	blx	r3
    204e:	4b09      	ldr	r3, [pc, #36]	; (2074 <vTraceSetObjectState+0x68>)
    2050:	58e2      	ldr	r2, [r4, r3]
    2052:	6813      	ldr	r3, [r2, #0]
    2054:	195d      	adds	r5, r3, r5
    2056:	3568      	adds	r5, #104	; 0x68
    2058:	792a      	ldrb	r2, [r5, #4]
    205a:	181b      	adds	r3, r3, r0
    205c:	189b      	adds	r3, r3, r2
    205e:	3388      	adds	r3, #136	; 0x88
    2060:	711e      	strb	r6, [r3, #4]
}
    2062:	b002      	add	sp, #8
    2064:	bd70      	pop	{r4, r5, r6, pc}
    2066:	46c0      	nop			; (mov r8, r8)
    2068:	00004a22 	.word	0x00004a22
    206c:	000042c2 	.word	0x000042c2
    2070:	0000010c 	.word	0x0000010c
    2074:	00000024 	.word	0x00000024
    2078:	000042ea 	.word	0x000042ea
    207c:	00000238 	.word	0x00000238

00002080 <uiTraceGetObjectState>:

uint8_t uiTraceGetObjectState(uint8_t objectclass, objectHandleType id)
{
    2080:	b530      	push	{r4, r5, lr}
    2082:	b083      	sub	sp, #12
    2084:	1c05      	adds	r5, r0, #0
    2086:	4c15      	ldr	r4, [pc, #84]	; (20dc <uiTraceGetObjectState+0x5c>)
    2088:	447c      	add	r4, pc
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    208a:	2806      	cmp	r0, #6
    208c:	d906      	bls.n	209c <uiTraceGetObjectState+0x1c>
    208e:	4814      	ldr	r0, [pc, #80]	; (20e0 <uiTraceGetObjectState+0x60>)
    2090:	4478      	add	r0, pc
    2092:	4b14      	ldr	r3, [pc, #80]	; (20e4 <uiTraceGetObjectState+0x64>)
    2094:	58e3      	ldr	r3, [r4, r3]
    2096:	4798      	blx	r3
    2098:	2000      	movs	r0, #0
    209a:	e01d      	b.n	20d8 <uiTraceGetObjectState+0x58>
		"uiTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    209c:	4b12      	ldr	r3, [pc, #72]	; (20e8 <uiTraceGetObjectState+0x68>)
    209e:	58e3      	ldr	r3, [r4, r3]
    20a0:	681b      	ldr	r3, [r3, #0]
    20a2:	181b      	adds	r3, r3, r0
    20a4:	3360      	adds	r3, #96	; 0x60
    20a6:	791b      	ldrb	r3, [r3, #4]
    20a8:	428b      	cmp	r3, r1
    20aa:	d206      	bcs.n	20ba <uiTraceGetObjectState+0x3a>
    20ac:	480f      	ldr	r0, [pc, #60]	; (20ec <uiTraceGetObjectState+0x6c>)
    20ae:	4478      	add	r0, pc
    20b0:	4b0c      	ldr	r3, [pc, #48]	; (20e4 <uiTraceGetObjectState+0x64>)
    20b2:	58e3      	ldr	r3, [r4, r3]
    20b4:	4798      	blx	r3
    20b6:	2000      	movs	r0, #0
    20b8:	e00e      	b.n	20d8 <uiTraceGetObjectState+0x58>
		"uiTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
    20ba:	1c08      	adds	r0, r1, #0
    20bc:	1c29      	adds	r1, r5, #0
    20be:	4b0c      	ldr	r3, [pc, #48]	; (20f0 <uiTraceGetObjectState+0x70>)
    20c0:	58e3      	ldr	r3, [r4, r3]
    20c2:	4798      	blx	r3
    20c4:	4b08      	ldr	r3, [pc, #32]	; (20e8 <uiTraceGetObjectState+0x68>)
    20c6:	58e2      	ldr	r2, [r4, r3]
    20c8:	6813      	ldr	r3, [r2, #0]
    20ca:	195d      	adds	r5, r3, r5
    20cc:	3568      	adds	r5, #104	; 0x68
    20ce:	792a      	ldrb	r2, [r5, #4]
    20d0:	181b      	adds	r3, r3, r0
    20d2:	189b      	adds	r3, r3, r2
    20d4:	3388      	adds	r3, #136	; 0x88
    20d6:	7918      	ldrb	r0, [r3, #4]
}
    20d8:	b003      	add	sp, #12
    20da:	bd30      	pop	{r4, r5, pc}
    20dc:	000049b0 	.word	0x000049b0
    20e0:	000042d0 	.word	0x000042d0
    20e4:	0000010c 	.word	0x0000010c
    20e8:	00000024 	.word	0x00000024
    20ec:	000042f6 	.word	0x000042f6
    20f0:	00000238 	.word	0x00000238

000020f4 <vTraceStoreTaskswitch>:
 * vTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void vTraceStoreTaskswitch(objectHandleType task_handle)
{
    20f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    20f6:	b083      	sub	sp, #12
    20f8:	1c05      	adds	r5, r0, #0
    20fa:	4c34      	ldr	r4, [pc, #208]	; (21cc <vTraceStoreTaskswitch+0xd8>)
    20fc:	447c      	add	r4, pc
	uint8_t hnd8;
	TRACE_SR_ALLOC_CRITICAL_SECTION();

	skipEvent = 0;

	TRACE_ASSERT(task_handle <= NTask,
    20fe:	280f      	cmp	r0, #15
    2100:	d905      	bls.n	210e <vTraceStoreTaskswitch+0x1a>
    2102:	4833      	ldr	r0, [pc, #204]	; (21d0 <vTraceStoreTaskswitch+0xdc>)
    2104:	4478      	add	r0, pc
    2106:	4b33      	ldr	r3, [pc, #204]	; (21d4 <vTraceStoreTaskswitch+0xe0>)
    2108:	58e3      	ldr	r3, [r4, r3]
    210a:	4798      	blx	r3
    210c:	e05c      	b.n	21c8 <vTraceStoreTaskswitch+0xd4>
	function since critical sections should not be used in the context switch
	event...)
	***************************************************************************/

	/* Skip the event if the task has been excluded, using vTraceExcludeTask */
	if (TRACE_GET_TASK_FLAG_ISEXCLUDED(task_handle))
    210e:	1c03      	adds	r3, r0, #0
    2110:	3321      	adds	r3, #33	; 0x21
    2112:	4a31      	ldr	r2, [pc, #196]	; (21d8 <vTraceStoreTaskswitch+0xe4>)
    2114:	58a2      	ldr	r2, [r4, r2]
    2116:	9201      	str	r2, [sp, #4]
    2118:	10da      	asrs	r2, r3, #3
    211a:	9901      	ldr	r1, [sp, #4]
    211c:	5c8a      	ldrb	r2, [r1, r2]
    211e:	2107      	movs	r1, #7
    2120:	400b      	ands	r3, r1
    2122:	411a      	asrs	r2, r3
    2124:	1c13      	adds	r3, r2, #0
    2126:	07da      	lsls	r2, r3, #31
    2128:	d507      	bpl.n	213a <vTraceStoreTaskswitch+0x46>
	{
		skipEvent = 1;
		inExcludedTask = 1;
    212a:	4b2c      	ldr	r3, [pc, #176]	; (21dc <vTraceStoreTaskswitch+0xe8>)
    212c:	58e3      	ldr	r3, [r4, r3]
    212e:	9301      	str	r3, [sp, #4]
    2130:	2301      	movs	r3, #1
    2132:	9901      	ldr	r1, [sp, #4]
    2134:	700b      	strb	r3, [r1, #0]
	***************************************************************************/

	/* Skip the event if the task has been excluded, using vTraceExcludeTask */
	if (TRACE_GET_TASK_FLAG_ISEXCLUDED(task_handle))
	{
		skipEvent = 1;
    2136:	2101      	movs	r1, #1
    2138:	e006      	b.n	2148 <vTraceStoreTaskswitch+0x54>
		inExcludedTask = 1;
	}
	else
	{
		inExcludedTask = 0;
    213a:	4b28      	ldr	r3, [pc, #160]	; (21dc <vTraceStoreTaskswitch+0xe8>)
    213c:	58e3      	ldr	r3, [r4, r3]
    213e:	9301      	str	r3, [sp, #4]
    2140:	2300      	movs	r3, #0
    2142:	9a01      	ldr	r2, [sp, #4]
    2144:	7013      	strb	r3, [r2, #0]
	TSEvent* ts;
	int8_t skipEvent;
	uint8_t hnd8;
	TRACE_SR_ALLOC_CRITICAL_SECTION();

	skipEvent = 0;
    2146:	2100      	movs	r1, #0
	else
	{
		inExcludedTask = 0;
	}

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
    2148:	4b25      	ldr	r3, [pc, #148]	; (21e0 <vTraceStoreTaskswitch+0xec>)
    214a:	58e3      	ldr	r3, [r4, r3]
    214c:	681a      	ldr	r2, [r3, #0]
    214e:	3201      	adds	r2, #1
    2150:	601a      	str	r2, [r3, #0]

	/* Skip the event if the same task is scheduled */
	if (task_handle == handle_of_last_logged_task)
    2152:	4b24      	ldr	r3, [pc, #144]	; (21e4 <vTraceStoreTaskswitch+0xf0>)
    2154:	58e3      	ldr	r3, [r4, r3]
    2156:	9301      	str	r3, [sp, #4]
    2158:	781b      	ldrb	r3, [r3, #0]
    215a:	42ab      	cmp	r3, r5
    215c:	d02f      	beq.n	21be <vTraceStoreTaskswitch+0xca>
	{
		skipEvent = 1;
	}

	if (!RecorderDataPtr->recorderActive)
    215e:	4b22      	ldr	r3, [pc, #136]	; (21e8 <vTraceStoreTaskswitch+0xf4>)
    2160:	58e3      	ldr	r3, [r4, r3]
    2162:	681b      	ldr	r3, [r3, #0]
    2164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2166:	2b00      	cmp	r3, #0
    2168:	d029      	beq.n	21be <vTraceStoreTaskswitch+0xca>
	{
		skipEvent = 1;
	}

	/* If this event should be logged, log it! */
	if (skipEvent == 0)
    216a:	2900      	cmp	r1, #0
    216c:	d127      	bne.n	21be <vTraceStoreTaskswitch+0xca>
	{
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
    216e:	481f      	ldr	r0, [pc, #124]	; (21ec <vTraceStoreTaskswitch+0xf8>)
    2170:	4b1f      	ldr	r3, [pc, #124]	; (21f0 <vTraceStoreTaskswitch+0xfc>)
    2172:	58e3      	ldr	r3, [r4, r3]
    2174:	4798      	blx	r3
    2176:	1c07      	adds	r7, r0, #0
		handle_of_last_logged_task = task_handle;
    2178:	4b1a      	ldr	r3, [pc, #104]	; (21e4 <vTraceStoreTaskswitch+0xf0>)
    217a:	58e3      	ldr	r3, [r4, r3]
    217c:	701d      	strb	r5, [r3, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
		ts = (TSEvent*)xTraceNextFreeEventBufferSlot();
    217e:	4b1d      	ldr	r3, [pc, #116]	; (21f4 <vTraceStoreTaskswitch+0x100>)
    2180:	58e3      	ldr	r3, [r4, r3]
    2182:	4798      	blx	r3
    2184:	1e06      	subs	r6, r0, #0

		if (ts != NULL)
    2186:	d01a      	beq.n	21be <vTraceStoreTaskswitch+0xca>
		{
			if (uiTraceGetObjectState(TRACE_CLASS_TASK,
    2188:	4b16      	ldr	r3, [pc, #88]	; (21e4 <vTraceStoreTaskswitch+0xf0>)
    218a:	58e3      	ldr	r3, [r4, r3]
    218c:	7819      	ldrb	r1, [r3, #0]
    218e:	2003      	movs	r0, #3
    2190:	4b19      	ldr	r3, [pc, #100]	; (21f8 <vTraceStoreTaskswitch+0x104>)
    2192:	58e3      	ldr	r3, [r4, r3]
    2194:	4798      	blx	r3
    2196:	2801      	cmp	r0, #1
    2198:	d102      	bne.n	21a0 <vTraceStoreTaskswitch+0xac>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
    219a:	2307      	movs	r3, #7
    219c:	7033      	strb	r3, [r6, #0]
    219e:	e001      	b.n	21a4 <vTraceStoreTaskswitch+0xb0>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
    21a0:	2306      	movs	r3, #6
    21a2:	7033      	strb	r3, [r6, #0]
			}

			ts->dts = dts3;
    21a4:	8077      	strh	r7, [r6, #2]
			ts->objHandle = hnd8;
    21a6:	7075      	strb	r5, [r6, #1]

			vTraceSetObjectState(TRACE_CLASS_TASK,
    21a8:	4b0e      	ldr	r3, [pc, #56]	; (21e4 <vTraceStoreTaskswitch+0xf0>)
    21aa:	58e3      	ldr	r3, [r4, r3]
    21ac:	7819      	ldrb	r1, [r3, #0]
    21ae:	2003      	movs	r0, #3
    21b0:	2201      	movs	r2, #1
    21b2:	4b12      	ldr	r3, [pc, #72]	; (21fc <vTraceStoreTaskswitch+0x108>)
    21b4:	58e3      	ldr	r3, [r4, r3]
    21b6:	4798      	blx	r3
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
    21b8:	4b11      	ldr	r3, [pc, #68]	; (2200 <vTraceStoreTaskswitch+0x10c>)
    21ba:	58e3      	ldr	r3, [r4, r3]
    21bc:	4798      	blx	r3
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
    21be:	4b08      	ldr	r3, [pc, #32]	; (21e0 <vTraceStoreTaskswitch+0xec>)
    21c0:	58e3      	ldr	r3, [r4, r3]
    21c2:	681a      	ldr	r2, [r3, #0]
    21c4:	3a01      	subs	r2, #1
    21c6:	601a      	str	r2, [r3, #0]
}
    21c8:	b003      	add	sp, #12
    21ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    21cc:	0000493c 	.word	0x0000493c
    21d0:	000042dc 	.word	0x000042dc
    21d4:	0000010c 	.word	0x0000010c
    21d8:	00000110 	.word	0x00000110
    21dc:	00000204 	.word	0x00000204
    21e0:	0000028c 	.word	0x0000028c
    21e4:	00000028 	.word	0x00000028
    21e8:	00000024 	.word	0x00000024
    21ec:	0000ffff 	.word	0x0000ffff
    21f0:	00000164 	.word	0x00000164
    21f4:	000000d8 	.word	0x000000d8
    21f8:	00000140 	.word	0x00000140
    21fc:	00000270 	.word	0x00000270
    2200:	00000218 	.word	0x00000218

00002204 <vTraceSetTaskInstanceFinished>:

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
}

void vTraceSetTaskInstanceFinished(objectHandleType handle)
{
    2204:	b510      	push	{r4, lr}
    2206:	b082      	sub	sp, #8
    2208:	4c0f      	ldr	r4, [pc, #60]	; (2248 <vTraceSetTaskInstanceFinished+0x44>)
    220a:	447c      	add	r4, pc
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
    220c:	4b0f      	ldr	r3, [pc, #60]	; (224c <vTraceSetTaskInstanceFinished+0x48>)
    220e:	58e3      	ldr	r3, [r4, r3]
    2210:	681a      	ldr	r2, [r3, #0]
    2212:	2367      	movs	r3, #103	; 0x67
    2214:	5cd3      	ldrb	r3, [r2, r3]
    2216:	4283      	cmp	r3, r0
    2218:	d205      	bcs.n	2226 <vTraceSetTaskInstanceFinished+0x22>
    221a:	480d      	ldr	r0, [pc, #52]	; (2250 <vTraceSetTaskInstanceFinished+0x4c>)
    221c:	4478      	add	r0, pc
    221e:	4b0d      	ldr	r3, [pc, #52]	; (2254 <vTraceSetTaskInstanceFinished+0x50>)
    2220:	58e3      	ldr	r3, [r4, r3]
    2222:	4798      	blx	r3
    2224:	e00d      	b.n	2242 <vTraceSetTaskInstanceFinished+0x3e>
		"vTraceSetTaskInstanceFinished: Invalid value for handle", );

#if (USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
    2226:	2103      	movs	r1, #3
    2228:	4b0b      	ldr	r3, [pc, #44]	; (2258 <vTraceSetTaskInstanceFinished+0x54>)
    222a:	58e3      	ldr	r3, [r4, r3]
    222c:	4798      	blx	r3
    222e:	4b07      	ldr	r3, [pc, #28]	; (224c <vTraceSetTaskInstanceFinished+0x48>)
    2230:	58e2      	ldr	r2, [r4, r3]
    2232:	6813      	ldr	r3, [r2, #0]
    2234:	226f      	movs	r2, #111	; 0x6f
    2236:	5c9a      	ldrb	r2, [r3, r2]
    2238:	181b      	adds	r3, r3, r0
    223a:	189b      	adds	r3, r3, r2
    223c:	3388      	adds	r3, #136	; 0x88
    223e:	2200      	movs	r2, #0
    2240:	711a      	strb	r2, [r3, #4]
#endif
}
    2242:	b002      	add	sp, #8
    2244:	bd10      	pop	{r4, pc}
    2246:	46c0      	nop			; (mov r8, r8)
    2248:	0000482e 	.word	0x0000482e
    224c:	00000024 	.word	0x00000024
    2250:	00004208 	.word	0x00004208
    2254:	0000010c 	.word	0x0000010c
    2258:	00000238 	.word	0x00000238

0000225c <prvTraceGetObjectNumber>:
#else

extern portBASE_TYPE uxQueueGetQueueNumber(void*);

objectHandleType prvTraceGetObjectNumber(void* handle)
{
    225c:	b500      	push	{lr}
    225e:	b083      	sub	sp, #12
    2260:	4b04      	ldr	r3, [pc, #16]	; (2274 <prvTraceGetObjectNumber+0x18>)
    2262:	447b      	add	r3, pc
	return (objectHandleType) uxQueueGetQueueNumber(handle);
    2264:	4a04      	ldr	r2, [pc, #16]	; (2278 <prvTraceGetObjectNumber+0x1c>)
    2266:	589a      	ldr	r2, [r3, r2]
    2268:	9201      	str	r2, [sp, #4]
    226a:	4790      	blx	r2
    226c:	b2c0      	uxtb	r0, r0
}
    226e:	b003      	add	sp, #12
    2270:	bd00      	pop	{pc}
    2272:	46c0      	nop			; (mov r8, r8)
    2274:	000047d6 	.word	0x000047d6
    2278:	0000008c 	.word	0x0000008c

0000227c <prvTraceGetObjectType>:

#endif

unsigned char prvTraceGetObjectType(void* handle)
{
    227c:	b500      	push	{lr}
    227e:	b083      	sub	sp, #12
    2280:	4b03      	ldr	r3, [pc, #12]	; (2290 <prvTraceGetObjectType+0x14>)
    2282:	447b      	add	r3, pc
	return ucQueueGetQueueType(handle);
    2284:	4a03      	ldr	r2, [pc, #12]	; (2294 <prvTraceGetObjectType+0x18>)
    2286:	589a      	ldr	r2, [r3, r2]
    2288:	9201      	str	r2, [sp, #4]
    228a:	4790      	blx	r2
}
    228c:	b003      	add	sp, #12
    228e:	bd00      	pop	{pc}
    2290:	000047b6 	.word	0x000047b6
    2294:	000001a0 	.word	0x000001a0

00002298 <prvTraceGetTaskNumber>:

objectHandleType prvTraceGetTaskNumber(void* handle)
{
    2298:	b500      	push	{lr}
    229a:	b083      	sub	sp, #12
    229c:	4b04      	ldr	r3, [pc, #16]	; (22b0 <prvTraceGetTaskNumber+0x18>)
    229e:	447b      	add	r3, pc
	return (objectHandleType)uxTaskGetTaskNumber(handle);
    22a0:	4a04      	ldr	r2, [pc, #16]	; (22b4 <prvTraceGetTaskNumber+0x1c>)
    22a2:	589a      	ldr	r2, [r3, r2]
    22a4:	9201      	str	r2, [sp, #4]
    22a6:	4790      	blx	r2
    22a8:	b2c0      	uxtb	r0, r0
}
    22aa:	b003      	add	sp, #12
    22ac:	bd00      	pop	{pc}
    22ae:	46c0      	nop			; (mov r8, r8)
    22b0:	0000479a 	.word	0x0000479a
    22b4:	00000184 	.word	0x00000184

000022b8 <prvTraceGetCurrentTaskHandle>:
{
	return xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED;
}

void* prvTraceGetCurrentTaskHandle()
{
    22b8:	b500      	push	{lr}
    22ba:	b083      	sub	sp, #12
    22bc:	4b03      	ldr	r3, [pc, #12]	; (22cc <prvTraceGetCurrentTaskHandle+0x14>)
    22be:	447b      	add	r3, pc
	return xTaskGetCurrentTaskHandle();
    22c0:	4a03      	ldr	r2, [pc, #12]	; (22d0 <prvTraceGetCurrentTaskHandle+0x18>)
    22c2:	589a      	ldr	r2, [r3, r2]
    22c4:	9201      	str	r2, [sp, #4]
    22c6:	4790      	blx	r2
}
    22c8:	b003      	add	sp, #12
    22ca:	bd00      	pop	{pc}
    22cc:	0000477a 	.word	0x0000477a
    22d0:	000001b0 	.word	0x000001b0

000022d4 <vTraceInitObjectPropertyTable>:

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
    22d4:	b510      	push	{r4, lr}
    22d6:	4b29      	ldr	r3, [pc, #164]	; (237c <vTraceInitObjectPropertyTable+0xa8>)
    22d8:	447b      	add	r3, pc
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
    22da:	4a29      	ldr	r2, [pc, #164]	; (2380 <vTraceInitObjectPropertyTable+0xac>)
    22dc:	589b      	ldr	r3, [r3, r2]
    22de:	681b      	ldr	r3, [r3, #0]
    22e0:	2207      	movs	r2, #7
    22e2:	65da      	str	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = NQueue;
    22e4:	220a      	movs	r2, #10
    22e6:	2164      	movs	r1, #100	; 0x64
    22e8:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = NSemaphore;
    22ea:	2165      	movs	r1, #101	; 0x65
    22ec:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = NMutex;
    22ee:	2166      	movs	r1, #102	; 0x66
    22f0:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = NTask;
    22f2:	220f      	movs	r2, #15
    22f4:	2167      	movs	r1, #103	; 0x67
    22f6:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = NISR;
    22f8:	2005      	movs	r0, #5
    22fa:	2168      	movs	r1, #104	; 0x68
    22fc:	5458      	strb	r0, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = NTimer;
    22fe:	2102      	movs	r1, #2
    2300:	2069      	movs	r0, #105	; 0x69
    2302:	5419      	strb	r1, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = NEventGroup;	
    2304:	206a      	movs	r0, #106	; 0x6a
    2306:	5419      	strb	r1, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = NameLenQueue;
    2308:	216c      	movs	r1, #108	; 0x6c
    230a:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = NameLenSemaphore;
    230c:	216d      	movs	r1, #109	; 0x6d
    230e:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = NameLenMutex;
    2310:	216e      	movs	r1, #110	; 0x6e
    2312:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = NameLenTask;
    2314:	216f      	movs	r1, #111	; 0x6f
    2316:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = NameLenISR;
    2318:	2170      	movs	r1, #112	; 0x70
    231a:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = NameLenTimer;
    231c:	2171      	movs	r1, #113	; 0x71
    231e:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = NameLenEventGroup;	
    2320:	2172      	movs	r1, #114	; 0x72
    2322:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
    2324:	2210      	movs	r2, #16
    2326:	2174      	movs	r1, #116	; 0x74
    2328:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
    232a:	2175      	movs	r1, #117	; 0x75
    232c:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
    232e:	2176      	movs	r1, #118	; 0x76
    2330:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
    2332:	2113      	movs	r1, #19
    2334:	2077      	movs	r0, #119	; 0x77
    2336:	5419      	strb	r1, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
    2338:	2411      	movs	r4, #17
    233a:	2078      	movs	r0, #120	; 0x78
    233c:	541c      	strb	r4, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
    233e:	2079      	movs	r0, #121	; 0x79
    2340:	541a      	strb	r2, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
    2342:	227a      	movs	r2, #122	; 0x7a
    2344:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
    2346:	2100      	movs	r1, #0
    2348:	227c      	movs	r2, #124	; 0x7c
    234a:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
    234c:	21a0      	movs	r1, #160	; 0xa0
    234e:	227e      	movs	r2, #126	; 0x7e
    2350:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
    2352:	0049      	lsls	r1, r1, #1
    2354:	2280      	movs	r2, #128	; 0x80
    2356:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
    2358:	21f0      	movs	r1, #240	; 0xf0
    235a:	0049      	lsls	r1, r1, #1
    235c:	2282      	movs	r2, #130	; 0x82
    235e:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
    2360:	4908      	ldr	r1, [pc, #32]	; (2384 <vTraceInitObjectPropertyTable+0xb0>)
    2362:	2284      	movs	r2, #132	; 0x84
    2364:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
    2366:	4908      	ldr	r1, [pc, #32]	; (2388 <vTraceInitObjectPropertyTable+0xb4>)
    2368:	2286      	movs	r2, #134	; 0x86
    236a:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
    236c:	4907      	ldr	r1, [pc, #28]	; (238c <vTraceInitObjectPropertyTable+0xb8>)
    236e:	2288      	movs	r2, #136	; 0x88
    2370:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
    2372:	22e6      	movs	r2, #230	; 0xe6
    2374:	0092      	lsls	r2, r2, #2
    2376:	661a      	str	r2, [r3, #96]	; 0x60
}
    2378:	bd10      	pop	{r4, pc}
    237a:	46c0      	nop			; (mov r8, r8)
    237c:	00004760 	.word	0x00004760
    2380:	00000024 	.word	0x00000024
    2384:	000002fd 	.word	0x000002fd
    2388:	00000352 	.word	0x00000352
    238c:	00000372 	.word	0x00000372

00002390 <vTraceInitObjectHandleStack>:

/* Initialization of the handle mechanism, see e.g, xTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
    2390:	4b13      	ldr	r3, [pc, #76]	; (23e0 <vTraceInitObjectHandleStack+0x50>)
    2392:	447b      	add	r3, pc
	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
    2394:	4a13      	ldr	r2, [pc, #76]	; (23e4 <vTraceInitObjectHandleStack+0x54>)
    2396:	589b      	ldr	r3, [r3, r2]
    2398:	2200      	movs	r2, #0
    239a:	81da      	strh	r2, [r3, #14]
    239c:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = NQueue;
    239e:	220a      	movs	r2, #10
    23a0:	821a      	strh	r2, [r3, #16]
    23a2:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = NQueue + NSemaphore;
    23a4:	2214      	movs	r2, #20
    23a6:	825a      	strh	r2, [r3, #18]
    23a8:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = NQueue + NSemaphore + NMutex;
    23aa:	221e      	movs	r2, #30
    23ac:	829a      	strh	r2, [r3, #20]
    23ae:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = NQueue + NSemaphore + NMutex + NTask;
    23b0:	222d      	movs	r2, #45	; 0x2d
    23b2:	82da      	strh	r2, [r3, #22]
    23b4:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = NQueue + NSemaphore + NMutex + NTask + NISR;
    23b6:	2232      	movs	r2, #50	; 0x32
    23b8:	831a      	strh	r2, [r3, #24]
    23ba:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = NQueue + NSemaphore + NMutex + NTask + NISR + NTimer;
    23bc:	2234      	movs	r2, #52	; 0x34
    23be:	835a      	strh	r2, [r3, #26]
    23c0:	819a      	strh	r2, [r3, #12]

	objectHandleStacks.highestIndexOfClass[0] = NQueue - 1;
    23c2:	2209      	movs	r2, #9
    23c4:	839a      	strh	r2, [r3, #28]
	objectHandleStacks.highestIndexOfClass[1] = NQueue + NSemaphore - 1;
    23c6:	2213      	movs	r2, #19
    23c8:	83da      	strh	r2, [r3, #30]
	objectHandleStacks.highestIndexOfClass[2] = NQueue + NSemaphore + NMutex - 1;
    23ca:	221d      	movs	r2, #29
    23cc:	841a      	strh	r2, [r3, #32]
	objectHandleStacks.highestIndexOfClass[3] = NQueue + NSemaphore + NMutex + NTask - 1;
    23ce:	222c      	movs	r2, #44	; 0x2c
    23d0:	845a      	strh	r2, [r3, #34]	; 0x22
	objectHandleStacks.highestIndexOfClass[4] = NQueue + NSemaphore + NMutex + NTask + NISR - 1;
    23d2:	2231      	movs	r2, #49	; 0x31
    23d4:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[5] = NQueue + NSemaphore + NMutex + NTask + NISR + NTimer - 1;
    23d6:	2233      	movs	r2, #51	; 0x33
    23d8:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[6] = NQueue + NSemaphore + NMutex + NTask + NISR + NTimer + NEventGroup - 1;
    23da:	2235      	movs	r2, #53	; 0x35
    23dc:	851a      	strh	r2, [r3, #40]	; 0x28
}
    23de:	4770      	bx	lr
    23e0:	000046a6 	.word	0x000046a6
    23e4:	00000284 	.word	0x00000284

000023e8 <pszTraceGetErrorNotEnoughHandles>:
	
/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
    23e8:	b500      	push	{lr}
	switch(objectclass)
    23ea:	2806      	cmp	r0, #6
    23ec:	d817      	bhi.n	241e <pszTraceGetErrorNotEnoughHandles+0x36>
    23ee:	f003 f8d7 	bl	55a0 <__gnu_thumb1_case_uqi>
    23f2:	070d      	.short	0x070d
    23f4:	1019040a 	.word	0x1019040a
    23f8:	13          	.byte	0x13
    23f9:	00          	.byte	0x00
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase NTask in trcConfig.h";
    23fa:	480c      	ldr	r0, [pc, #48]	; (242c <pszTraceGetErrorNotEnoughHandles+0x44>)
    23fc:	4478      	add	r0, pc
    23fe:	e013      	b.n	2428 <pszTraceGetErrorNotEnoughHandles+0x40>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase NISR in trcConfig.h";
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase NSemaphore in trcConfig.h";
    2400:	480b      	ldr	r0, [pc, #44]	; (2430 <pszTraceGetErrorNotEnoughHandles+0x48>)
    2402:	4478      	add	r0, pc
    2404:	e010      	b.n	2428 <pszTraceGetErrorNotEnoughHandles+0x40>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase NMutex in trcConfig.h";
    2406:	480b      	ldr	r0, [pc, #44]	; (2434 <pszTraceGetErrorNotEnoughHandles+0x4c>)
    2408:	4478      	add	r0, pc
    240a:	e00d      	b.n	2428 <pszTraceGetErrorNotEnoughHandles+0x40>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase NQueue in trcConfig.h";
    240c:	480a      	ldr	r0, [pc, #40]	; (2438 <pszTraceGetErrorNotEnoughHandles+0x50>)
    240e:	4478      	add	r0, pc
    2410:	e00a      	b.n	2428 <pszTraceGetErrorNotEnoughHandles+0x40>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase NTimer in trcConfig.h";
    2412:	480a      	ldr	r0, [pc, #40]	; (243c <pszTraceGetErrorNotEnoughHandles+0x54>)
    2414:	4478      	add	r0, pc
    2416:	e007      	b.n	2428 <pszTraceGetErrorNotEnoughHandles+0x40>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase NEventGroup in trcConfig.h";		
    2418:	4809      	ldr	r0, [pc, #36]	; (2440 <pszTraceGetErrorNotEnoughHandles+0x58>)
    241a:	4478      	add	r0, pc
    241c:	e004      	b.n	2428 <pszTraceGetErrorNotEnoughHandles+0x40>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
    241e:	4809      	ldr	r0, [pc, #36]	; (2444 <pszTraceGetErrorNotEnoughHandles+0x5c>)
    2420:	4478      	add	r0, pc
    2422:	e001      	b.n	2428 <pszTraceGetErrorNotEnoughHandles+0x40>
	switch(objectclass)
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase NTask in trcConfig.h";
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase NISR in trcConfig.h";
    2424:	4808      	ldr	r0, [pc, #32]	; (2448 <pszTraceGetErrorNotEnoughHandles+0x60>)
    2426:	4478      	add	r0, pc
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase NEventGroup in trcConfig.h";		
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
	}
}
    2428:	bd00      	pop	{pc}
    242a:	46c0      	nop			; (mov r8, r8)
    242c:	00004070 	.word	0x00004070
    2430:	000040da 	.word	0x000040da
    2434:	00004118 	.word	0x00004118
    2438:	0000414e 	.word	0x0000414e
    243c:	00004184 	.word	0x00004184
    2440:	000041ba 	.word	0x000041ba
    2444:	000041f8 	.word	0x000041f8
    2448:	0000407e 	.word	0x0000407e

0000244c <vTraceInitTraceData>:
 *
 * Allocates, if necessary, and initializes the recorder data structure, based
 * on the constants in trcConfig.h.
 ******************************************************************************/
void vTraceInitTraceData(void)
{
    244c:	b500      	push	{lr}
    244e:	b083      	sub	sp, #12
    2450:	4b03      	ldr	r3, [pc, #12]	; (2460 <vTraceInitTraceData+0x14>)
    2452:	447b      	add	r3, pc
	prvTraceInitTraceData();
    2454:	4a03      	ldr	r2, [pc, #12]	; (2464 <vTraceInitTraceData+0x18>)
    2456:	589a      	ldr	r2, [r3, r2]
    2458:	9201      	str	r2, [sp, #4]
    245a:	4790      	blx	r2
}
    245c:	b003      	add	sp, #12
    245e:	bd00      	pop	{pc}
    2460:	000045e6 	.word	0x000045e6
    2464:	00000108 	.word	0x00000108

00002468 <uiTraceStart>:
 * error. In that case, check vTraceGetLastError to get the error message.
 * Any error message is also presented when opening a trace file.
 ******************************************************************************/

uint32_t uiTraceStart(void)
{
    2468:	b5f0      	push	{r4, r5, r6, r7, lr}
    246a:	b083      	sub	sp, #12
    246c:	4c27      	ldr	r4, [pc, #156]	; (250c <uiTraceStart+0xa4>)
    246e:	447c      	add	r4, pc
	objectHandleType handle;
	TRACE_SR_ALLOC_CRITICAL_SECTION();

	handle = 0;

	if (RecorderDataPtr == NULL)
    2470:	4b27      	ldr	r3, [pc, #156]	; (2510 <uiTraceStart+0xa8>)
    2472:	58e3      	ldr	r3, [r4, r3]
    2474:	681b      	ldr	r3, [r3, #0]
    2476:	2b00      	cmp	r3, #0
    2478:	d106      	bne.n	2488 <uiTraceStart+0x20>
	{
		vTraceError("RecorderDataPtr is NULL. Call vTraceInitTraceData() before starting trace.");
    247a:	4826      	ldr	r0, [pc, #152]	; (2514 <uiTraceStart+0xac>)
    247c:	4478      	add	r0, pc
    247e:	4b26      	ldr	r3, [pc, #152]	; (2518 <uiTraceStart+0xb0>)
    2480:	58e3      	ldr	r3, [r4, r3]
    2482:	4798      	blx	r3
		return 0;
    2484:	2000      	movs	r0, #0
    2486:	e03e      	b.n	2506 <uiTraceStart+0x9e>
	}

	if (traceErrorMessage == NULL)
    2488:	4b24      	ldr	r3, [pc, #144]	; (251c <uiTraceStart+0xb4>)
    248a:	58e3      	ldr	r3, [r4, r3]
    248c:	681b      	ldr	r3, [r3, #0]
    248e:	2b00      	cmp	r3, #0
    2490:	d135      	bne.n	24fe <uiTraceStart+0x96>
	{
		trcCRITICAL_SECTION_BEGIN();
    2492:	4b23      	ldr	r3, [pc, #140]	; (2520 <uiTraceStart+0xb8>)
    2494:	58e3      	ldr	r3, [r4, r3]
    2496:	4798      	blx	r3
    2498:	1c06      	adds	r6, r0, #0
    249a:	4b22      	ldr	r3, [pc, #136]	; (2524 <uiTraceStart+0xbc>)
    249c:	58e3      	ldr	r3, [r4, r3]
    249e:	681a      	ldr	r2, [r3, #0]
    24a0:	3201      	adds	r2, #1
    24a2:	601a      	str	r2, [r3, #0]
		RecorderDataPtr->recorderActive = 1;
    24a4:	4b1a      	ldr	r3, [pc, #104]	; (2510 <uiTraceStart+0xa8>)
    24a6:	58e3      	ldr	r3, [r4, r3]
    24a8:	681b      	ldr	r3, [r3, #0]
    24aa:	2201      	movs	r2, #1
    24ac:	631a      	str	r2, [r3, #48]	; 0x30

		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
    24ae:	4b1e      	ldr	r3, [pc, #120]	; (2528 <uiTraceStart+0xc0>)
    24b0:	58e3      	ldr	r3, [r4, r3]
    24b2:	4798      	blx	r3
    24b4:	4b1d      	ldr	r3, [pc, #116]	; (252c <uiTraceStart+0xc4>)
    24b6:	58e3      	ldr	r3, [r4, r3]
    24b8:	4798      	blx	r3
    24ba:	1e05      	subs	r5, r0, #0
		if (handle == 0)
    24bc:	d112      	bne.n	24e4 <uiTraceStart+0x7c>
		{
			/* This occurs if the scheduler is not yet started.
			This creates a dummy "(startup)" task entry internally in the
			recorder */
			handle = xTraceGetObjectHandle(TRACE_CLASS_TASK);
    24be:	2003      	movs	r0, #3
    24c0:	4b1b      	ldr	r3, [pc, #108]	; (2530 <uiTraceStart+0xc8>)
    24c2:	58e3      	ldr	r3, [r4, r3]
    24c4:	4798      	blx	r3
    24c6:	1c07      	adds	r7, r0, #0
    24c8:	1c05      	adds	r5, r0, #0
			vTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
    24ca:	2003      	movs	r0, #3
    24cc:	1c39      	adds	r1, r7, #0
    24ce:	4a19      	ldr	r2, [pc, #100]	; (2534 <uiTraceStart+0xcc>)
    24d0:	447a      	add	r2, pc
    24d2:	4b19      	ldr	r3, [pc, #100]	; (2538 <uiTraceStart+0xd0>)
    24d4:	58e3      	ldr	r3, [r4, r3]
    24d6:	4798      	blx	r3

			vTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
    24d8:	2003      	movs	r0, #3
    24da:	1c39      	adds	r1, r7, #0
    24dc:	2200      	movs	r2, #0
    24de:	4b17      	ldr	r3, [pc, #92]	; (253c <uiTraceStart+0xd4>)
    24e0:	58e3      	ldr	r3, [r4, r3]
    24e2:	4798      	blx	r3
		}

		vTraceStoreTaskswitch(handle); /* Register the currently running task */
    24e4:	1c28      	adds	r0, r5, #0
    24e6:	4b16      	ldr	r3, [pc, #88]	; (2540 <uiTraceStart+0xd8>)
    24e8:	58e3      	ldr	r3, [r4, r3]
    24ea:	4798      	blx	r3
		trcCRITICAL_SECTION_END();
    24ec:	4b0d      	ldr	r3, [pc, #52]	; (2524 <uiTraceStart+0xbc>)
    24ee:	58e3      	ldr	r3, [r4, r3]
    24f0:	681a      	ldr	r2, [r3, #0]
    24f2:	3a01      	subs	r2, #1
    24f4:	601a      	str	r2, [r3, #0]
    24f6:	1c30      	adds	r0, r6, #0
    24f8:	4b12      	ldr	r3, [pc, #72]	; (2544 <uiTraceStart+0xdc>)
    24fa:	58e3      	ldr	r3, [r4, r3]
    24fc:	4798      	blx	r3
	}

	return RecorderDataPtr->recorderActive;
    24fe:	4b04      	ldr	r3, [pc, #16]	; (2510 <uiTraceStart+0xa8>)
    2500:	58e3      	ldr	r3, [r4, r3]
    2502:	681b      	ldr	r3, [r3, #0]
    2504:	6b18      	ldr	r0, [r3, #48]	; 0x30
}
    2506:	b003      	add	sp, #12
    2508:	bdf0      	pop	{r4, r5, r6, r7, pc}
    250a:	46c0      	nop			; (mov r8, r8)
    250c:	000045ca 	.word	0x000045ca
    2510:	00000024 	.word	0x00000024
    2514:	000042e0 	.word	0x000042e0
    2518:	0000010c 	.word	0x0000010c
    251c:	00000250 	.word	0x00000250
    2520:	00000244 	.word	0x00000244
    2524:	0000028c 	.word	0x0000028c
    2528:	00000004 	.word	0x00000004
    252c:	00000078 	.word	0x00000078
    2530:	00000288 	.word	0x00000288
    2534:	000042d8 	.word	0x000042d8
    2538:	00000130 	.word	0x00000130
    253c:	00000240 	.word	0x00000240
    2540:	00000044 	.word	0x00000044
    2544:	00000120 	.word	0x00000120

00002548 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2548:	1c03      	adds	r3, r0, #0
    254a:	3308      	adds	r3, #8
    254c:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    254e:	2201      	movs	r2, #1
    2550:	4252      	negs	r2, r2
    2552:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2554:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2556:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    2558:	2300      	movs	r3, #0
    255a:	6003      	str	r3, [r0, #0]
}
    255c:	4770      	bx	lr
    255e:	46c0      	nop			; (mov r8, r8)

00002560 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    2560:	2300      	movs	r3, #0
    2562:	6103      	str	r3, [r0, #16]
}
    2564:	4770      	bx	lr
    2566:	46c0      	nop			; (mov r8, r8)

00002568 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
    2568:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    256a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    256c:	689a      	ldr	r2, [r3, #8]
    256e:	608a      	str	r2, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
    2570:	689a      	ldr	r2, [r3, #8]
    2572:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
    2574:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2576:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
    2578:	6803      	ldr	r3, [r0, #0]
    257a:	3301      	adds	r3, #1
    257c:	6003      	str	r3, [r0, #0]
}
    257e:	4770      	bx	lr

00002580 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    2580:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    2582:	680c      	ldr	r4, [r1, #0]
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2584:	1c02      	adds	r2, r0, #0
    2586:	3208      	adds	r2, #8
	are stored in ready lists (all of which have the same xItemValue value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    2588:	1c63      	adds	r3, r4, #1
    258a:	d101      	bne.n	2590 <vListInsert+0x10>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    258c:	6902      	ldr	r2, [r0, #16]
    258e:	e005      	b.n	259c <vListInsert+0x1c>
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2590:	6853      	ldr	r3, [r2, #4]
    2592:	681d      	ldr	r5, [r3, #0]
    2594:	42ac      	cmp	r4, r5
    2596:	d301      	bcc.n	259c <vListInsert+0x1c>
    2598:	1c1a      	adds	r2, r3, #0
    259a:	e7f9      	b.n	2590 <vListInsert+0x10>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    259c:	6853      	ldr	r3, [r2, #4]
    259e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    25a0:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    25a2:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
    25a4:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    25a6:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
    25a8:	6803      	ldr	r3, [r0, #0]
    25aa:	3301      	adds	r3, #1
    25ac:	6003      	str	r3, [r0, #0]
}
    25ae:	bd30      	pop	{r4, r5, pc}

000025b0 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    25b0:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    25b2:	6842      	ldr	r2, [r0, #4]
    25b4:	6881      	ldr	r1, [r0, #8]
    25b6:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    25b8:	6882      	ldr	r2, [r0, #8]
    25ba:	6841      	ldr	r1, [r0, #4]
    25bc:	6051      	str	r1, [r2, #4]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    25be:	685a      	ldr	r2, [r3, #4]
    25c0:	4282      	cmp	r2, r0
    25c2:	d101      	bne.n	25c8 <uxListRemove+0x18>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    25c4:	6892      	ldr	r2, [r2, #8]
    25c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    25c8:	2200      	movs	r2, #0
    25ca:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
    25cc:	6818      	ldr	r0, [r3, #0]
    25ce:	3801      	subs	r0, #1
    25d0:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
    25d2:	4770      	bx	lr

000025d4 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
    25d4:	4b04      	ldr	r3, [pc, #16]	; (25e8 <prvTaskExitError+0x14>)
    25d6:	447b      	add	r3, pc
    25d8:	681b      	ldr	r3, [r3, #0]
    25da:	3301      	adds	r3, #1
    25dc:	d001      	beq.n	25e2 <prvTaskExitError+0xe>
    25de:	b672      	cpsid	i
    25e0:	e7fe      	b.n	25e0 <prvTaskExitError+0xc>
	portDISABLE_INTERRUPTS();
    25e2:	b672      	cpsid	i
    25e4:	e7fe      	b.n	25e4 <prvTaskExitError+0x10>
    25e6:	46c0      	nop			; (mov r8, r8)
    25e8:	1fffda32 	.word	0x1fffda32

000025ec <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
    25ec:	4a06      	ldr	r2, [pc, #24]	; (2608 <pxCurrentTCBConst2>)
    25ee:	6813      	ldr	r3, [r2, #0]
    25f0:	6818      	ldr	r0, [r3, #0]
    25f2:	3020      	adds	r0, #32
    25f4:	f380 8809 	msr	PSP, r0
    25f8:	2002      	movs	r0, #2
    25fa:	f380 8814 	msr	CONTROL, r0
    25fe:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
    2600:	46ae      	mov	lr, r5
    2602:	b662      	cpsie	i
    2604:	bd00      	pop	{pc}
    2606:	46c0      	nop			; (mov r8, r8)

00002608 <pxCurrentTCBConst2>:
    2608:	2000121c 	.word	0x2000121c

0000260c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    260c:	b510      	push	{r4, lr}
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    260e:	1f03      	subs	r3, r0, #4
    2610:	2480      	movs	r4, #128	; 0x80
    2612:	0464      	lsls	r4, r4, #17
    2614:	601c      	str	r4, [r3, #0]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
    2616:	3b04      	subs	r3, #4
    2618:	6019      	str	r1, [r3, #0]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
    261a:	3b04      	subs	r3, #4
    261c:	4903      	ldr	r1, [pc, #12]	; (262c <pxPortInitialiseStack+0x20>)
    261e:	4479      	add	r1, pc
    2620:	6019      	str	r1, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
    2622:	3b14      	subs	r3, #20
    2624:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */

	return pxTopOfStack;
    2626:	3840      	subs	r0, #64	; 0x40
}
    2628:	bd10      	pop	{r4, pc}
    262a:	46c0      	nop			; (mov r8, r8)
    262c:	ffffffb3 	.word	0xffffffb3

00002630 <SVC_Handler>:

void vPortSVCHandler( void )
{
	/* This function is no longer used, but retained for backward
	compatibility. */
}
    2630:	4770      	bx	lr
    2632:	46c0      	nop			; (mov r8, r8)

00002634 <vPortYield>:
/*-----------------------------------------------------------*/

void vPortYield( void )
{
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
    2634:	2280      	movs	r2, #128	; 0x80
    2636:	0552      	lsls	r2, r2, #21
    2638:	4b03      	ldr	r3, [pc, #12]	; (2648 <vPortYield+0x14>)
    263a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
    263c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    2640:	f3bf 8f6f 	isb	sy
}
    2644:	4770      	bx	lr
    2646:	46c0      	nop			; (mov r8, r8)
    2648:	e000ed04 	.word	0xe000ed04

0000264c <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    portDISABLE_INTERRUPTS();
    264c:	b672      	cpsid	i
    uxCriticalNesting++;
    264e:	4b05      	ldr	r3, [pc, #20]	; (2664 <vPortEnterCritical+0x18>)
    2650:	447b      	add	r3, pc
    2652:	681a      	ldr	r2, [r3, #0]
    2654:	3201      	adds	r2, #1
    2656:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
    2658:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    265c:	f3bf 8f6f 	isb	sy
}
    2660:	4770      	bx	lr
    2662:	46c0      	nop			; (mov r8, r8)
    2664:	1fffd9b8 	.word	0x1fffd9b8

00002668 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
    2668:	4b07      	ldr	r3, [pc, #28]	; (2688 <vPortExitCritical+0x20>)
    266a:	447b      	add	r3, pc
    266c:	681b      	ldr	r3, [r3, #0]
    266e:	2b00      	cmp	r3, #0
    2670:	d101      	bne.n	2676 <vPortExitCritical+0xe>
    2672:	b672      	cpsid	i
    2674:	e7fe      	b.n	2674 <vPortExitCritical+0xc>
    uxCriticalNesting--;
    2676:	3b01      	subs	r3, #1
    2678:	4a04      	ldr	r2, [pc, #16]	; (268c <vPortExitCritical+0x24>)
    267a:	447a      	add	r2, pc
    267c:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
    267e:	2b00      	cmp	r3, #0
    2680:	d100      	bne.n	2684 <vPortExitCritical+0x1c>
    {
        portENABLE_INTERRUPTS();
    2682:	b662      	cpsie	i
    }
}
    2684:	4770      	bx	lr
    2686:	46c0      	nop			; (mov r8, r8)
    2688:	1fffd99e 	.word	0x1fffd99e
    268c:	1fffd98e 	.word	0x1fffd98e

00002690 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
    2690:	f3ef 8010 	mrs	r0, PRIMASK
    2694:	b672      	cpsid	i
    2696:	4770      	bx	lr
					" bx lr				  "
				  );

	/* To avoid compiler warnings.  This line will never be reached. */
	return 0;
}
    2698:	2000      	movs	r0, #0
    269a:	46c0      	nop			; (mov r8, r8)

0000269c <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( uint32_t ulMask )
{
	__asm volatile(
    269c:	f380 8810 	msr	PRIMASK, r0
    26a0:	4770      	bx	lr
    26a2:	46c0      	nop			; (mov r8, r8)

000026a4 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    26a4:	f3ef 8009 	mrs	r0, PSP
    26a8:	4b0e      	ldr	r3, [pc, #56]	; (26e4 <pxCurrentTCBConst>)
    26aa:	681a      	ldr	r2, [r3, #0]
    26ac:	3820      	subs	r0, #32
    26ae:	6010      	str	r0, [r2, #0]
    26b0:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    26b2:	4644      	mov	r4, r8
    26b4:	464d      	mov	r5, r9
    26b6:	4656      	mov	r6, sl
    26b8:	465f      	mov	r7, fp
    26ba:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    26bc:	b508      	push	{r3, lr}
    26be:	b672      	cpsid	i
    26c0:	f001 fba2 	bl	3e08 <vTaskSwitchContext>
    26c4:	b662      	cpsie	i
    26c6:	bc0c      	pop	{r2, r3}
    26c8:	6811      	ldr	r1, [r2, #0]
    26ca:	6808      	ldr	r0, [r1, #0]
    26cc:	3010      	adds	r0, #16
    26ce:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    26d0:	46a0      	mov	r8, r4
    26d2:	46a9      	mov	r9, r5
    26d4:	46b2      	mov	sl, r6
    26d6:	46bb      	mov	fp, r7
    26d8:	f380 8809 	msr	PSP, r0
    26dc:	3820      	subs	r0, #32
    26de:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    26e0:	4718      	bx	r3
    26e2:	46c0      	nop			; (mov r8, r8)

000026e4 <pxCurrentTCBConst>:
    26e4:	2000121c 	.word	0x2000121c

000026e8 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    26e8:	b530      	push	{r4, r5, lr}
    26ea:	b083      	sub	sp, #12
    26ec:	4c0a      	ldr	r4, [pc, #40]	; (2718 <SysTick_Handler+0x30>)
    26ee:	447c      	add	r4, pc
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
    26f0:	4b0a      	ldr	r3, [pc, #40]	; (271c <SysTick_Handler+0x34>)
    26f2:	58e3      	ldr	r3, [r4, r3]
    26f4:	4798      	blx	r3
    26f6:	1c05      	adds	r5, r0, #0
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
    26f8:	4b09      	ldr	r3, [pc, #36]	; (2720 <SysTick_Handler+0x38>)
    26fa:	58e3      	ldr	r3, [r4, r3]
    26fc:	4798      	blx	r3
    26fe:	2800      	cmp	r0, #0
    2700:	d003      	beq.n	270a <SysTick_Handler+0x22>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    2702:	2280      	movs	r2, #128	; 0x80
    2704:	0552      	lsls	r2, r2, #21
    2706:	4b07      	ldr	r3, [pc, #28]	; (2724 <SysTick_Handler+0x3c>)
    2708:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
    270a:	1c28      	adds	r0, r5, #0
    270c:	4b06      	ldr	r3, [pc, #24]	; (2728 <SysTick_Handler+0x40>)
    270e:	58e3      	ldr	r3, [r4, r3]
    2710:	4798      	blx	r3
}
    2712:	b003      	add	sp, #12
    2714:	bd30      	pop	{r4, r5, pc}
    2716:	46c0      	nop			; (mov r8, r8)
    2718:	0000434a 	.word	0x0000434a
    271c:	00000244 	.word	0x00000244
    2720:	0000021c 	.word	0x0000021c
    2724:	e000ed04 	.word	0xe000ed04
    2728:	00000120 	.word	0x00000120

0000272c <vPortSetupTimerInterrupt>:
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_VAL)  = 0; /* Load the SysTick Counter Value */
    272c:	2200      	movs	r2, #0
    272e:	4b04      	ldr	r3, [pc, #16]	; (2740 <vPortSetupTimerInterrupt+0x14>)
    2730:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    2732:	4a04      	ldr	r2, [pc, #16]	; (2744 <vPortSetupTimerInterrupt+0x18>)
    2734:	4b04      	ldr	r3, [pc, #16]	; (2748 <vPortSetupTimerInterrupt+0x1c>)
    2736:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    2738:	2207      	movs	r2, #7
    273a:	4b04      	ldr	r3, [pc, #16]	; (274c <vPortSetupTimerInterrupt+0x20>)
    273c:	601a      	str	r2, [r3, #0]
}
    273e:	4770      	bx	lr
    2740:	e000e018 	.word	0xe000e018
    2744:	0000bb7f 	.word	0x0000bb7f
    2748:	e000e014 	.word	0xe000e014
    274c:	e000e010 	.word	0xe000e010

00002750 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
    2750:	b500      	push	{lr}
    2752:	b083      	sub	sp, #12
    2754:	4a0c      	ldr	r2, [pc, #48]	; (2788 <xPortStartScheduler+0x38>)
    2756:	447a      	add	r2, pc
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    2758:	4b0c      	ldr	r3, [pc, #48]	; (278c <xPortStartScheduler+0x3c>)
    275a:	6818      	ldr	r0, [r3, #0]
    275c:	21ff      	movs	r1, #255	; 0xff
    275e:	0409      	lsls	r1, r1, #16
    2760:	4301      	orrs	r1, r0
    2762:	6019      	str	r1, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    2764:	6818      	ldr	r0, [r3, #0]
    2766:	21ff      	movs	r1, #255	; 0xff
    2768:	0609      	lsls	r1, r1, #24
    276a:	4301      	orrs	r1, r0
    276c:	6019      	str	r1, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
    276e:	4b08      	ldr	r3, [pc, #32]	; (2790 <xPortStartScheduler+0x40>)
    2770:	58d3      	ldr	r3, [r2, r3]
    2772:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    2774:	2200      	movs	r2, #0
    2776:	4b07      	ldr	r3, [pc, #28]	; (2794 <xPortStartScheduler+0x44>)
    2778:	447b      	add	r3, pc
    277a:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
    277c:	4b06      	ldr	r3, [pc, #24]	; (2798 <xPortStartScheduler+0x48>)
    277e:	447b      	add	r3, pc
    2780:	4798      	blx	r3

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
    2782:	4b06      	ldr	r3, [pc, #24]	; (279c <xPortStartScheduler+0x4c>)
    2784:	447b      	add	r3, pc
    2786:	4798      	blx	r3
    2788:	000042e2 	.word	0x000042e2
    278c:	e000ed20 	.word	0xe000ed20
    2790:	00000070 	.word	0x00000070
    2794:	1fffd890 	.word	0x1fffd890
    2798:	fffffe6b 	.word	0xfffffe6b
    279c:	fffffe4d 	.word	0xfffffe4d

000027a0 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    27a0:	b570      	push	{r4, r5, r6, lr}
    27a2:	b082      	sub	sp, #8
    27a4:	1c05      	adds	r5, r0, #0
    27a6:	4c18      	ldr	r4, [pc, #96]	; (2808 <pvPortMalloc+0x68>)
    27a8:	447c      	add	r4, pc
void *pvReturn = NULL;
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    27aa:	0743      	lsls	r3, r0, #29
    27ac:	d002      	beq.n	27b4 <pvPortMalloc+0x14>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    27ae:	2307      	movs	r3, #7
    27b0:	439d      	bics	r5, r3
    27b2:	3508      	adds	r5, #8
		}
	#endif

	vTaskSuspendAll();
    27b4:	4b15      	ldr	r3, [pc, #84]	; (280c <pvPortMalloc+0x6c>)
    27b6:	58e3      	ldr	r3, [r4, r3]
    27b8:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
    27ba:	4b15      	ldr	r3, [pc, #84]	; (2810 <pvPortMalloc+0x70>)
    27bc:	447b      	add	r3, pc
    27be:	681b      	ldr	r3, [r3, #0]
    27c0:	2b00      	cmp	r3, #0
    27c2:	d106      	bne.n	27d2 <pvPortMalloc+0x32>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
    27c4:	4b13      	ldr	r3, [pc, #76]	; (2814 <pvPortMalloc+0x74>)
    27c6:	447b      	add	r3, pc
    27c8:	1c1a      	adds	r2, r3, #0
    27ca:	320c      	adds	r2, #12
    27cc:	2107      	movs	r1, #7
    27ce:	438a      	bics	r2, r1
    27d0:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    27d2:	4b11      	ldr	r3, [pc, #68]	; (2818 <pvPortMalloc+0x78>)
    27d4:	447b      	add	r3, pc
    27d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    27d8:	18ed      	adds	r5, r5, r3
    27da:	4a10      	ldr	r2, [pc, #64]	; (281c <pvPortMalloc+0x7c>)
    27dc:	4295      	cmp	r5, r2
    27de:	d809      	bhi.n	27f4 <pvPortMalloc+0x54>
    27e0:	42ab      	cmp	r3, r5
    27e2:	d209      	bcs.n	27f8 <pvPortMalloc+0x58>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    27e4:	4a0e      	ldr	r2, [pc, #56]	; (2820 <pvPortMalloc+0x80>)
    27e6:	447a      	add	r2, pc
    27e8:	6816      	ldr	r6, [r2, #0]
    27ea:	18f6      	adds	r6, r6, r3
			xNextFreeByte += xWantedSize;
    27ec:	4b0d      	ldr	r3, [pc, #52]	; (2824 <pvPortMalloc+0x84>)
    27ee:	447b      	add	r3, pc
    27f0:	63dd      	str	r5, [r3, #60]	; 0x3c
    27f2:	e002      	b.n	27fa <pvPortMalloc+0x5a>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
    27f4:	2600      	movs	r6, #0
    27f6:	e000      	b.n	27fa <pvPortMalloc+0x5a>
    27f8:	2600      	movs	r6, #0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    27fa:	4b0b      	ldr	r3, [pc, #44]	; (2828 <pvPortMalloc+0x88>)
    27fc:	58e3      	ldr	r3, [r4, r3]
    27fe:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
    2800:	1c30      	adds	r0, r6, #0
    2802:	b002      	add	sp, #8
    2804:	bd70      	pop	{r4, r5, r6, pc}
    2806:	46c0      	nop			; (mov r8, r8)
    2808:	00004290 	.word	0x00004290
    280c:	00000124 	.word	0x00000124
    2810:	1fffdda4 	.word	0x1fffdda4
    2814:	1fffdd9a 	.word	0x1fffdd9a
    2818:	1fffe90c 	.word	0x1fffe90c
    281c:	00000baf 	.word	0x00000baf
    2820:	1fffdd7a 	.word	0x1fffdd7a
    2824:	1fffe8f2 	.word	0x1fffe8f2
    2828:	000001d4 	.word	0x000001d4

0000282c <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
    282c:	2800      	cmp	r0, #0
    282e:	d001      	beq.n	2834 <vPortFree+0x8>
    2830:	b672      	cpsid	i
    2832:	e7fe      	b.n	2832 <vPortFree+0x6>
}
    2834:	4770      	bx	lr
    2836:	46c0      	nop			; (mov r8, r8)

00002838 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    2838:	b570      	push	{r4, r5, r6, lr}
    283a:	b082      	sub	sp, #8
    283c:	1c04      	adds	r4, r0, #0
    283e:	1c16      	adds	r6, r2, #0
    2840:	4b1e      	ldr	r3, [pc, #120]	; (28bc <prvCopyDataToQueue+0x84>)
    2842:	447b      	add	r3, pc
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    2844:	6c02      	ldr	r2, [r0, #64]	; 0x40
    2846:	2a00      	cmp	r2, #0
    2848:	d109      	bne.n	285e <prvCopyDataToQueue+0x26>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    284a:	6800      	ldr	r0, [r0, #0]
    284c:	2800      	cmp	r0, #0
    284e:	d12f      	bne.n	28b0 <prvCopyDataToQueue+0x78>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    2850:	6860      	ldr	r0, [r4, #4]
    2852:	4a1b      	ldr	r2, [pc, #108]	; (28c0 <prvCopyDataToQueue+0x88>)
    2854:	589a      	ldr	r2, [r3, r2]
    2856:	4790      	blx	r2
				pxQueue->pxMutexHolder = NULL;
    2858:	2300      	movs	r3, #0
    285a:	6063      	str	r3, [r4, #4]
    285c:	e028      	b.n	28b0 <prvCopyDataToQueue+0x78>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    285e:	2e00      	cmp	r6, #0
    2860:	d10e      	bne.n	2880 <prvCopyDataToQueue+0x48>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    2862:	6880      	ldr	r0, [r0, #8]
    2864:	4d17      	ldr	r5, [pc, #92]	; (28c4 <prvCopyDataToQueue+0x8c>)
    2866:	595d      	ldr	r5, [r3, r5]
    2868:	9501      	str	r5, [sp, #4]
    286a:	47a8      	blx	r5
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    286c:	68a1      	ldr	r1, [r4, #8]
    286e:	6c22      	ldr	r2, [r4, #64]	; 0x40
    2870:	188b      	adds	r3, r1, r2
    2872:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    2874:	6860      	ldr	r0, [r4, #4]
    2876:	4283      	cmp	r3, r0
    2878:	d31a      	bcc.n	28b0 <prvCopyDataToQueue+0x78>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    287a:	6821      	ldr	r1, [r4, #0]
    287c:	60a1      	str	r1, [r4, #8]
    287e:	e017      	b.n	28b0 <prvCopyDataToQueue+0x78>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2880:	68c0      	ldr	r0, [r0, #12]
    2882:	4d10      	ldr	r5, [pc, #64]	; (28c4 <prvCopyDataToQueue+0x8c>)
    2884:	595d      	ldr	r5, [r3, r5]
    2886:	9501      	str	r5, [sp, #4]
    2888:	47a8      	blx	r5
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    288a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    288c:	425a      	negs	r2, r3
    288e:	68e0      	ldr	r0, [r4, #12]
    2890:	1883      	adds	r3, r0, r2
    2892:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    2894:	6821      	ldr	r1, [r4, #0]
    2896:	428b      	cmp	r3, r1
    2898:	d202      	bcs.n	28a0 <prvCopyDataToQueue+0x68>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    289a:	6863      	ldr	r3, [r4, #4]
    289c:	189a      	adds	r2, r3, r2
    289e:	60e2      	str	r2, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    28a0:	2e02      	cmp	r6, #2
    28a2:	d105      	bne.n	28b0 <prvCopyDataToQueue+0x78>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    28a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    28a6:	2b00      	cmp	r3, #0
    28a8:	d002      	beq.n	28b0 <prvCopyDataToQueue+0x78>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
    28aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    28ac:	3b01      	subs	r3, #1
    28ae:	63a3      	str	r3, [r4, #56]	; 0x38
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
    28b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    28b2:	3301      	adds	r3, #1
    28b4:	63a3      	str	r3, [r4, #56]	; 0x38
}
    28b6:	b002      	add	sp, #8
    28b8:	bd70      	pop	{r4, r5, r6, pc}
    28ba:	46c0      	nop			; (mov r8, r8)
    28bc:	000041f6 	.word	0x000041f6
    28c0:	00000134 	.word	0x00000134
    28c4:	0000005c 	.word	0x0000005c

000028c8 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
    28c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    28ca:	465f      	mov	r7, fp
    28cc:	4656      	mov	r6, sl
    28ce:	464d      	mov	r5, r9
    28d0:	b4e0      	push	{r5, r6, r7}
    28d2:	b084      	sub	sp, #16
    28d4:	9003      	str	r0, [sp, #12]
    28d6:	4689      	mov	r9, r1
    28d8:	4d2d      	ldr	r5, [pc, #180]	; (2990 <prvNotifyQueueSetContainer+0xc8>)
    28da:	447d      	add	r5, pc
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    28dc:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
    28de:	2c00      	cmp	r4, #0
    28e0:	d101      	bne.n	28e6 <prvNotifyQueueSetContainer+0x1e>
    28e2:	b672      	cpsid	i
    28e4:	e7fe      	b.n	28e4 <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
    28e6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    28e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    28ea:	429a      	cmp	r2, r3
    28ec:	d301      	bcc.n	28f2 <prvNotifyQueueSetContainer+0x2a>
    28ee:	b672      	cpsid	i
    28f0:	e7fe      	b.n	28f0 <prvNotifyQueueSetContainer+0x28>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    28f2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
	BaseType_t xReturn = pdFALSE;
    28f4:	2000      	movs	r0, #0
		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    28f6:	4293      	cmp	r3, r2
    28f8:	d943      	bls.n	2982 <prvNotifyQueueSetContainer+0xba>
		{
			traceQUEUE_SEND( pxQueueSetContainer );
    28fa:	1c20      	adds	r0, r4, #0
    28fc:	4b25      	ldr	r3, [pc, #148]	; (2994 <prvNotifyQueueSetContainer+0xcc>)
    28fe:	58ee      	ldr	r6, [r5, r3]
    2900:	47b0      	blx	r6
    2902:	4b25      	ldr	r3, [pc, #148]	; (2998 <prvNotifyQueueSetContainer+0xd0>)
    2904:	58eb      	ldr	r3, [r5, r3]
    2906:	9300      	str	r3, [sp, #0]
    2908:	5c1b      	ldrb	r3, [r3, r0]
    290a:	3320      	adds	r3, #32
    290c:	b2db      	uxtb	r3, r3
    290e:	469b      	mov	fp, r3
    2910:	1c20      	adds	r0, r4, #0
    2912:	47b0      	blx	r6
    2914:	9a00      	ldr	r2, [sp, #0]
    2916:	5c17      	ldrb	r7, [r2, r0]
    2918:	1c20      	adds	r0, r4, #0
    291a:	4b20      	ldr	r3, [pc, #128]	; (299c <prvNotifyQueueSetContainer+0xd4>)
    291c:	58eb      	ldr	r3, [r5, r3]
    291e:	9301      	str	r3, [sp, #4]
    2920:	4798      	blx	r3
    2922:	1c02      	adds	r2, r0, #0
    2924:	4658      	mov	r0, fp
    2926:	1c39      	adds	r1, r7, #0
    2928:	4b1d      	ldr	r3, [pc, #116]	; (29a0 <prvNotifyQueueSetContainer+0xd8>)
    292a:	58eb      	ldr	r3, [r5, r3]
    292c:	4798      	blx	r3
    292e:	1c20      	adds	r0, r4, #0
    2930:	47b0      	blx	r6
    2932:	9b00      	ldr	r3, [sp, #0]
    2934:	5c18      	ldrb	r0, [r3, r0]
    2936:	4682      	mov	sl, r0
    2938:	1c20      	adds	r0, r4, #0
    293a:	9a01      	ldr	r2, [sp, #4]
    293c:	4790      	blx	r2
    293e:	1c07      	adds	r7, r0, #0
    2940:	1c20      	adds	r0, r4, #0
    2942:	47b0      	blx	r6
    2944:	9a00      	ldr	r2, [sp, #0]
    2946:	5c13      	ldrb	r3, [r2, r0]
    2948:	2b02      	cmp	r3, #2
    294a:	d003      	beq.n	2954 <prvNotifyQueueSetContainer+0x8c>
    294c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    294e:	3301      	adds	r3, #1
    2950:	b2da      	uxtb	r2, r3
    2952:	e000      	b.n	2956 <prvNotifyQueueSetContainer+0x8e>
    2954:	2200      	movs	r2, #0
    2956:	4650      	mov	r0, sl
    2958:	1c39      	adds	r1, r7, #0
    295a:	4b12      	ldr	r3, [pc, #72]	; (29a4 <prvNotifyQueueSetContainer+0xdc>)
    295c:	58eb      	ldr	r3, [r5, r3]
    295e:	4798      	blx	r3
			/* The data copies is the handle of the queue that contains data. */
			prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
    2960:	1c20      	adds	r0, r4, #0
    2962:	a903      	add	r1, sp, #12
    2964:	464a      	mov	r2, r9
    2966:	4b10      	ldr	r3, [pc, #64]	; (29a8 <prvNotifyQueueSetContainer+0xe0>)
    2968:	447b      	add	r3, pc
    296a:	4798      	blx	r3
#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
	BaseType_t xReturn = pdFALSE;
    296c:	2000      	movs	r0, #0
		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
		{
			traceQUEUE_SEND( pxQueueSetContainer );
			/* The data copies is the handle of the queue that contains data. */
			prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
			if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
    296e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2970:	2b00      	cmp	r3, #0
    2972:	d006      	beq.n	2982 <prvNotifyQueueSetContainer+0xba>
			{
				if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
    2974:	1c20      	adds	r0, r4, #0
    2976:	3024      	adds	r0, #36	; 0x24
    2978:	4b0c      	ldr	r3, [pc, #48]	; (29ac <prvNotifyQueueSetContainer+0xe4>)
    297a:	58eb      	ldr	r3, [r5, r3]
    297c:	4798      	blx	r3
#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
	BaseType_t xReturn = pdFALSE;
    297e:	1e43      	subs	r3, r0, #1
    2980:	4198      	sbcs	r0, r3
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
    2982:	b004      	add	sp, #16
    2984:	bc1c      	pop	{r2, r3, r4}
    2986:	4691      	mov	r9, r2
    2988:	469a      	mov	sl, r3
    298a:	46a3      	mov	fp, r4
    298c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    298e:	46c0      	nop			; (mov r8, r8)
    2990:	0000415e 	.word	0x0000415e
    2994:	0000017c 	.word	0x0000017c
    2998:	00000274 	.word	0x00000274
    299c:	00000064 	.word	0x00000064
    29a0:	00000224 	.word	0x00000224
    29a4:	00000270 	.word	0x00000270
    29a8:	fffffecd 	.word	0xfffffecd
    29ac:	00000100 	.word	0x00000100

000029b0 <prvCopyDataFromQueue>:
	++( pxQueue->uxMessagesWaiting );
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    29b0:	b570      	push	{r4, r5, r6, lr}
    29b2:	b082      	sub	sp, #8
    29b4:	4b0a      	ldr	r3, [pc, #40]	; (29e0 <prvCopyDataFromQueue+0x30>)
    29b6:	447b      	add	r3, pc
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    29b8:	6805      	ldr	r5, [r0, #0]
    29ba:	2d00      	cmp	r5, #0
    29bc:	d00d      	beq.n	29da <prvCopyDataFromQueue+0x2a>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    29be:	6c02      	ldr	r2, [r0, #64]	; 0x40
    29c0:	68c6      	ldr	r6, [r0, #12]
    29c2:	18b4      	adds	r4, r6, r2
    29c4:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    29c6:	6846      	ldr	r6, [r0, #4]
    29c8:	42b4      	cmp	r4, r6
    29ca:	d300      	bcc.n	29ce <prvCopyDataFromQueue+0x1e>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    29cc:	60c5      	str	r5, [r0, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    29ce:	68c4      	ldr	r4, [r0, #12]
    29d0:	1c08      	adds	r0, r1, #0
    29d2:	1c21      	adds	r1, r4, #0
    29d4:	4c03      	ldr	r4, [pc, #12]	; (29e4 <prvCopyDataFromQueue+0x34>)
    29d6:	591c      	ldr	r4, [r3, r4]
    29d8:	47a0      	blx	r4
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    29da:	b002      	add	sp, #8
    29dc:	bd70      	pop	{r4, r5, r6, pc}
    29de:	46c0      	nop			; (mov r8, r8)
    29e0:	00004082 	.word	0x00004082
    29e4:	0000005c 	.word	0x0000005c

000029e8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    29e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    29ea:	b083      	sub	sp, #12
    29ec:	1c04      	adds	r4, r0, #0
    29ee:	4d2b      	ldr	r5, [pc, #172]	; (2a9c <prvUnlockQueue+0xb4>)
    29f0:	447d      	add	r5, pc

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    29f2:	4b2b      	ldr	r3, [pc, #172]	; (2aa0 <prvUnlockQueue+0xb8>)
    29f4:	58eb      	ldr	r3, [r5, r3]
    29f6:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    29f8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    29fa:	2b00      	cmp	r3, #0
    29fc:	dd21      	ble.n	2a42 <prvUnlockQueue+0x5a>
				{
					/* Tasks that are removed from the event list will get added to
					the pending ready list as the scheduler is still suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    29fe:	1c27      	adds	r7, r4, #0
    2a00:	3724      	adds	r7, #36	; 0x24
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
    2a02:	4e28      	ldr	r6, [pc, #160]	; (2aa4 <prvUnlockQueue+0xbc>)
    2a04:	447e      	add	r6, pc
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
    2a06:	6d63      	ldr	r3, [r4, #84]	; 0x54
    2a08:	2b00      	cmp	r3, #0
    2a0a:	d008      	beq.n	2a1e <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
    2a0c:	1c20      	adds	r0, r4, #0
    2a0e:	2100      	movs	r1, #0
    2a10:	47b0      	blx	r6
    2a12:	2801      	cmp	r0, #1
    2a14:	d10f      	bne.n	2a36 <prvUnlockQueue+0x4e>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
    2a16:	4b24      	ldr	r3, [pc, #144]	; (2aa8 <prvUnlockQueue+0xc0>)
    2a18:	58eb      	ldr	r3, [r5, r3]
    2a1a:	4798      	blx	r3
    2a1c:	e00b      	b.n	2a36 <prvUnlockQueue+0x4e>
				}
				else
				{
					/* Tasks that are removed from the event list will get added to
					the pending ready list as the scheduler is still suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2a1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2a20:	2b00      	cmp	r3, #0
    2a22:	d00e      	beq.n	2a42 <prvUnlockQueue+0x5a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2a24:	1c38      	adds	r0, r7, #0
    2a26:	4b21      	ldr	r3, [pc, #132]	; (2aac <prvUnlockQueue+0xc4>)
    2a28:	58eb      	ldr	r3, [r5, r3]
    2a2a:	4798      	blx	r3
    2a2c:	2800      	cmp	r0, #0
    2a2e:	d002      	beq.n	2a36 <prvUnlockQueue+0x4e>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
    2a30:	4b1d      	ldr	r3, [pc, #116]	; (2aa8 <prvUnlockQueue+0xc0>)
    2a32:	58eb      	ldr	r3, [r5, r3]
    2a34:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
    2a36:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    2a38:	3b01      	subs	r3, #1
    2a3a:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    2a3c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    2a3e:	2b00      	cmp	r3, #0
    2a40:	dce1      	bgt.n	2a06 <prvUnlockQueue+0x1e>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
    2a42:	2301      	movs	r3, #1
    2a44:	425b      	negs	r3, r3
    2a46:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
    2a48:	4b19      	ldr	r3, [pc, #100]	; (2ab0 <prvUnlockQueue+0xc8>)
    2a4a:	58eb      	ldr	r3, [r5, r3]
    2a4c:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    2a4e:	4b14      	ldr	r3, [pc, #80]	; (2aa0 <prvUnlockQueue+0xb8>)
    2a50:	58eb      	ldr	r3, [r5, r3]
    2a52:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    2a54:	6c63      	ldr	r3, [r4, #68]	; 0x44
    2a56:	2b00      	cmp	r3, #0
    2a58:	dd17      	ble.n	2a8a <prvUnlockQueue+0xa2>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2a5a:	6923      	ldr	r3, [r4, #16]
    2a5c:	2b00      	cmp	r3, #0
    2a5e:	d014      	beq.n	2a8a <prvUnlockQueue+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    2a60:	1c27      	adds	r7, r4, #0
    2a62:	3710      	adds	r7, #16
    2a64:	4b11      	ldr	r3, [pc, #68]	; (2aac <prvUnlockQueue+0xc4>)
    2a66:	58ee      	ldr	r6, [r5, r3]
    2a68:	e002      	b.n	2a70 <prvUnlockQueue+0x88>
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2a6a:	6923      	ldr	r3, [r4, #16]
    2a6c:	2b00      	cmp	r3, #0
    2a6e:	d00c      	beq.n	2a8a <prvUnlockQueue+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    2a70:	1c38      	adds	r0, r7, #0
    2a72:	47b0      	blx	r6
    2a74:	2800      	cmp	r0, #0
    2a76:	d002      	beq.n	2a7e <prvUnlockQueue+0x96>
				{
					vTaskMissedYield();
    2a78:	4b0b      	ldr	r3, [pc, #44]	; (2aa8 <prvUnlockQueue+0xc0>)
    2a7a:	58eb      	ldr	r3, [r5, r3]
    2a7c:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
    2a7e:	6c63      	ldr	r3, [r4, #68]	; 0x44
    2a80:	3b01      	subs	r3, #1
    2a82:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    2a84:	6c63      	ldr	r3, [r4, #68]	; 0x44
    2a86:	2b00      	cmp	r3, #0
    2a88:	dcef      	bgt.n	2a6a <prvUnlockQueue+0x82>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    2a8a:	2301      	movs	r3, #1
    2a8c:	425b      	negs	r3, r3
    2a8e:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    2a90:	4b07      	ldr	r3, [pc, #28]	; (2ab0 <prvUnlockQueue+0xc8>)
    2a92:	58eb      	ldr	r3, [r5, r3]
    2a94:	4798      	blx	r3
}
    2a96:	b003      	add	sp, #12
    2a98:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a9a:	46c0      	nop			; (mov r8, r8)
    2a9c:	00004048 	.word	0x00004048
    2aa0:	00000280 	.word	0x00000280
    2aa4:	fffffec1 	.word	0xfffffec1
    2aa8:	00000210 	.word	0x00000210
    2aac:	00000100 	.word	0x00000100
    2ab0:	00000010 	.word	0x00000010

00002ab4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    2ab4:	b570      	push	{r4, r5, r6, lr}
    2ab6:	b082      	sub	sp, #8
    2ab8:	1c04      	adds	r4, r0, #0
    2aba:	1c0e      	adds	r6, r1, #0
    2abc:	4d1b      	ldr	r5, [pc, #108]	; (2b2c <xQueueGenericReset+0x78>)
    2abe:	447d      	add	r5, pc
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
    2ac0:	2800      	cmp	r0, #0
    2ac2:	d101      	bne.n	2ac8 <xQueueGenericReset+0x14>
    2ac4:	b672      	cpsid	i
    2ac6:	e7fe      	b.n	2ac6 <xQueueGenericReset+0x12>

	taskENTER_CRITICAL();
    2ac8:	4b19      	ldr	r3, [pc, #100]	; (2b30 <xQueueGenericReset+0x7c>)
    2aca:	58eb      	ldr	r3, [r5, r3]
    2acc:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    2ace:	6823      	ldr	r3, [r4, #0]
    2ad0:	6c22      	ldr	r2, [r4, #64]	; 0x40
    2ad2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    2ad4:	4350      	muls	r0, r2
    2ad6:	1819      	adds	r1, r3, r0
    2ad8:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    2ada:	2100      	movs	r1, #0
    2adc:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    2ade:	60a3      	str	r3, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    2ae0:	1a82      	subs	r2, r0, r2
    2ae2:	189b      	adds	r3, r3, r2
    2ae4:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
    2ae6:	2301      	movs	r3, #1
    2ae8:	425b      	negs	r3, r3
    2aea:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
    2aec:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
    2aee:	2e00      	cmp	r6, #0
    2af0:	d10d      	bne.n	2b0e <xQueueGenericReset+0x5a>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2af2:	6921      	ldr	r1, [r4, #16]
    2af4:	2900      	cmp	r1, #0
    2af6:	d012      	beq.n	2b1e <xQueueGenericReset+0x6a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    2af8:	1c20      	adds	r0, r4, #0
    2afa:	3010      	adds	r0, #16
    2afc:	4b0d      	ldr	r3, [pc, #52]	; (2b34 <xQueueGenericReset+0x80>)
    2afe:	58eb      	ldr	r3, [r5, r3]
    2b00:	4798      	blx	r3
    2b02:	2801      	cmp	r0, #1
    2b04:	d10b      	bne.n	2b1e <xQueueGenericReset+0x6a>
				{
					queueYIELD_IF_USING_PREEMPTION();
    2b06:	4b0c      	ldr	r3, [pc, #48]	; (2b38 <xQueueGenericReset+0x84>)
    2b08:	58eb      	ldr	r3, [r5, r3]
    2b0a:	4798      	blx	r3
    2b0c:	e007      	b.n	2b1e <xQueueGenericReset+0x6a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    2b0e:	1c20      	adds	r0, r4, #0
    2b10:	3010      	adds	r0, #16
    2b12:	4b0a      	ldr	r3, [pc, #40]	; (2b3c <xQueueGenericReset+0x88>)
    2b14:	58ee      	ldr	r6, [r5, r3]
    2b16:	47b0      	blx	r6
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    2b18:	1c20      	adds	r0, r4, #0
    2b1a:	3024      	adds	r0, #36	; 0x24
    2b1c:	47b0      	blx	r6
		}
	}
	taskEXIT_CRITICAL();
    2b1e:	4b08      	ldr	r3, [pc, #32]	; (2b40 <xQueueGenericReset+0x8c>)
    2b20:	58eb      	ldr	r3, [r5, r3]
    2b22:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
    2b24:	2001      	movs	r0, #1
    2b26:	b002      	add	sp, #8
    2b28:	bd70      	pop	{r4, r5, r6, pc}
    2b2a:	46c0      	nop			; (mov r8, r8)
    2b2c:	00003f7a 	.word	0x00003f7a
    2b30:	00000280 	.word	0x00000280
    2b34:	00000100 	.word	0x00000100
    2b38:	00000174 	.word	0x00000174
    2b3c:	000000e4 	.word	0x000000e4
    2b40:	00000010 	.word	0x00000010

00002b44 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
    2b44:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b46:	4657      	mov	r7, sl
    2b48:	464e      	mov	r6, r9
    2b4a:	4645      	mov	r5, r8
    2b4c:	b4e0      	push	{r5, r6, r7}
    2b4e:	b082      	sub	sp, #8
    2b50:	1c05      	adds	r5, r0, #0
    2b52:	4688      	mov	r8, r1
    2b54:	1c16      	adds	r6, r2, #0
    2b56:	4f32      	ldr	r7, [pc, #200]	; (2c20 <xQueueGenericCreate+0xdc>)
    2b58:	447f      	add	r7, pc
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( UBaseType_t ) 0 )
    2b5a:	2800      	cmp	r0, #0
    2b5c:	d01e      	beq.n	2b9c <xQueueGenericCreate+0x58>
	{
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
    2b5e:	2058      	movs	r0, #88	; 0x58
    2b60:	4b30      	ldr	r3, [pc, #192]	; (2c24 <xQueueGenericCreate+0xe0>)
    2b62:	58fb      	ldr	r3, [r7, r3]
    2b64:	4798      	blx	r3
    2b66:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
    2b68:	d018      	beq.n	2b9c <xQueueGenericCreate+0x58>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2b6a:	4640      	mov	r0, r8
    2b6c:	4368      	muls	r0, r5
    2b6e:	3001      	adds	r0, #1

			pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
    2b70:	4b2c      	ldr	r3, [pc, #176]	; (2c24 <xQueueGenericCreate+0xe0>)
    2b72:	58fb      	ldr	r3, [r7, r3]
    2b74:	4798      	blx	r3
    2b76:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
    2b78:	2800      	cmp	r0, #0
    2b7a:	d111      	bne.n	2ba0 <xQueueGenericCreate+0x5c>
				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
    2b7c:	4b2a      	ldr	r3, [pc, #168]	; (2c28 <xQueueGenericCreate+0xe4>)
    2b7e:	58fb      	ldr	r3, [r7, r3]
    2b80:	5d99      	ldrb	r1, [r3, r6]
    2b82:	1c08      	adds	r0, r1, #0
    2b84:	3040      	adds	r0, #64	; 0x40
    2b86:	b2c0      	uxtb	r0, r0
    2b88:	2200      	movs	r2, #0
    2b8a:	4b28      	ldr	r3, [pc, #160]	; (2c2c <xQueueGenericCreate+0xe8>)
    2b8c:	58fb      	ldr	r3, [r7, r3]
    2b8e:	4798      	blx	r3
				vPortFree( pxNewQueue );
    2b90:	1c20      	adds	r0, r4, #0
    2b92:	4b27      	ldr	r3, [pc, #156]	; (2c30 <xQueueGenericCreate+0xec>)
    2b94:	58fb      	ldr	r3, [r7, r3]
    2b96:	4798      	blx	r3
    2b98:	e000      	b.n	2b9c <xQueueGenericCreate+0x58>
    2b9a:	e7fe      	b.n	2b9a <xQueueGenericCreate+0x56>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
    2b9c:	b672      	cpsid	i
    2b9e:	e7fc      	b.n	2b9a <xQueueGenericCreate+0x56>
			pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
    2ba0:	63e5      	str	r5, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
    2ba2:	4643      	mov	r3, r8
    2ba4:	6423      	str	r3, [r4, #64]	; 0x40
				( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    2ba6:	1c20      	adds	r0, r4, #0
    2ba8:	2101      	movs	r1, #1
    2baa:	4b22      	ldr	r3, [pc, #136]	; (2c34 <xQueueGenericCreate+0xf0>)
    2bac:	58fb      	ldr	r3, [r7, r3]
    2bae:	4798      	blx	r3

				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
    2bb0:	2350      	movs	r3, #80	; 0x50
    2bb2:	54e6      	strb	r6, [r4, r3]
				}
				#endif /* configUSE_TRACE_FACILITY */

				#if( configUSE_QUEUE_SETS == 1 )
				{
					pxNewQueue->pxQueueSetContainer = NULL;
    2bb4:	2300      	movs	r3, #0
    2bb6:	6563      	str	r3, [r4, #84]	; 0x54
				}
				#endif /* configUSE_QUEUE_SETS */

				traceQUEUE_CREATE( pxNewQueue );
    2bb8:	1c20      	adds	r0, r4, #0
    2bba:	4b1f      	ldr	r3, [pc, #124]	; (2c38 <xQueueGenericCreate+0xf4>)
    2bbc:	58fe      	ldr	r6, [r7, r3]
    2bbe:	47b0      	blx	r6
    2bc0:	4b19      	ldr	r3, [pc, #100]	; (2c28 <xQueueGenericCreate+0xe4>)
    2bc2:	58fd      	ldr	r5, [r7, r3]
    2bc4:	5c28      	ldrb	r0, [r5, r0]
    2bc6:	4b1d      	ldr	r3, [pc, #116]	; (2c3c <xQueueGenericCreate+0xf8>)
    2bc8:	58fb      	ldr	r3, [r7, r3]
    2bca:	4798      	blx	r3
    2bcc:	64e0      	str	r0, [r4, #76]	; 0x4c
    2bce:	1c20      	adds	r0, r4, #0
    2bd0:	47b0      	blx	r6
    2bd2:	5c2b      	ldrb	r3, [r5, r0]
    2bd4:	3318      	adds	r3, #24
    2bd6:	b2db      	uxtb	r3, r3
    2bd8:	469a      	mov	sl, r3
    2bda:	1c20      	adds	r0, r4, #0
    2bdc:	47b0      	blx	r6
    2bde:	5c28      	ldrb	r0, [r5, r0]
    2be0:	4681      	mov	r9, r0
    2be2:	1c20      	adds	r0, r4, #0
    2be4:	4b16      	ldr	r3, [pc, #88]	; (2c40 <xQueueGenericCreate+0xfc>)
    2be6:	58fb      	ldr	r3, [r7, r3]
    2be8:	9300      	str	r3, [sp, #0]
    2bea:	4798      	blx	r3
    2bec:	1c02      	adds	r2, r0, #0
    2bee:	4650      	mov	r0, sl
    2bf0:	4649      	mov	r1, r9
    2bf2:	4b0e      	ldr	r3, [pc, #56]	; (2c2c <xQueueGenericCreate+0xe8>)
    2bf4:	58fb      	ldr	r3, [r7, r3]
    2bf6:	4798      	blx	r3
    2bf8:	1c20      	adds	r0, r4, #0
    2bfa:	47b0      	blx	r6
    2bfc:	5c2d      	ldrb	r5, [r5, r0]
    2bfe:	1c20      	adds	r0, r4, #0
    2c00:	9b00      	ldr	r3, [sp, #0]
    2c02:	4798      	blx	r3
    2c04:	1c01      	adds	r1, r0, #0
    2c06:	1c28      	adds	r0, r5, #0
    2c08:	2200      	movs	r2, #0
    2c0a:	4b0e      	ldr	r3, [pc, #56]	; (2c44 <xQueueGenericCreate+0x100>)
    2c0c:	58fb      	ldr	r3, [r7, r3]
    2c0e:	4798      	blx	r3
	}

	configASSERT( xReturn );

	return xReturn;
}
    2c10:	1c20      	adds	r0, r4, #0
    2c12:	b002      	add	sp, #8
    2c14:	bc1c      	pop	{r2, r3, r4}
    2c16:	4690      	mov	r8, r2
    2c18:	4699      	mov	r9, r3
    2c1a:	46a2      	mov	sl, r4
    2c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c1e:	46c0      	nop			; (mov r8, r8)
    2c20:	00003ee0 	.word	0x00003ee0
    2c24:	000000d0 	.word	0x000000d0
    2c28:	00000274 	.word	0x00000274
    2c2c:	00000224 	.word	0x00000224
    2c30:	00000080 	.word	0x00000080
    2c34:	00000230 	.word	0x00000230
    2c38:	0000017c 	.word	0x0000017c
    2c3c:	00000288 	.word	0x00000288
    2c40:	00000064 	.word	0x00000064
    2c44:	00000270 	.word	0x00000270

00002c48 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    2c48:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c4a:	465f      	mov	r7, fp
    2c4c:	4656      	mov	r6, sl
    2c4e:	464d      	mov	r5, r9
    2c50:	4644      	mov	r4, r8
    2c52:	b4f0      	push	{r4, r5, r6, r7}
    2c54:	b089      	sub	sp, #36	; 0x24
    2c56:	1c05      	adds	r5, r0, #0
    2c58:	4688      	mov	r8, r1
    2c5a:	9205      	str	r2, [sp, #20]
    2c5c:	1c1e      	adds	r6, r3, #0
    2c5e:	4c9c      	ldr	r4, [pc, #624]	; (2ed0 <xQueueGenericSend+0x288>)
    2c60:	447c      	add	r4, pc
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
    2c62:	2800      	cmp	r0, #0
    2c64:	d101      	bne.n	2c6a <xQueueGenericSend+0x22>
    2c66:	b672      	cpsid	i
    2c68:	e7fe      	b.n	2c68 <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    2c6a:	2900      	cmp	r1, #0
    2c6c:	d104      	bne.n	2c78 <xQueueGenericSend+0x30>
    2c6e:	6c03      	ldr	r3, [r0, #64]	; 0x40
    2c70:	2b00      	cmp	r3, #0
    2c72:	d001      	beq.n	2c78 <xQueueGenericSend+0x30>
    2c74:	b672      	cpsid	i
    2c76:	e7fe      	b.n	2c76 <xQueueGenericSend+0x2e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    2c78:	2e02      	cmp	r6, #2
    2c7a:	d104      	bne.n	2c86 <xQueueGenericSend+0x3e>
    2c7c:	6bea      	ldr	r2, [r5, #60]	; 0x3c
    2c7e:	2a01      	cmp	r2, #1
    2c80:	d001      	beq.n	2c86 <xQueueGenericSend+0x3e>
    2c82:	b672      	cpsid	i
    2c84:	e7fe      	b.n	2c84 <xQueueGenericSend+0x3c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    2c86:	4b93      	ldr	r3, [pc, #588]	; (2ed4 <xQueueGenericSend+0x28c>)
    2c88:	58e3      	ldr	r3, [r4, r3]
    2c8a:	4798      	blx	r3
    2c8c:	2800      	cmp	r0, #0
    2c8e:	d102      	bne.n	2c96 <xQueueGenericSend+0x4e>
    2c90:	9b05      	ldr	r3, [sp, #20]
    2c92:	2b00      	cmp	r3, #0
    2c94:	d107      	bne.n	2ca6 <xQueueGenericSend+0x5e>

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    2c96:	2200      	movs	r2, #0
    2c98:	4692      	mov	sl, r2
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    2c9a:	4b8f      	ldr	r3, [pc, #572]	; (2ed8 <xQueueGenericSend+0x290>)
    2c9c:	58e3      	ldr	r3, [r4, r3]
    2c9e:	9302      	str	r3, [sp, #8]
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    2ca0:	ab06      	add	r3, sp, #24
    2ca2:	4699      	mov	r9, r3
    2ca4:	e001      	b.n	2caa <xQueueGenericSend+0x62>
	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    2ca6:	b672      	cpsid	i
    2ca8:	e7fe      	b.n	2ca8 <xQueueGenericSend+0x60>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    2caa:	9a02      	ldr	r2, [sp, #8]
    2cac:	4790      	blx	r2
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    2cae:	6bab      	ldr	r3, [r5, #56]	; 0x38
    2cb0:	6bea      	ldr	r2, [r5, #60]	; 0x3c
    2cb2:	4293      	cmp	r3, r2
    2cb4:	d301      	bcc.n	2cba <xQueueGenericSend+0x72>
    2cb6:	2e02      	cmp	r6, #2
    2cb8:	d15c      	bne.n	2d74 <xQueueGenericSend+0x12c>
			{
				traceQUEUE_SEND( pxQueue );
    2cba:	1c28      	adds	r0, r5, #0
    2cbc:	4b87      	ldr	r3, [pc, #540]	; (2edc <xQueueGenericSend+0x294>)
    2cbe:	58e3      	ldr	r3, [r4, r3]
    2cc0:	9301      	str	r3, [sp, #4]
    2cc2:	4798      	blx	r3
    2cc4:	4b86      	ldr	r3, [pc, #536]	; (2ee0 <xQueueGenericSend+0x298>)
    2cc6:	58e3      	ldr	r3, [r4, r3]
    2cc8:	9302      	str	r3, [sp, #8]
    2cca:	5c1b      	ldrb	r3, [r3, r0]
    2ccc:	3320      	adds	r3, #32
    2cce:	b2db      	uxtb	r3, r3
    2cd0:	469a      	mov	sl, r3
    2cd2:	1c28      	adds	r0, r5, #0
    2cd4:	9b01      	ldr	r3, [sp, #4]
    2cd6:	4798      	blx	r3
    2cd8:	9a02      	ldr	r2, [sp, #8]
    2cda:	5c17      	ldrb	r7, [r2, r0]
    2cdc:	1c28      	adds	r0, r5, #0
    2cde:	4b81      	ldr	r3, [pc, #516]	; (2ee4 <xQueueGenericSend+0x29c>)
    2ce0:	58e3      	ldr	r3, [r4, r3]
    2ce2:	9303      	str	r3, [sp, #12]
    2ce4:	4798      	blx	r3
    2ce6:	1c02      	adds	r2, r0, #0
    2ce8:	4650      	mov	r0, sl
    2cea:	1c39      	adds	r1, r7, #0
    2cec:	4b7e      	ldr	r3, [pc, #504]	; (2ee8 <xQueueGenericSend+0x2a0>)
    2cee:	58e3      	ldr	r3, [r4, r3]
    2cf0:	4798      	blx	r3
    2cf2:	1c28      	adds	r0, r5, #0
    2cf4:	9b01      	ldr	r3, [sp, #4]
    2cf6:	4798      	blx	r3
    2cf8:	9a02      	ldr	r2, [sp, #8]
    2cfa:	5c10      	ldrb	r0, [r2, r0]
    2cfc:	4681      	mov	r9, r0
    2cfe:	1c28      	adds	r0, r5, #0
    2d00:	9b03      	ldr	r3, [sp, #12]
    2d02:	4798      	blx	r3
    2d04:	1c07      	adds	r7, r0, #0
    2d06:	1c28      	adds	r0, r5, #0
    2d08:	9a01      	ldr	r2, [sp, #4]
    2d0a:	4790      	blx	r2
    2d0c:	9a02      	ldr	r2, [sp, #8]
    2d0e:	5c13      	ldrb	r3, [r2, r0]
    2d10:	2b02      	cmp	r3, #2
    2d12:	d003      	beq.n	2d1c <xQueueGenericSend+0xd4>
    2d14:	6baa      	ldr	r2, [r5, #56]	; 0x38
    2d16:	3201      	adds	r2, #1
    2d18:	b2d2      	uxtb	r2, r2
    2d1a:	e000      	b.n	2d1e <xQueueGenericSend+0xd6>
    2d1c:	2200      	movs	r2, #0
    2d1e:	4648      	mov	r0, r9
    2d20:	1c39      	adds	r1, r7, #0
    2d22:	4b72      	ldr	r3, [pc, #456]	; (2eec <xQueueGenericSend+0x2a4>)
    2d24:	58e3      	ldr	r3, [r4, r3]
    2d26:	4798      	blx	r3
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    2d28:	1c28      	adds	r0, r5, #0
    2d2a:	4641      	mov	r1, r8
    2d2c:	1c32      	adds	r2, r6, #0
    2d2e:	4b70      	ldr	r3, [pc, #448]	; (2ef0 <xQueueGenericSend+0x2a8>)
    2d30:	447b      	add	r3, pc
    2d32:	4798      	blx	r3

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    2d34:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    2d36:	2b00      	cmp	r3, #0
    2d38:	d00a      	beq.n	2d50 <xQueueGenericSend+0x108>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
    2d3a:	1c28      	adds	r0, r5, #0
    2d3c:	1c31      	adds	r1, r6, #0
    2d3e:	4b6d      	ldr	r3, [pc, #436]	; (2ef4 <xQueueGenericSend+0x2ac>)
    2d40:	447b      	add	r3, pc
    2d42:	4798      	blx	r3
    2d44:	2801      	cmp	r0, #1
    2d46:	d110      	bne.n	2d6a <xQueueGenericSend+0x122>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
    2d48:	4b6b      	ldr	r3, [pc, #428]	; (2ef8 <xQueueGenericSend+0x2b0>)
    2d4a:	58e3      	ldr	r3, [r4, r3]
    2d4c:	4798      	blx	r3
    2d4e:	e00c      	b.n	2d6a <xQueueGenericSend+0x122>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2d50:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    2d52:	2a00      	cmp	r2, #0
    2d54:	d009      	beq.n	2d6a <xQueueGenericSend+0x122>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    2d56:	1c28      	adds	r0, r5, #0
    2d58:	3024      	adds	r0, #36	; 0x24
    2d5a:	4b68      	ldr	r3, [pc, #416]	; (2efc <xQueueGenericSend+0x2b4>)
    2d5c:	58e3      	ldr	r3, [r4, r3]
    2d5e:	4798      	blx	r3
    2d60:	2801      	cmp	r0, #1
    2d62:	d102      	bne.n	2d6a <xQueueGenericSend+0x122>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
    2d64:	4b64      	ldr	r3, [pc, #400]	; (2ef8 <xQueueGenericSend+0x2b0>)
    2d66:	58e3      	ldr	r3, [r4, r3]
    2d68:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    2d6a:	4b65      	ldr	r3, [pc, #404]	; (2f00 <xQueueGenericSend+0x2b8>)
    2d6c:	58e3      	ldr	r3, [r4, r3]
    2d6e:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    2d70:	2001      	movs	r0, #1
    2d72:	e0a5      	b.n	2ec0 <xQueueGenericSend+0x278>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    2d74:	9b05      	ldr	r3, [sp, #20]
    2d76:	2b00      	cmp	r3, #0
    2d78:	d11c      	bne.n	2db4 <xQueueGenericSend+0x16c>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    2d7a:	4b61      	ldr	r3, [pc, #388]	; (2f00 <xQueueGenericSend+0x2b8>)
    2d7c:	58e3      	ldr	r3, [r4, r3]
    2d7e:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
    2d80:	1c28      	adds	r0, r5, #0
    2d82:	4b56      	ldr	r3, [pc, #344]	; (2edc <xQueueGenericSend+0x294>)
    2d84:	58e3      	ldr	r3, [r4, r3]
    2d86:	9301      	str	r3, [sp, #4]
    2d88:	4798      	blx	r3
    2d8a:	4b55      	ldr	r3, [pc, #340]	; (2ee0 <xQueueGenericSend+0x298>)
    2d8c:	58e6      	ldr	r6, [r4, r3]
    2d8e:	5c33      	ldrb	r3, [r6, r0]
    2d90:	3348      	adds	r3, #72	; 0x48
    2d92:	b2df      	uxtb	r7, r3
    2d94:	1c28      	adds	r0, r5, #0
    2d96:	9a01      	ldr	r2, [sp, #4]
    2d98:	4790      	blx	r2
    2d9a:	5c36      	ldrb	r6, [r6, r0]
    2d9c:	1c28      	adds	r0, r5, #0
    2d9e:	4b51      	ldr	r3, [pc, #324]	; (2ee4 <xQueueGenericSend+0x29c>)
    2da0:	58e3      	ldr	r3, [r4, r3]
    2da2:	4798      	blx	r3
    2da4:	1c02      	adds	r2, r0, #0
    2da6:	1c38      	adds	r0, r7, #0
    2da8:	1c31      	adds	r1, r6, #0
    2daa:	4b4f      	ldr	r3, [pc, #316]	; (2ee8 <xQueueGenericSend+0x2a0>)
    2dac:	58e3      	ldr	r3, [r4, r3]
    2dae:	4798      	blx	r3
					return errQUEUE_FULL;
    2db0:	2000      	movs	r0, #0
    2db2:	e085      	b.n	2ec0 <xQueueGenericSend+0x278>
				}
				else if( xEntryTimeSet == pdFALSE )
    2db4:	4653      	mov	r3, sl
    2db6:	2b00      	cmp	r3, #0
    2db8:	d105      	bne.n	2dc6 <xQueueGenericSend+0x17e>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    2dba:	4648      	mov	r0, r9
    2dbc:	4b51      	ldr	r3, [pc, #324]	; (2f04 <xQueueGenericSend+0x2bc>)
    2dbe:	58e3      	ldr	r3, [r4, r3]
    2dc0:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    2dc2:	2201      	movs	r2, #1
    2dc4:	4692      	mov	sl, r2
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    2dc6:	4b4e      	ldr	r3, [pc, #312]	; (2f00 <xQueueGenericSend+0x2b8>)
    2dc8:	58e3      	ldr	r3, [r4, r3]
    2dca:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    2dcc:	4b4e      	ldr	r3, [pc, #312]	; (2f08 <xQueueGenericSend+0x2c0>)
    2dce:	58e3      	ldr	r3, [r4, r3]
    2dd0:	4798      	blx	r3
		prvLockQueue( pxQueue );
    2dd2:	4b41      	ldr	r3, [pc, #260]	; (2ed8 <xQueueGenericSend+0x290>)
    2dd4:	58e3      	ldr	r3, [r4, r3]
    2dd6:	4798      	blx	r3
    2dd8:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    2dda:	3301      	adds	r3, #1
    2ddc:	d101      	bne.n	2de2 <xQueueGenericSend+0x19a>
    2dde:	2300      	movs	r3, #0
    2de0:	646b      	str	r3, [r5, #68]	; 0x44
    2de2:	6cab      	ldr	r3, [r5, #72]	; 0x48
    2de4:	3301      	adds	r3, #1
    2de6:	d101      	bne.n	2dec <xQueueGenericSend+0x1a4>
    2de8:	2300      	movs	r3, #0
    2dea:	64ab      	str	r3, [r5, #72]	; 0x48
    2dec:	4b44      	ldr	r3, [pc, #272]	; (2f00 <xQueueGenericSend+0x2b8>)
    2dee:	58e3      	ldr	r3, [r4, r3]
    2df0:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2df2:	4648      	mov	r0, r9
    2df4:	a905      	add	r1, sp, #20
    2df6:	4b45      	ldr	r3, [pc, #276]	; (2f0c <xQueueGenericSend+0x2c4>)
    2df8:	58e3      	ldr	r3, [r4, r3]
    2dfa:	4798      	blx	r3
    2dfc:	2800      	cmp	r0, #0
    2dfe:	d13f      	bne.n	2e80 <xQueueGenericSend+0x238>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    2e00:	4b35      	ldr	r3, [pc, #212]	; (2ed8 <xQueueGenericSend+0x290>)
    2e02:	58e3      	ldr	r3, [r4, r3]
    2e04:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    2e06:	6bab      	ldr	r3, [r5, #56]	; 0x38
    2e08:	469b      	mov	fp, r3
    2e0a:	6bef      	ldr	r7, [r5, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    2e0c:	4b3c      	ldr	r3, [pc, #240]	; (2f00 <xQueueGenericSend+0x2b8>)
    2e0e:	58e3      	ldr	r3, [r4, r3]
    2e10:	4798      	blx	r3
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    2e12:	45bb      	cmp	fp, r7
    2e14:	d12c      	bne.n	2e70 <xQueueGenericSend+0x228>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
    2e16:	1c28      	adds	r0, r5, #0
    2e18:	4b30      	ldr	r3, [pc, #192]	; (2edc <xQueueGenericSend+0x294>)
    2e1a:	58e3      	ldr	r3, [r4, r3]
    2e1c:	9301      	str	r3, [sp, #4]
    2e1e:	4798      	blx	r3
    2e20:	4b2f      	ldr	r3, [pc, #188]	; (2ee0 <xQueueGenericSend+0x298>)
    2e22:	58e7      	ldr	r7, [r4, r3]
    2e24:	5c3b      	ldrb	r3, [r7, r0]
    2e26:	3370      	adds	r3, #112	; 0x70
    2e28:	b2db      	uxtb	r3, r3
    2e2a:	469b      	mov	fp, r3
    2e2c:	1c28      	adds	r0, r5, #0
    2e2e:	9a01      	ldr	r2, [sp, #4]
    2e30:	4790      	blx	r2
    2e32:	5c3f      	ldrb	r7, [r7, r0]
    2e34:	1c28      	adds	r0, r5, #0
    2e36:	4b2b      	ldr	r3, [pc, #172]	; (2ee4 <xQueueGenericSend+0x29c>)
    2e38:	58e3      	ldr	r3, [r4, r3]
    2e3a:	4798      	blx	r3
    2e3c:	1c02      	adds	r2, r0, #0
    2e3e:	4658      	mov	r0, fp
    2e40:	1c39      	adds	r1, r7, #0
    2e42:	4b29      	ldr	r3, [pc, #164]	; (2ee8 <xQueueGenericSend+0x2a0>)
    2e44:	58e3      	ldr	r3, [r4, r3]
    2e46:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    2e48:	1c28      	adds	r0, r5, #0
    2e4a:	3010      	adds	r0, #16
    2e4c:	9905      	ldr	r1, [sp, #20]
    2e4e:	4b30      	ldr	r3, [pc, #192]	; (2f10 <xQueueGenericSend+0x2c8>)
    2e50:	58e3      	ldr	r3, [r4, r3]
    2e52:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    2e54:	1c28      	adds	r0, r5, #0
    2e56:	4b2f      	ldr	r3, [pc, #188]	; (2f14 <xQueueGenericSend+0x2cc>)
    2e58:	447b      	add	r3, pc
    2e5a:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    2e5c:	4b2e      	ldr	r3, [pc, #184]	; (2f18 <xQueueGenericSend+0x2d0>)
    2e5e:	58e3      	ldr	r3, [r4, r3]
    2e60:	4798      	blx	r3
    2e62:	2800      	cmp	r0, #0
    2e64:	d000      	beq.n	2e68 <xQueueGenericSend+0x220>
    2e66:	e720      	b.n	2caa <xQueueGenericSend+0x62>
				{
					portYIELD_WITHIN_API();
    2e68:	4b23      	ldr	r3, [pc, #140]	; (2ef8 <xQueueGenericSend+0x2b0>)
    2e6a:	58e3      	ldr	r3, [r4, r3]
    2e6c:	4798      	blx	r3
    2e6e:	e71c      	b.n	2caa <xQueueGenericSend+0x62>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    2e70:	1c28      	adds	r0, r5, #0
    2e72:	4b2a      	ldr	r3, [pc, #168]	; (2f1c <xQueueGenericSend+0x2d4>)
    2e74:	447b      	add	r3, pc
    2e76:	4798      	blx	r3
				( void ) xTaskResumeAll();
    2e78:	4b27      	ldr	r3, [pc, #156]	; (2f18 <xQueueGenericSend+0x2d0>)
    2e7a:	58e3      	ldr	r3, [r4, r3]
    2e7c:	4798      	blx	r3
    2e7e:	e714      	b.n	2caa <xQueueGenericSend+0x62>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    2e80:	1c28      	adds	r0, r5, #0
    2e82:	4b27      	ldr	r3, [pc, #156]	; (2f20 <xQueueGenericSend+0x2d8>)
    2e84:	447b      	add	r3, pc
    2e86:	4798      	blx	r3
			( void ) xTaskResumeAll();
    2e88:	4b23      	ldr	r3, [pc, #140]	; (2f18 <xQueueGenericSend+0x2d0>)
    2e8a:	58e3      	ldr	r3, [r4, r3]
    2e8c:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
    2e8e:	1c28      	adds	r0, r5, #0
    2e90:	4b12      	ldr	r3, [pc, #72]	; (2edc <xQueueGenericSend+0x294>)
    2e92:	58e3      	ldr	r3, [r4, r3]
    2e94:	9301      	str	r3, [sp, #4]
    2e96:	4798      	blx	r3
    2e98:	4b11      	ldr	r3, [pc, #68]	; (2ee0 <xQueueGenericSend+0x298>)
    2e9a:	58e6      	ldr	r6, [r4, r3]
    2e9c:	5c33      	ldrb	r3, [r6, r0]
    2e9e:	3348      	adds	r3, #72	; 0x48
    2ea0:	b2df      	uxtb	r7, r3
    2ea2:	1c28      	adds	r0, r5, #0
    2ea4:	9b01      	ldr	r3, [sp, #4]
    2ea6:	4798      	blx	r3
    2ea8:	5c36      	ldrb	r6, [r6, r0]
    2eaa:	1c28      	adds	r0, r5, #0
    2eac:	4b0d      	ldr	r3, [pc, #52]	; (2ee4 <xQueueGenericSend+0x29c>)
    2eae:	58e3      	ldr	r3, [r4, r3]
    2eb0:	4798      	blx	r3
    2eb2:	1c02      	adds	r2, r0, #0
    2eb4:	1c38      	adds	r0, r7, #0
    2eb6:	1c31      	adds	r1, r6, #0
    2eb8:	4b0b      	ldr	r3, [pc, #44]	; (2ee8 <xQueueGenericSend+0x2a0>)
    2eba:	58e3      	ldr	r3, [r4, r3]
    2ebc:	4798      	blx	r3
			return errQUEUE_FULL;
    2ebe:	2000      	movs	r0, #0
		}
	}
}
    2ec0:	b009      	add	sp, #36	; 0x24
    2ec2:	bc3c      	pop	{r2, r3, r4, r5}
    2ec4:	4690      	mov	r8, r2
    2ec6:	4699      	mov	r9, r3
    2ec8:	46a2      	mov	sl, r4
    2eca:	46ab      	mov	fp, r5
    2ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ece:	46c0      	nop			; (mov r8, r8)
    2ed0:	00003dd8 	.word	0x00003dd8
    2ed4:	0000024c 	.word	0x0000024c
    2ed8:	00000280 	.word	0x00000280
    2edc:	0000017c 	.word	0x0000017c
    2ee0:	00000274 	.word	0x00000274
    2ee4:	00000064 	.word	0x00000064
    2ee8:	00000224 	.word	0x00000224
    2eec:	00000270 	.word	0x00000270
    2ef0:	fffffb05 	.word	0xfffffb05
    2ef4:	fffffb85 	.word	0xfffffb85
    2ef8:	00000174 	.word	0x00000174
    2efc:	00000100 	.word	0x00000100
    2f00:	00000010 	.word	0x00000010
    2f04:	0000027c 	.word	0x0000027c
    2f08:	00000124 	.word	0x00000124
    2f0c:	0000011c 	.word	0x0000011c
    2f10:	00000060 	.word	0x00000060
    2f14:	fffffb8d 	.word	0xfffffb8d
    2f18:	000001d4 	.word	0x000001d4
    2f1c:	fffffb71 	.word	0xfffffb71
    2f20:	fffffb61 	.word	0xfffffb61

00002f24 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    2f24:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f26:	465f      	mov	r7, fp
    2f28:	4656      	mov	r6, sl
    2f2a:	464d      	mov	r5, r9
    2f2c:	4644      	mov	r4, r8
    2f2e:	b4f0      	push	{r4, r5, r6, r7}
    2f30:	b085      	sub	sp, #20
    2f32:	1c04      	adds	r4, r0, #0
    2f34:	1c0f      	adds	r7, r1, #0
    2f36:	1c16      	adds	r6, r2, #0
    2f38:	4698      	mov	r8, r3
    2f3a:	4d56      	ldr	r5, [pc, #344]	; (3094 <xQueueGenericSendFromISR+0x170>)
    2f3c:	447d      	add	r5, pc
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
    2f3e:	2800      	cmp	r0, #0
    2f40:	d101      	bne.n	2f46 <xQueueGenericSendFromISR+0x22>
    2f42:	b672      	cpsid	i
    2f44:	e7fe      	b.n	2f44 <xQueueGenericSendFromISR+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    2f46:	2900      	cmp	r1, #0
    2f48:	d104      	bne.n	2f54 <xQueueGenericSendFromISR+0x30>
    2f4a:	6c02      	ldr	r2, [r0, #64]	; 0x40
    2f4c:	2a00      	cmp	r2, #0
    2f4e:	d001      	beq.n	2f54 <xQueueGenericSendFromISR+0x30>
    2f50:	b672      	cpsid	i
    2f52:	e7fe      	b.n	2f52 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    2f54:	4643      	mov	r3, r8
    2f56:	2b02      	cmp	r3, #2
    2f58:	d000      	beq.n	2f5c <xQueueGenericSendFromISR+0x38>
    2f5a:	e07f      	b.n	305c <xQueueGenericSendFromISR+0x138>
    2f5c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    2f5e:	2a01      	cmp	r2, #1
    2f60:	d100      	bne.n	2f64 <xQueueGenericSendFromISR+0x40>
    2f62:	e084      	b.n	306e <xQueueGenericSendFromISR+0x14a>
    2f64:	b672      	cpsid	i
    2f66:	e7fe      	b.n	2f66 <xQueueGenericSendFromISR+0x42>
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );
    2f68:	1c20      	adds	r0, r4, #0
    2f6a:	4b4b      	ldr	r3, [pc, #300]	; (3098 <xQueueGenericSendFromISR+0x174>)
    2f6c:	58eb      	ldr	r3, [r5, r3]
    2f6e:	9300      	str	r3, [sp, #0]
    2f70:	4798      	blx	r3
    2f72:	4b4a      	ldr	r3, [pc, #296]	; (309c <xQueueGenericSendFromISR+0x178>)
    2f74:	58eb      	ldr	r3, [r5, r3]
    2f76:	9301      	str	r3, [sp, #4]
    2f78:	5c1b      	ldrb	r3, [r3, r0]
    2f7a:	3330      	adds	r3, #48	; 0x30
    2f7c:	b2db      	uxtb	r3, r3
    2f7e:	469b      	mov	fp, r3
    2f80:	1c20      	adds	r0, r4, #0
    2f82:	9b00      	ldr	r3, [sp, #0]
    2f84:	4798      	blx	r3
    2f86:	9a01      	ldr	r2, [sp, #4]
    2f88:	5c10      	ldrb	r0, [r2, r0]
    2f8a:	4682      	mov	sl, r0
    2f8c:	1c20      	adds	r0, r4, #0
    2f8e:	4b44      	ldr	r3, [pc, #272]	; (30a0 <xQueueGenericSendFromISR+0x17c>)
    2f90:	58eb      	ldr	r3, [r5, r3]
    2f92:	9302      	str	r3, [sp, #8]
    2f94:	4798      	blx	r3
    2f96:	1c02      	adds	r2, r0, #0
    2f98:	4658      	mov	r0, fp
    2f9a:	4651      	mov	r1, sl
    2f9c:	4b41      	ldr	r3, [pc, #260]	; (30a4 <xQueueGenericSendFromISR+0x180>)
    2f9e:	58eb      	ldr	r3, [r5, r3]
    2fa0:	4798      	blx	r3
    2fa2:	1c20      	adds	r0, r4, #0
    2fa4:	9b00      	ldr	r3, [sp, #0]
    2fa6:	4798      	blx	r3
    2fa8:	9a01      	ldr	r2, [sp, #4]
    2faa:	5c10      	ldrb	r0, [r2, r0]
    2fac:	4683      	mov	fp, r0
    2fae:	1c20      	adds	r0, r4, #0
    2fb0:	9b02      	ldr	r3, [sp, #8]
    2fb2:	4798      	blx	r3
    2fb4:	1c01      	adds	r1, r0, #0
    2fb6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    2fb8:	3201      	adds	r2, #1
    2fba:	b2d2      	uxtb	r2, r2
    2fbc:	4658      	mov	r0, fp
    2fbe:	4b3a      	ldr	r3, [pc, #232]	; (30a8 <xQueueGenericSendFromISR+0x184>)
    2fc0:	58eb      	ldr	r3, [r5, r3]
    2fc2:	4798      	blx	r3

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    2fc4:	1c20      	adds	r0, r4, #0
    2fc6:	1c39      	adds	r1, r7, #0
    2fc8:	4642      	mov	r2, r8
    2fca:	4b38      	ldr	r3, [pc, #224]	; (30ac <xQueueGenericSendFromISR+0x188>)
    2fcc:	447b      	add	r3, pc
    2fce:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    2fd0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    2fd2:	3301      	adds	r3, #1
    2fd4:	d11f      	bne.n	3016 <xQueueGenericSendFromISR+0xf2>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    2fd6:	6d62      	ldr	r2, [r4, #84]	; 0x54
    2fd8:	2a00      	cmp	r2, #0
    2fda:	d00c      	beq.n	2ff6 <xQueueGenericSendFromISR+0xd2>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
    2fdc:	1c20      	adds	r0, r4, #0
    2fde:	4641      	mov	r1, r8
    2fe0:	4b33      	ldr	r3, [pc, #204]	; (30b0 <xQueueGenericSendFromISR+0x18c>)
    2fe2:	447b      	add	r3, pc
    2fe4:	4798      	blx	r3
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
    2fe6:	2701      	movs	r7, #1
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
    2fe8:	2801      	cmp	r0, #1
    2fea:	d146      	bne.n	307a <xQueueGenericSendFromISR+0x156>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    2fec:	2e00      	cmp	r6, #0
    2fee:	d031      	beq.n	3054 <xQueueGenericSendFromISR+0x130>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    2ff0:	2301      	movs	r3, #1
    2ff2:	6033      	str	r3, [r6, #0]
    2ff4:	e041      	b.n	307a <xQueueGenericSendFromISR+0x156>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
    2ff6:	2701      	movs	r7, #1
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2ff8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2ffa:	2b00      	cmp	r3, #0
    2ffc:	d03d      	beq.n	307a <xQueueGenericSendFromISR+0x156>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2ffe:	1c20      	adds	r0, r4, #0
    3000:	3024      	adds	r0, #36	; 0x24
    3002:	4b2c      	ldr	r3, [pc, #176]	; (30b4 <xQueueGenericSendFromISR+0x190>)
    3004:	58eb      	ldr	r3, [r5, r3]
    3006:	4798      	blx	r3
    3008:	2800      	cmp	r0, #0
    300a:	d036      	beq.n	307a <xQueueGenericSendFromISR+0x156>
							{
								/* The task waiting has a higher priority so record that a
								context	switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
    300c:	2e00      	cmp	r6, #0
    300e:	d023      	beq.n	3058 <xQueueGenericSendFromISR+0x134>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
    3010:	2301      	movs	r3, #1
    3012:	6033      	str	r3, [r6, #0]
    3014:	e031      	b.n	307a <xQueueGenericSendFromISR+0x156>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    3016:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    3018:	3301      	adds	r3, #1
    301a:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
    301c:	2701      	movs	r7, #1
    301e:	e02c      	b.n	307a <xQueueGenericSendFromISR+0x156>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
    3020:	1c20      	adds	r0, r4, #0
    3022:	4b1d      	ldr	r3, [pc, #116]	; (3098 <xQueueGenericSendFromISR+0x174>)
    3024:	58eb      	ldr	r3, [r5, r3]
    3026:	9300      	str	r3, [sp, #0]
    3028:	4798      	blx	r3
    302a:	4b1c      	ldr	r3, [pc, #112]	; (309c <xQueueGenericSendFromISR+0x178>)
    302c:	58ee      	ldr	r6, [r5, r3]
    302e:	5c33      	ldrb	r3, [r6, r0]
    3030:	3358      	adds	r3, #88	; 0x58
    3032:	b2df      	uxtb	r7, r3
    3034:	1c20      	adds	r0, r4, #0
    3036:	9a00      	ldr	r2, [sp, #0]
    3038:	4790      	blx	r2
    303a:	5c36      	ldrb	r6, [r6, r0]
    303c:	1c20      	adds	r0, r4, #0
    303e:	4b18      	ldr	r3, [pc, #96]	; (30a0 <xQueueGenericSendFromISR+0x17c>)
    3040:	58eb      	ldr	r3, [r5, r3]
    3042:	4798      	blx	r3
    3044:	1c02      	adds	r2, r0, #0
    3046:	1c38      	adds	r0, r7, #0
    3048:	1c31      	adds	r1, r6, #0
    304a:	4b16      	ldr	r3, [pc, #88]	; (30a4 <xQueueGenericSendFromISR+0x180>)
    304c:	58eb      	ldr	r3, [r5, r3]
    304e:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
    3050:	2700      	movs	r7, #0
    3052:	e012      	b.n	307a <xQueueGenericSendFromISR+0x156>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
    3054:	2701      	movs	r7, #1
    3056:	e010      	b.n	307a <xQueueGenericSendFromISR+0x156>
    3058:	2701      	movs	r7, #1
    305a:	e00e      	b.n	307a <xQueueGenericSendFromISR+0x156>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    305c:	4b16      	ldr	r3, [pc, #88]	; (30b8 <xQueueGenericSendFromISR+0x194>)
    305e:	58eb      	ldr	r3, [r5, r3]
    3060:	4798      	blx	r3
    3062:	4681      	mov	r9, r0
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    3064:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3066:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    3068:	4293      	cmp	r3, r2
    306a:	d2d9      	bcs.n	3020 <xQueueGenericSendFromISR+0xfc>
    306c:	e77c      	b.n	2f68 <xQueueGenericSendFromISR+0x44>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    306e:	4b12      	ldr	r3, [pc, #72]	; (30b8 <xQueueGenericSendFromISR+0x194>)
    3070:	58eb      	ldr	r3, [r5, r3]
    3072:	4798      	blx	r3
    3074:	4681      	mov	r9, r0
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    3076:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3078:	e776      	b.n	2f68 <xQueueGenericSendFromISR+0x44>
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    307a:	4648      	mov	r0, r9
    307c:	4b0f      	ldr	r3, [pc, #60]	; (30bc <xQueueGenericSendFromISR+0x198>)
    307e:	58eb      	ldr	r3, [r5, r3]
    3080:	4798      	blx	r3

	return xReturn;
}
    3082:	1c38      	adds	r0, r7, #0
    3084:	b005      	add	sp, #20
    3086:	bc3c      	pop	{r2, r3, r4, r5}
    3088:	4690      	mov	r8, r2
    308a:	4699      	mov	r9, r3
    308c:	46a2      	mov	sl, r4
    308e:	46ab      	mov	fp, r5
    3090:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3092:	46c0      	nop			; (mov r8, r8)
    3094:	00003afc 	.word	0x00003afc
    3098:	0000017c 	.word	0x0000017c
    309c:	00000274 	.word	0x00000274
    30a0:	00000064 	.word	0x00000064
    30a4:	00000224 	.word	0x00000224
    30a8:	00000270 	.word	0x00000270
    30ac:	fffff869 	.word	0xfffff869
    30b0:	fffff8e3 	.word	0xfffff8e3
    30b4:	00000100 	.word	0x00000100
    30b8:	00000244 	.word	0x00000244
    30bc:	00000120 	.word	0x00000120

000030c0 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    30c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    30c2:	465f      	mov	r7, fp
    30c4:	4656      	mov	r6, sl
    30c6:	464d      	mov	r5, r9
    30c8:	4644      	mov	r4, r8
    30ca:	b4f0      	push	{r4, r5, r6, r7}
    30cc:	b089      	sub	sp, #36	; 0x24
    30ce:	1c05      	adds	r5, r0, #0
    30d0:	1c0f      	adds	r7, r1, #0
    30d2:	9205      	str	r2, [sp, #20]
    30d4:	9303      	str	r3, [sp, #12]
    30d6:	4cba      	ldr	r4, [pc, #744]	; (33c0 <xQueueGenericReceive+0x300>)
    30d8:	447c      	add	r4, pc
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
    30da:	2800      	cmp	r0, #0
    30dc:	d101      	bne.n	30e2 <xQueueGenericReceive+0x22>
    30de:	b672      	cpsid	i
    30e0:	e7fe      	b.n	30e0 <xQueueGenericReceive+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    30e2:	2900      	cmp	r1, #0
    30e4:	d104      	bne.n	30f0 <xQueueGenericReceive+0x30>
    30e6:	6c02      	ldr	r2, [r0, #64]	; 0x40
    30e8:	2a00      	cmp	r2, #0
    30ea:	d001      	beq.n	30f0 <xQueueGenericReceive+0x30>
    30ec:	b672      	cpsid	i
    30ee:	e7fe      	b.n	30ee <xQueueGenericReceive+0x2e>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    30f0:	4bb4      	ldr	r3, [pc, #720]	; (33c4 <xQueueGenericReceive+0x304>)
    30f2:	58e3      	ldr	r3, [r4, r3]
    30f4:	4798      	blx	r3
    30f6:	2800      	cmp	r0, #0
    30f8:	d102      	bne.n	3100 <xQueueGenericReceive+0x40>
    30fa:	9b05      	ldr	r3, [sp, #20]
    30fc:	2b00      	cmp	r3, #0
    30fe:	d107      	bne.n	3110 <xQueueGenericReceive+0x50>
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    3100:	2200      	movs	r2, #0
    3102:	4691      	mov	r9, r2
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    3104:	4bb0      	ldr	r3, [pc, #704]	; (33c8 <xQueueGenericReceive+0x308>)
    3106:	58e3      	ldr	r3, [r4, r3]
    3108:	9304      	str	r3, [sp, #16]
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    310a:	ab06      	add	r3, sp, #24
    310c:	4698      	mov	r8, r3
    310e:	e001      	b.n	3114 <xQueueGenericReceive+0x54>

	configASSERT( pxQueue );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    3110:	b672      	cpsid	i
    3112:	e7fe      	b.n	3112 <xQueueGenericReceive+0x52>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    3114:	9a04      	ldr	r2, [sp, #16]
    3116:	4790      	blx	r2
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    3118:	6bab      	ldr	r3, [r5, #56]	; 0x38
    311a:	2b00      	cmp	r3, #0
    311c:	d100      	bne.n	3120 <xQueueGenericReceive+0x60>
    311e:	e086      	b.n	322e <xQueueGenericReceive+0x16e>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    3120:	68eb      	ldr	r3, [r5, #12]
    3122:	4698      	mov	r8, r3

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    3124:	1c28      	adds	r0, r5, #0
    3126:	1c39      	adds	r1, r7, #0
    3128:	4ba8      	ldr	r3, [pc, #672]	; (33cc <xQueueGenericReceive+0x30c>)
    312a:	447b      	add	r3, pc
    312c:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
    312e:	9a03      	ldr	r2, [sp, #12]
    3130:	2a00      	cmp	r2, #0
    3132:	d150      	bne.n	31d6 <xQueueGenericReceive+0x116>
				{
					traceQUEUE_RECEIVE( pxQueue );
    3134:	1c28      	adds	r0, r5, #0
    3136:	4ba6      	ldr	r3, [pc, #664]	; (33d0 <xQueueGenericReceive+0x310>)
    3138:	58e6      	ldr	r6, [r4, r3]
    313a:	47b0      	blx	r6
    313c:	4ba5      	ldr	r3, [pc, #660]	; (33d4 <xQueueGenericReceive+0x314>)
    313e:	58e3      	ldr	r3, [r4, r3]
    3140:	9301      	str	r3, [sp, #4]
    3142:	5c1b      	ldrb	r3, [r3, r0]
    3144:	3328      	adds	r3, #40	; 0x28
    3146:	b2db      	uxtb	r3, r3
    3148:	4699      	mov	r9, r3
    314a:	1c28      	adds	r0, r5, #0
    314c:	47b0      	blx	r6
    314e:	9b01      	ldr	r3, [sp, #4]
    3150:	5c1f      	ldrb	r7, [r3, r0]
    3152:	1c28      	adds	r0, r5, #0
    3154:	4ba0      	ldr	r3, [pc, #640]	; (33d8 <xQueueGenericReceive+0x318>)
    3156:	58e3      	ldr	r3, [r4, r3]
    3158:	9303      	str	r3, [sp, #12]
    315a:	4798      	blx	r3
    315c:	1c02      	adds	r2, r0, #0
    315e:	4648      	mov	r0, r9
    3160:	1c39      	adds	r1, r7, #0
    3162:	4b9e      	ldr	r3, [pc, #632]	; (33dc <xQueueGenericReceive+0x31c>)
    3164:	58e3      	ldr	r3, [r4, r3]
    3166:	4798      	blx	r3
    3168:	1c28      	adds	r0, r5, #0
    316a:	47b0      	blx	r6
    316c:	9a01      	ldr	r2, [sp, #4]
    316e:	5c10      	ldrb	r0, [r2, r0]
    3170:	4680      	mov	r8, r0
    3172:	1c28      	adds	r0, r5, #0
    3174:	9b03      	ldr	r3, [sp, #12]
    3176:	4798      	blx	r3
    3178:	1c07      	adds	r7, r0, #0
    317a:	1c28      	adds	r0, r5, #0
    317c:	47b0      	blx	r6
    317e:	9a01      	ldr	r2, [sp, #4]
    3180:	5c13      	ldrb	r3, [r2, r0]
    3182:	2b02      	cmp	r3, #2
    3184:	d107      	bne.n	3196 <xQueueGenericReceive+0xd6>
    3186:	4b96      	ldr	r3, [pc, #600]	; (33e0 <xQueueGenericReceive+0x320>)
    3188:	58e3      	ldr	r3, [r4, r3]
    318a:	4798      	blx	r3
    318c:	4b95      	ldr	r3, [pc, #596]	; (33e4 <xQueueGenericReceive+0x324>)
    318e:	58e3      	ldr	r3, [r4, r3]
    3190:	4798      	blx	r3
    3192:	1c02      	adds	r2, r0, #0
    3194:	e002      	b.n	319c <xQueueGenericReceive+0xdc>
    3196:	6baa      	ldr	r2, [r5, #56]	; 0x38
    3198:	3a01      	subs	r2, #1
    319a:	b2d2      	uxtb	r2, r2
    319c:	4640      	mov	r0, r8
    319e:	1c39      	adds	r1, r7, #0
    31a0:	4b91      	ldr	r3, [pc, #580]	; (33e8 <xQueueGenericReceive+0x328>)
    31a2:	58e3      	ldr	r3, [r4, r3]
    31a4:	4798      	blx	r3

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
    31a6:	6bab      	ldr	r3, [r5, #56]	; 0x38
    31a8:	3b01      	subs	r3, #1
    31aa:	63ab      	str	r3, [r5, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    31ac:	682b      	ldr	r3, [r5, #0]
    31ae:	2b00      	cmp	r3, #0
    31b0:	d103      	bne.n	31ba <xQueueGenericReceive+0xfa>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) xTaskGetCurrentTaskHandle(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    31b2:	4b8e      	ldr	r3, [pc, #568]	; (33ec <xQueueGenericReceive+0x32c>)
    31b4:	58e3      	ldr	r3, [r4, r3]
    31b6:	4798      	blx	r3
    31b8:	6068      	str	r0, [r5, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    31ba:	692a      	ldr	r2, [r5, #16]
    31bc:	2a00      	cmp	r2, #0
    31be:	d031      	beq.n	3224 <xQueueGenericReceive+0x164>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    31c0:	1c28      	adds	r0, r5, #0
    31c2:	3010      	adds	r0, #16
    31c4:	4b8a      	ldr	r3, [pc, #552]	; (33f0 <xQueueGenericReceive+0x330>)
    31c6:	58e3      	ldr	r3, [r4, r3]
    31c8:	4798      	blx	r3
    31ca:	2801      	cmp	r0, #1
    31cc:	d12a      	bne.n	3224 <xQueueGenericReceive+0x164>
						{
							queueYIELD_IF_USING_PREEMPTION();
    31ce:	4b89      	ldr	r3, [pc, #548]	; (33f4 <xQueueGenericReceive+0x334>)
    31d0:	58e3      	ldr	r3, [r4, r3]
    31d2:	4798      	blx	r3
    31d4:	e026      	b.n	3224 <xQueueGenericReceive+0x164>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				else
				{
					traceQUEUE_PEEK( pxQueue );
    31d6:	1c28      	adds	r0, r5, #0
    31d8:	4b7d      	ldr	r3, [pc, #500]	; (33d0 <xQueueGenericReceive+0x310>)
    31da:	58e3      	ldr	r3, [r4, r3]
    31dc:	9301      	str	r3, [sp, #4]
    31de:	4798      	blx	r3
    31e0:	4b7c      	ldr	r3, [pc, #496]	; (33d4 <xQueueGenericReceive+0x314>)
    31e2:	58e6      	ldr	r6, [r4, r3]
    31e4:	5c33      	ldrb	r3, [r6, r0]
    31e6:	3378      	adds	r3, #120	; 0x78
    31e8:	b2df      	uxtb	r7, r3
    31ea:	1c28      	adds	r0, r5, #0
    31ec:	9b01      	ldr	r3, [sp, #4]
    31ee:	4798      	blx	r3
    31f0:	5c36      	ldrb	r6, [r6, r0]
    31f2:	1c28      	adds	r0, r5, #0
    31f4:	4b78      	ldr	r3, [pc, #480]	; (33d8 <xQueueGenericReceive+0x318>)
    31f6:	58e3      	ldr	r3, [r4, r3]
    31f8:	4798      	blx	r3
    31fa:	1c02      	adds	r2, r0, #0
    31fc:	1c38      	adds	r0, r7, #0
    31fe:	1c31      	adds	r1, r6, #0
    3200:	4b76      	ldr	r3, [pc, #472]	; (33dc <xQueueGenericReceive+0x31c>)
    3202:	58e3      	ldr	r3, [r4, r3]
    3204:	4798      	blx	r3

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    3206:	4642      	mov	r2, r8
    3208:	60ea      	str	r2, [r5, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    320a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    320c:	2b00      	cmp	r3, #0
    320e:	d009      	beq.n	3224 <xQueueGenericReceive+0x164>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3210:	1c28      	adds	r0, r5, #0
    3212:	3024      	adds	r0, #36	; 0x24
    3214:	4b76      	ldr	r3, [pc, #472]	; (33f0 <xQueueGenericReceive+0x330>)
    3216:	58e3      	ldr	r3, [r4, r3]
    3218:	4798      	blx	r3
    321a:	2800      	cmp	r0, #0
    321c:	d002      	beq.n	3224 <xQueueGenericReceive+0x164>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    321e:	4b75      	ldr	r3, [pc, #468]	; (33f4 <xQueueGenericReceive+0x334>)
    3220:	58e3      	ldr	r3, [r4, r3]
    3222:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    3224:	4b74      	ldr	r3, [pc, #464]	; (33f8 <xQueueGenericReceive+0x338>)
    3226:	58e3      	ldr	r3, [r4, r3]
    3228:	4798      	blx	r3
				return pdPASS;
    322a:	2001      	movs	r0, #1
    322c:	e0c0      	b.n	33b0 <xQueueGenericReceive+0x2f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    322e:	9a05      	ldr	r2, [sp, #20]
    3230:	2a00      	cmp	r2, #0
    3232:	d11c      	bne.n	326e <xQueueGenericReceive+0x1ae>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    3234:	4b70      	ldr	r3, [pc, #448]	; (33f8 <xQueueGenericReceive+0x338>)
    3236:	58e3      	ldr	r3, [r4, r3]
    3238:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
    323a:	1c28      	adds	r0, r5, #0
    323c:	4b64      	ldr	r3, [pc, #400]	; (33d0 <xQueueGenericReceive+0x310>)
    323e:	58e3      	ldr	r3, [r4, r3]
    3240:	9301      	str	r3, [sp, #4]
    3242:	4798      	blx	r3
    3244:	4b63      	ldr	r3, [pc, #396]	; (33d4 <xQueueGenericReceive+0x314>)
    3246:	58e6      	ldr	r6, [r4, r3]
    3248:	5c33      	ldrb	r3, [r6, r0]
    324a:	3350      	adds	r3, #80	; 0x50
    324c:	b2df      	uxtb	r7, r3
    324e:	1c28      	adds	r0, r5, #0
    3250:	9b01      	ldr	r3, [sp, #4]
    3252:	4798      	blx	r3
    3254:	5c36      	ldrb	r6, [r6, r0]
    3256:	1c28      	adds	r0, r5, #0
    3258:	4b5f      	ldr	r3, [pc, #380]	; (33d8 <xQueueGenericReceive+0x318>)
    325a:	58e3      	ldr	r3, [r4, r3]
    325c:	4798      	blx	r3
    325e:	1c02      	adds	r2, r0, #0
    3260:	1c38      	adds	r0, r7, #0
    3262:	1c31      	adds	r1, r6, #0
    3264:	4b5d      	ldr	r3, [pc, #372]	; (33dc <xQueueGenericReceive+0x31c>)
    3266:	58e3      	ldr	r3, [r4, r3]
    3268:	4798      	blx	r3
					return errQUEUE_EMPTY;
    326a:	2000      	movs	r0, #0
    326c:	e0a0      	b.n	33b0 <xQueueGenericReceive+0x2f0>
				}
				else if( xEntryTimeSet == pdFALSE )
    326e:	464a      	mov	r2, r9
    3270:	2a00      	cmp	r2, #0
    3272:	d105      	bne.n	3280 <xQueueGenericReceive+0x1c0>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    3274:	4640      	mov	r0, r8
    3276:	4b61      	ldr	r3, [pc, #388]	; (33fc <xQueueGenericReceive+0x33c>)
    3278:	58e3      	ldr	r3, [r4, r3]
    327a:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    327c:	2301      	movs	r3, #1
    327e:	4699      	mov	r9, r3
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    3280:	4b5d      	ldr	r3, [pc, #372]	; (33f8 <xQueueGenericReceive+0x338>)
    3282:	58e3      	ldr	r3, [r4, r3]
    3284:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    3286:	4b5e      	ldr	r3, [pc, #376]	; (3400 <xQueueGenericReceive+0x340>)
    3288:	58e3      	ldr	r3, [r4, r3]
    328a:	4798      	blx	r3
		prvLockQueue( pxQueue );
    328c:	4b4e      	ldr	r3, [pc, #312]	; (33c8 <xQueueGenericReceive+0x308>)
    328e:	58e3      	ldr	r3, [r4, r3]
    3290:	4798      	blx	r3
    3292:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    3294:	3301      	adds	r3, #1
    3296:	d101      	bne.n	329c <xQueueGenericReceive+0x1dc>
    3298:	2300      	movs	r3, #0
    329a:	646b      	str	r3, [r5, #68]	; 0x44
    329c:	6cab      	ldr	r3, [r5, #72]	; 0x48
    329e:	3301      	adds	r3, #1
    32a0:	d101      	bne.n	32a6 <xQueueGenericReceive+0x1e6>
    32a2:	2300      	movs	r3, #0
    32a4:	64ab      	str	r3, [r5, #72]	; 0x48
    32a6:	4b54      	ldr	r3, [pc, #336]	; (33f8 <xQueueGenericReceive+0x338>)
    32a8:	58e3      	ldr	r3, [r4, r3]
    32aa:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    32ac:	4640      	mov	r0, r8
    32ae:	a905      	add	r1, sp, #20
    32b0:	4b54      	ldr	r3, [pc, #336]	; (3404 <xQueueGenericReceive+0x344>)
    32b2:	58e3      	ldr	r3, [r4, r3]
    32b4:	4798      	blx	r3
    32b6:	2800      	cmp	r0, #0
    32b8:	d15a      	bne.n	3370 <xQueueGenericReceive+0x2b0>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    32ba:	4b43      	ldr	r3, [pc, #268]	; (33c8 <xQueueGenericReceive+0x308>)
    32bc:	58e3      	ldr	r3, [r4, r3]
    32be:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    32c0:	6bae      	ldr	r6, [r5, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    32c2:	4b4d      	ldr	r3, [pc, #308]	; (33f8 <xQueueGenericReceive+0x338>)
    32c4:	58e3      	ldr	r3, [r4, r3]
    32c6:	4798      	blx	r3
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    32c8:	2e00      	cmp	r6, #0
    32ca:	d149      	bne.n	3360 <xQueueGenericReceive+0x2a0>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
    32cc:	1c28      	adds	r0, r5, #0
    32ce:	4b40      	ldr	r3, [pc, #256]	; (33d0 <xQueueGenericReceive+0x310>)
    32d0:	58e3      	ldr	r3, [r4, r3]
    32d2:	9301      	str	r3, [sp, #4]
    32d4:	4798      	blx	r3
    32d6:	4b3f      	ldr	r3, [pc, #252]	; (33d4 <xQueueGenericReceive+0x314>)
    32d8:	58e6      	ldr	r6, [r4, r3]
    32da:	5c33      	ldrb	r3, [r6, r0]
    32dc:	3368      	adds	r3, #104	; 0x68
    32de:	b2db      	uxtb	r3, r3
    32e0:	469b      	mov	fp, r3
    32e2:	1c28      	adds	r0, r5, #0
    32e4:	9a01      	ldr	r2, [sp, #4]
    32e6:	4790      	blx	r2
    32e8:	5c30      	ldrb	r0, [r6, r0]
    32ea:	4682      	mov	sl, r0
    32ec:	1c28      	adds	r0, r5, #0
    32ee:	4b3a      	ldr	r3, [pc, #232]	; (33d8 <xQueueGenericReceive+0x318>)
    32f0:	58e3      	ldr	r3, [r4, r3]
    32f2:	4798      	blx	r3
    32f4:	1c02      	adds	r2, r0, #0
    32f6:	4658      	mov	r0, fp
    32f8:	4651      	mov	r1, sl
    32fa:	4b38      	ldr	r3, [pc, #224]	; (33dc <xQueueGenericReceive+0x31c>)
    32fc:	58e3      	ldr	r3, [r4, r3]
    32fe:	4798      	blx	r3
    3300:	1c28      	adds	r0, r5, #0
    3302:	9b01      	ldr	r3, [sp, #4]
    3304:	4798      	blx	r3
    3306:	5c33      	ldrb	r3, [r6, r0]
    3308:	2b02      	cmp	r3, #2
    330a:	d008      	beq.n	331e <xQueueGenericReceive+0x25e>
    330c:	4b34      	ldr	r3, [pc, #208]	; (33e0 <xQueueGenericReceive+0x320>)
    330e:	58e3      	ldr	r3, [r4, r3]
    3310:	4798      	blx	r3
    3312:	4b34      	ldr	r3, [pc, #208]	; (33e4 <xQueueGenericReceive+0x324>)
    3314:	58e3      	ldr	r3, [r4, r3]
    3316:	4798      	blx	r3
    3318:	4b3b      	ldr	r3, [pc, #236]	; (3408 <xQueueGenericReceive+0x348>)
    331a:	58e3      	ldr	r3, [r4, r3]
    331c:	4798      	blx	r3

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    331e:	682a      	ldr	r2, [r5, #0]
    3320:	2a00      	cmp	r2, #0
    3322:	d109      	bne.n	3338 <xQueueGenericReceive+0x278>
					{
						taskENTER_CRITICAL();
    3324:	4b28      	ldr	r3, [pc, #160]	; (33c8 <xQueueGenericReceive+0x308>)
    3326:	58e3      	ldr	r3, [r4, r3]
    3328:	4798      	blx	r3
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    332a:	6868      	ldr	r0, [r5, #4]
    332c:	4b37      	ldr	r3, [pc, #220]	; (340c <xQueueGenericReceive+0x34c>)
    332e:	58e3      	ldr	r3, [r4, r3]
    3330:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
    3332:	4b31      	ldr	r3, [pc, #196]	; (33f8 <xQueueGenericReceive+0x338>)
    3334:	58e3      	ldr	r3, [r4, r3]
    3336:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    3338:	1c28      	adds	r0, r5, #0
    333a:	3024      	adds	r0, #36	; 0x24
    333c:	9905      	ldr	r1, [sp, #20]
    333e:	4b34      	ldr	r3, [pc, #208]	; (3410 <xQueueGenericReceive+0x350>)
    3340:	58e3      	ldr	r3, [r4, r3]
    3342:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    3344:	1c28      	adds	r0, r5, #0
    3346:	4b33      	ldr	r3, [pc, #204]	; (3414 <xQueueGenericReceive+0x354>)
    3348:	447b      	add	r3, pc
    334a:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    334c:	4b32      	ldr	r3, [pc, #200]	; (3418 <xQueueGenericReceive+0x358>)
    334e:	58e3      	ldr	r3, [r4, r3]
    3350:	4798      	blx	r3
    3352:	2800      	cmp	r0, #0
    3354:	d000      	beq.n	3358 <xQueueGenericReceive+0x298>
    3356:	e6dd      	b.n	3114 <xQueueGenericReceive+0x54>
				{
					portYIELD_WITHIN_API();
    3358:	4b26      	ldr	r3, [pc, #152]	; (33f4 <xQueueGenericReceive+0x334>)
    335a:	58e3      	ldr	r3, [r4, r3]
    335c:	4798      	blx	r3
    335e:	e6d9      	b.n	3114 <xQueueGenericReceive+0x54>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    3360:	1c28      	adds	r0, r5, #0
    3362:	4b2e      	ldr	r3, [pc, #184]	; (341c <xQueueGenericReceive+0x35c>)
    3364:	447b      	add	r3, pc
    3366:	4798      	blx	r3
				( void ) xTaskResumeAll();
    3368:	4b2b      	ldr	r3, [pc, #172]	; (3418 <xQueueGenericReceive+0x358>)
    336a:	58e3      	ldr	r3, [r4, r3]
    336c:	4798      	blx	r3
    336e:	e6d1      	b.n	3114 <xQueueGenericReceive+0x54>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    3370:	1c28      	adds	r0, r5, #0
    3372:	4b2b      	ldr	r3, [pc, #172]	; (3420 <xQueueGenericReceive+0x360>)
    3374:	447b      	add	r3, pc
    3376:	4798      	blx	r3
			( void ) xTaskResumeAll();
    3378:	4b27      	ldr	r3, [pc, #156]	; (3418 <xQueueGenericReceive+0x358>)
    337a:	58e3      	ldr	r3, [r4, r3]
    337c:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
    337e:	1c28      	adds	r0, r5, #0
    3380:	4b13      	ldr	r3, [pc, #76]	; (33d0 <xQueueGenericReceive+0x310>)
    3382:	58e3      	ldr	r3, [r4, r3]
    3384:	9301      	str	r3, [sp, #4]
    3386:	4798      	blx	r3
    3388:	4b12      	ldr	r3, [pc, #72]	; (33d4 <xQueueGenericReceive+0x314>)
    338a:	58e6      	ldr	r6, [r4, r3]
    338c:	5c33      	ldrb	r3, [r6, r0]
    338e:	3350      	adds	r3, #80	; 0x50
    3390:	b2df      	uxtb	r7, r3
    3392:	1c28      	adds	r0, r5, #0
    3394:	9b01      	ldr	r3, [sp, #4]
    3396:	4798      	blx	r3
    3398:	5c36      	ldrb	r6, [r6, r0]
    339a:	1c28      	adds	r0, r5, #0
    339c:	4b0e      	ldr	r3, [pc, #56]	; (33d8 <xQueueGenericReceive+0x318>)
    339e:	58e3      	ldr	r3, [r4, r3]
    33a0:	4798      	blx	r3
    33a2:	1c02      	adds	r2, r0, #0
    33a4:	1c38      	adds	r0, r7, #0
    33a6:	1c31      	adds	r1, r6, #0
    33a8:	4b0c      	ldr	r3, [pc, #48]	; (33dc <xQueueGenericReceive+0x31c>)
    33aa:	58e3      	ldr	r3, [r4, r3]
    33ac:	4798      	blx	r3
			return errQUEUE_EMPTY;
    33ae:	2000      	movs	r0, #0
		}
	}
}
    33b0:	b009      	add	sp, #36	; 0x24
    33b2:	bc3c      	pop	{r2, r3, r4, r5}
    33b4:	4690      	mov	r8, r2
    33b6:	4699      	mov	r9, r3
    33b8:	46a2      	mov	sl, r4
    33ba:	46ab      	mov	fp, r5
    33bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    33be:	46c0      	nop			; (mov r8, r8)
    33c0:	00003960 	.word	0x00003960
    33c4:	0000024c 	.word	0x0000024c
    33c8:	00000280 	.word	0x00000280
    33cc:	fffff883 	.word	0xfffff883
    33d0:	0000017c 	.word	0x0000017c
    33d4:	00000274 	.word	0x00000274
    33d8:	00000064 	.word	0x00000064
    33dc:	00000224 	.word	0x00000224
    33e0:	00000004 	.word	0x00000004
    33e4:	00000078 	.word	0x00000078
    33e8:	00000270 	.word	0x00000270
    33ec:	000001b0 	.word	0x000001b0
    33f0:	00000100 	.word	0x00000100
    33f4:	00000174 	.word	0x00000174
    33f8:	00000010 	.word	0x00000010
    33fc:	0000027c 	.word	0x0000027c
    3400:	00000124 	.word	0x00000124
    3404:	0000011c 	.word	0x0000011c
    3408:	00000200 	.word	0x00000200
    340c:	00000144 	.word	0x00000144
    3410:	00000060 	.word	0x00000060
    3414:	fffff69d 	.word	0xfffff69d
    3418:	000001d4 	.word	0x000001d4
    341c:	fffff681 	.word	0xfffff681
    3420:	fffff671 	.word	0xfffff671

00003424 <uxQueueGetQueueNumber>:

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
    3424:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
	}
    3426:	4770      	bx	lr

00003428 <ucQueueGetQueueType>:

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
		return ( ( Queue_t * ) xQueue )->ucQueueType;
    3428:	2350      	movs	r3, #80	; 0x50
    342a:	5cc0      	ldrb	r0, [r0, r3]
	}
    342c:	4770      	bx	lr
    342e:	46c0      	nop			; (mov r8, r8)

00003430 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
    3430:	b570      	push	{r4, r5, r6, lr}
    3432:	b082      	sub	sp, #8
    3434:	1c04      	adds	r4, r0, #0
    3436:	1c0e      	adds	r6, r1, #0
    3438:	4d10      	ldr	r5, [pc, #64]	; (347c <vQueueWaitForMessageRestricted+0x4c>)
    343a:	447d      	add	r5, pc
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    343c:	4b10      	ldr	r3, [pc, #64]	; (3480 <vQueueWaitForMessageRestricted+0x50>)
    343e:	58eb      	ldr	r3, [r5, r3]
    3440:	4798      	blx	r3
    3442:	6c63      	ldr	r3, [r4, #68]	; 0x44
    3444:	3301      	adds	r3, #1
    3446:	d101      	bne.n	344c <vQueueWaitForMessageRestricted+0x1c>
    3448:	2300      	movs	r3, #0
    344a:	6463      	str	r3, [r4, #68]	; 0x44
    344c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    344e:	3301      	adds	r3, #1
    3450:	d101      	bne.n	3456 <vQueueWaitForMessageRestricted+0x26>
    3452:	2300      	movs	r3, #0
    3454:	64a3      	str	r3, [r4, #72]	; 0x48
    3456:	4b0b      	ldr	r3, [pc, #44]	; (3484 <vQueueWaitForMessageRestricted+0x54>)
    3458:	58eb      	ldr	r3, [r5, r3]
    345a:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    345c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    345e:	2b00      	cmp	r3, #0
    3460:	d105      	bne.n	346e <vQueueWaitForMessageRestricted+0x3e>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    3462:	1c20      	adds	r0, r4, #0
    3464:	3024      	adds	r0, #36	; 0x24
    3466:	1c31      	adds	r1, r6, #0
    3468:	4b07      	ldr	r3, [pc, #28]	; (3488 <vQueueWaitForMessageRestricted+0x58>)
    346a:	58eb      	ldr	r3, [r5, r3]
    346c:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    346e:	1c20      	adds	r0, r4, #0
    3470:	4b06      	ldr	r3, [pc, #24]	; (348c <vQueueWaitForMessageRestricted+0x5c>)
    3472:	447b      	add	r3, pc
    3474:	4798      	blx	r3
	}
    3476:	b002      	add	sp, #8
    3478:	bd70      	pop	{r4, r5, r6, pc}
    347a:	46c0      	nop			; (mov r8, r8)
    347c:	000035fe 	.word	0x000035fe
    3480:	00000280 	.word	0x00000280
    3484:	00000010 	.word	0x00000010
    3488:	00000154 	.word	0x00000154
    348c:	fffff573 	.word	0xfffff573

00003490 <prvTaskIsTaskSuspended>:

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
    3490:	2800      	cmp	r0, #0
    3492:	d101      	bne.n	3498 <prvTaskIsTaskSuspended+0x8>
    3494:	b672      	cpsid	i
    3496:	e7fe      	b.n	3496 <prvTaskIsTaskSuspended+0x6>

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
	BaseType_t xReturn = pdFALSE;
    3498:	2300      	movs	r3, #0

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    349a:	4a08      	ldr	r2, [pc, #32]	; (34bc <prvTaskIsTaskSuspended+0x2c>)
    349c:	447a      	add	r2, pc
    349e:	6941      	ldr	r1, [r0, #20]
    34a0:	4291      	cmp	r1, r2
    34a2:	d109      	bne.n	34b8 <prvTaskIsTaskSuspended+0x28>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
    34a4:	6a83      	ldr	r3, [r0, #40]	; 0x28
    34a6:	4a06      	ldr	r2, [pc, #24]	; (34c0 <prvTaskIsTaskSuspended+0x30>)
    34a8:	447a      	add	r2, pc
    34aa:	3214      	adds	r2, #20
    34ac:	4293      	cmp	r3, r2
    34ae:	d002      	beq.n	34b6 <prvTaskIsTaskSuspended+0x26>

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
	BaseType_t xReturn = pdFALSE;
    34b0:	425a      	negs	r2, r3
    34b2:	4153      	adcs	r3, r2
    34b4:	e000      	b.n	34b8 <prvTaskIsTaskSuspended+0x28>
    34b6:	2300      	movs	r3, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
    34b8:	1c18      	adds	r0, r3, #0
    34ba:	4770      	bx	lr
    34bc:	1fffdc84 	.word	0x1fffdc84
    34c0:	1fffdc78 	.word	0x1fffdc78

000034c4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    34c4:	4b0a      	ldr	r3, [pc, #40]	; (34f0 <prvResetNextTaskUnblockTime+0x2c>)
    34c6:	447b      	add	r3, pc
    34c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    34ca:	681b      	ldr	r3, [r3, #0]
    34cc:	2b00      	cmp	r3, #0
    34ce:	d105      	bne.n	34dc <prvResetNextTaskUnblockTime+0x18>
		/* The new current delayed list is empty.  Set
		xNextTaskUnblockTime to the maximum possible value so it is
		extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    34d0:	2201      	movs	r2, #1
    34d2:	4252      	negs	r2, r2
    34d4:	4b07      	ldr	r3, [pc, #28]	; (34f4 <prvResetNextTaskUnblockTime+0x30>)
    34d6:	447b      	add	r3, pc
    34d8:	601a      	str	r2, [r3, #0]
    34da:	e008      	b.n	34ee <prvResetNextTaskUnblockTime+0x2a>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    34dc:	4b06      	ldr	r3, [pc, #24]	; (34f8 <prvResetNextTaskUnblockTime+0x34>)
    34de:	447b      	add	r3, pc
    34e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    34e2:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
    34e4:	68db      	ldr	r3, [r3, #12]
    34e6:	685a      	ldr	r2, [r3, #4]
    34e8:	4b04      	ldr	r3, [pc, #16]	; (34fc <prvResetNextTaskUnblockTime+0x38>)
    34ea:	447b      	add	r3, pc
    34ec:	601a      	str	r2, [r3, #0]
	}
}
    34ee:	4770      	bx	lr
    34f0:	1fffdc5a 	.word	0x1fffdc5a
    34f4:	1fffcb36 	.word	0x1fffcb36
    34f8:	1fffdc42 	.word	0x1fffdc42
    34fc:	1fffcb22 	.word	0x1fffcb22

00003500 <prvAddCurrentTaskToDelayedList>:
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
    3500:	b510      	push	{r4, lr}
    3502:	b082      	sub	sp, #8
    3504:	1c04      	adds	r4, r0, #0
    3506:	4b16      	ldr	r3, [pc, #88]	; (3560 <prvAddCurrentTaskToDelayedList+0x60>)
    3508:	447b      	add	r3, pc
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    350a:	4a16      	ldr	r2, [pc, #88]	; (3564 <prvAddCurrentTaskToDelayedList+0x64>)
    350c:	589a      	ldr	r2, [r3, r2]
    350e:	6812      	ldr	r2, [r2, #0]
    3510:	6050      	str	r0, [r2, #4]

	if( xTimeToWake < xTickCount )
    3512:	4a15      	ldr	r2, [pc, #84]	; (3568 <prvAddCurrentTaskToDelayedList+0x68>)
    3514:	447a      	add	r2, pc
    3516:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    3518:	4290      	cmp	r0, r2
    351a:	d20b      	bcs.n	3534 <prvAddCurrentTaskToDelayedList+0x34>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    351c:	4a13      	ldr	r2, [pc, #76]	; (356c <prvAddCurrentTaskToDelayedList+0x6c>)
    351e:	447a      	add	r2, pc
    3520:	6b10      	ldr	r0, [r2, #48]	; 0x30
    3522:	4a10      	ldr	r2, [pc, #64]	; (3564 <prvAddCurrentTaskToDelayedList+0x64>)
    3524:	589a      	ldr	r2, [r3, r2]
    3526:	6811      	ldr	r1, [r2, #0]
    3528:	3104      	adds	r1, #4
    352a:	4a11      	ldr	r2, [pc, #68]	; (3570 <prvAddCurrentTaskToDelayedList+0x70>)
    352c:	589a      	ldr	r2, [r3, r2]
    352e:	9201      	str	r2, [sp, #4]
    3530:	4790      	blx	r2
    3532:	e012      	b.n	355a <prvAddCurrentTaskToDelayedList+0x5a>
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    3534:	4a0f      	ldr	r2, [pc, #60]	; (3574 <prvAddCurrentTaskToDelayedList+0x74>)
    3536:	447a      	add	r2, pc
    3538:	6a90      	ldr	r0, [r2, #40]	; 0x28
    353a:	4a0a      	ldr	r2, [pc, #40]	; (3564 <prvAddCurrentTaskToDelayedList+0x64>)
    353c:	589a      	ldr	r2, [r3, r2]
    353e:	6811      	ldr	r1, [r2, #0]
    3540:	3104      	adds	r1, #4
    3542:	4a0b      	ldr	r2, [pc, #44]	; (3570 <prvAddCurrentTaskToDelayedList+0x70>)
    3544:	589a      	ldr	r2, [r3, r2]
    3546:	9201      	str	r2, [sp, #4]
    3548:	4790      	blx	r2

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    354a:	4b0b      	ldr	r3, [pc, #44]	; (3578 <prvAddCurrentTaskToDelayedList+0x78>)
    354c:	447b      	add	r3, pc
    354e:	681b      	ldr	r3, [r3, #0]
    3550:	429c      	cmp	r4, r3
    3552:	d202      	bcs.n	355a <prvAddCurrentTaskToDelayedList+0x5a>
		{
			xNextTaskUnblockTime = xTimeToWake;
    3554:	4b09      	ldr	r3, [pc, #36]	; (357c <prvAddCurrentTaskToDelayedList+0x7c>)
    3556:	447b      	add	r3, pc
    3558:	601c      	str	r4, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
    355a:	b002      	add	sp, #8
    355c:	bd10      	pop	{r4, pc}
    355e:	46c0      	nop			; (mov r8, r8)
    3560:	00003530 	.word	0x00003530
    3564:	00000048 	.word	0x00000048
    3568:	1fffdc0c 	.word	0x1fffdc0c
    356c:	1fffdc02 	.word	0x1fffdc02
    3570:	00000194 	.word	0x00000194
    3574:	1fffdbea 	.word	0x1fffdbea
    3578:	1fffcac0 	.word	0x1fffcac0
    357c:	1fffcab6 	.word	0x1fffcab6

00003580 <xTaskGenericCreate>:
static void prvResetNextTaskUnblockTime( void );

/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    3580:	b5f0      	push	{r4, r5, r6, r7, lr}
    3582:	465f      	mov	r7, fp
    3584:	4656      	mov	r6, sl
    3586:	464d      	mov	r5, r9
    3588:	4644      	mov	r4, r8
    358a:	b4f0      	push	{r4, r5, r6, r7}
    358c:	b085      	sub	sp, #20
    358e:	4681      	mov	r9, r0
    3590:	1c0f      	adds	r7, r1, #0
    3592:	1c16      	adds	r6, r2, #0
    3594:	469a      	mov	sl, r3
    3596:	4d8e      	ldr	r5, [pc, #568]	; (37d0 <xTaskGenericCreate+0x250>)
    3598:	447d      	add	r5, pc
BaseType_t xReturn;
TCB_t * pxNewTCB;

	configASSERT( pxTaskCode );
    359a:	2800      	cmp	r0, #0
    359c:	d101      	bne.n	35a2 <xTaskGenericCreate+0x22>
    359e:	b672      	cpsid	i
    35a0:	e7fe      	b.n	35a0 <xTaskGenericCreate+0x20>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
    35a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    35a4:	2a04      	cmp	r2, #4
    35a6:	d901      	bls.n	35ac <xTaskGenericCreate+0x2c>
    35a8:	b672      	cpsid	i
    35aa:	e7fe      	b.n	35aa <xTaskGenericCreate+0x2a>
{
TCB_t *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
    35ac:	2048      	movs	r0, #72	; 0x48
    35ae:	4b89      	ldr	r3, [pc, #548]	; (37d4 <xTaskGenericCreate+0x254>)
    35b0:	58eb      	ldr	r3, [r5, r3]
    35b2:	4798      	blx	r3
    35b4:	1e04      	subs	r4, r0, #0

	if( pxNewTCB != NULL )
    35b6:	d100      	bne.n	35ba <xTaskGenericCreate+0x3a>
    35b8:	e0c8      	b.n	374c <xTaskGenericCreate+0x1cc>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    35ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
    35bc:	2b00      	cmp	r3, #0
    35be:	d000      	beq.n	35c2 <xTaskGenericCreate+0x42>
    35c0:	e0c0      	b.n	3744 <xTaskGenericCreate+0x1c4>
    35c2:	00b0      	lsls	r0, r6, #2
    35c4:	4b83      	ldr	r3, [pc, #524]	; (37d4 <xTaskGenericCreate+0x254>)
    35c6:	58eb      	ldr	r3, [r5, r3]
    35c8:	4798      	blx	r3
    35ca:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
    35cc:	2800      	cmp	r0, #0
    35ce:	d104      	bne.n	35da <xTaskGenericCreate+0x5a>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    35d0:	1c20      	adds	r0, r4, #0
    35d2:	4b81      	ldr	r3, [pc, #516]	; (37d8 <xTaskGenericCreate+0x258>)
    35d4:	58eb      	ldr	r3, [r5, r3]
    35d6:	4798      	blx	r3
    35d8:	e0b8      	b.n	374c <xTaskGenericCreate+0x1cc>
		{
			/* Avoid dependency on memset() if it is not required. */
			#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
			{
				/* Just to help debugging. */
				( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
    35da:	00b2      	lsls	r2, r6, #2
    35dc:	21a5      	movs	r1, #165	; 0xa5
    35de:	4b7f      	ldr	r3, [pc, #508]	; (37dc <xTaskGenericCreate+0x25c>)
    35e0:	58eb      	ldr	r3, [r5, r3]
    35e2:	4798      	blx	r3
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
    35e4:	4a7e      	ldr	r2, [pc, #504]	; (37e0 <xTaskGenericCreate+0x260>)
    35e6:	18b3      	adds	r3, r6, r2
    35e8:	009b      	lsls	r3, r3, #2
    35ea:	6b22      	ldr	r2, [r4, #48]	; 0x30
    35ec:	18d3      	adds	r3, r2, r3
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    35ee:	2207      	movs	r2, #7
    35f0:	4393      	bics	r3, r2
    35f2:	469b      	mov	fp, r3
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
    35f4:	783a      	ldrb	r2, [r7, #0]
    35f6:	2334      	movs	r3, #52	; 0x34
    35f8:	54e2      	strb	r2, [r4, r3]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    35fa:	783b      	ldrb	r3, [r7, #0]
    35fc:	2b00      	cmp	r3, #0
    35fe:	d00a      	beq.n	3616 <xTaskGenericCreate+0x96>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    3600:	2301      	movs	r3, #1
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
    3602:	5cf9      	ldrb	r1, [r7, r3]
    3604:	18e2      	adds	r2, r4, r3
    3606:	3234      	adds	r2, #52	; 0x34
    3608:	7011      	strb	r1, [r2, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    360a:	5cfa      	ldrb	r2, [r7, r3]
    360c:	2a00      	cmp	r2, #0
    360e:	d002      	beq.n	3616 <xTaskGenericCreate+0x96>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    3610:	3301      	adds	r3, #1
    3612:	2b05      	cmp	r3, #5
    3614:	d1f5      	bne.n	3602 <xTaskGenericCreate+0x82>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    3616:	2200      	movs	r2, #0
    3618:	2338      	movs	r3, #56	; 0x38
    361a:	54e2      	strb	r2, [r4, r3]
    361c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    361e:	2e04      	cmp	r6, #4
    3620:	d900      	bls.n	3624 <xTaskGenericCreate+0xa4>
    3622:	2604      	movs	r6, #4
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
    3624:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    3626:	6466      	str	r6, [r4, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    3628:	1d23      	adds	r3, r4, #4
    362a:	4698      	mov	r8, r3
    362c:	1c18      	adds	r0, r3, #0
    362e:	4b6d      	ldr	r3, [pc, #436]	; (37e4 <xTaskGenericCreate+0x264>)
    3630:	58ef      	ldr	r7, [r5, r3]
    3632:	47b8      	blx	r7
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    3634:	1c20      	adds	r0, r4, #0
    3636:	3018      	adds	r0, #24
    3638:	47b8      	blx	r7

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    363a:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    363c:	2305      	movs	r3, #5
    363e:	1b9e      	subs	r6, r3, r6
    3640:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    3642:	6264      	str	r4, [r4, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    3644:	4658      	mov	r0, fp
    3646:	4649      	mov	r1, r9
    3648:	4652      	mov	r2, sl
    364a:	4b67      	ldr	r3, [pc, #412]	; (37e8 <xTaskGenericCreate+0x268>)
    364c:	58eb      	ldr	r3, [r5, r3]
    364e:	4798      	blx	r3
    3650:	6020      	str	r0, [r4, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
    3652:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    3654:	2a00      	cmp	r2, #0
    3656:	d000      	beq.n	365a <xTaskGenericCreate+0xda>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    3658:	6014      	str	r4, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
    365a:	4b64      	ldr	r3, [pc, #400]	; (37ec <xTaskGenericCreate+0x26c>)
    365c:	58eb      	ldr	r3, [r5, r3]
    365e:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
    3660:	4b63      	ldr	r3, [pc, #396]	; (37f0 <xTaskGenericCreate+0x270>)
    3662:	447b      	add	r3, pc
    3664:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    3666:	3201      	adds	r2, #1
    3668:	635a      	str	r2, [r3, #52]	; 0x34
			if( pxCurrentTCB == NULL )
    366a:	4b62      	ldr	r3, [pc, #392]	; (37f4 <xTaskGenericCreate+0x274>)
    366c:	58eb      	ldr	r3, [r5, r3]
    366e:	681b      	ldr	r3, [r3, #0]
    3670:	2b00      	cmp	r3, #0
    3672:	d134      	bne.n	36de <xTaskGenericCreate+0x15e>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    3674:	4b5f      	ldr	r3, [pc, #380]	; (37f4 <xTaskGenericCreate+0x274>)
    3676:	58eb      	ldr	r3, [r5, r3]
    3678:	601c      	str	r4, [r3, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    367a:	4b5f      	ldr	r3, [pc, #380]	; (37f8 <xTaskGenericCreate+0x278>)
    367c:	447b      	add	r3, pc
    367e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    3680:	2b01      	cmp	r3, #1
    3682:	d16c      	bne.n	375e <xTaskGenericCreate+0x1de>
    3684:	4b5d      	ldr	r3, [pc, #372]	; (37fc <xTaskGenericCreate+0x27c>)
    3686:	447b      	add	r3, pc
    3688:	1c1e      	adds	r6, r3, #0
    368a:	3638      	adds	r6, #56	; 0x38
    368c:	1c1f      	adds	r7, r3, #0
    368e:	379c      	adds	r7, #156	; 0x9c
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    3690:	4b5b      	ldr	r3, [pc, #364]	; (3800 <xTaskGenericCreate+0x280>)
    3692:	58eb      	ldr	r3, [r5, r3]
    3694:	9301      	str	r3, [sp, #4]
    3696:	1c30      	adds	r0, r6, #0
    3698:	9b01      	ldr	r3, [sp, #4]
    369a:	4798      	blx	r3
    369c:	3614      	adds	r6, #20

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    369e:	42be      	cmp	r6, r7
    36a0:	d1f9      	bne.n	3696 <xTaskGenericCreate+0x116>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
    36a2:	4a58      	ldr	r2, [pc, #352]	; (3804 <xTaskGenericCreate+0x284>)
    36a4:	447a      	add	r2, pc
    36a6:	4691      	mov	r9, r2
    36a8:	231c      	movs	r3, #28
    36aa:	469b      	mov	fp, r3
    36ac:	44cb      	add	fp, r9
    36ae:	4658      	mov	r0, fp
    36b0:	4b53      	ldr	r3, [pc, #332]	; (3800 <xTaskGenericCreate+0x280>)
    36b2:	58ee      	ldr	r6, [r5, r3]
    36b4:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
    36b6:	2230      	movs	r2, #48	; 0x30
    36b8:	4692      	mov	sl, r2
    36ba:	44ca      	add	sl, r9
    36bc:	4650      	mov	r0, sl
    36be:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
    36c0:	4f51      	ldr	r7, [pc, #324]	; (3808 <xTaskGenericCreate+0x288>)
    36c2:	447f      	add	r7, pc
    36c4:	1c38      	adds	r0, r7, #0
    36c6:	3014      	adds	r0, #20
    36c8:	47b0      	blx	r6

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    36ca:	4648      	mov	r0, r9
    36cc:	3044      	adds	r0, #68	; 0x44
    36ce:	47b0      	blx	r6
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    36d0:	1c38      	adds	r0, r7, #0
    36d2:	47b0      	blx	r6
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    36d4:	465b      	mov	r3, fp
    36d6:	62bb      	str	r3, [r7, #40]	; 0x28
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    36d8:	4652      	mov	r2, sl
    36da:	633a      	str	r2, [r7, #48]	; 0x30
    36dc:	e03f      	b.n	375e <xTaskGenericCreate+0x1de>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    36de:	4b4b      	ldr	r3, [pc, #300]	; (380c <xTaskGenericCreate+0x28c>)
    36e0:	447b      	add	r3, pc
    36e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    36e4:	2b00      	cmp	r3, #0
    36e6:	d13a      	bne.n	375e <xTaskGenericCreate+0x1de>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    36e8:	4b42      	ldr	r3, [pc, #264]	; (37f4 <xTaskGenericCreate+0x274>)
    36ea:	58eb      	ldr	r3, [r5, r3]
    36ec:	681b      	ldr	r3, [r3, #0]
    36ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    36f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    36f2:	429a      	cmp	r2, r3
    36f4:	d333      	bcc.n	375e <xTaskGenericCreate+0x1de>
					{
						pxCurrentTCB = pxNewTCB;
    36f6:	4b3f      	ldr	r3, [pc, #252]	; (37f4 <xTaskGenericCreate+0x274>)
    36f8:	58eb      	ldr	r3, [r5, r3]
    36fa:	601c      	str	r4, [r3, #0]
    36fc:	e02f      	b.n	375e <xTaskGenericCreate+0x1de>
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
    36fe:	4a44      	ldr	r2, [pc, #272]	; (3810 <xTaskGenericCreate+0x290>)
    3700:	447a      	add	r2, pc
    3702:	65d3      	str	r3, [r2, #92]	; 0x5c
    3704:	009a      	lsls	r2, r3, #2
    3706:	18d3      	adds	r3, r2, r3
    3708:	009b      	lsls	r3, r3, #2
    370a:	4842      	ldr	r0, [pc, #264]	; (3814 <xTaskGenericCreate+0x294>)
    370c:	4478      	add	r0, pc
    370e:	3038      	adds	r0, #56	; 0x38
    3710:	18c0      	adds	r0, r0, r3
    3712:	4641      	mov	r1, r8
    3714:	4b40      	ldr	r3, [pc, #256]	; (3818 <xTaskGenericCreate+0x298>)
    3716:	58eb      	ldr	r3, [r5, r3]
    3718:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
    371a:	4b40      	ldr	r3, [pc, #256]	; (381c <xTaskGenericCreate+0x29c>)
    371c:	58eb      	ldr	r3, [r5, r3]
    371e:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
    3720:	4b3f      	ldr	r3, [pc, #252]	; (3820 <xTaskGenericCreate+0x2a0>)
    3722:	447b      	add	r3, pc
    3724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );

			xReturn = pdPASS;
    3726:	2001      	movs	r0, #1
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
    3728:	2b00      	cmp	r3, #0
    372a:	d049      	beq.n	37c0 <xTaskGenericCreate+0x240>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    372c:	4b31      	ldr	r3, [pc, #196]	; (37f4 <xTaskGenericCreate+0x274>)
    372e:	58eb      	ldr	r3, [r5, r3]
    3730:	681b      	ldr	r3, [r3, #0]
    3732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3734:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    3736:	429a      	cmp	r2, r3
    3738:	d942      	bls.n	37c0 <xTaskGenericCreate+0x240>
			{
				taskYIELD_IF_USING_PREEMPTION();
    373a:	4b3a      	ldr	r3, [pc, #232]	; (3824 <xTaskGenericCreate+0x2a4>)
    373c:	58eb      	ldr	r3, [r5, r3]
    373e:	4798      	blx	r3
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );

			xReturn = pdPASS;
    3740:	2001      	movs	r0, #1
    3742:	e03d      	b.n	37c0 <xTaskGenericCreate+0x240>
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3744:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3746:	6303      	str	r3, [r0, #48]	; 0x30
    3748:	1c18      	adds	r0, r3, #0
    374a:	e746      	b.n	35da <xTaskGenericCreate+0x5a>
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
		traceTASK_CREATE_FAILED();
    374c:	2043      	movs	r0, #67	; 0x43
    374e:	2103      	movs	r1, #3
    3750:	2200      	movs	r2, #0
    3752:	4b35      	ldr	r3, [pc, #212]	; (3828 <xTaskGenericCreate+0x2a8>)
    3754:	58eb      	ldr	r3, [r5, r3]
    3756:	4798      	blx	r3
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    3758:	2001      	movs	r0, #1
    375a:	4240      	negs	r0, r0
    375c:	e030      	b.n	37c0 <xTaskGenericCreate+0x240>
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
    375e:	4f33      	ldr	r7, [pc, #204]	; (382c <xTaskGenericCreate+0x2ac>)
    3760:	447f      	add	r7, pc
    3762:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3764:	3301      	adds	r3, #1
    3766:	663b      	str	r3, [r7, #96]	; 0x60

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
    3768:	63e3      	str	r3, [r4, #60]	; 0x3c
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );
    376a:	2003      	movs	r0, #3
    376c:	4b30      	ldr	r3, [pc, #192]	; (3830 <xTaskGenericCreate+0x2b0>)
    376e:	58eb      	ldr	r3, [r5, r3]
    3770:	4798      	blx	r3
    3772:	6420      	str	r0, [r4, #64]	; 0x40
    3774:	1c20      	adds	r0, r4, #0
    3776:	4b2f      	ldr	r3, [pc, #188]	; (3834 <xTaskGenericCreate+0x2b4>)
    3778:	58ee      	ldr	r6, [r5, r3]
    377a:	47b0      	blx	r6
    377c:	1c01      	adds	r1, r0, #0
    377e:	1c22      	adds	r2, r4, #0
    3780:	3234      	adds	r2, #52	; 0x34
    3782:	2003      	movs	r0, #3
    3784:	4b2c      	ldr	r3, [pc, #176]	; (3838 <xTaskGenericCreate+0x2b8>)
    3786:	58eb      	ldr	r3, [r5, r3]
    3788:	4798      	blx	r3
    378a:	1c20      	adds	r0, r4, #0
    378c:	47b0      	blx	r6
    378e:	1c01      	adds	r1, r0, #0
    3790:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3792:	b2da      	uxtb	r2, r3
    3794:	2003      	movs	r0, #3
    3796:	4b29      	ldr	r3, [pc, #164]	; (383c <xTaskGenericCreate+0x2bc>)
    3798:	58eb      	ldr	r3, [r5, r3]
    379a:	4798      	blx	r3
    379c:	1c20      	adds	r0, r4, #0
    379e:	47b0      	blx	r6
    37a0:	1c02      	adds	r2, r0, #0
    37a2:	201b      	movs	r0, #27
    37a4:	2103      	movs	r1, #3
    37a6:	4b20      	ldr	r3, [pc, #128]	; (3828 <xTaskGenericCreate+0x2a8>)
    37a8:	58eb      	ldr	r3, [r5, r3]
    37aa:	4798      	blx	r3

			prvAddTaskToReadyList( pxNewTCB );
    37ac:	1c20      	adds	r0, r4, #0
    37ae:	47b0      	blx	r6
    37b0:	4b23      	ldr	r3, [pc, #140]	; (3840 <xTaskGenericCreate+0x2c0>)
    37b2:	58eb      	ldr	r3, [r5, r3]
    37b4:	4798      	blx	r3
    37b6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    37b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    37ba:	4293      	cmp	r3, r2
    37bc:	d89f      	bhi.n	36fe <xTaskGenericCreate+0x17e>
    37be:	e7a1      	b.n	3704 <xTaskGenericCreate+0x184>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
}
    37c0:	b005      	add	sp, #20
    37c2:	bc3c      	pop	{r2, r3, r4, r5}
    37c4:	4690      	mov	r8, r2
    37c6:	4699      	mov	r9, r3
    37c8:	46a2      	mov	sl, r4
    37ca:	46ab      	mov	fp, r5
    37cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    37ce:	46c0      	nop			; (mov r8, r8)
    37d0:	000034a0 	.word	0x000034a0
    37d4:	000000d0 	.word	0x000000d0
    37d8:	00000080 	.word	0x00000080
    37dc:	00000188 	.word	0x00000188
    37e0:	3fffffff 	.word	0x3fffffff
    37e4:	000000a8 	.word	0x000000a8
    37e8:	00000268 	.word	0x00000268
    37ec:	00000280 	.word	0x00000280
    37f0:	1fffdabe 	.word	0x1fffdabe
    37f4:	00000048 	.word	0x00000048
    37f8:	1fffdaa4 	.word	0x1fffdaa4
    37fc:	1fffda9a 	.word	0x1fffda9a
    3800:	000000e4 	.word	0x000000e4
    3804:	1fffdafc 	.word	0x1fffdafc
    3808:	1fffda5e 	.word	0x1fffda5e
    380c:	1fffdac0 	.word	0x1fffdac0
    3810:	1fffdaa0 	.word	0x1fffdaa0
    3814:	1fffda14 	.word	0x1fffda14
    3818:	00000094 	.word	0x00000094
    381c:	00000010 	.word	0x00000010
    3820:	1fffda7e 	.word	0x1fffda7e
    3824:	00000174 	.word	0x00000174
    3828:	00000224 	.word	0x00000224
    382c:	1fffda40 	.word	0x1fffda40
    3830:	00000288 	.word	0x00000288
    3834:	00000078 	.word	0x00000078
    3838:	00000130 	.word	0x00000130
    383c:	00000240 	.word	0x00000240
    3840:	000001a8 	.word	0x000001a8

00003844 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
    3844:	b5f0      	push	{r4, r5, r6, r7, lr}
    3846:	b083      	sub	sp, #12
    3848:	1c05      	adds	r5, r0, #0
    384a:	4c25      	ldr	r4, [pc, #148]	; (38e0 <vTaskResume+0x9c>)
    384c:	447c      	add	r4, pc
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
    384e:	2800      	cmp	r0, #0
    3850:	d101      	bne.n	3856 <vTaskResume+0x12>
    3852:	b672      	cpsid	i
    3854:	e7fe      	b.n	3854 <vTaskResume+0x10>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    3856:	4b23      	ldr	r3, [pc, #140]	; (38e4 <vTaskResume+0xa0>)
    3858:	58e3      	ldr	r3, [r4, r3]
    385a:	681b      	ldr	r3, [r3, #0]
    385c:	4298      	cmp	r0, r3
    385e:	d03d      	beq.n	38dc <vTaskResume+0x98>
		{
			taskENTER_CRITICAL();
    3860:	4b21      	ldr	r3, [pc, #132]	; (38e8 <vTaskResume+0xa4>)
    3862:	58e3      	ldr	r3, [r4, r3]
    3864:	4798      	blx	r3
			{
				if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    3866:	1c28      	adds	r0, r5, #0
    3868:	4b20      	ldr	r3, [pc, #128]	; (38ec <vTaskResume+0xa8>)
    386a:	447b      	add	r3, pc
    386c:	4798      	blx	r3
    386e:	2801      	cmp	r0, #1
    3870:	d131      	bne.n	38d6 <vTaskResume+0x92>
				{
					traceTASK_RESUME( pxTCB );
    3872:	1c28      	adds	r0, r5, #0
    3874:	4b1e      	ldr	r3, [pc, #120]	; (38f0 <vTaskResume+0xac>)
    3876:	58e6      	ldr	r6, [r4, r3]
    3878:	47b0      	blx	r6
    387a:	1c02      	adds	r2, r0, #0
    387c:	208b      	movs	r0, #139	; 0x8b
    387e:	2103      	movs	r1, #3
    3880:	4b1c      	ldr	r3, [pc, #112]	; (38f4 <vTaskResume+0xb0>)
    3882:	58e3      	ldr	r3, [r4, r3]
    3884:	4798      	blx	r3

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
    3886:	1d2f      	adds	r7, r5, #4
    3888:	1c38      	adds	r0, r7, #0
    388a:	4b1b      	ldr	r3, [pc, #108]	; (38f8 <vTaskResume+0xb4>)
    388c:	58e3      	ldr	r3, [r4, r3]
    388e:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    3890:	1c28      	adds	r0, r5, #0
    3892:	47b0      	blx	r6
    3894:	4b19      	ldr	r3, [pc, #100]	; (38fc <vTaskResume+0xb8>)
    3896:	58e3      	ldr	r3, [r4, r3]
    3898:	4798      	blx	r3
    389a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    389c:	4a18      	ldr	r2, [pc, #96]	; (3900 <vTaskResume+0xbc>)
    389e:	447a      	add	r2, pc
    38a0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
    38a2:	4293      	cmp	r3, r2
    38a4:	d902      	bls.n	38ac <vTaskResume+0x68>
    38a6:	4a17      	ldr	r2, [pc, #92]	; (3904 <vTaskResume+0xc0>)
    38a8:	447a      	add	r2, pc
    38aa:	65d3      	str	r3, [r2, #92]	; 0x5c
    38ac:	009a      	lsls	r2, r3, #2
    38ae:	18d3      	adds	r3, r2, r3
    38b0:	009b      	lsls	r3, r3, #2
    38b2:	4815      	ldr	r0, [pc, #84]	; (3908 <vTaskResume+0xc4>)
    38b4:	4478      	add	r0, pc
    38b6:	3038      	adds	r0, #56	; 0x38
    38b8:	18c0      	adds	r0, r0, r3
    38ba:	1c39      	adds	r1, r7, #0
    38bc:	4b13      	ldr	r3, [pc, #76]	; (390c <vTaskResume+0xc8>)
    38be:	58e3      	ldr	r3, [r4, r3]
    38c0:	4798      	blx	r3

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    38c2:	4b08      	ldr	r3, [pc, #32]	; (38e4 <vTaskResume+0xa0>)
    38c4:	58e3      	ldr	r3, [r4, r3]
    38c6:	681b      	ldr	r3, [r3, #0]
    38c8:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    38ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    38cc:	429a      	cmp	r2, r3
    38ce:	d302      	bcc.n	38d6 <vTaskResume+0x92>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
    38d0:	4b0f      	ldr	r3, [pc, #60]	; (3910 <vTaskResume+0xcc>)
    38d2:	58e3      	ldr	r3, [r4, r3]
    38d4:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
    38d6:	4b0f      	ldr	r3, [pc, #60]	; (3914 <vTaskResume+0xd0>)
    38d8:	58e3      	ldr	r3, [r4, r3]
    38da:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    38dc:	b003      	add	sp, #12
    38de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    38e0:	000031ec 	.word	0x000031ec
    38e4:	00000048 	.word	0x00000048
    38e8:	00000280 	.word	0x00000280
    38ec:	fffffc23 	.word	0xfffffc23
    38f0:	00000078 	.word	0x00000078
    38f4:	00000224 	.word	0x00000224
    38f8:	0000012c 	.word	0x0000012c
    38fc:	000001a8 	.word	0x000001a8
    3900:	1fffd902 	.word	0x1fffd902
    3904:	1fffd8f8 	.word	0x1fffd8f8
    3908:	1fffd86c 	.word	0x1fffd86c
    390c:	00000094 	.word	0x00000094
    3910:	00000174 	.word	0x00000174
    3914:	00000010 	.word	0x00000010

00003918 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    3918:	b530      	push	{r4, r5, lr}
    391a:	b087      	sub	sp, #28
    391c:	4c14      	ldr	r4, [pc, #80]	; (3970 <vTaskStartScheduler+0x58>)
    391e:	447c      	add	r4, pc
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
    3920:	2300      	movs	r3, #0
    3922:	9300      	str	r3, [sp, #0]
    3924:	9301      	str	r3, [sp, #4]
    3926:	9302      	str	r3, [sp, #8]
    3928:	9303      	str	r3, [sp, #12]
    392a:	4812      	ldr	r0, [pc, #72]	; (3974 <vTaskStartScheduler+0x5c>)
    392c:	4478      	add	r0, pc
    392e:	4912      	ldr	r1, [pc, #72]	; (3978 <vTaskStartScheduler+0x60>)
    3930:	4479      	add	r1, pc
    3932:	2246      	movs	r2, #70	; 0x46
    3934:	4d11      	ldr	r5, [pc, #68]	; (397c <vTaskStartScheduler+0x64>)
    3936:	5965      	ldr	r5, [r4, r5]
    3938:	47a8      	blx	r5
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
    393a:	2801      	cmp	r0, #1
    393c:	d111      	bne.n	3962 <vTaskStartScheduler+0x4a>
		{
			xReturn = xTimerCreateTimerTask();
    393e:	4b10      	ldr	r3, [pc, #64]	; (3980 <vTaskStartScheduler+0x68>)
    3940:	58e3      	ldr	r3, [r4, r3]
    3942:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    3944:	2801      	cmp	r0, #1
    3946:	d10c      	bne.n	3962 <vTaskStartScheduler+0x4a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
    3948:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xSchedulerRunning = pdTRUE;
    394a:	2201      	movs	r2, #1
    394c:	4b0d      	ldr	r3, [pc, #52]	; (3984 <vTaskStartScheduler+0x6c>)
    394e:	447b      	add	r3, pc
    3950:	659a      	str	r2, [r3, #88]	; 0x58
		xTickCount = ( TickType_t ) 0U;
    3952:	2200      	movs	r2, #0
    3954:	4b0c      	ldr	r3, [pc, #48]	; (3988 <vTaskStartScheduler+0x70>)
    3956:	447b      	add	r3, pc
    3958:	62da      	str	r2, [r3, #44]	; 0x2c
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    395a:	4b0c      	ldr	r3, [pc, #48]	; (398c <vTaskStartScheduler+0x74>)
    395c:	58e3      	ldr	r3, [r4, r3]
    395e:	4798      	blx	r3
    3960:	e003      	b.n	396a <vTaskStartScheduler+0x52>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
    3962:	2800      	cmp	r0, #0
    3964:	d101      	bne.n	396a <vTaskStartScheduler+0x52>
    3966:	b672      	cpsid	i
    3968:	e7fe      	b.n	3968 <vTaskStartScheduler+0x50>
	}
}
    396a:	b007      	add	sp, #28
    396c:	bd30      	pop	{r4, r5, pc}
    396e:	46c0      	nop			; (mov r8, r8)
    3970:	0000311a 	.word	0x0000311a
    3974:	00000421 	.word	0x00000421
    3978:	000030cc 	.word	0x000030cc
    397c:	00000068 	.word	0x00000068
    3980:	0000019c 	.word	0x0000019c
    3984:	1fffd852 	.word	0x1fffd852
    3988:	1fffd7ca 	.word	0x1fffd7ca
    398c:	00000058 	.word	0x00000058

00003990 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    3990:	4b02      	ldr	r3, [pc, #8]	; (399c <vTaskSuspendAll+0xc>)
    3992:	447b      	add	r3, pc
    3994:	6e9a      	ldr	r2, [r3, #104]	; 0x68
    3996:	3201      	adds	r2, #1
    3998:	669a      	str	r2, [r3, #104]	; 0x68
}
    399a:	4770      	bx	lr
    399c:	1fffd80e 	.word	0x1fffd80e

000039a0 <xTaskGetTickCount>:
	return xAlreadyYielded;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    39a0:	b530      	push	{r4, r5, lr}
    39a2:	b083      	sub	sp, #12
    39a4:	4c06      	ldr	r4, [pc, #24]	; (39c0 <xTaskGetTickCount+0x20>)
    39a6:	447c      	add	r4, pc
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    39a8:	4b06      	ldr	r3, [pc, #24]	; (39c4 <xTaskGetTickCount+0x24>)
    39aa:	58e3      	ldr	r3, [r4, r3]
    39ac:	4798      	blx	r3
	{
		xTicks = xTickCount;
    39ae:	4b06      	ldr	r3, [pc, #24]	; (39c8 <xTaskGetTickCount+0x28>)
    39b0:	447b      	add	r3, pc
    39b2:	6add      	ldr	r5, [r3, #44]	; 0x2c
	}
	taskEXIT_CRITICAL();
    39b4:	4b05      	ldr	r3, [pc, #20]	; (39cc <xTaskGetTickCount+0x2c>)
    39b6:	58e3      	ldr	r3, [r4, r3]
    39b8:	4798      	blx	r3

	return xTicks;
}
    39ba:	1c28      	adds	r0, r5, #0
    39bc:	b003      	add	sp, #12
    39be:	bd30      	pop	{r4, r5, pc}
    39c0:	00003092 	.word	0x00003092
    39c4:	00000280 	.word	0x00000280
    39c8:	1fffd770 	.word	0x1fffd770
    39cc:	00000010 	.word	0x00000010

000039d0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
    39d0:	b530      	push	{r4, r5, lr}
    39d2:	b083      	sub	sp, #12
    39d4:	4c06      	ldr	r4, [pc, #24]	; (39f0 <xTaskGetTickCountFromISR+0x20>)
    39d6:	447c      	add	r4, pc
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    39d8:	4b06      	ldr	r3, [pc, #24]	; (39f4 <xTaskGetTickCountFromISR+0x24>)
    39da:	58e3      	ldr	r3, [r4, r3]
    39dc:	4798      	blx	r3
	{
		xReturn = xTickCount;
    39de:	4b06      	ldr	r3, [pc, #24]	; (39f8 <xTaskGetTickCountFromISR+0x28>)
    39e0:	447b      	add	r3, pc
    39e2:	6add      	ldr	r5, [r3, #44]	; 0x2c
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    39e4:	4b05      	ldr	r3, [pc, #20]	; (39fc <xTaskGetTickCountFromISR+0x2c>)
    39e6:	58e3      	ldr	r3, [r4, r3]
    39e8:	4798      	blx	r3

	return xReturn;
}
    39ea:	1c28      	adds	r0, r5, #0
    39ec:	b003      	add	sp, #12
    39ee:	bd30      	pop	{r4, r5, pc}
    39f0:	00003062 	.word	0x00003062
    39f4:	00000244 	.word	0x00000244
    39f8:	1fffd740 	.word	0x1fffd740
    39fc:	00000120 	.word	0x00000120

00003a00 <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    3a00:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a02:	4657      	mov	r7, sl
    3a04:	464e      	mov	r6, r9
    3a06:	4645      	mov	r5, r8
    3a08:	b4e0      	push	{r5, r6, r7}
    3a0a:	b082      	sub	sp, #8
    3a0c:	4c58      	ldr	r4, [pc, #352]	; (3b70 <xTaskIncrementTick+0x170>)
    3a0e:	447c      	add	r4, pc
BaseType_t xSwitchRequired = pdFALSE;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
    3a10:	4b58      	ldr	r3, [pc, #352]	; (3b74 <xTaskIncrementTick+0x174>)
    3a12:	447b      	add	r3, pc
    3a14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    3a16:	2b01      	cmp	r3, #1
    3a18:	d004      	beq.n	3a24 <xTaskIncrementTick+0x24>
    3a1a:	4b57      	ldr	r3, [pc, #348]	; (3b78 <xTaskIncrementTick+0x178>)
    3a1c:	447b      	add	r3, pc
    3a1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    3a20:	2b00      	cmp	r3, #0
    3a22:	d108      	bne.n	3a36 <xTaskIncrementTick+0x36>
    3a24:	4b55      	ldr	r3, [pc, #340]	; (3b7c <xTaskIncrementTick+0x17c>)
    3a26:	58e3      	ldr	r3, [r4, r3]
    3a28:	681a      	ldr	r2, [r3, #0]
    3a2a:	3201      	adds	r2, #1
    3a2c:	601a      	str	r2, [r3, #0]
    3a2e:	2000      	movs	r0, #0
    3a30:	4b53      	ldr	r3, [pc, #332]	; (3b80 <xTaskIncrementTick+0x180>)
    3a32:	58e3      	ldr	r3, [r4, r3]
    3a34:	4798      	blx	r3
    3a36:	4b53      	ldr	r3, [pc, #332]	; (3b84 <xTaskIncrementTick+0x184>)
    3a38:	447b      	add	r3, pc
    3a3a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    3a3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    3a3e:	2b00      	cmp	r3, #0
    3a40:	d000      	beq.n	3a44 <xTaskIncrementTick+0x44>
    3a42:	e07f      	b.n	3b44 <xTaskIncrementTick+0x144>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
    3a44:	4b50      	ldr	r3, [pc, #320]	; (3b88 <xTaskIncrementTick+0x188>)
    3a46:	447b      	add	r3, pc
    3a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3a4a:	3201      	adds	r2, #1
    3a4c:	62da      	str	r2, [r3, #44]	; 0x2c

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
    3a4e:	6adf      	ldr	r7, [r3, #44]	; 0x2c

			if( xConstTickCount == ( TickType_t ) 0U )
    3a50:	2f00      	cmp	r7, #0
    3a52:	d115      	bne.n	3a80 <xTaskIncrementTick+0x80>
			{
				taskSWITCH_DELAYED_LISTS();
    3a54:	4b4d      	ldr	r3, [pc, #308]	; (3b8c <xTaskIncrementTick+0x18c>)
    3a56:	447b      	add	r3, pc
    3a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3a5a:	681b      	ldr	r3, [r3, #0]
    3a5c:	2b00      	cmp	r3, #0
    3a5e:	d001      	beq.n	3a64 <xTaskIncrementTick+0x64>
    3a60:	b672      	cpsid	i
    3a62:	e7fe      	b.n	3a62 <xTaskIncrementTick+0x62>
    3a64:	4b4a      	ldr	r3, [pc, #296]	; (3b90 <xTaskIncrementTick+0x190>)
    3a66:	447b      	add	r3, pc
    3a68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3a6a:	6b19      	ldr	r1, [r3, #48]	; 0x30
    3a6c:	6299      	str	r1, [r3, #40]	; 0x28
    3a6e:	631a      	str	r2, [r3, #48]	; 0x30
    3a70:	4b48      	ldr	r3, [pc, #288]	; (3b94 <xTaskIncrementTick+0x194>)
    3a72:	447b      	add	r3, pc
    3a74:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    3a76:	3201      	adds	r2, #1
    3a78:	671a      	str	r2, [r3, #112]	; 0x70
    3a7a:	4b47      	ldr	r3, [pc, #284]	; (3b98 <xTaskIncrementTick+0x198>)
    3a7c:	447b      	add	r3, pc
    3a7e:	4798      	blx	r3

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
    3a80:	4b46      	ldr	r3, [pc, #280]	; (3b9c <xTaskIncrementTick+0x19c>)
    3a82:	447b      	add	r3, pc
    3a84:	681b      	ldr	r3, [r3, #0]

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    3a86:	2600      	movs	r6, #0

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
    3a88:	429f      	cmp	r7, r3
    3a8a:	d34d      	bcc.n	3b28 <xTaskIncrementTick+0x128>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    3a8c:	4a44      	ldr	r2, [pc, #272]	; (3ba0 <xTaskIncrementTick+0x1a0>)
    3a8e:	447a      	add	r2, pc
    3a90:	4692      	mov	sl, r2
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
    3a92:	4b44      	ldr	r3, [pc, #272]	; (3ba4 <xTaskIncrementTick+0x1a4>)
    3a94:	447b      	add	r3, pc
    3a96:	3338      	adds	r3, #56	; 0x38
    3a98:	4699      	mov	r9, r3
    3a9a:	e000      	b.n	3a9e <xTaskIncrementTick+0x9e>
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
							{
								xSwitchRequired = pdTRUE;
    3a9c:	2601      	movs	r6, #1
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    3a9e:	4652      	mov	r2, sl
    3aa0:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3aa2:	681b      	ldr	r3, [r3, #0]
    3aa4:	2b00      	cmp	r3, #0
    3aa6:	d105      	bne.n	3ab4 <xTaskIncrementTick+0xb4>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
    3aa8:	2201      	movs	r2, #1
    3aaa:	4252      	negs	r2, r2
    3aac:	4b3e      	ldr	r3, [pc, #248]	; (3ba8 <xTaskIncrementTick+0x1a8>)
    3aae:	447b      	add	r3, pc
    3ab0:	601a      	str	r2, [r3, #0]
						break;
    3ab2:	e039      	b.n	3b28 <xTaskIncrementTick+0x128>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    3ab4:	4b3d      	ldr	r3, [pc, #244]	; (3bac <xTaskIncrementTick+0x1ac>)
    3ab6:	447b      	add	r3, pc
    3ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3aba:	68db      	ldr	r3, [r3, #12]
    3abc:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    3abe:	686b      	ldr	r3, [r5, #4]

						if( xConstTickCount < xItemValue )
    3ac0:	429f      	cmp	r7, r3
    3ac2:	d203      	bcs.n	3acc <xTaskIncrementTick+0xcc>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
    3ac4:	4a3a      	ldr	r2, [pc, #232]	; (3bb0 <xTaskIncrementTick+0x1b0>)
    3ac6:	447a      	add	r2, pc
    3ac8:	6013      	str	r3, [r2, #0]
							break;
    3aca:	e02d      	b.n	3b28 <xTaskIncrementTick+0x128>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    3acc:	1d2b      	adds	r3, r5, #4
    3ace:	4698      	mov	r8, r3
    3ad0:	1c18      	adds	r0, r3, #0
    3ad2:	4b38      	ldr	r3, [pc, #224]	; (3bb4 <xTaskIncrementTick+0x1b4>)
    3ad4:	58e3      	ldr	r3, [r4, r3]
    3ad6:	4798      	blx	r3

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    3ad8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    3ada:	2a00      	cmp	r2, #0
    3adc:	d004      	beq.n	3ae8 <xTaskIncrementTick+0xe8>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    3ade:	1c28      	adds	r0, r5, #0
    3ae0:	3018      	adds	r0, #24
    3ae2:	4b34      	ldr	r3, [pc, #208]	; (3bb4 <xTaskIncrementTick+0x1b4>)
    3ae4:	58e3      	ldr	r3, [r4, r3]
    3ae6:	4798      	blx	r3
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
    3ae8:	1c28      	adds	r0, r5, #0
    3aea:	4b33      	ldr	r3, [pc, #204]	; (3bb8 <xTaskIncrementTick+0x1b8>)
    3aec:	58e3      	ldr	r3, [r4, r3]
    3aee:	4798      	blx	r3
    3af0:	4b32      	ldr	r3, [pc, #200]	; (3bbc <xTaskIncrementTick+0x1bc>)
    3af2:	58e3      	ldr	r3, [r4, r3]
    3af4:	4798      	blx	r3
    3af6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    3af8:	4a31      	ldr	r2, [pc, #196]	; (3bc0 <xTaskIncrementTick+0x1c0>)
    3afa:	447a      	add	r2, pc
    3afc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
    3afe:	4293      	cmp	r3, r2
    3b00:	d902      	bls.n	3b08 <xTaskIncrementTick+0x108>
    3b02:	4a30      	ldr	r2, [pc, #192]	; (3bc4 <xTaskIncrementTick+0x1c4>)
    3b04:	447a      	add	r2, pc
    3b06:	65d3      	str	r3, [r2, #92]	; 0x5c
    3b08:	0098      	lsls	r0, r3, #2
    3b0a:	18c0      	adds	r0, r0, r3
    3b0c:	0080      	lsls	r0, r0, #2
    3b0e:	4448      	add	r0, r9
    3b10:	4641      	mov	r1, r8
    3b12:	4b2d      	ldr	r3, [pc, #180]	; (3bc8 <xTaskIncrementTick+0x1c8>)
    3b14:	58e3      	ldr	r3, [r4, r3]
    3b16:	4798      	blx	r3
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3b18:	4b2c      	ldr	r3, [pc, #176]	; (3bcc <xTaskIncrementTick+0x1cc>)
    3b1a:	58e3      	ldr	r3, [r4, r3]
    3b1c:	681b      	ldr	r3, [r3, #0]
    3b1e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    3b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3b22:	429a      	cmp	r2, r3
    3b24:	d2ba      	bcs.n	3a9c <xTaskIncrementTick+0x9c>
    3b26:	e7ba      	b.n	3a9e <xTaskIncrementTick+0x9e>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    3b28:	4b28      	ldr	r3, [pc, #160]	; (3bcc <xTaskIncrementTick+0x1cc>)
    3b2a:	58e3      	ldr	r3, [r4, r3]
    3b2c:	681b      	ldr	r3, [r3, #0]
    3b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3b30:	009a      	lsls	r2, r3, #2
    3b32:	18d3      	adds	r3, r2, r3
    3b34:	009b      	lsls	r3, r3, #2
    3b36:	4a26      	ldr	r2, [pc, #152]	; (3bd0 <xTaskIncrementTick+0x1d0>)
    3b38:	447a      	add	r2, pc
    3b3a:	18d3      	adds	r3, r2, r3
    3b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3b3e:	2b01      	cmp	r3, #1
    3b40:	d807      	bhi.n	3b52 <xTaskIncrementTick+0x152>
    3b42:	e007      	b.n	3b54 <xTaskIncrementTick+0x154>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    3b44:	4b23      	ldr	r3, [pc, #140]	; (3bd4 <xTaskIncrementTick+0x1d4>)
    3b46:	447b      	add	r3, pc
    3b48:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    3b4a:	3201      	adds	r2, #1
    3b4c:	66da      	str	r2, [r3, #108]	; 0x6c

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    3b4e:	2600      	movs	r6, #0
    3b50:	e000      	b.n	3b54 <xTaskIncrementTick+0x154>
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
			{
				xSwitchRequired = pdTRUE;
    3b52:	2601      	movs	r6, #1
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    3b54:	4b20      	ldr	r3, [pc, #128]	; (3bd8 <xTaskIncrementTick+0x1d8>)
    3b56:	447b      	add	r3, pc
    3b58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    3b5a:	2b00      	cmp	r3, #0
    3b5c:	d000      	beq.n	3b60 <xTaskIncrementTick+0x160>
		{
			xSwitchRequired = pdTRUE;
    3b5e:	2601      	movs	r6, #1
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
    3b60:	1c30      	adds	r0, r6, #0
    3b62:	b002      	add	sp, #8
    3b64:	bc1c      	pop	{r2, r3, r4}
    3b66:	4690      	mov	r8, r2
    3b68:	4699      	mov	r9, r3
    3b6a:	46a2      	mov	sl, r4
    3b6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b6e:	46c0      	nop			; (mov r8, r8)
    3b70:	0000302a 	.word	0x0000302a
    3b74:	1fffd78e 	.word	0x1fffd78e
    3b78:	1fffd784 	.word	0x1fffd784
    3b7c:	000001fc 	.word	0x000001fc
    3b80:	0000004c 	.word	0x0000004c
    3b84:	1fffd768 	.word	0x1fffd768
    3b88:	1fffd6da 	.word	0x1fffd6da
    3b8c:	1fffd6ca 	.word	0x1fffd6ca
    3b90:	1fffd6ba 	.word	0x1fffd6ba
    3b94:	1fffd72e 	.word	0x1fffd72e
    3b98:	fffffa45 	.word	0xfffffa45
    3b9c:	1fffc58a 	.word	0x1fffc58a
    3ba0:	1fffd692 	.word	0x1fffd692
    3ba4:	1fffd68c 	.word	0x1fffd68c
    3ba8:	1fffc55e 	.word	0x1fffc55e
    3bac:	1fffd66a 	.word	0x1fffd66a
    3bb0:	1fffc546 	.word	0x1fffc546
    3bb4:	0000012c 	.word	0x0000012c
    3bb8:	00000078 	.word	0x00000078
    3bbc:	000001a8 	.word	0x000001a8
    3bc0:	1fffd6a6 	.word	0x1fffd6a6
    3bc4:	1fffd69c 	.word	0x1fffd69c
    3bc8:	00000094 	.word	0x00000094
    3bcc:	00000048 	.word	0x00000048
    3bd0:	1fffd5e8 	.word	0x1fffd5e8
    3bd4:	1fffd65a 	.word	0x1fffd65a
    3bd8:	1fffd64a 	.word	0x1fffd64a

00003bdc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    3bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
    3bde:	464f      	mov	r7, r9
    3be0:	b480      	push	{r7}
    3be2:	b082      	sub	sp, #8
    3be4:	4c42      	ldr	r4, [pc, #264]	; (3cf0 <xTaskResumeAll+0x114>)
    3be6:	447c      	add	r4, pc
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
    3be8:	4b42      	ldr	r3, [pc, #264]	; (3cf4 <xTaskResumeAll+0x118>)
    3bea:	447b      	add	r3, pc
    3bec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    3bee:	2b00      	cmp	r3, #0
    3bf0:	d101      	bne.n	3bf6 <xTaskResumeAll+0x1a>
    3bf2:	b672      	cpsid	i
    3bf4:	e7fe      	b.n	3bf4 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    3bf6:	4b40      	ldr	r3, [pc, #256]	; (3cf8 <xTaskResumeAll+0x11c>)
    3bf8:	58e3      	ldr	r3, [r4, r3]
    3bfa:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
    3bfc:	4b3f      	ldr	r3, [pc, #252]	; (3cfc <xTaskResumeAll+0x120>)
    3bfe:	447b      	add	r3, pc
    3c00:	6e9a      	ldr	r2, [r3, #104]	; 0x68
    3c02:	3a01      	subs	r2, #1
    3c04:	669a      	str	r2, [r3, #104]	; 0x68

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    3c06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
    3c08:	2500      	movs	r5, #0
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
	{
		--uxSchedulerSuspended;

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    3c0a:	2b00      	cmp	r3, #0
    3c0c:	d168      	bne.n	3ce0 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    3c0e:	4b3c      	ldr	r3, [pc, #240]	; (3d00 <xTaskResumeAll+0x124>)
    3c10:	447b      	add	r3, pc
    3c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    3c14:	2b00      	cmp	r3, #0
    3c16:	d063      	beq.n	3ce0 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    3c18:	4a3a      	ldr	r2, [pc, #232]	; (3d04 <xTaskResumeAll+0x128>)
    3c1a:	447a      	add	r2, pc
    3c1c:	4691      	mov	r9, r2
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyList( pxTCB );
    3c1e:	4b3a      	ldr	r3, [pc, #232]	; (3d08 <xTaskResumeAll+0x12c>)
    3c20:	447b      	add	r3, pc
    3c22:	1c1e      	adds	r6, r3, #0
    3c24:	3638      	adds	r6, #56	; 0x38
    3c26:	e030      	b.n	3c8a <xTaskResumeAll+0xae>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    3c28:	4b38      	ldr	r3, [pc, #224]	; (3d0c <xTaskResumeAll+0x130>)
    3c2a:	447b      	add	r3, pc
    3c2c:	6a1b      	ldr	r3, [r3, #32]
    3c2e:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    3c30:	1c28      	adds	r0, r5, #0
    3c32:	3018      	adds	r0, #24
    3c34:	4b36      	ldr	r3, [pc, #216]	; (3d10 <xTaskResumeAll+0x134>)
    3c36:	58e3      	ldr	r3, [r4, r3]
    3c38:	9301      	str	r3, [sp, #4]
    3c3a:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    3c3c:	1d2f      	adds	r7, r5, #4
    3c3e:	1c38      	adds	r0, r7, #0
    3c40:	9b01      	ldr	r3, [sp, #4]
    3c42:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    3c44:	1c28      	adds	r0, r5, #0
    3c46:	4b33      	ldr	r3, [pc, #204]	; (3d14 <xTaskResumeAll+0x138>)
    3c48:	58e3      	ldr	r3, [r4, r3]
    3c4a:	4798      	blx	r3
    3c4c:	4b32      	ldr	r3, [pc, #200]	; (3d18 <xTaskResumeAll+0x13c>)
    3c4e:	58e3      	ldr	r3, [r4, r3]
    3c50:	4798      	blx	r3
    3c52:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    3c54:	4a31      	ldr	r2, [pc, #196]	; (3d1c <xTaskResumeAll+0x140>)
    3c56:	447a      	add	r2, pc
    3c58:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
    3c5a:	4293      	cmp	r3, r2
    3c5c:	d902      	bls.n	3c64 <xTaskResumeAll+0x88>
    3c5e:	4a30      	ldr	r2, [pc, #192]	; (3d20 <xTaskResumeAll+0x144>)
    3c60:	447a      	add	r2, pc
    3c62:	65d3      	str	r3, [r2, #92]	; 0x5c
    3c64:	0098      	lsls	r0, r3, #2
    3c66:	18c0      	adds	r0, r0, r3
    3c68:	0080      	lsls	r0, r0, #2
    3c6a:	1830      	adds	r0, r6, r0
    3c6c:	1c39      	adds	r1, r7, #0
    3c6e:	4b2d      	ldr	r3, [pc, #180]	; (3d24 <xTaskResumeAll+0x148>)
    3c70:	58e3      	ldr	r3, [r4, r3]
    3c72:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3c74:	4b2c      	ldr	r3, [pc, #176]	; (3d28 <xTaskResumeAll+0x14c>)
    3c76:	58e3      	ldr	r3, [r4, r3]
    3c78:	681b      	ldr	r3, [r3, #0]
    3c7a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    3c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3c7e:	429a      	cmp	r2, r3
    3c80:	d303      	bcc.n	3c8a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
    3c82:	2201      	movs	r2, #1
    3c84:	4b29      	ldr	r3, [pc, #164]	; (3d2c <xTaskResumeAll+0x150>)
    3c86:	447b      	add	r3, pc
    3c88:	675a      	str	r2, [r3, #116]	; 0x74
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    3c8a:	464a      	mov	r2, r9
    3c8c:	6952      	ldr	r2, [r2, #20]
    3c8e:	2a00      	cmp	r2, #0
    3c90:	d1ca      	bne.n	3c28 <xTaskResumeAll+0x4c>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
    3c92:	4b27      	ldr	r3, [pc, #156]	; (3d30 <xTaskResumeAll+0x154>)
    3c94:	447b      	add	r3, pc
    3c96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    3c98:	2b00      	cmp	r3, #0
    3c9a:	d017      	beq.n	3ccc <xTaskResumeAll+0xf0>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
    3c9c:	4b25      	ldr	r3, [pc, #148]	; (3d34 <xTaskResumeAll+0x158>)
    3c9e:	447b      	add	r3, pc
    3ca0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    3ca2:	2b00      	cmp	r3, #0
    3ca4:	d012      	beq.n	3ccc <xTaskResumeAll+0xf0>
					{
						if( xTaskIncrementTick() != pdFALSE )
    3ca6:	4b24      	ldr	r3, [pc, #144]	; (3d38 <xTaskResumeAll+0x15c>)
    3ca8:	58e3      	ldr	r3, [r4, r3]
    3caa:	9301      	str	r3, [sp, #4]
						{
							xYieldPending = pdTRUE;
    3cac:	4e23      	ldr	r6, [pc, #140]	; (3d3c <xTaskResumeAll+0x160>)
    3cae:	447e      	add	r6, pc
    3cb0:	2501      	movs	r5, #1
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
					{
						if( xTaskIncrementTick() != pdFALSE )
    3cb2:	9b01      	ldr	r3, [sp, #4]
    3cb4:	4798      	blx	r3
    3cb6:	2800      	cmp	r0, #0
    3cb8:	d000      	beq.n	3cbc <xTaskResumeAll+0xe0>
						{
							xYieldPending = pdTRUE;
    3cba:	6775      	str	r5, [r6, #116]	; 0x74
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
    3cbc:	4b20      	ldr	r3, [pc, #128]	; (3d40 <xTaskResumeAll+0x164>)
    3cbe:	447b      	add	r3, pc
    3cc0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    3cc2:	3a01      	subs	r2, #1
    3cc4:	66da      	str	r2, [r3, #108]	; 0x6c
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
    3cc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    3cc8:	2b00      	cmp	r3, #0
    3cca:	d1f2      	bne.n	3cb2 <xTaskResumeAll+0xd6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
    3ccc:	4b1d      	ldr	r3, [pc, #116]	; (3d44 <xTaskResumeAll+0x168>)
    3cce:	447b      	add	r3, pc
    3cd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
    3cd2:	2500      	movs	r5, #0
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
    3cd4:	2b01      	cmp	r3, #1
    3cd6:	d103      	bne.n	3ce0 <xTaskResumeAll+0x104>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    3cd8:	4b1b      	ldr	r3, [pc, #108]	; (3d48 <xTaskResumeAll+0x16c>)
    3cda:	58e3      	ldr	r3, [r4, r3]
    3cdc:	4798      	blx	r3

				if( xYieldPending == pdTRUE )
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    3cde:	2501      	movs	r5, #1
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    3ce0:	4b1a      	ldr	r3, [pc, #104]	; (3d4c <xTaskResumeAll+0x170>)
    3ce2:	58e3      	ldr	r3, [r4, r3]
    3ce4:	4798      	blx	r3

	return xAlreadyYielded;
}
    3ce6:	1c28      	adds	r0, r5, #0
    3ce8:	b002      	add	sp, #8
    3cea:	bc04      	pop	{r2}
    3cec:	4691      	mov	r9, r2
    3cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3cf0:	00002e52 	.word	0x00002e52
    3cf4:	1fffd5b6 	.word	0x1fffd5b6
    3cf8:	00000280 	.word	0x00000280
    3cfc:	1fffd5a2 	.word	0x1fffd5a2
    3d00:	1fffd510 	.word	0x1fffd510
    3d04:	1fffd506 	.word	0x1fffd506
    3d08:	1fffd500 	.word	0x1fffd500
    3d0c:	1fffd4f6 	.word	0x1fffd4f6
    3d10:	0000012c 	.word	0x0000012c
    3d14:	00000078 	.word	0x00000078
    3d18:	000001a8 	.word	0x000001a8
    3d1c:	1fffd54a 	.word	0x1fffd54a
    3d20:	1fffd540 	.word	0x1fffd540
    3d24:	00000094 	.word	0x00000094
    3d28:	00000048 	.word	0x00000048
    3d2c:	1fffd51a 	.word	0x1fffd51a
    3d30:	1fffd50c 	.word	0x1fffd50c
    3d34:	1fffd502 	.word	0x1fffd502
    3d38:	0000021c 	.word	0x0000021c
    3d3c:	1fffd4f2 	.word	0x1fffd4f2
    3d40:	1fffd4e2 	.word	0x1fffd4e2
    3d44:	1fffd4d2 	.word	0x1fffd4d2
    3d48:	00000174 	.word	0x00000174
    3d4c:	00000010 	.word	0x00000010

00003d50 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    3d50:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d52:	464f      	mov	r7, r9
    3d54:	4646      	mov	r6, r8
    3d56:	b4c0      	push	{r6, r7}
    3d58:	b083      	sub	sp, #12
    3d5a:	4c1e      	ldr	r4, [pc, #120]	; (3dd4 <prvIdleTask+0x84>)
    3d5c:	447c      	add	r4, pc
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
    3d5e:	4e1e      	ldr	r6, [pc, #120]	; (3dd8 <prvIdleTask+0x88>)
    3d60:	447e      	add	r6, pc

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    3d62:	4a1e      	ldr	r2, [pc, #120]	; (3ddc <prvIdleTask+0x8c>)
    3d64:	447a      	add	r2, pc
    3d66:	4690      	mov	r8, r2
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    3d68:	4f1d      	ldr	r7, [pc, #116]	; (3de0 <prvIdleTask+0x90>)
    3d6a:	447f      	add	r7, pc
    3d6c:	e027      	b.n	3dbe <prvIdleTask+0x6e>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
    3d6e:	4b1d      	ldr	r3, [pc, #116]	; (3de4 <prvIdleTask+0x94>)
    3d70:	58e3      	ldr	r3, [r4, r3]
    3d72:	4798      	blx	r3
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    3d74:	6c7d      	ldr	r5, [r7, #68]	; 0x44
			}
			( void ) xTaskResumeAll();
    3d76:	4b1c      	ldr	r3, [pc, #112]	; (3de8 <prvIdleTask+0x98>)
    3d78:	58e3      	ldr	r3, [r4, r3]
    3d7a:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
    3d7c:	2d00      	cmp	r5, #0
    3d7e:	d01e      	beq.n	3dbe <prvIdleTask+0x6e>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
    3d80:	4b1a      	ldr	r3, [pc, #104]	; (3dec <prvIdleTask+0x9c>)
    3d82:	58e3      	ldr	r3, [r4, r3]
    3d84:	4798      	blx	r3
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    3d86:	4d1a      	ldr	r5, [pc, #104]	; (3df0 <prvIdleTask+0xa0>)
    3d88:	447d      	add	r5, pc
    3d8a:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    3d8c:	68da      	ldr	r2, [r3, #12]
    3d8e:	4691      	mov	r9, r2
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    3d90:	1c10      	adds	r0, r2, #0
    3d92:	3004      	adds	r0, #4
    3d94:	4b17      	ldr	r3, [pc, #92]	; (3df4 <prvIdleTask+0xa4>)
    3d96:	58e3      	ldr	r3, [r4, r3]
    3d98:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
    3d9a:	4b17      	ldr	r3, [pc, #92]	; (3df8 <prvIdleTask+0xa8>)
    3d9c:	447b      	add	r3, pc
    3d9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    3da0:	3a01      	subs	r2, #1
    3da2:	635a      	str	r2, [r3, #52]	; 0x34
					--uxTasksDeleted;
    3da4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    3da6:	3b01      	subs	r3, #1
    3da8:	666b      	str	r3, [r5, #100]	; 0x64
				}
				taskEXIT_CRITICAL();
    3daa:	4b14      	ldr	r3, [pc, #80]	; (3dfc <prvIdleTask+0xac>)
    3dac:	58e3      	ldr	r3, [r4, r3]
    3dae:	4798      	blx	r3
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
		vPortFreeAligned( pxTCB->pxStack );
    3db0:	464b      	mov	r3, r9
    3db2:	6b18      	ldr	r0, [r3, #48]	; 0x30
    3db4:	4b12      	ldr	r3, [pc, #72]	; (3e00 <prvIdleTask+0xb0>)
    3db6:	58e5      	ldr	r5, [r4, r3]
    3db8:	47a8      	blx	r5
		vPortFree( pxTCB );
    3dba:	4648      	mov	r0, r9
    3dbc:	47a8      	blx	r5
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
    3dbe:	6e73      	ldr	r3, [r6, #100]	; 0x64
    3dc0:	2b00      	cmp	r3, #0
    3dc2:	d1d4      	bne.n	3d6e <prvIdleTask+0x1e>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    3dc4:	4642      	mov	r2, r8
    3dc6:	6b92      	ldr	r2, [r2, #56]	; 0x38
    3dc8:	2a01      	cmp	r2, #1
    3dca:	d9f8      	bls.n	3dbe <prvIdleTask+0x6e>
			{
				taskYIELD();
    3dcc:	4b0d      	ldr	r3, [pc, #52]	; (3e04 <prvIdleTask+0xb4>)
    3dce:	58e3      	ldr	r3, [r4, r3]
    3dd0:	4798      	blx	r3
    3dd2:	e7f4      	b.n	3dbe <prvIdleTask+0x6e>
    3dd4:	00002cdc 	.word	0x00002cdc
    3dd8:	1fffd440 	.word	0x1fffd440
    3ddc:	1fffd3bc 	.word	0x1fffd3bc
    3de0:	1fffd436 	.word	0x1fffd436
    3de4:	00000124 	.word	0x00000124
    3de8:	000001d4 	.word	0x000001d4
    3dec:	00000280 	.word	0x00000280
    3df0:	1fffd418 	.word	0x1fffd418
    3df4:	0000012c 	.word	0x0000012c
    3df8:	1fffd384 	.word	0x1fffd384
    3dfc:	00000010 	.word	0x00000010
    3e00:	00000080 	.word	0x00000080
    3e04:	00000174 	.word	0x00000174

00003e08 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    3e08:	b530      	push	{r4, r5, lr}
    3e0a:	b083      	sub	sp, #12
    3e0c:	4c2c      	ldr	r4, [pc, #176]	; (3ec0 <vTaskSwitchContext+0xb8>)
    3e0e:	447c      	add	r4, pc
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    3e10:	4b2c      	ldr	r3, [pc, #176]	; (3ec4 <vTaskSwitchContext+0xbc>)
    3e12:	447b      	add	r3, pc
    3e14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    3e16:	2b00      	cmp	r3, #0
    3e18:	d004      	beq.n	3e24 <vTaskSwitchContext+0x1c>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    3e1a:	2201      	movs	r2, #1
    3e1c:	4b2a      	ldr	r3, [pc, #168]	; (3ec8 <vTaskSwitchContext+0xc0>)
    3e1e:	447b      	add	r3, pc
    3e20:	675a      	str	r2, [r3, #116]	; 0x74
    3e22:	e04a      	b.n	3eba <vTaskSwitchContext+0xb2>
	}
	else
	{
		xYieldPending = pdFALSE;
    3e24:	4b29      	ldr	r3, [pc, #164]	; (3ecc <vTaskSwitchContext+0xc4>)
    3e26:	447b      	add	r3, pc
    3e28:	2200      	movs	r2, #0
    3e2a:	675a      	str	r2, [r3, #116]	; 0x74
		#endif /* configGENERATE_RUN_TIME_STATS */

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
    3e2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    3e2e:	009a      	lsls	r2, r3, #2
    3e30:	18d3      	adds	r3, r2, r3
    3e32:	009b      	lsls	r3, r3, #2
    3e34:	4a26      	ldr	r2, [pc, #152]	; (3ed0 <vTaskSwitchContext+0xc8>)
    3e36:	447a      	add	r2, pc
    3e38:	18d3      	adds	r3, r2, r3
    3e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3e3c:	2b00      	cmp	r3, #0
    3e3e:	d11b      	bne.n	3e78 <vTaskSwitchContext+0x70>
    3e40:	4b24      	ldr	r3, [pc, #144]	; (3ed4 <vTaskSwitchContext+0xcc>)
    3e42:	447b      	add	r3, pc
    3e44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    3e46:	2b00      	cmp	r3, #0
    3e48:	d105      	bne.n	3e56 <vTaskSwitchContext+0x4e>
    3e4a:	e002      	b.n	3e52 <vTaskSwitchContext+0x4a>
    3e4c:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    3e4e:	2a00      	cmp	r2, #0
    3e50:	d107      	bne.n	3e62 <vTaskSwitchContext+0x5a>
    3e52:	b672      	cpsid	i
    3e54:	e7fe      	b.n	3e54 <vTaskSwitchContext+0x4c>
    3e56:	4b20      	ldr	r3, [pc, #128]	; (3ed8 <vTaskSwitchContext+0xd0>)
    3e58:	447b      	add	r3, pc
    3e5a:	4d20      	ldr	r5, [pc, #128]	; (3edc <vTaskSwitchContext+0xd4>)
    3e5c:	447d      	add	r5, pc
    3e5e:	4820      	ldr	r0, [pc, #128]	; (3ee0 <vTaskSwitchContext+0xd8>)
    3e60:	4478      	add	r0, pc
    3e62:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    3e64:	3a01      	subs	r2, #1
    3e66:	65da      	str	r2, [r3, #92]	; 0x5c
    3e68:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    3e6a:	0091      	lsls	r1, r2, #2
    3e6c:	188a      	adds	r2, r1, r2
    3e6e:	0092      	lsls	r2, r2, #2
    3e70:	18aa      	adds	r2, r5, r2
    3e72:	6b92      	ldr	r2, [r2, #56]	; 0x38
    3e74:	2a00      	cmp	r2, #0
    3e76:	d0e9      	beq.n	3e4c <vTaskSwitchContext+0x44>
    3e78:	4b1a      	ldr	r3, [pc, #104]	; (3ee4 <vTaskSwitchContext+0xdc>)
    3e7a:	447b      	add	r3, pc
    3e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    3e7e:	009a      	lsls	r2, r3, #2
    3e80:	18d3      	adds	r3, r2, r3
    3e82:	009b      	lsls	r3, r3, #2
    3e84:	4a18      	ldr	r2, [pc, #96]	; (3ee8 <vTaskSwitchContext+0xe0>)
    3e86:	447a      	add	r2, pc
    3e88:	3238      	adds	r2, #56	; 0x38
    3e8a:	18d3      	adds	r3, r2, r3
    3e8c:	685a      	ldr	r2, [r3, #4]
    3e8e:	6852      	ldr	r2, [r2, #4]
    3e90:	605a      	str	r2, [r3, #4]
    3e92:	1c19      	adds	r1, r3, #0
    3e94:	3108      	adds	r1, #8
    3e96:	428a      	cmp	r2, r1
    3e98:	d101      	bne.n	3e9e <vTaskSwitchContext+0x96>
    3e9a:	6852      	ldr	r2, [r2, #4]
    3e9c:	605a      	str	r2, [r3, #4]
    3e9e:	685b      	ldr	r3, [r3, #4]
    3ea0:	68da      	ldr	r2, [r3, #12]
    3ea2:	4b12      	ldr	r3, [pc, #72]	; (3eec <vTaskSwitchContext+0xe4>)
    3ea4:	58e3      	ldr	r3, [r4, r3]
    3ea6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();
    3ea8:	4b11      	ldr	r3, [pc, #68]	; (3ef0 <vTaskSwitchContext+0xe8>)
    3eaa:	58e3      	ldr	r3, [r4, r3]
    3eac:	4798      	blx	r3
    3eae:	4b11      	ldr	r3, [pc, #68]	; (3ef4 <vTaskSwitchContext+0xec>)
    3eb0:	58e3      	ldr	r3, [r4, r3]
    3eb2:	4798      	blx	r3
    3eb4:	4b10      	ldr	r3, [pc, #64]	; (3ef8 <vTaskSwitchContext+0xf0>)
    3eb6:	58e3      	ldr	r3, [r4, r3]
    3eb8:	4798      	blx	r3
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    3eba:	b003      	add	sp, #12
    3ebc:	bd30      	pop	{r4, r5, pc}
    3ebe:	46c0      	nop			; (mov r8, r8)
    3ec0:	00002c2a 	.word	0x00002c2a
    3ec4:	1fffd38e 	.word	0x1fffd38e
    3ec8:	1fffd382 	.word	0x1fffd382
    3ecc:	1fffd37a 	.word	0x1fffd37a
    3ed0:	1fffd2ea 	.word	0x1fffd2ea
    3ed4:	1fffd35e 	.word	0x1fffd35e
    3ed8:	1fffd348 	.word	0x1fffd348
    3edc:	1fffd2c4 	.word	0x1fffd2c4
    3ee0:	1fffd340 	.word	0x1fffd340
    3ee4:	1fffd326 	.word	0x1fffd326
    3ee8:	1fffd29a 	.word	0x1fffd29a
    3eec:	00000048 	.word	0x00000048
    3ef0:	00000004 	.word	0x00000004
    3ef4:	00000078 	.word	0x00000078
    3ef8:	00000044 	.word	0x00000044

00003efc <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
    3efc:	b570      	push	{r4, r5, r6, lr}
    3efe:	b082      	sub	sp, #8
    3f00:	1c05      	adds	r5, r0, #0
    3f02:	4c31      	ldr	r4, [pc, #196]	; (3fc8 <vTaskSuspend+0xcc>)
    3f04:	447c      	add	r4, pc
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    3f06:	4b31      	ldr	r3, [pc, #196]	; (3fcc <vTaskSuspend+0xd0>)
    3f08:	58e3      	ldr	r3, [r4, r3]
    3f0a:	4798      	blx	r3
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
    3f0c:	2d00      	cmp	r5, #0
    3f0e:	d102      	bne.n	3f16 <vTaskSuspend+0x1a>
    3f10:	4b2f      	ldr	r3, [pc, #188]	; (3fd0 <vTaskSuspend+0xd4>)
    3f12:	58e3      	ldr	r3, [r4, r3]
    3f14:	681d      	ldr	r5, [r3, #0]

			traceTASK_SUSPEND( pxTCB );
    3f16:	1c28      	adds	r0, r5, #0
    3f18:	4b2e      	ldr	r3, [pc, #184]	; (3fd4 <vTaskSuspend+0xd8>)
    3f1a:	58e6      	ldr	r6, [r4, r3]
    3f1c:	47b0      	blx	r6
    3f1e:	1c02      	adds	r2, r0, #0
    3f20:	208a      	movs	r0, #138	; 0x8a
    3f22:	2103      	movs	r1, #3
    3f24:	4b2c      	ldr	r3, [pc, #176]	; (3fd8 <vTaskSuspend+0xdc>)
    3f26:	58e3      	ldr	r3, [r4, r3]
    3f28:	4798      	blx	r3
    3f2a:	1c28      	adds	r0, r5, #0
    3f2c:	47b0      	blx	r6
    3f2e:	4b2b      	ldr	r3, [pc, #172]	; (3fdc <vTaskSuspend+0xe0>)
    3f30:	58e3      	ldr	r3, [r4, r3]
    3f32:	4798      	blx	r3

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    3f34:	1d2e      	adds	r6, r5, #4
    3f36:	1c30      	adds	r0, r6, #0
    3f38:	4b29      	ldr	r3, [pc, #164]	; (3fe0 <vTaskSuspend+0xe4>)
    3f3a:	58e3      	ldr	r3, [r4, r3]
    3f3c:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    3f3e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3f40:	2b00      	cmp	r3, #0
    3f42:	d004      	beq.n	3f4e <vTaskSuspend+0x52>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    3f44:	1c28      	adds	r0, r5, #0
    3f46:	3018      	adds	r0, #24
    3f48:	4b25      	ldr	r3, [pc, #148]	; (3fe0 <vTaskSuspend+0xe4>)
    3f4a:	58e3      	ldr	r3, [r4, r3]
    3f4c:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
    3f4e:	4825      	ldr	r0, [pc, #148]	; (3fe4 <vTaskSuspend+0xe8>)
    3f50:	4478      	add	r0, pc
    3f52:	1c31      	adds	r1, r6, #0
    3f54:	4b24      	ldr	r3, [pc, #144]	; (3fe8 <vTaskSuspend+0xec>)
    3f56:	58e3      	ldr	r3, [r4, r3]
    3f58:	4798      	blx	r3
		}
		taskEXIT_CRITICAL();
    3f5a:	4b24      	ldr	r3, [pc, #144]	; (3fec <vTaskSuspend+0xf0>)
    3f5c:	58e3      	ldr	r3, [r4, r3]
    3f5e:	4798      	blx	r3

		if( pxTCB == pxCurrentTCB )
    3f60:	4b1b      	ldr	r3, [pc, #108]	; (3fd0 <vTaskSuspend+0xd4>)
    3f62:	58e3      	ldr	r3, [r4, r3]
    3f64:	681b      	ldr	r3, [r3, #0]
    3f66:	429d      	cmp	r5, r3
    3f68:	d11e      	bne.n	3fa8 <vTaskSuspend+0xac>
		{
			if( xSchedulerRunning != pdFALSE )
    3f6a:	4b21      	ldr	r3, [pc, #132]	; (3ff0 <vTaskSuspend+0xf4>)
    3f6c:	447b      	add	r3, pc
    3f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    3f70:	2b00      	cmp	r3, #0
    3f72:	d00a      	beq.n	3f8a <vTaskSuspend+0x8e>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
    3f74:	4b1f      	ldr	r3, [pc, #124]	; (3ff4 <vTaskSuspend+0xf8>)
    3f76:	447b      	add	r3, pc
    3f78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    3f7a:	2b00      	cmp	r3, #0
    3f7c:	d001      	beq.n	3f82 <vTaskSuspend+0x86>
    3f7e:	b672      	cpsid	i
    3f80:	e7fe      	b.n	3f80 <vTaskSuspend+0x84>
				portYIELD_WITHIN_API();
    3f82:	4b1d      	ldr	r3, [pc, #116]	; (3ff8 <vTaskSuspend+0xfc>)
    3f84:	58e3      	ldr	r3, [r4, r3]
    3f86:	4798      	blx	r3
    3f88:	e01c      	b.n	3fc4 <vTaskSuspend+0xc8>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    3f8a:	4b1c      	ldr	r3, [pc, #112]	; (3ffc <vTaskSuspend+0x100>)
    3f8c:	447b      	add	r3, pc
    3f8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    3f90:	681b      	ldr	r3, [r3, #0]
    3f92:	4293      	cmp	r3, r2
    3f94:	d104      	bne.n	3fa0 <vTaskSuspend+0xa4>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    3f96:	4b0e      	ldr	r3, [pc, #56]	; (3fd0 <vTaskSuspend+0xd4>)
    3f98:	58e3      	ldr	r3, [r4, r3]
    3f9a:	2200      	movs	r2, #0
    3f9c:	601a      	str	r2, [r3, #0]
    3f9e:	e011      	b.n	3fc4 <vTaskSuspend+0xc8>
				}
				else
				{
					vTaskSwitchContext();
    3fa0:	4b17      	ldr	r3, [pc, #92]	; (4000 <vTaskSuspend+0x104>)
    3fa2:	58e3      	ldr	r3, [r4, r3]
    3fa4:	4798      	blx	r3
    3fa6:	e00d      	b.n	3fc4 <vTaskSuspend+0xc8>
				}
			}
		}
		else
		{
			if( xSchedulerRunning != pdFALSE )
    3fa8:	4b16      	ldr	r3, [pc, #88]	; (4004 <vTaskSuspend+0x108>)
    3faa:	447b      	add	r3, pc
    3fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    3fae:	2b00      	cmp	r3, #0
    3fb0:	d008      	beq.n	3fc4 <vTaskSuspend+0xc8>
			{
				/* A task other than the currently running task was suspended,
				reset the next expected unblock time in case it referred to the
				task that is now in the Suspended state. */
				taskENTER_CRITICAL();
    3fb2:	4b06      	ldr	r3, [pc, #24]	; (3fcc <vTaskSuspend+0xd0>)
    3fb4:	58e3      	ldr	r3, [r4, r3]
    3fb6:	4798      	blx	r3
				{
					prvResetNextTaskUnblockTime();
    3fb8:	4b13      	ldr	r3, [pc, #76]	; (4008 <vTaskSuspend+0x10c>)
    3fba:	447b      	add	r3, pc
    3fbc:	4798      	blx	r3
				}
				taskEXIT_CRITICAL();
    3fbe:	4b0b      	ldr	r3, [pc, #44]	; (3fec <vTaskSuspend+0xf0>)
    3fc0:	58e3      	ldr	r3, [r4, r3]
    3fc2:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
    3fc4:	b002      	add	sp, #8
    3fc6:	bd70      	pop	{r4, r5, r6, pc}
    3fc8:	00002b34 	.word	0x00002b34
    3fcc:	00000280 	.word	0x00000280
    3fd0:	00000048 	.word	0x00000048
    3fd4:	00000078 	.word	0x00000078
    3fd8:	00000224 	.word	0x00000224
    3fdc:	00000200 	.word	0x00000200
    3fe0:	0000012c 	.word	0x0000012c
    3fe4:	1fffd1d0 	.word	0x1fffd1d0
    3fe8:	00000094 	.word	0x00000094
    3fec:	00000010 	.word	0x00000010
    3ff0:	1fffd234 	.word	0x1fffd234
    3ff4:	1fffd22a 	.word	0x1fffd22a
    3ff8:	00000174 	.word	0x00000174
    3ffc:	1fffd194 	.word	0x1fffd194
    4000:	00000150 	.word	0x00000150
    4004:	1fffd1f6 	.word	0x1fffd1f6
    4008:	fffff507 	.word	0xfffff507

0000400c <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    400c:	b570      	push	{r4, r5, r6, lr}
    400e:	b082      	sub	sp, #8
    4010:	1c0d      	adds	r5, r1, #0
    4012:	4c13      	ldr	r4, [pc, #76]	; (4060 <vTaskPlaceOnEventList+0x54>)
    4014:	447c      	add	r4, pc
TickType_t xTimeToWake;

	configASSERT( pxEventList );
    4016:	2800      	cmp	r0, #0
    4018:	d101      	bne.n	401e <vTaskPlaceOnEventList+0x12>
    401a:	b672      	cpsid	i
    401c:	e7fe      	b.n	401c <vTaskPlaceOnEventList+0x10>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    401e:	4b11      	ldr	r3, [pc, #68]	; (4064 <vTaskPlaceOnEventList+0x58>)
    4020:	58e6      	ldr	r6, [r4, r3]
    4022:	6831      	ldr	r1, [r6, #0]
    4024:	3118      	adds	r1, #24
    4026:	4b10      	ldr	r3, [pc, #64]	; (4068 <vTaskPlaceOnEventList+0x5c>)
    4028:	58e3      	ldr	r3, [r4, r3]
    402a:	4798      	blx	r3

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    402c:	6830      	ldr	r0, [r6, #0]
    402e:	3004      	adds	r0, #4
    4030:	4b0e      	ldr	r3, [pc, #56]	; (406c <vTaskPlaceOnEventList+0x60>)
    4032:	58e3      	ldr	r3, [r4, r3]
    4034:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    4036:	1c6b      	adds	r3, r5, #1
    4038:	d109      	bne.n	404e <vTaskPlaceOnEventList+0x42>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    403a:	4b0a      	ldr	r3, [pc, #40]	; (4064 <vTaskPlaceOnEventList+0x58>)
    403c:	58e3      	ldr	r3, [r4, r3]
    403e:	6819      	ldr	r1, [r3, #0]
    4040:	3104      	adds	r1, #4
    4042:	480b      	ldr	r0, [pc, #44]	; (4070 <vTaskPlaceOnEventList+0x64>)
    4044:	4478      	add	r0, pc
    4046:	4b0b      	ldr	r3, [pc, #44]	; (4074 <vTaskPlaceOnEventList+0x68>)
    4048:	58e3      	ldr	r3, [r4, r3]
    404a:	4798      	blx	r3
    404c:	e006      	b.n	405c <vTaskPlaceOnEventList+0x50>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
    404e:	4b0a      	ldr	r3, [pc, #40]	; (4078 <vTaskPlaceOnEventList+0x6c>)
    4050:	447b      	add	r3, pc
    4052:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    4054:	1828      	adds	r0, r5, r0
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    4056:	4b09      	ldr	r3, [pc, #36]	; (407c <vTaskPlaceOnEventList+0x70>)
    4058:	447b      	add	r3, pc
    405a:	4798      	blx	r3
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    405c:	b002      	add	sp, #8
    405e:	bd70      	pop	{r4, r5, r6, pc}
    4060:	00002a24 	.word	0x00002a24
    4064:	00000048 	.word	0x00000048
    4068:	00000194 	.word	0x00000194
    406c:	0000012c 	.word	0x0000012c
    4070:	1fffd0dc 	.word	0x1fffd0dc
    4074:	00000094 	.word	0x00000094
    4078:	1fffd0d0 	.word	0x1fffd0d0
    407c:	fffff4a5 	.word	0xfffff4a5

00004080 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait )
	{
    4080:	b5f0      	push	{r4, r5, r6, r7, lr}
    4082:	b083      	sub	sp, #12
    4084:	1c0e      	adds	r6, r1, #0
    4086:	4c16      	ldr	r4, [pc, #88]	; (40e0 <vTaskPlaceOnEventListRestricted+0x60>)
    4088:	447c      	add	r4, pc
	TickType_t xTimeToWake;

		configASSERT( pxEventList );
    408a:	2800      	cmp	r0, #0
    408c:	d101      	bne.n	4092 <vTaskPlaceOnEventListRestricted+0x12>
    408e:	b672      	cpsid	i
    4090:	e7fe      	b.n	4090 <vTaskPlaceOnEventListRestricted+0x10>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    4092:	4b14      	ldr	r3, [pc, #80]	; (40e4 <vTaskPlaceOnEventListRestricted+0x64>)
    4094:	58e5      	ldr	r5, [r4, r3]
    4096:	6829      	ldr	r1, [r5, #0]
    4098:	3118      	adds	r1, #24
    409a:	4b13      	ldr	r3, [pc, #76]	; (40e8 <vTaskPlaceOnEventListRestricted+0x68>)
    409c:	58e3      	ldr	r3, [r4, r3]
    409e:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    40a0:	6828      	ldr	r0, [r5, #0]
    40a2:	3004      	adds	r0, #4
    40a4:	4b11      	ldr	r3, [pc, #68]	; (40ec <vTaskPlaceOnEventListRestricted+0x6c>)
    40a6:	58e3      	ldr	r3, [r4, r3]
    40a8:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
    40aa:	4b11      	ldr	r3, [pc, #68]	; (40f0 <vTaskPlaceOnEventListRestricted+0x70>)
    40ac:	447b      	add	r3, pc
    40ae:	6adf      	ldr	r7, [r3, #44]	; 0x2c
    40b0:	19f7      	adds	r7, r6, r7

		traceTASK_DELAY_UNTIL();
    40b2:	2088      	movs	r0, #136	; 0x88
    40b4:	1c39      	adds	r1, r7, #0
    40b6:	4b0f      	ldr	r3, [pc, #60]	; (40f4 <vTaskPlaceOnEventListRestricted+0x74>)
    40b8:	58e3      	ldr	r3, [r4, r3]
    40ba:	4798      	blx	r3
    40bc:	6828      	ldr	r0, [r5, #0]
    40be:	4b0e      	ldr	r3, [pc, #56]	; (40f8 <vTaskPlaceOnEventListRestricted+0x78>)
    40c0:	58e6      	ldr	r6, [r4, r3]
    40c2:	47b0      	blx	r6
    40c4:	4b0d      	ldr	r3, [pc, #52]	; (40fc <vTaskPlaceOnEventListRestricted+0x7c>)
    40c6:	58e5      	ldr	r5, [r4, r3]
    40c8:	47a8      	blx	r5
    40ca:	4b0d      	ldr	r3, [pc, #52]	; (4100 <vTaskPlaceOnEventListRestricted+0x80>)
    40cc:	58e3      	ldr	r3, [r4, r3]
    40ce:	4798      	blx	r3
    40d0:	47b0      	blx	r6
    40d2:	47a8      	blx	r5
		prvAddCurrentTaskToDelayedList( xTimeToWake );
    40d4:	1c38      	adds	r0, r7, #0
    40d6:	4b0b      	ldr	r3, [pc, #44]	; (4104 <vTaskPlaceOnEventListRestricted+0x84>)
    40d8:	447b      	add	r3, pc
    40da:	4798      	blx	r3
	}
    40dc:	b003      	add	sp, #12
    40de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    40e0:	000029b0 	.word	0x000029b0
    40e4:	00000048 	.word	0x00000048
    40e8:	00000094 	.word	0x00000094
    40ec:	0000012c 	.word	0x0000012c
    40f0:	1fffd074 	.word	0x1fffd074
    40f4:	00000018 	.word	0x00000018
    40f8:	00000078 	.word	0x00000078
    40fc:	00000200 	.word	0x00000200
    4100:	00000004 	.word	0x00000004
    4104:	fffff425 	.word	0xfffff425

00004108 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    4108:	b570      	push	{r4, r5, r6, lr}
    410a:	b082      	sub	sp, #8
    410c:	4c24      	ldr	r4, [pc, #144]	; (41a0 <xTaskRemoveFromEventList+0x98>)
    410e:	447c      	add	r4, pc
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    4110:	68c3      	ldr	r3, [r0, #12]
    4112:	68dd      	ldr	r5, [r3, #12]
	configASSERT( pxUnblockedTCB );
    4114:	2d00      	cmp	r5, #0
    4116:	d101      	bne.n	411c <xTaskRemoveFromEventList+0x14>
    4118:	b672      	cpsid	i
    411a:	e7fe      	b.n	411a <xTaskRemoveFromEventList+0x12>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    411c:	1c2e      	adds	r6, r5, #0
    411e:	3618      	adds	r6, #24
    4120:	1c30      	adds	r0, r6, #0
    4122:	4b20      	ldr	r3, [pc, #128]	; (41a4 <xTaskRemoveFromEventList+0x9c>)
    4124:	58e3      	ldr	r3, [r4, r3]
    4126:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    4128:	4b1f      	ldr	r3, [pc, #124]	; (41a8 <xTaskRemoveFromEventList+0xa0>)
    412a:	447b      	add	r3, pc
    412c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    412e:	2b00      	cmp	r3, #0
    4130:	d120      	bne.n	4174 <xTaskRemoveFromEventList+0x6c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    4132:	1d2e      	adds	r6, r5, #4
    4134:	1c30      	adds	r0, r6, #0
    4136:	4b1b      	ldr	r3, [pc, #108]	; (41a4 <xTaskRemoveFromEventList+0x9c>)
    4138:	58e3      	ldr	r3, [r4, r3]
    413a:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
    413c:	1c28      	adds	r0, r5, #0
    413e:	4b1b      	ldr	r3, [pc, #108]	; (41ac <xTaskRemoveFromEventList+0xa4>)
    4140:	58e3      	ldr	r3, [r4, r3]
    4142:	4798      	blx	r3
    4144:	4b1a      	ldr	r3, [pc, #104]	; (41b0 <xTaskRemoveFromEventList+0xa8>)
    4146:	58e3      	ldr	r3, [r4, r3]
    4148:	4798      	blx	r3
    414a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    414c:	4a19      	ldr	r2, [pc, #100]	; (41b4 <xTaskRemoveFromEventList+0xac>)
    414e:	447a      	add	r2, pc
    4150:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
    4152:	4293      	cmp	r3, r2
    4154:	d902      	bls.n	415c <xTaskRemoveFromEventList+0x54>
    4156:	4a18      	ldr	r2, [pc, #96]	; (41b8 <xTaskRemoveFromEventList+0xb0>)
    4158:	447a      	add	r2, pc
    415a:	65d3      	str	r3, [r2, #92]	; 0x5c
    415c:	009a      	lsls	r2, r3, #2
    415e:	18d3      	adds	r3, r2, r3
    4160:	009b      	lsls	r3, r3, #2
    4162:	4816      	ldr	r0, [pc, #88]	; (41bc <xTaskRemoveFromEventList+0xb4>)
    4164:	4478      	add	r0, pc
    4166:	3038      	adds	r0, #56	; 0x38
    4168:	18c0      	adds	r0, r0, r3
    416a:	1c31      	adds	r1, r6, #0
    416c:	4b14      	ldr	r3, [pc, #80]	; (41c0 <xTaskRemoveFromEventList+0xb8>)
    416e:	58e3      	ldr	r3, [r4, r3]
    4170:	4798      	blx	r3
    4172:	e006      	b.n	4182 <xTaskRemoveFromEventList+0x7a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    4174:	4813      	ldr	r0, [pc, #76]	; (41c4 <xTaskRemoveFromEventList+0xbc>)
    4176:	4478      	add	r0, pc
    4178:	3014      	adds	r0, #20
    417a:	1c31      	adds	r1, r6, #0
    417c:	4b10      	ldr	r3, [pc, #64]	; (41c0 <xTaskRemoveFromEventList+0xb8>)
    417e:	58e3      	ldr	r3, [r4, r3]
    4180:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    4182:	4b11      	ldr	r3, [pc, #68]	; (41c8 <xTaskRemoveFromEventList+0xc0>)
    4184:	58e3      	ldr	r3, [r4, r3]
    4186:	681b      	ldr	r3, [r3, #0]
    4188:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    418a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xReturn = pdFALSE;
    418c:	2000      	movs	r0, #0
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    418e:	429a      	cmp	r2, r3
    4190:	d904      	bls.n	419c <xTaskRemoveFromEventList+0x94>
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    4192:	2201      	movs	r2, #1
    4194:	4b0d      	ldr	r3, [pc, #52]	; (41cc <xTaskRemoveFromEventList+0xc4>)
    4196:	447b      	add	r3, pc
    4198:	675a      	str	r2, [r3, #116]	; 0x74
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    419a:	2001      	movs	r0, #1
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
    419c:	b002      	add	sp, #8
    419e:	bd70      	pop	{r4, r5, r6, pc}
    41a0:	0000292a 	.word	0x0000292a
    41a4:	0000012c 	.word	0x0000012c
    41a8:	1fffd076 	.word	0x1fffd076
    41ac:	00000078 	.word	0x00000078
    41b0:	000001a8 	.word	0x000001a8
    41b4:	1fffd052 	.word	0x1fffd052
    41b8:	1fffd048 	.word	0x1fffd048
    41bc:	1fffcfbc 	.word	0x1fffcfbc
    41c0:	00000094 	.word	0x00000094
    41c4:	1fffcfaa 	.word	0x1fffcfaa
    41c8:	00000048 	.word	0x00000048
    41cc:	1fffd00a 	.word	0x1fffd00a

000041d0 <vTaskSetTimeOutState>:
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	configASSERT( pxTimeOut );
    41d0:	2800      	cmp	r0, #0
    41d2:	d101      	bne.n	41d8 <vTaskSetTimeOutState+0x8>
    41d4:	b672      	cpsid	i
    41d6:	e7fe      	b.n	41d6 <vTaskSetTimeOutState+0x6>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    41d8:	4b04      	ldr	r3, [pc, #16]	; (41ec <vTaskSetTimeOutState+0x1c>)
    41da:	447b      	add	r3, pc
    41dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    41de:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    41e0:	4b03      	ldr	r3, [pc, #12]	; (41f0 <vTaskSetTimeOutState+0x20>)
    41e2:	447b      	add	r3, pc
    41e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    41e6:	6043      	str	r3, [r0, #4]
}
    41e8:	4770      	bx	lr
    41ea:	46c0      	nop			; (mov r8, r8)
    41ec:	1fffcfc6 	.word	0x1fffcfc6
    41f0:	1fffcf3e 	.word	0x1fffcf3e

000041f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    41f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    41f6:	b083      	sub	sp, #12
    41f8:	1c04      	adds	r4, r0, #0
    41fa:	1c0f      	adds	r7, r1, #0
    41fc:	4e18      	ldr	r6, [pc, #96]	; (4260 <xTaskCheckForTimeOut+0x6c>)
    41fe:	447e      	add	r6, pc
BaseType_t xReturn;

	configASSERT( pxTimeOut );
    4200:	2800      	cmp	r0, #0
    4202:	d101      	bne.n	4208 <xTaskCheckForTimeOut+0x14>
    4204:	b672      	cpsid	i
    4206:	e7fe      	b.n	4206 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
    4208:	2900      	cmp	r1, #0
    420a:	d101      	bne.n	4210 <xTaskCheckForTimeOut+0x1c>
    420c:	b672      	cpsid	i
    420e:	e7fe      	b.n	420e <xTaskCheckForTimeOut+0x1a>

	taskENTER_CRITICAL();
    4210:	4b14      	ldr	r3, [pc, #80]	; (4264 <xTaskCheckForTimeOut+0x70>)
    4212:	58f3      	ldr	r3, [r6, r3]
    4214:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    4216:	4b14      	ldr	r3, [pc, #80]	; (4268 <xTaskCheckForTimeOut+0x74>)
    4218:	447b      	add	r3, pc
    421a:	6ada      	ldr	r2, [r3, #44]	; 0x2c

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    421c:	683b      	ldr	r3, [r7, #0]
    421e:	1c58      	adds	r0, r3, #1
    4220:	d017      	beq.n	4252 <xTaskCheckForTimeOut+0x5e>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    4222:	4912      	ldr	r1, [pc, #72]	; (426c <xTaskCheckForTimeOut+0x78>)
    4224:	4479      	add	r1, pc
    4226:	6f09      	ldr	r1, [r1, #112]	; 0x70
    4228:	6820      	ldr	r0, [r4, #0]
    422a:	4288      	cmp	r0, r1
    422c:	d003      	beq.n	4236 <xTaskCheckForTimeOut+0x42>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    422e:	2501      	movs	r5, #1
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    4230:	6861      	ldr	r1, [r4, #4]
    4232:	428a      	cmp	r2, r1
    4234:	d20e      	bcs.n	4254 <xTaskCheckForTimeOut+0x60>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
    4236:	6861      	ldr	r1, [r4, #4]
    4238:	1a50      	subs	r0, r2, r1
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
    423a:	2501      	movs	r5, #1
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
    423c:	4283      	cmp	r3, r0
    423e:	d909      	bls.n	4254 <xTaskCheckForTimeOut+0x60>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
    4240:	1a8a      	subs	r2, r1, r2
    4242:	18d3      	adds	r3, r2, r3
    4244:	603b      	str	r3, [r7, #0]
			vTaskSetTimeOutState( pxTimeOut );
    4246:	1c20      	adds	r0, r4, #0
    4248:	4b09      	ldr	r3, [pc, #36]	; (4270 <xTaskCheckForTimeOut+0x7c>)
    424a:	58f3      	ldr	r3, [r6, r3]
    424c:	4798      	blx	r3
			xReturn = pdFALSE;
    424e:	2500      	movs	r5, #0
    4250:	e000      	b.n	4254 <xTaskCheckForTimeOut+0x60>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
    4252:	2500      	movs	r5, #0
		else
		{
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
    4254:	4b07      	ldr	r3, [pc, #28]	; (4274 <xTaskCheckForTimeOut+0x80>)
    4256:	58f3      	ldr	r3, [r6, r3]
    4258:	4798      	blx	r3

	return xReturn;
}
    425a:	1c28      	adds	r0, r5, #0
    425c:	b003      	add	sp, #12
    425e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4260:	0000283a 	.word	0x0000283a
    4264:	00000280 	.word	0x00000280
    4268:	1fffcf08 	.word	0x1fffcf08
    426c:	1fffcf7c 	.word	0x1fffcf7c
    4270:	0000027c 	.word	0x0000027c
    4274:	00000010 	.word	0x00000010

00004278 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
    4278:	2201      	movs	r2, #1
    427a:	4b02      	ldr	r3, [pc, #8]	; (4284 <vTaskMissedYield+0xc>)
    427c:	447b      	add	r3, pc
    427e:	675a      	str	r2, [r3, #116]	; 0x74
}
    4280:	4770      	bx	lr
    4282:	46c0      	nop			; (mov r8, r8)
    4284:	1fffcf24 	.word	0x1fffcf24

00004288 <uxTaskGetTaskNumber>:
	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
	UBaseType_t uxReturn;
	TCB_t *pxTCB;

		if( xTask != NULL )
    4288:	2800      	cmp	r0, #0
    428a:	d001      	beq.n	4290 <uxTaskGetTaskNumber+0x8>
		{
			pxTCB = ( TCB_t * ) xTask;
			uxReturn = pxTCB->uxTaskNumber;
    428c:	6c00      	ldr	r0, [r0, #64]	; 0x40
    428e:	e000      	b.n	4292 <uxTaskGetTaskNumber+0xa>
		}
		else
		{
			uxReturn = 0U;
    4290:	2000      	movs	r0, #0
		}

		return uxReturn;
	}
    4292:	4770      	bx	lr

00004294 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
    4294:	4b02      	ldr	r3, [pc, #8]	; (42a0 <xTaskGetCurrentTaskHandle+0xc>)
    4296:	447b      	add	r3, pc
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    4298:	4a02      	ldr	r2, [pc, #8]	; (42a4 <xTaskGetCurrentTaskHandle+0x10>)
    429a:	589b      	ldr	r3, [r3, r2]
    429c:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
    429e:	4770      	bx	lr
    42a0:	000027a2 	.word	0x000027a2
    42a4:	00000048 	.word	0x00000048

000042a8 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    42a8:	4b06      	ldr	r3, [pc, #24]	; (42c4 <xTaskGetSchedulerState+0x1c>)
    42aa:	447b      	add	r3, pc
    42ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    42ae:	2001      	movs	r0, #1

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    42b0:	2b00      	cmp	r3, #0
    42b2:	d005      	beq.n	42c0 <xTaskGetSchedulerState+0x18>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    42b4:	4b04      	ldr	r3, [pc, #16]	; (42c8 <xTaskGetSchedulerState+0x20>)
    42b6:	447b      	add	r3, pc
    42b8:	6e98      	ldr	r0, [r3, #104]	; 0x68
			{
				xReturn = taskSCHEDULER_RUNNING;
    42ba:	4243      	negs	r3, r0
    42bc:	4158      	adcs	r0, r3
    42be:	0040      	lsls	r0, r0, #1
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
    42c0:	4770      	bx	lr
    42c2:	46c0      	nop			; (mov r8, r8)
    42c4:	1fffcef6 	.word	0x1fffcef6
    42c8:	1fffceea 	.word	0x1fffceea

000042cc <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
    42cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    42ce:	b083      	sub	sp, #12
    42d0:	1c05      	adds	r5, r0, #0
    42d2:	4c35      	ldr	r4, [pc, #212]	; (43a8 <vTaskPriorityInherit+0xdc>)
    42d4:	447c      	add	r4, pc
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
    42d6:	2800      	cmp	r0, #0
    42d8:	d064      	beq.n	43a4 <vTaskPriorityInherit+0xd8>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    42da:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    42dc:	4a33      	ldr	r2, [pc, #204]	; (43ac <vTaskPriorityInherit+0xe0>)
    42de:	58a2      	ldr	r2, [r4, r2]
    42e0:	6812      	ldr	r2, [r2, #0]
    42e2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    42e4:	4293      	cmp	r3, r2
    42e6:	d25d      	bcs.n	43a4 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    42e8:	6982      	ldr	r2, [r0, #24]
    42ea:	2a00      	cmp	r2, #0
    42ec:	db06      	blt.n	42fc <vTaskPriorityInherit+0x30>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    42ee:	4a2f      	ldr	r2, [pc, #188]	; (43ac <vTaskPriorityInherit+0xe0>)
    42f0:	58a2      	ldr	r2, [r4, r2]
    42f2:	6812      	ldr	r2, [r2, #0]
    42f4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    42f6:	2105      	movs	r1, #5
    42f8:	1a8a      	subs	r2, r1, r2
    42fa:	6182      	str	r2, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    42fc:	009a      	lsls	r2, r3, #2
    42fe:	18d3      	adds	r3, r2, r3
    4300:	009b      	lsls	r3, r3, #2
    4302:	4a2b      	ldr	r2, [pc, #172]	; (43b0 <vTaskPriorityInherit+0xe4>)
    4304:	447a      	add	r2, pc
    4306:	3238      	adds	r2, #56	; 0x38
    4308:	18d3      	adds	r3, r2, r3
    430a:	696f      	ldr	r7, [r5, #20]
    430c:	429f      	cmp	r7, r3
    430e:	d125      	bne.n	435c <vTaskPriorityInherit+0x90>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    4310:	1d2e      	adds	r6, r5, #4
    4312:	1c30      	adds	r0, r6, #0
    4314:	4b27      	ldr	r3, [pc, #156]	; (43b4 <vTaskPriorityInherit+0xe8>)
    4316:	58e3      	ldr	r3, [r4, r3]
    4318:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    431a:	4b24      	ldr	r3, [pc, #144]	; (43ac <vTaskPriorityInherit+0xe0>)
    431c:	58e3      	ldr	r3, [r4, r3]
    431e:	681b      	ldr	r3, [r3, #0]
    4320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4322:	62eb      	str	r3, [r5, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
    4324:	1c28      	adds	r0, r5, #0
    4326:	4b24      	ldr	r3, [pc, #144]	; (43b8 <vTaskPriorityInherit+0xec>)
    4328:	58e3      	ldr	r3, [r4, r3]
    432a:	4798      	blx	r3
    432c:	4b23      	ldr	r3, [pc, #140]	; (43bc <vTaskPriorityInherit+0xf0>)
    432e:	58e3      	ldr	r3, [r4, r3]
    4330:	4798      	blx	r3
    4332:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    4334:	4a22      	ldr	r2, [pc, #136]	; (43c0 <vTaskPriorityInherit+0xf4>)
    4336:	447a      	add	r2, pc
    4338:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
    433a:	4293      	cmp	r3, r2
    433c:	d902      	bls.n	4344 <vTaskPriorityInherit+0x78>
    433e:	4a21      	ldr	r2, [pc, #132]	; (43c4 <vTaskPriorityInherit+0xf8>)
    4340:	447a      	add	r2, pc
    4342:	65d3      	str	r3, [r2, #92]	; 0x5c
    4344:	0098      	lsls	r0, r3, #2
    4346:	18c3      	adds	r3, r0, r3
    4348:	009b      	lsls	r3, r3, #2
    434a:	481f      	ldr	r0, [pc, #124]	; (43c8 <vTaskPriorityInherit+0xfc>)
    434c:	4478      	add	r0, pc
    434e:	3038      	adds	r0, #56	; 0x38
    4350:	18c0      	adds	r0, r0, r3
    4352:	1c31      	adds	r1, r6, #0
    4354:	4b1d      	ldr	r3, [pc, #116]	; (43cc <vTaskPriorityInherit+0x100>)
    4356:	58e3      	ldr	r3, [r4, r3]
    4358:	4798      	blx	r3
    435a:	e004      	b.n	4366 <vTaskPriorityInherit+0x9a>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    435c:	4b13      	ldr	r3, [pc, #76]	; (43ac <vTaskPriorityInherit+0xe0>)
    435e:	58e3      	ldr	r3, [r4, r3]
    4360:	681b      	ldr	r3, [r3, #0]
    4362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4364:	62eb      	str	r3, [r5, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
    4366:	1c28      	adds	r0, r5, #0
    4368:	4b13      	ldr	r3, [pc, #76]	; (43b8 <vTaskPriorityInherit+0xec>)
    436a:	58e6      	ldr	r6, [r4, r3]
    436c:	47b0      	blx	r6
    436e:	1c07      	adds	r7, r0, #0
    4370:	1c28      	adds	r0, r5, #0
    4372:	47b0      	blx	r6
    4374:	1c01      	adds	r1, r0, #0
    4376:	2003      	movs	r0, #3
    4378:	4b15      	ldr	r3, [pc, #84]	; (43d0 <vTaskPriorityInherit+0x104>)
    437a:	58e3      	ldr	r3, [r4, r3]
    437c:	4798      	blx	r3
    437e:	1c03      	adds	r3, r0, #0
    4380:	208e      	movs	r0, #142	; 0x8e
    4382:	2103      	movs	r1, #3
    4384:	1c3a      	adds	r2, r7, #0
    4386:	4f13      	ldr	r7, [pc, #76]	; (43d4 <vTaskPriorityInherit+0x108>)
    4388:	59e7      	ldr	r7, [r4, r7]
    438a:	47b8      	blx	r7
    438c:	1c28      	adds	r0, r5, #0
    438e:	47b0      	blx	r6
    4390:	1c01      	adds	r1, r0, #0
    4392:	4b06      	ldr	r3, [pc, #24]	; (43ac <vTaskPriorityInherit+0xe0>)
    4394:	58e3      	ldr	r3, [r4, r3]
    4396:	681b      	ldr	r3, [r3, #0]
    4398:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    439a:	b2d2      	uxtb	r2, r2
    439c:	2003      	movs	r0, #3
    439e:	4b0e      	ldr	r3, [pc, #56]	; (43d8 <vTaskPriorityInherit+0x10c>)
    43a0:	58e3      	ldr	r3, [r4, r3]
    43a2:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    43a4:	b003      	add	sp, #12
    43a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    43a8:	00002764 	.word	0x00002764
    43ac:	00000048 	.word	0x00000048
    43b0:	1fffce1c 	.word	0x1fffce1c
    43b4:	0000012c 	.word	0x0000012c
    43b8:	00000078 	.word	0x00000078
    43bc:	000001a8 	.word	0x000001a8
    43c0:	1fffce6a 	.word	0x1fffce6a
    43c4:	1fffce60 	.word	0x1fffce60
    43c8:	1fffcdd4 	.word	0x1fffcdd4
    43cc:	00000094 	.word	0x00000094
    43d0:	000000c8 	.word	0x000000c8
    43d4:	000001c8 	.word	0x000001c8
    43d8:	00000240 	.word	0x00000240

000043dc <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    43dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    43de:	b083      	sub	sp, #12
    43e0:	1c04      	adds	r4, r0, #0
    43e2:	4d28      	ldr	r5, [pc, #160]	; (4484 <vTaskPriorityDisinherit+0xa8>)
    43e4:	447d      	add	r5, pc
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
    43e6:	2800      	cmp	r0, #0
    43e8:	d04a      	beq.n	4480 <vTaskPriorityDisinherit+0xa4>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    43ea:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    43ec:	6c43      	ldr	r3, [r0, #68]	; 0x44
    43ee:	429a      	cmp	r2, r3
    43f0:	d046      	beq.n	4480 <vTaskPriorityDisinherit+0xa4>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    43f2:	1d07      	adds	r7, r0, #4
    43f4:	1c38      	adds	r0, r7, #0
    43f6:	4b24      	ldr	r3, [pc, #144]	; (4488 <vTaskPriorityDisinherit+0xac>)
    43f8:	58eb      	ldr	r3, [r5, r3]
    43fa:	4798      	blx	r3
					mtCOVERAGE_TEST_MARKER();
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
    43fc:	1c20      	adds	r0, r4, #0
    43fe:	4b23      	ldr	r3, [pc, #140]	; (448c <vTaskPriorityDisinherit+0xb0>)
    4400:	58eb      	ldr	r3, [r5, r3]
    4402:	9300      	str	r3, [sp, #0]
    4404:	4798      	blx	r3
    4406:	1c06      	adds	r6, r0, #0
    4408:	1c20      	adds	r0, r4, #0
    440a:	9a00      	ldr	r2, [sp, #0]
    440c:	4790      	blx	r2
    440e:	1c01      	adds	r1, r0, #0
    4410:	2003      	movs	r0, #3
    4412:	4b1f      	ldr	r3, [pc, #124]	; (4490 <vTaskPriorityDisinherit+0xb4>)
    4414:	58eb      	ldr	r3, [r5, r3]
    4416:	4798      	blx	r3
    4418:	1c03      	adds	r3, r0, #0
    441a:	208f      	movs	r0, #143	; 0x8f
    441c:	2103      	movs	r1, #3
    441e:	1c32      	adds	r2, r6, #0
    4420:	4e1c      	ldr	r6, [pc, #112]	; (4494 <vTaskPriorityDisinherit+0xb8>)
    4422:	59ae      	ldr	r6, [r5, r6]
    4424:	47b0      	blx	r6
    4426:	1c20      	adds	r0, r4, #0
    4428:	9e00      	ldr	r6, [sp, #0]
    442a:	47b0      	blx	r6
    442c:	1c01      	adds	r1, r0, #0
    442e:	6c63      	ldr	r3, [r4, #68]	; 0x44
    4430:	b2da      	uxtb	r2, r3
    4432:	2003      	movs	r0, #3
    4434:	4b18      	ldr	r3, [pc, #96]	; (4498 <vTaskPriorityDisinherit+0xbc>)
    4436:	58eb      	ldr	r3, [r5, r3]
    4438:	4798      	blx	r3
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    443a:	6c63      	ldr	r3, [r4, #68]	; 0x44
    443c:	62e3      	str	r3, [r4, #44]	; 0x2c

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    443e:	69a6      	ldr	r6, [r4, #24]
    4440:	2e00      	cmp	r6, #0
    4442:	db02      	blt.n	444a <vTaskPriorityDisinherit+0x6e>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    4444:	2205      	movs	r2, #5
    4446:	1ad3      	subs	r3, r2, r3
    4448:	61a3      	str	r3, [r4, #24]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddTaskToReadyList( pxTCB );
    444a:	1c20      	adds	r0, r4, #0
    444c:	4b0f      	ldr	r3, [pc, #60]	; (448c <vTaskPriorityDisinherit+0xb0>)
    444e:	58eb      	ldr	r3, [r5, r3]
    4450:	4798      	blx	r3
    4452:	4b12      	ldr	r3, [pc, #72]	; (449c <vTaskPriorityDisinherit+0xc0>)
    4454:	58eb      	ldr	r3, [r5, r3]
    4456:	4798      	blx	r3
    4458:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    445a:	4a11      	ldr	r2, [pc, #68]	; (44a0 <vTaskPriorityDisinherit+0xc4>)
    445c:	447a      	add	r2, pc
    445e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
    4460:	4293      	cmp	r3, r2
    4462:	d902      	bls.n	446a <vTaskPriorityDisinherit+0x8e>
    4464:	4a0f      	ldr	r2, [pc, #60]	; (44a4 <vTaskPriorityDisinherit+0xc8>)
    4466:	447a      	add	r2, pc
    4468:	65d3      	str	r3, [r2, #92]	; 0x5c
    446a:	0098      	lsls	r0, r3, #2
    446c:	18c3      	adds	r3, r0, r3
    446e:	009b      	lsls	r3, r3, #2
    4470:	480d      	ldr	r0, [pc, #52]	; (44a8 <vTaskPriorityDisinherit+0xcc>)
    4472:	4478      	add	r0, pc
    4474:	3038      	adds	r0, #56	; 0x38
    4476:	18c0      	adds	r0, r0, r3
    4478:	1c39      	adds	r1, r7, #0
    447a:	4b0c      	ldr	r3, [pc, #48]	; (44ac <vTaskPriorityDisinherit+0xd0>)
    447c:	58eb      	ldr	r3, [r5, r3]
    447e:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    4480:	b003      	add	sp, #12
    4482:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4484:	00002654 	.word	0x00002654
    4488:	0000012c 	.word	0x0000012c
    448c:	00000078 	.word	0x00000078
    4490:	000000c8 	.word	0x000000c8
    4494:	000001c8 	.word	0x000001c8
    4498:	00000240 	.word	0x00000240
    449c:	000001a8 	.word	0x000001a8
    44a0:	1fffcd44 	.word	0x1fffcd44
    44a4:	1fffcd3a 	.word	0x1fffcd3a
    44a8:	1fffccae 	.word	0x1fffccae
    44ac:	00000094 	.word	0x00000094

000044b0 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    44b0:	b530      	push	{r4, r5, lr}
    44b2:	b083      	sub	sp, #12
    44b4:	1c04      	adds	r4, r0, #0
    44b6:	4d11      	ldr	r5, [pc, #68]	; (44fc <prvInsertTimerInActiveList+0x4c>)
    44b8:	447d      	add	r5, pc
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    44ba:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    44bc:	6120      	str	r0, [r4, #16]

	if( xNextExpiryTime <= xTimeNow )
    44be:	4291      	cmp	r1, r2
    44c0:	d80d      	bhi.n	44de <prvInsertTimerInActiveList+0x2e>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
    44c2:	1ad2      	subs	r2, r2, r3
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    44c4:	2001      	movs	r0, #1

	if( xNextExpiryTime <= xTimeNow )
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
    44c6:	69a3      	ldr	r3, [r4, #24]
    44c8:	429a      	cmp	r2, r3
    44ca:	d215      	bcs.n	44f8 <prvInsertTimerInActiveList+0x48>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    44cc:	4b0c      	ldr	r3, [pc, #48]	; (4500 <prvInsertTimerInActiveList+0x50>)
    44ce:	447b      	add	r3, pc
    44d0:	6818      	ldr	r0, [r3, #0]
    44d2:	1d21      	adds	r1, r4, #4
    44d4:	4b0b      	ldr	r3, [pc, #44]	; (4504 <prvInsertTimerInActiveList+0x54>)
    44d6:	58eb      	ldr	r3, [r5, r3]
    44d8:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
    44da:	2000      	movs	r0, #0
    44dc:	e00c      	b.n	44f8 <prvInsertTimerInActiveList+0x48>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    44de:	429a      	cmp	r2, r3
    44e0:	d202      	bcs.n	44e8 <prvInsertTimerInActiveList+0x38>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    44e2:	2001      	movs	r0, #1
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    44e4:	4299      	cmp	r1, r3
    44e6:	d207      	bcs.n	44f8 <prvInsertTimerInActiveList+0x48>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    44e8:	4b07      	ldr	r3, [pc, #28]	; (4508 <prvInsertTimerInActiveList+0x58>)
    44ea:	447b      	add	r3, pc
    44ec:	6858      	ldr	r0, [r3, #4]
    44ee:	1d21      	adds	r1, r4, #4
    44f0:	4b04      	ldr	r3, [pc, #16]	; (4504 <prvInsertTimerInActiveList+0x54>)
    44f2:	58eb      	ldr	r3, [r5, r3]
    44f4:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
    44f6:	2000      	movs	r0, #0
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
    44f8:	b003      	add	sp, #12
    44fa:	bd30      	pop	{r4, r5, pc}
    44fc:	00002580 	.word	0x00002580
    4500:	1fffcd4e 	.word	0x1fffcd4e
    4504:	00000194 	.word	0x00000194
    4508:	1fffcd32 	.word	0x1fffcd32

0000450c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    450c:	b5f0      	push	{r4, r5, r6, r7, lr}
    450e:	b083      	sub	sp, #12
    4510:	4c16      	ldr	r4, [pc, #88]	; (456c <prvCheckForValidListAndQueue+0x60>)
    4512:	447c      	add	r4, pc
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    4514:	4b16      	ldr	r3, [pc, #88]	; (4570 <prvCheckForValidListAndQueue+0x64>)
    4516:	58e3      	ldr	r3, [r4, r3]
    4518:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
    451a:	4b16      	ldr	r3, [pc, #88]	; (4574 <prvCheckForValidListAndQueue+0x68>)
    451c:	447b      	add	r3, pc
    451e:	689b      	ldr	r3, [r3, #8]
    4520:	2b00      	cmp	r3, #0
    4522:	d11d      	bne.n	4560 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
    4524:	4d14      	ldr	r5, [pc, #80]	; (4578 <prvCheckForValidListAndQueue+0x6c>)
    4526:	447d      	add	r5, pc
    4528:	1c2e      	adds	r6, r5, #0
    452a:	360c      	adds	r6, #12
    452c:	1c30      	adds	r0, r6, #0
    452e:	4b13      	ldr	r3, [pc, #76]	; (457c <prvCheckForValidListAndQueue+0x70>)
    4530:	58e3      	ldr	r3, [r4, r3]
    4532:	9301      	str	r3, [sp, #4]
    4534:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
    4536:	1c2f      	adds	r7, r5, #0
    4538:	3720      	adds	r7, #32
    453a:	1c38      	adds	r0, r7, #0
    453c:	9b01      	ldr	r3, [sp, #4]
    453e:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
    4540:	606e      	str	r6, [r5, #4]
			pxOverflowTimerList = &xActiveTimerList2;
    4542:	602f      	str	r7, [r5, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    4544:	2002      	movs	r0, #2
    4546:	210c      	movs	r1, #12
    4548:	2200      	movs	r2, #0
    454a:	4b0d      	ldr	r3, [pc, #52]	; (4580 <prvCheckForValidListAndQueue+0x74>)
    454c:	58e3      	ldr	r3, [r4, r3]
    454e:	4798      	blx	r3
			configASSERT( xTimerQueue );
    4550:	2800      	cmp	r0, #0
    4552:	d003      	beq.n	455c <prvCheckForValidListAndQueue+0x50>
		{
			vListInitialise( &xActiveTimerList1 );
			vListInitialise( &xActiveTimerList2 );
			pxCurrentTimerList = &xActiveTimerList1;
			pxOverflowTimerList = &xActiveTimerList2;
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    4554:	4b0b      	ldr	r3, [pc, #44]	; (4584 <prvCheckForValidListAndQueue+0x78>)
    4556:	447b      	add	r3, pc
    4558:	6098      	str	r0, [r3, #8]
    455a:	e001      	b.n	4560 <prvCheckForValidListAndQueue+0x54>
			configASSERT( xTimerQueue );
    455c:	b672      	cpsid	i
    455e:	e7fe      	b.n	455e <prvCheckForValidListAndQueue+0x52>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    4560:	4b09      	ldr	r3, [pc, #36]	; (4588 <prvCheckForValidListAndQueue+0x7c>)
    4562:	58e3      	ldr	r3, [r4, r3]
    4564:	4798      	blx	r3
}
    4566:	b003      	add	sp, #12
    4568:	bdf0      	pop	{r4, r5, r6, r7, pc}
    456a:	46c0      	nop			; (mov r8, r8)
    456c:	00002526 	.word	0x00002526
    4570:	00000280 	.word	0x00000280
    4574:	1fffcd00 	.word	0x1fffcd00
    4578:	1fffccf6 	.word	0x1fffccf6
    457c:	000000e4 	.word	0x000000e4
    4580:	000001b4 	.word	0x000001b4
    4584:	1fffccc6 	.word	0x1fffccc6
    4588:	00000010 	.word	0x00000010

0000458c <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
    458c:	b530      	push	{r4, r5, lr}
    458e:	b087      	sub	sp, #28
    4590:	4c10      	ldr	r4, [pc, #64]	; (45d4 <xTimerCreateTimerTask+0x48>)
    4592:	447c      	add	r4, pc

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
    4594:	4b10      	ldr	r3, [pc, #64]	; (45d8 <xTimerCreateTimerTask+0x4c>)
    4596:	447b      	add	r3, pc
    4598:	4798      	blx	r3

	if( xTimerQueue != NULL )
    459a:	4b10      	ldr	r3, [pc, #64]	; (45dc <xTimerCreateTimerTask+0x50>)
    459c:	447b      	add	r3, pc
    459e:	689b      	ldr	r3, [r3, #8]
    45a0:	2b00      	cmp	r3, #0
    45a2:	d013      	beq.n	45cc <xTimerCreateTimerTask+0x40>
	{
		#if ( INCLUDE_xTimerGetTimerDaemonTaskHandle == 1 )
		{
			/* Create the timer task, storing its handle in xTimerTaskHandle so
			it can be returned by the xTimerGetTimerDaemonTaskHandle() function. */
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
    45a4:	2302      	movs	r3, #2
    45a6:	9300      	str	r3, [sp, #0]
    45a8:	4b0d      	ldr	r3, [pc, #52]	; (45e0 <xTimerCreateTimerTask+0x54>)
    45aa:	447b      	add	r3, pc
    45ac:	3334      	adds	r3, #52	; 0x34
    45ae:	9301      	str	r3, [sp, #4]
    45b0:	2300      	movs	r3, #0
    45b2:	9302      	str	r3, [sp, #8]
    45b4:	9303      	str	r3, [sp, #12]
    45b6:	480b      	ldr	r0, [pc, #44]	; (45e4 <xTimerCreateTimerTask+0x58>)
    45b8:	4478      	add	r0, pc
    45ba:	490b      	ldr	r1, [pc, #44]	; (45e8 <xTimerCreateTimerTask+0x5c>)
    45bc:	4479      	add	r1, pc
    45be:	2250      	movs	r2, #80	; 0x50
    45c0:	4d0a      	ldr	r5, [pc, #40]	; (45ec <xTimerCreateTimerTask+0x60>)
    45c2:	5965      	ldr	r5, [r4, r5]
    45c4:	9505      	str	r5, [sp, #20]
    45c6:	47a8      	blx	r5
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
    45c8:	2800      	cmp	r0, #0
    45ca:	d101      	bne.n	45d0 <xTimerCreateTimerTask+0x44>
    45cc:	b672      	cpsid	i
    45ce:	e7fe      	b.n	45ce <xTimerCreateTimerTask+0x42>
	return xReturn;
}
    45d0:	b007      	add	sp, #28
    45d2:	bd30      	pop	{r4, r5, pc}
    45d4:	000024a6 	.word	0x000024a6
    45d8:	ffffff73 	.word	0xffffff73
    45dc:	1fffcc80 	.word	0x1fffcc80
    45e0:	1fffcc72 	.word	0x1fffcc72
    45e4:	000002f1 	.word	0x000002f1
    45e8:	00002448 	.word	0x00002448
    45ec:	00000068 	.word	0x00000068

000045f0 <xTimerCreate>:
/*-----------------------------------------------------------*/

TimerHandle_t xTimerCreate( const char * const pcTimerName, const TickType_t xTimerPeriodInTicks, const UBaseType_t uxAutoReload, void * const pvTimerID, TimerCallbackFunction_t pxCallbackFunction ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    45f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    45f2:	464f      	mov	r7, r9
    45f4:	4646      	mov	r6, r8
    45f6:	b4c0      	push	{r6, r7}
    45f8:	b083      	sub	sp, #12
    45fa:	4681      	mov	r9, r0
    45fc:	1c0e      	adds	r6, r1, #0
    45fe:	4690      	mov	r8, r2
    4600:	1c1f      	adds	r7, r3, #0
    4602:	4d20      	ldr	r5, [pc, #128]	; (4684 <xTimerCreate+0x94>)
    4604:	447d      	add	r5, pc
Timer_t *pxNewTimer;

	/* Allocate the timer structure. */
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
    4606:	2900      	cmp	r1, #0
    4608:	d033      	beq.n	4672 <xTimerCreate+0x82>
	{
		pxNewTimer = NULL;
	}
	else
	{
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
    460a:	202c      	movs	r0, #44	; 0x2c
    460c:	4b1e      	ldr	r3, [pc, #120]	; (4688 <xTimerCreate+0x98>)
    460e:	58eb      	ldr	r3, [r5, r3]
    4610:	4798      	blx	r3
    4612:	1e04      	subs	r4, r0, #0
		if( pxNewTimer != NULL )
    4614:	d022      	beq.n	465c <xTimerCreate+0x6c>
		{
			/* Ensure the infrastructure used by the timer service task has been
			created/initialised. */
			prvCheckForValidListAndQueue();
    4616:	4b1d      	ldr	r3, [pc, #116]	; (468c <xTimerCreate+0x9c>)
    4618:	447b      	add	r3, pc
    461a:	4798      	blx	r3

			/* Initialise the timer structure members using the function parameters. */
			pxNewTimer->pcTimerName = pcTimerName;
    461c:	464b      	mov	r3, r9
    461e:	6023      	str	r3, [r4, #0]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
    4620:	61a6      	str	r6, [r4, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
    4622:	4643      	mov	r3, r8
    4624:	61e3      	str	r3, [r4, #28]
			pxNewTimer->pvTimerID = pvTimerID;
    4626:	6227      	str	r7, [r4, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
    4628:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    462a:	6263      	str	r3, [r4, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
    462c:	1d20      	adds	r0, r4, #4
    462e:	4b18      	ldr	r3, [pc, #96]	; (4690 <xTimerCreate+0xa0>)
    4630:	58eb      	ldr	r3, [r5, r3]
    4632:	4798      	blx	r3

			traceTIMER_CREATE( pxNewTimer );
    4634:	2005      	movs	r0, #5
    4636:	4b17      	ldr	r3, [pc, #92]	; (4694 <xTimerCreate+0xa4>)
    4638:	58eb      	ldr	r3, [r5, r3]
    463a:	4798      	blx	r3
    463c:	1c01      	adds	r1, r0, #0
    463e:	62a0      	str	r0, [r4, #40]	; 0x28
    4640:	2005      	movs	r0, #5
    4642:	6822      	ldr	r2, [r4, #0]
    4644:	4b14      	ldr	r3, [pc, #80]	; (4698 <xTimerCreate+0xa8>)
    4646:	58eb      	ldr	r3, [r5, r3]
    4648:	4798      	blx	r3
    464a:	22ff      	movs	r2, #255	; 0xff
    464c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    464e:	401a      	ands	r2, r3
    4650:	20b0      	movs	r0, #176	; 0xb0
    4652:	2105      	movs	r1, #5
    4654:	4b11      	ldr	r3, [pc, #68]	; (469c <xTimerCreate+0xac>)
    4656:	58eb      	ldr	r3, [r5, r3]
    4658:	4798      	blx	r3
    465a:	e00c      	b.n	4676 <xTimerCreate+0x86>
		}
		else
		{
			traceTIMER_CREATE_FAILED();
    465c:	2300      	movs	r3, #0
    465e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4660:	23ff      	movs	r3, #255	; 0xff
    4662:	401a      	ands	r2, r3
    4664:	20b9      	movs	r0, #185	; 0xb9
    4666:	2105      	movs	r1, #5
    4668:	4b0c      	ldr	r3, [pc, #48]	; (469c <xTimerCreate+0xac>)
    466a:	58eb      	ldr	r3, [r5, r3]
    466c:	4798      	blx	r3
    466e:	e002      	b.n	4676 <xTimerCreate+0x86>
    4670:	e7fe      	b.n	4670 <xTimerCreate+0x80>
		}
	}

	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
    4672:	b672      	cpsid	i
    4674:	e7fc      	b.n	4670 <xTimerCreate+0x80>

	return ( TimerHandle_t ) pxNewTimer;
}
    4676:	1c20      	adds	r0, r4, #0
    4678:	b003      	add	sp, #12
    467a:	bc0c      	pop	{r2, r3}
    467c:	4690      	mov	r8, r2
    467e:	4699      	mov	r9, r3
    4680:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4682:	46c0      	nop			; (mov r8, r8)
    4684:	00002434 	.word	0x00002434
    4688:	000000d0 	.word	0x000000d0
    468c:	fffffef1 	.word	0xfffffef1
    4690:	000000a8 	.word	0x000000a8
    4694:	00000288 	.word	0x00000288
    4698:	00000130 	.word	0x00000130
    469c:	00000224 	.word	0x00000224

000046a0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    46a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    46a2:	4647      	mov	r7, r8
    46a4:	b480      	push	{r7}
    46a6:	b086      	sub	sp, #24
    46a8:	1c07      	adds	r7, r0, #0
    46aa:	1c0c      	adds	r4, r1, #0
    46ac:	4690      	mov	r8, r2
    46ae:	4d39      	ldr	r5, [pc, #228]	; (4794 <xTimerGenericCommand+0xf4>)
    46b0:	447d      	add	r5, pc
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
    46b2:	4939      	ldr	r1, [pc, #228]	; (4798 <xTimerGenericCommand+0xf8>)
    46b4:	4479      	add	r1, pc
    46b6:	6888      	ldr	r0, [r1, #8]
    46b8:	2800      	cmp	r0, #0
    46ba:	d065      	beq.n	4788 <xTimerGenericCommand+0xe8>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
    46bc:	9403      	str	r4, [sp, #12]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    46be:	9204      	str	r2, [sp, #16]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    46c0:	9705      	str	r7, [sp, #20]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    46c2:	2c05      	cmp	r4, #5
    46c4:	dc1a      	bgt.n	46fc <xTimerGenericCommand+0x5c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    46c6:	4b35      	ldr	r3, [pc, #212]	; (479c <xTimerGenericCommand+0xfc>)
    46c8:	58eb      	ldr	r3, [r5, r3]
    46ca:	4798      	blx	r3
    46cc:	2802      	cmp	r0, #2
    46ce:	d10a      	bne.n	46e6 <xTimerGenericCommand+0x46>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    46d0:	4b33      	ldr	r3, [pc, #204]	; (47a0 <xTimerGenericCommand+0x100>)
    46d2:	447b      	add	r3, pc
    46d4:	6898      	ldr	r0, [r3, #8]
    46d6:	a903      	add	r1, sp, #12
    46d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    46da:	2300      	movs	r3, #0
    46dc:	4e31      	ldr	r6, [pc, #196]	; (47a4 <xTimerGenericCommand+0x104>)
    46de:	59ae      	ldr	r6, [r5, r6]
    46e0:	47b0      	blx	r6
    46e2:	1c06      	adds	r6, r0, #0
    46e4:	e011      	b.n	470a <xTimerGenericCommand+0x6a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    46e6:	4b30      	ldr	r3, [pc, #192]	; (47a8 <xTimerGenericCommand+0x108>)
    46e8:	447b      	add	r3, pc
    46ea:	6898      	ldr	r0, [r3, #8]
    46ec:	a903      	add	r1, sp, #12
    46ee:	2200      	movs	r2, #0
    46f0:	2300      	movs	r3, #0
    46f2:	4e2c      	ldr	r6, [pc, #176]	; (47a4 <xTimerGenericCommand+0x104>)
    46f4:	59ae      	ldr	r6, [r5, r6]
    46f6:	47b0      	blx	r6
    46f8:	1c06      	adds	r6, r0, #0
    46fa:	e006      	b.n	470a <xTimerGenericCommand+0x6a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    46fc:	a903      	add	r1, sp, #12
    46fe:	1c1a      	adds	r2, r3, #0
    4700:	2300      	movs	r3, #0
    4702:	4e2a      	ldr	r6, [pc, #168]	; (47ac <xTimerGenericCommand+0x10c>)
    4704:	59ae      	ldr	r6, [r5, r6]
    4706:	47b0      	blx	r6
    4708:	1c06      	adds	r6, r0, #0
		}

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
    470a:	2c00      	cmp	r4, #0
    470c:	dd3d      	ble.n	478a <xTimerGenericCommand+0xea>
    470e:	2c04      	cmp	r4, #4
    4710:	d10c      	bne.n	472c <xTimerGenericCommand+0x8c>
    4712:	20bd      	movs	r0, #189	; 0xbd
    4714:	2e01      	cmp	r6, #1
    4716:	d100      	bne.n	471a <xTimerGenericCommand+0x7a>
    4718:	20b4      	movs	r0, #180	; 0xb4
    471a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    471c:	23ff      	movs	r3, #255	; 0xff
    471e:	401a      	ands	r2, r3
    4720:	2105      	movs	r1, #5
    4722:	4643      	mov	r3, r8
    4724:	4c22      	ldr	r4, [pc, #136]	; (47b0 <xTimerGenericCommand+0x110>)
    4726:	592c      	ldr	r4, [r5, r4]
    4728:	47a0      	blx	r4
    472a:	e02e      	b.n	478a <xTimerGenericCommand+0xea>
    472c:	2c05      	cmp	r4, #5
    472e:	d11d      	bne.n	476c <xTimerGenericCommand+0xcc>
    4730:	24b5      	movs	r4, #181	; 0xb5
    4732:	2e01      	cmp	r6, #1
    4734:	d11e      	bne.n	4774 <xTimerGenericCommand+0xd4>
    4736:	22ff      	movs	r2, #255	; 0xff
    4738:	6abb      	ldr	r3, [r7, #40]	; 0x28
    473a:	401a      	ands	r2, r3
    473c:	20b5      	movs	r0, #181	; 0xb5
    473e:	2105      	movs	r1, #5
    4740:	4b1c      	ldr	r3, [pc, #112]	; (47b4 <xTimerGenericCommand+0x114>)
    4742:	58eb      	ldr	r3, [r5, r3]
    4744:	4798      	blx	r3
    4746:	6abc      	ldr	r4, [r7, #40]	; 0x28
    4748:	b2e0      	uxtb	r0, r4
    474a:	2105      	movs	r1, #5
    474c:	4b1a      	ldr	r3, [pc, #104]	; (47b8 <xTimerGenericCommand+0x118>)
    474e:	58eb      	ldr	r3, [r5, r3]
    4750:	4798      	blx	r3
    4752:	6aba      	ldr	r2, [r7, #40]	; 0x28
    4754:	b2d0      	uxtb	r0, r2
    4756:	2105      	movs	r1, #5
    4758:	4b18      	ldr	r3, [pc, #96]	; (47bc <xTimerGenericCommand+0x11c>)
    475a:	58eb      	ldr	r3, [r5, r3]
    475c:	4798      	blx	r3
    475e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    4760:	b2c9      	uxtb	r1, r1
    4762:	2005      	movs	r0, #5
    4764:	4b16      	ldr	r3, [pc, #88]	; (47c0 <xTimerGenericCommand+0x120>)
    4766:	58eb      	ldr	r3, [r5, r3]
    4768:	4798      	blx	r3
    476a:	e00e      	b.n	478a <xTimerGenericCommand+0xea>
    476c:	34b0      	adds	r4, #176	; 0xb0
    476e:	2300      	movs	r3, #0
    4770:	2e01      	cmp	r6, #1
    4772:	d000      	beq.n	4776 <xTimerGenericCommand+0xd6>
    4774:	2309      	movs	r3, #9
    4776:	18e0      	adds	r0, r4, r3
    4778:	6aba      	ldr	r2, [r7, #40]	; 0x28
    477a:	23ff      	movs	r3, #255	; 0xff
    477c:	401a      	ands	r2, r3
    477e:	2105      	movs	r1, #5
    4780:	4b0c      	ldr	r3, [pc, #48]	; (47b4 <xTimerGenericCommand+0x114>)
    4782:	58eb      	ldr	r3, [r5, r3]
    4784:	4798      	blx	r3
    4786:	e000      	b.n	478a <xTimerGenericCommand+0xea>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    4788:	2600      	movs	r6, #0
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
    478a:	1c30      	adds	r0, r6, #0
    478c:	b006      	add	sp, #24
    478e:	bc04      	pop	{r2}
    4790:	4690      	mov	r8, r2
    4792:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4794:	00002388 	.word	0x00002388
    4798:	1fffcb68 	.word	0x1fffcb68
    479c:	0000024c 	.word	0x0000024c
    47a0:	1fffcb4a 	.word	0x1fffcb4a
    47a4:	000000f4 	.word	0x000000f4
    47a8:	1fffcb34 	.word	0x1fffcb34
    47ac:	00000030 	.word	0x00000030
    47b0:	000001c8 	.word	0x000001c8
    47b4:	00000224 	.word	0x00000224
    47b8:	00000074 	.word	0x00000074
    47bc:	00000084 	.word	0x00000084
    47c0:	00000098 	.word	0x00000098

000047c4 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    47c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    47c6:	465f      	mov	r7, fp
    47c8:	4656      	mov	r6, sl
    47ca:	464d      	mov	r5, r9
    47cc:	4644      	mov	r4, r8
    47ce:	b4f0      	push	{r4, r5, r6, r7}
    47d0:	b085      	sub	sp, #20
    47d2:	4682      	mov	sl, r0
    47d4:	4e2b      	ldr	r6, [pc, #172]	; (4884 <prvSampleTimeNow+0xc0>)
    47d6:	447e      	add	r6, pc
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
    47d8:	4b2b      	ldr	r3, [pc, #172]	; (4888 <prvSampleTimeNow+0xc4>)
    47da:	58f3      	ldr	r3, [r6, r3]
    47dc:	4798      	blx	r3
    47de:	4681      	mov	r9, r0

	if( xTimeNow < xLastTime )
    47e0:	4b2a      	ldr	r3, [pc, #168]	; (488c <prvSampleTimeNow+0xc8>)
    47e2:	447b      	add	r3, pc
    47e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    47e6:	4298      	cmp	r0, r3
    47e8:	d23d      	bcs.n	4866 <prvSampleTimeNow+0xa2>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    47ea:	4929      	ldr	r1, [pc, #164]	; (4890 <prvSampleTimeNow+0xcc>)
    47ec:	4479      	add	r1, pc
    47ee:	4688      	mov	r8, r1
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    47f0:	2200      	movs	r2, #0
    47f2:	4693      	mov	fp, r2
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
			if( xReloadTime > xNextExpireTime )
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    47f4:	4c27      	ldr	r4, [pc, #156]	; (4894 <prvSampleTimeNow+0xd0>)
    47f6:	447c      	add	r4, pc
    47f8:	9403      	str	r4, [sp, #12]
    47fa:	e026      	b.n	484a <prvSampleTimeNow+0x86>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    47fc:	68db      	ldr	r3, [r3, #12]
    47fe:	681f      	ldr	r7, [r3, #0]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    4800:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    4802:	1d25      	adds	r5, r4, #4
    4804:	1c28      	adds	r0, r5, #0
    4806:	4b24      	ldr	r3, [pc, #144]	; (4898 <prvSampleTimeNow+0xd4>)
    4808:	58f3      	ldr	r3, [r6, r3]
    480a:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    480c:	1c20      	adds	r0, r4, #0
    480e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    4810:	4788      	blx	r1

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    4812:	69e2      	ldr	r2, [r4, #28]
    4814:	2a01      	cmp	r2, #1
    4816:	d118      	bne.n	484a <prvSampleTimeNow+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    4818:	69a1      	ldr	r1, [r4, #24]
    481a:	187b      	adds	r3, r7, r1
			if( xReloadTime > xNextExpireTime )
    481c:	42bb      	cmp	r3, r7
    481e:	d908      	bls.n	4832 <prvSampleTimeNow+0x6e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    4820:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    4822:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    4824:	9c03      	ldr	r4, [sp, #12]
    4826:	6860      	ldr	r0, [r4, #4]
    4828:	1c29      	adds	r1, r5, #0
    482a:	4b1c      	ldr	r3, [pc, #112]	; (489c <prvSampleTimeNow+0xd8>)
    482c:	58f3      	ldr	r3, [r6, r3]
    482e:	4798      	blx	r3
    4830:	e00b      	b.n	484a <prvSampleTimeNow+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    4832:	4659      	mov	r1, fp
    4834:	9100      	str	r1, [sp, #0]
    4836:	1c20      	adds	r0, r4, #0
    4838:	1c3a      	adds	r2, r7, #0
    483a:	465b      	mov	r3, fp
    483c:	4c18      	ldr	r4, [pc, #96]	; (48a0 <prvSampleTimeNow+0xdc>)
    483e:	5934      	ldr	r4, [r6, r4]
    4840:	47a0      	blx	r4
				configASSERT( xResult );
    4842:	2800      	cmp	r0, #0
    4844:	d101      	bne.n	484a <prvSampleTimeNow+0x86>
    4846:	b672      	cpsid	i
    4848:	e7fe      	b.n	4848 <prvSampleTimeNow+0x84>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    484a:	4642      	mov	r2, r8
    484c:	6853      	ldr	r3, [r2, #4]
    484e:	681c      	ldr	r4, [r3, #0]
    4850:	2c00      	cmp	r4, #0
    4852:	d1d3      	bne.n	47fc <prvSampleTimeNow+0x38>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
    4854:	4a13      	ldr	r2, [pc, #76]	; (48a4 <prvSampleTimeNow+0xe0>)
    4856:	447a      	add	r2, pc
    4858:	6811      	ldr	r1, [r2, #0]
    485a:	6051      	str	r1, [r2, #4]
	pxOverflowTimerList = pxTemp;
    485c:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists();
		*pxTimerListsWereSwitched = pdTRUE;
    485e:	2301      	movs	r3, #1
    4860:	4652      	mov	r2, sl
    4862:	6013      	str	r3, [r2, #0]
    4864:	e002      	b.n	486c <prvSampleTimeNow+0xa8>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
    4866:	2300      	movs	r3, #0
    4868:	4654      	mov	r4, sl
    486a:	6023      	str	r3, [r4, #0]
	}

	xLastTime = xTimeNow;
    486c:	4b0e      	ldr	r3, [pc, #56]	; (48a8 <prvSampleTimeNow+0xe4>)
    486e:	447b      	add	r3, pc
    4870:	4649      	mov	r1, r9
    4872:	6399      	str	r1, [r3, #56]	; 0x38

	return xTimeNow;
}
    4874:	4648      	mov	r0, r9
    4876:	b005      	add	sp, #20
    4878:	bc3c      	pop	{r2, r3, r4, r5}
    487a:	4690      	mov	r8, r2
    487c:	4699      	mov	r9, r3
    487e:	46a2      	mov	sl, r4
    4880:	46ab      	mov	fp, r5
    4882:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4884:	00002262 	.word	0x00002262
    4888:	000000f0 	.word	0x000000f0
    488c:	1fffca3a 	.word	0x1fffca3a
    4890:	1fffca30 	.word	0x1fffca30
    4894:	1fffca26 	.word	0x1fffca26
    4898:	0000012c 	.word	0x0000012c
    489c:	00000194 	.word	0x00000194
    48a0:	00000168 	.word	0x00000168
    48a4:	1fffc9c6 	.word	0x1fffc9c6
    48a8:	1fffc9ae 	.word	0x1fffc9ae

000048ac <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    48ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    48ae:	465f      	mov	r7, fp
    48b0:	4656      	mov	r6, sl
    48b2:	464d      	mov	r5, r9
    48b4:	4644      	mov	r4, r8
    48b6:	b4f0      	push	{r4, r5, r6, r7}
    48b8:	b089      	sub	sp, #36	; 0x24
    48ba:	4869      	ldr	r0, [pc, #420]	; (4a60 <prvTimerTask+0x1b4>)
    48bc:	4478      	add	r0, pc
    48be:	4683      	mov	fp, r0
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    48c0:	4968      	ldr	r1, [pc, #416]	; (4a64 <prvTimerTask+0x1b8>)
    48c2:	4479      	add	r1, pc
    48c4:	4689      	mov	r9, r1
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    48c6:	ac05      	add	r4, sp, #20
    48c8:	4a67      	ldr	r2, [pc, #412]	; (4a68 <prvTimerTask+0x1bc>)
    48ca:	447a      	add	r2, pc
    48cc:	4692      	mov	sl, r2
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    48ce:	464d      	mov	r5, r9
    48d0:	686b      	ldr	r3, [r5, #4]
	if( *pxListWasEmpty == pdFALSE )
    48d2:	681e      	ldr	r6, [r3, #0]
    48d4:	2e00      	cmp	r6, #0
    48d6:	d100      	bne.n	48da <prvTimerTask+0x2e>
    48d8:	e0b5      	b.n	4a46 <prvTimerTask+0x19a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    48da:	68db      	ldr	r3, [r3, #12]
    48dc:	681d      	ldr	r5, [r3, #0]
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    48de:	4b63      	ldr	r3, [pc, #396]	; (4a6c <prvTimerTask+0x1c0>)
    48e0:	465f      	mov	r7, fp
    48e2:	58fb      	ldr	r3, [r7, r3]
    48e4:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    48e6:	1c20      	adds	r0, r4, #0
    48e8:	4b61      	ldr	r3, [pc, #388]	; (4a70 <prvTimerTask+0x1c4>)
    48ea:	447b      	add	r3, pc
    48ec:	4798      	blx	r3
    48ee:	1c06      	adds	r6, r0, #0
		if( xTimerListsWereSwitched == pdFALSE )
    48f0:	9805      	ldr	r0, [sp, #20]
    48f2:	2800      	cmp	r0, #0
    48f4:	d140      	bne.n	4978 <prvTimerTask+0xcc>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    48f6:	42b5      	cmp	r5, r6
    48f8:	d82d      	bhi.n	4956 <prvTimerTask+0xaa>
			{
				( void ) xTaskResumeAll();
    48fa:	4b5e      	ldr	r3, [pc, #376]	; (4a74 <prvTimerTask+0x1c8>)
    48fc:	58fb      	ldr	r3, [r7, r3]
    48fe:	4798      	blx	r3
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    4900:	4b5d      	ldr	r3, [pc, #372]	; (4a78 <prvTimerTask+0x1cc>)
    4902:	447b      	add	r3, pc
    4904:	685b      	ldr	r3, [r3, #4]
    4906:	68db      	ldr	r3, [r3, #12]
    4908:	68d9      	ldr	r1, [r3, #12]
    490a:	4688      	mov	r8, r1

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    490c:	1c08      	adds	r0, r1, #0
    490e:	3004      	adds	r0, #4
    4910:	4b5a      	ldr	r3, [pc, #360]	; (4a7c <prvTimerTask+0x1d0>)
    4912:	58fb      	ldr	r3, [r7, r3]
    4914:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    4916:	4642      	mov	r2, r8
    4918:	69d2      	ldr	r2, [r2, #28]
    491a:	2a01      	cmp	r2, #1
    491c:	d116      	bne.n	494c <prvTimerTask+0xa0>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
    491e:	4643      	mov	r3, r8
    4920:	699b      	ldr	r3, [r3, #24]
    4922:	18e9      	adds	r1, r5, r3
    4924:	4640      	mov	r0, r8
    4926:	1c32      	adds	r2, r6, #0
    4928:	1c2b      	adds	r3, r5, #0
    492a:	4e55      	ldr	r6, [pc, #340]	; (4a80 <prvTimerTask+0x1d4>)
    492c:	447e      	add	r6, pc
    492e:	47b0      	blx	r6
    4930:	2801      	cmp	r0, #1
    4932:	d10b      	bne.n	494c <prvTimerTask+0xa0>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    4934:	2300      	movs	r3, #0
    4936:	9300      	str	r3, [sp, #0]
    4938:	4640      	mov	r0, r8
    493a:	2100      	movs	r1, #0
    493c:	1c2a      	adds	r2, r5, #0
    493e:	4d51      	ldr	r5, [pc, #324]	; (4a84 <prvTimerTask+0x1d8>)
    4940:	597d      	ldr	r5, [r7, r5]
    4942:	47a8      	blx	r5
			configASSERT( xResult );
    4944:	2800      	cmp	r0, #0
    4946:	d101      	bne.n	494c <prvTimerTask+0xa0>
    4948:	b672      	cpsid	i
    494a:	e7fe      	b.n	494a <prvTimerTask+0x9e>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    494c:	4645      	mov	r5, r8
    494e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    4950:	4640      	mov	r0, r8
    4952:	4798      	blx	r3
    4954:	e014      	b.n	4980 <prvTimerTask+0xd4>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
    4956:	4b4c      	ldr	r3, [pc, #304]	; (4a88 <prvTimerTask+0x1dc>)
    4958:	447b      	add	r3, pc
    495a:	6898      	ldr	r0, [r3, #8]
    495c:	1ba9      	subs	r1, r5, r6
    495e:	4b4b      	ldr	r3, [pc, #300]	; (4a8c <prvTimerTask+0x1e0>)
    4960:	465e      	mov	r6, fp
    4962:	58f3      	ldr	r3, [r6, r3]
    4964:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
    4966:	4b43      	ldr	r3, [pc, #268]	; (4a74 <prvTimerTask+0x1c8>)
    4968:	58f3      	ldr	r3, [r6, r3]
    496a:	4798      	blx	r3
    496c:	2800      	cmp	r0, #0
    496e:	d107      	bne.n	4980 <prvTimerTask+0xd4>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
    4970:	4b47      	ldr	r3, [pc, #284]	; (4a90 <prvTimerTask+0x1e4>)
    4972:	58f3      	ldr	r3, [r6, r3]
    4974:	4798      	blx	r3
    4976:	e003      	b.n	4980 <prvTimerTask+0xd4>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
    4978:	4b3e      	ldr	r3, [pc, #248]	; (4a74 <prvTimerTask+0x1c8>)
    497a:	465f      	mov	r7, fp
    497c:	58fb      	ldr	r3, [r7, r3]
    497e:	4798      	blx	r3
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    4980:	4e44      	ldr	r6, [pc, #272]	; (4a94 <prvTimerTask+0x1e8>)
    4982:	447e      	add	r6, pc
    4984:	4b44      	ldr	r3, [pc, #272]	; (4a98 <prvTimerTask+0x1ec>)
    4986:	4658      	mov	r0, fp
    4988:	58c5      	ldr	r5, [r0, r3]
    498a:	e054      	b.n	4a36 <prvTimerTask+0x18a>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    498c:	6821      	ldr	r1, [r4, #0]
    498e:	2900      	cmp	r1, #0
    4990:	db51      	blt.n	4a36 <prvTimerTask+0x18a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    4992:	68a2      	ldr	r2, [r4, #8]
    4994:	4690      	mov	r8, r2

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
    4996:	6953      	ldr	r3, [r2, #20]
    4998:	2b00      	cmp	r3, #0
    499a:	d005      	beq.n	49a8 <prvTimerTask+0xfc>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    499c:	1c10      	adds	r0, r2, #0
    499e:	3004      	adds	r0, #4
    49a0:	4b36      	ldr	r3, [pc, #216]	; (4a7c <prvTimerTask+0x1d0>)
    49a2:	465f      	mov	r7, fp
    49a4:	58fb      	ldr	r3, [r7, r3]
    49a6:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    49a8:	a804      	add	r0, sp, #16
    49aa:	4b3c      	ldr	r3, [pc, #240]	; (4a9c <prvTimerTask+0x1f0>)
    49ac:	447b      	add	r3, pc
    49ae:	4798      	blx	r3
    49b0:	1c03      	adds	r3, r0, #0

			switch( xMessage.xMessageID )
    49b2:	6820      	ldr	r0, [r4, #0]
    49b4:	2809      	cmp	r0, #9
    49b6:	d83e      	bhi.n	4a36 <prvTimerTask+0x18a>
    49b8:	f000 fdf2 	bl	55a0 <__gnu_thumb1_case_uqi>
    49bc:	3d050505 	.word	0x3d050505
    49c0:	0505382a 	.word	0x0505382a
    49c4:	2a3d      	.short	0x2a3d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
    49c6:	6867      	ldr	r7, [r4, #4]
    49c8:	4640      	mov	r0, r8
    49ca:	6980      	ldr	r0, [r0, #24]
    49cc:	1839      	adds	r1, r7, r0
    49ce:	4640      	mov	r0, r8
    49d0:	1c1a      	adds	r2, r3, #0
    49d2:	1c3b      	adds	r3, r7, #0
    49d4:	4f32      	ldr	r7, [pc, #200]	; (4aa0 <prvTimerTask+0x1f4>)
    49d6:	447f      	add	r7, pc
    49d8:	47b8      	blx	r7
    49da:	2801      	cmp	r0, #1
    49dc:	d12b      	bne.n	4a36 <prvTimerTask+0x18a>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    49de:	4640      	mov	r0, r8
    49e0:	6a41      	ldr	r1, [r0, #36]	; 0x24
    49e2:	4788      	blx	r1
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    49e4:	4642      	mov	r2, r8
    49e6:	69d2      	ldr	r2, [r2, #28]
    49e8:	2a01      	cmp	r2, #1
    49ea:	d124      	bne.n	4a36 <prvTimerTask+0x18a>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    49ec:	4643      	mov	r3, r8
    49ee:	699b      	ldr	r3, [r3, #24]
    49f0:	6867      	ldr	r7, [r4, #4]
    49f2:	19da      	adds	r2, r3, r7
    49f4:	2300      	movs	r3, #0
    49f6:	9300      	str	r3, [sp, #0]
    49f8:	4640      	mov	r0, r8
    49fa:	2100      	movs	r1, #0
    49fc:	4f21      	ldr	r7, [pc, #132]	; (4a84 <prvTimerTask+0x1d8>)
    49fe:	46bc      	mov	ip, r7
    4a00:	465f      	mov	r7, fp
    4a02:	4467      	add	r7, ip
    4a04:	683f      	ldr	r7, [r7, #0]
    4a06:	47b8      	blx	r7
							configASSERT( xResult );
    4a08:	2800      	cmp	r0, #0
    4a0a:	d114      	bne.n	4a36 <prvTimerTask+0x18a>
    4a0c:	b672      	cpsid	i
    4a0e:	e7fe      	b.n	4a0e <prvTimerTask+0x162>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    4a10:	6861      	ldr	r1, [r4, #4]
    4a12:	4640      	mov	r0, r8
    4a14:	6181      	str	r1, [r0, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    4a16:	2900      	cmp	r1, #0
    4a18:	d101      	bne.n	4a1e <prvTimerTask+0x172>
    4a1a:	b672      	cpsid	i
    4a1c:	e7fe      	b.n	4a1c <prvTimerTask+0x170>
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    4a1e:	1859      	adds	r1, r3, r1
    4a20:	4640      	mov	r0, r8
    4a22:	1c1a      	adds	r2, r3, #0
    4a24:	4f1f      	ldr	r7, [pc, #124]	; (4aa4 <prvTimerTask+0x1f8>)
    4a26:	447f      	add	r7, pc
    4a28:	47b8      	blx	r7
    4a2a:	e004      	b.n	4a36 <prvTimerTask+0x18a>
					break;

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
    4a2c:	4640      	mov	r0, r8
    4a2e:	4b1e      	ldr	r3, [pc, #120]	; (4aa8 <prvTimerTask+0x1fc>)
    4a30:	4659      	mov	r1, fp
    4a32:	58cb      	ldr	r3, [r1, r3]
    4a34:	4798      	blx	r3
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    4a36:	68b0      	ldr	r0, [r6, #8]
    4a38:	1c21      	adds	r1, r4, #0
    4a3a:	2200      	movs	r2, #0
    4a3c:	2300      	movs	r3, #0
    4a3e:	47a8      	blx	r5
    4a40:	2800      	cmp	r0, #0
    4a42:	d1a3      	bne.n	498c <prvTimerTask+0xe0>
    4a44:	e743      	b.n	48ce <prvTimerTask+0x22>
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    4a46:	4b09      	ldr	r3, [pc, #36]	; (4a6c <prvTimerTask+0x1c0>)
    4a48:	465a      	mov	r2, fp
    4a4a:	58d3      	ldr	r3, [r2, r3]
    4a4c:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    4a4e:	1c20      	adds	r0, r4, #0
    4a50:	47d0      	blx	sl
    4a52:	1c06      	adds	r6, r0, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
    4a54:	2500      	movs	r5, #0
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
		if( xTimerListsWereSwitched == pdFALSE )
    4a56:	9b05      	ldr	r3, [sp, #20]
    4a58:	42ab      	cmp	r3, r5
    4a5a:	d100      	bne.n	4a5e <prvTimerTask+0x1b2>
    4a5c:	e77b      	b.n	4956 <prvTimerTask+0xaa>
    4a5e:	e78b      	b.n	4978 <prvTimerTask+0xcc>
    4a60:	0000217c 	.word	0x0000217c
    4a64:	1fffc95a 	.word	0x1fffc95a
    4a68:	fffffef7 	.word	0xfffffef7
    4a6c:	00000124 	.word	0x00000124
    4a70:	fffffed7 	.word	0xfffffed7
    4a74:	000001d4 	.word	0x000001d4
    4a78:	1fffc91a 	.word	0x1fffc91a
    4a7c:	0000012c 	.word	0x0000012c
    4a80:	fffffb81 	.word	0xfffffb81
    4a84:	00000168 	.word	0x00000168
    4a88:	1fffc8c4 	.word	0x1fffc8c4
    4a8c:	0000001c 	.word	0x0000001c
    4a90:	00000174 	.word	0x00000174
    4a94:	1fffc89a 	.word	0x1fffc89a
    4a98:	00000214 	.word	0x00000214
    4a9c:	fffffe15 	.word	0xfffffe15
    4aa0:	fffffad7 	.word	0xfffffad7
    4aa4:	fffffa87 	.word	0xfffffa87
    4aa8:	00000080 	.word	0x00000080

00004aac <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    4aac:	e7fe      	b.n	4aac <Dummy_Handler>
    4aae:	46c0      	nop			; (mov r8, r8)

00004ab0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    4ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
    4ab2:	b083      	sub	sp, #12
    4ab4:	4c3b      	ldr	r4, [pc, #236]	; (4ba4 <Reset_Handler+0xf4>)
    4ab6:	447c      	add	r4, pc

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    4ab8:	4b3b      	ldr	r3, [pc, #236]	; (4ba8 <Reset_Handler+0xf8>)
    4aba:	58e3      	ldr	r3, [r4, r3]
    4abc:	9300      	str	r3, [sp, #0]
    4abe:	4b3b      	ldr	r3, [pc, #236]	; (4bac <Reset_Handler+0xfc>)
    4ac0:	58e3      	ldr	r3, [r4, r3]
    4ac2:	9800      	ldr	r0, [sp, #0]
    4ac4:	4298      	cmp	r0, r3
    4ac6:	d007      	beq.n	4ad8 <Reset_Handler+0x28>
                for (; pDest < &_erelocate;) {
    4ac8:	4b38      	ldr	r3, [pc, #224]	; (4bac <Reset_Handler+0xfc>)
    4aca:	58e3      	ldr	r3, [r4, r3]
    4acc:	9300      	str	r3, [sp, #0]
    4ace:	4b38      	ldr	r3, [pc, #224]	; (4bb0 <Reset_Handler+0x100>)
    4ad0:	58e3      	ldr	r3, [r4, r3]
    4ad2:	9a00      	ldr	r2, [sp, #0]
    4ad4:	429a      	cmp	r2, r3
    4ad6:	d308      	bcc.n	4aea <Reset_Handler+0x3a>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    4ad8:	4b36      	ldr	r3, [pc, #216]	; (4bb4 <Reset_Handler+0x104>)
    4ada:	58e3      	ldr	r3, [r4, r3]
    4adc:	9300      	str	r3, [sp, #0]
    4ade:	4b36      	ldr	r3, [pc, #216]	; (4bb8 <Reset_Handler+0x108>)
    4ae0:	58e3      	ldr	r3, [r4, r3]
    4ae2:	9d00      	ldr	r5, [sp, #0]
    4ae4:	429d      	cmp	r5, r3
    4ae6:	d318      	bcc.n	4b1a <Reset_Handler+0x6a>
    4ae8:	e026      	b.n	4b38 <Reset_Handler+0x88>
    4aea:	4b31      	ldr	r3, [pc, #196]	; (4bb0 <Reset_Handler+0x100>)
    4aec:	58e3      	ldr	r3, [r4, r3]
    4aee:	9300      	str	r3, [sp, #0]
    4af0:	4b2e      	ldr	r3, [pc, #184]	; (4bac <Reset_Handler+0xfc>)
    4af2:	58e3      	ldr	r3, [r4, r3]
    4af4:	43d9      	mvns	r1, r3
    4af6:	9800      	ldr	r0, [sp, #0]
    4af8:	1809      	adds	r1, r1, r0
    4afa:	0889      	lsrs	r1, r1, #2
    4afc:	3101      	adds	r1, #1
    4afe:	0089      	lsls	r1, r1, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    4b00:	2300      	movs	r3, #0
                        *pDest++ = *pSrc++;
    4b02:	4a2a      	ldr	r2, [pc, #168]	; (4bac <Reset_Handler+0xfc>)
    4b04:	58a2      	ldr	r2, [r4, r2]
    4b06:	9201      	str	r2, [sp, #4]
    4b08:	4a27      	ldr	r2, [pc, #156]	; (4ba8 <Reset_Handler+0xf8>)
    4b0a:	58a2      	ldr	r2, [r4, r2]
    4b0c:	58d0      	ldr	r0, [r2, r3]
    4b0e:	9d01      	ldr	r5, [sp, #4]
    4b10:	50e8      	str	r0, [r5, r3]
    4b12:	3304      	adds	r3, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    4b14:	428b      	cmp	r3, r1
    4b16:	d1f9      	bne.n	4b0c <Reset_Handler+0x5c>
    4b18:	e7de      	b.n	4ad8 <Reset_Handler+0x28>
    4b1a:	4b26      	ldr	r3, [pc, #152]	; (4bb4 <Reset_Handler+0x104>)
    4b1c:	58e3      	ldr	r3, [r4, r3]
    4b1e:	1d1a      	adds	r2, r3, #4
    4b20:	4925      	ldr	r1, [pc, #148]	; (4bb8 <Reset_Handler+0x108>)
    4b22:	5861      	ldr	r1, [r4, r1]
    4b24:	9100      	str	r1, [sp, #0]
    4b26:	3103      	adds	r1, #3
    4b28:	1a89      	subs	r1, r1, r2
    4b2a:	0889      	lsrs	r1, r1, #2
    4b2c:	0089      	lsls	r1, r1, #2
    4b2e:	1852      	adds	r2, r2, r1
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
                *pDest++ = 0;
    4b30:	2100      	movs	r1, #0
    4b32:	c302      	stmia	r3!, {r1}
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    4b34:	4293      	cmp	r3, r2
    4b36:	d1fc      	bne.n	4b32 <Reset_Handler+0x82>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    4b38:	4b20      	ldr	r3, [pc, #128]	; (4bbc <Reset_Handler+0x10c>)
    4b3a:	58e3      	ldr	r3, [r4, r3]
    4b3c:	9300      	str	r3, [sp, #0]
    4b3e:	23ff      	movs	r3, #255	; 0xff
    4b40:	9a00      	ldr	r2, [sp, #0]
    4b42:	439a      	bics	r2, r3
    4b44:	4b1e      	ldr	r3, [pc, #120]	; (4bc0 <Reset_Handler+0x110>)
    4b46:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    4b48:	2102      	movs	r1, #2
    4b4a:	2390      	movs	r3, #144	; 0x90
    4b4c:	005b      	lsls	r3, r3, #1
    4b4e:	4a1d      	ldr	r2, [pc, #116]	; (4bc4 <Reset_Handler+0x114>)
    4b50:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    4b52:	4b1d      	ldr	r3, [pc, #116]	; (4bc8 <Reset_Handler+0x118>)
    4b54:	78d8      	ldrb	r0, [r3, #3]
    4b56:	2103      	movs	r1, #3
    4b58:	4388      	bics	r0, r1
    4b5a:	2202      	movs	r2, #2
    4b5c:	4310      	orrs	r0, r2
    4b5e:	70d8      	strb	r0, [r3, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    4b60:	78de      	ldrb	r6, [r3, #3]
    4b62:	250c      	movs	r5, #12
    4b64:	43ae      	bics	r6, r5
    4b66:	2008      	movs	r0, #8
    4b68:	4306      	orrs	r6, r0
    4b6a:	70de      	strb	r6, [r3, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    4b6c:	4b17      	ldr	r3, [pc, #92]	; (4bcc <Reset_Handler+0x11c>)
    4b6e:	7b9f      	ldrb	r7, [r3, #14]
    4b70:	2630      	movs	r6, #48	; 0x30
    4b72:	43b7      	bics	r7, r6
    4b74:	2620      	movs	r6, #32
    4b76:	433e      	orrs	r6, r7
    4b78:	739e      	strb	r6, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    4b7a:	7b9e      	ldrb	r6, [r3, #14]
    4b7c:	43ae      	bics	r6, r5
    4b7e:	4330      	orrs	r0, r6
    4b80:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    4b82:	7b98      	ldrb	r0, [r3, #14]
    4b84:	4388      	bics	r0, r1
    4b86:	4302      	orrs	r2, r0
    4b88:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    4b8a:	4b11      	ldr	r3, [pc, #68]	; (4bd0 <Reset_Handler+0x120>)
    4b8c:	6859      	ldr	r1, [r3, #4]
    4b8e:	2280      	movs	r2, #128	; 0x80
    4b90:	430a      	orrs	r2, r1
    4b92:	605a      	str	r2, [r3, #4]

        /* Initialize the C library */
        __libc_init_array();
    4b94:	4b0f      	ldr	r3, [pc, #60]	; (4bd4 <Reset_Handler+0x124>)
    4b96:	58e3      	ldr	r3, [r4, r3]
    4b98:	4798      	blx	r3

        /* Branch to main function */
        main();
    4b9a:	4b0f      	ldr	r3, [pc, #60]	; (4bd8 <Reset_Handler+0x128>)
    4b9c:	58e3      	ldr	r3, [r4, r3]
    4b9e:	4798      	blx	r3
    4ba0:	e7fe      	b.n	4ba0 <Reset_Handler+0xf0>
    4ba2:	46c0      	nop			; (mov r8, r8)
    4ba4:	00001f82 	.word	0x00001f82
    4ba8:	00000050 	.word	0x00000050
    4bac:	0000006c 	.word	0x0000006c
    4bb0:	0000022c 	.word	0x0000022c
    4bb4:	00000054 	.word	0x00000054
    4bb8:	000001a4 	.word	0x000001a4
    4bbc:	0000003c 	.word	0x0000003c
    4bc0:	e000ed00 	.word	0xe000ed00
    4bc4:	41007000 	.word	0x41007000
    4bc8:	41005000 	.word	0x41005000
    4bcc:	41004800 	.word	0x41004800
    4bd0:	41004000 	.word	0x41004000
    4bd4:	000000c4 	.word	0x000000c4
    4bd8:	0000018c 	.word	0x0000018c

00004bdc <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    4bdc:	b500      	push	{lr}
    4bde:	b083      	sub	sp, #12
    4be0:	4b23      	ldr	r3, [pc, #140]	; (4c70 <system_clock_source_get_hz+0x94>)
    4be2:	447b      	add	r3, pc
	switch (clock_source) {
    4be4:	2808      	cmp	r0, #8
    4be6:	d83e      	bhi.n	4c66 <system_clock_source_get_hz+0x8a>
    4be8:	f000 fcda 	bl	55a0 <__gnu_thumb1_case_uqi>
    4bec:	053d3d08 	.word	0x053d3d08
    4bf0:	180c1405 	.word	0x180c1405
    4bf4:	33          	.byte	0x33
    4bf5:	00          	.byte	0x00

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    4bf6:	2080      	movs	r0, #128	; 0x80
    4bf8:	0200      	lsls	r0, r0, #8
    4bfa:	e037      	b.n	4c6c <system_clock_source_get_hz+0x90>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    4bfc:	4b1d      	ldr	r3, [pc, #116]	; (4c74 <system_clock_source_get_hz+0x98>)
    4bfe:	447b      	add	r3, pc
    4c00:	6918      	ldr	r0, [r3, #16]
    4c02:	e033      	b.n	4c6c <system_clock_source_get_hz+0x90>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    4c04:	4b1c      	ldr	r3, [pc, #112]	; (4c78 <system_clock_source_get_hz+0x9c>)
    4c06:	6a18      	ldr	r0, [r3, #32]
    4c08:	0580      	lsls	r0, r0, #22
    4c0a:	0f80      	lsrs	r0, r0, #30
    4c0c:	4b1b      	ldr	r3, [pc, #108]	; (4c7c <system_clock_source_get_hz+0xa0>)
    4c0e:	40c3      	lsrs	r3, r0
    4c10:	1c18      	adds	r0, r3, #0
    4c12:	e02b      	b.n	4c6c <system_clock_source_get_hz+0x90>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    4c14:	4b1a      	ldr	r3, [pc, #104]	; (4c80 <system_clock_source_get_hz+0xa4>)
    4c16:	447b      	add	r3, pc
    4c18:	6958      	ldr	r0, [r3, #20]
    4c1a:	e027      	b.n	4c6c <system_clock_source_get_hz+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    4c1c:	4a19      	ldr	r2, [pc, #100]	; (4c84 <system_clock_source_get_hz+0xa8>)
    4c1e:	447a      	add	r2, pc
    4c20:	6812      	ldr	r2, [r2, #0]
    4c22:	2002      	movs	r0, #2
    4c24:	4010      	ands	r0, r2
    4c26:	d021      	beq.n	4c6c <system_clock_source_get_hz+0x90>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    4c28:	4813      	ldr	r0, [pc, #76]	; (4c78 <system_clock_source_get_hz+0x9c>)
    4c2a:	2110      	movs	r1, #16
    4c2c:	68c2      	ldr	r2, [r0, #12]
    4c2e:	4211      	tst	r1, r2
    4c30:	d0fc      	beq.n	4c2c <system_clock_source_get_hz+0x50>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    4c32:	4a15      	ldr	r2, [pc, #84]	; (4c88 <system_clock_source_get_hz+0xac>)
    4c34:	447a      	add	r2, pc
    4c36:	6812      	ldr	r2, [r2, #0]
    4c38:	0751      	lsls	r1, r2, #29
    4c3a:	d516      	bpl.n	4c6a <system_clock_source_get_hz+0x8e>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    4c3c:	2000      	movs	r0, #0
    4c3e:	4a13      	ldr	r2, [pc, #76]	; (4c8c <system_clock_source_get_hz+0xb0>)
    4c40:	589a      	ldr	r2, [r3, r2]
    4c42:	4790      	blx	r2
					(_system_clock_inst.dfll.mul & 0xffff);
    4c44:	4b12      	ldr	r3, [pc, #72]	; (4c90 <system_clock_source_get_hz+0xb4>)
    4c46:	447b      	add	r3, pc
    4c48:	689b      	ldr	r3, [r3, #8]
    4c4a:	041b      	lsls	r3, r3, #16
    4c4c:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    4c4e:	4358      	muls	r0, r3
    4c50:	e00c      	b.n	4c6c <system_clock_source_get_hz+0x90>

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    4c52:	2350      	movs	r3, #80	; 0x50
    4c54:	4a08      	ldr	r2, [pc, #32]	; (4c78 <system_clock_source_get_hz+0x9c>)
    4c56:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    4c58:	2000      	movs	r0, #0

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    4c5a:	075a      	lsls	r2, r3, #29
    4c5c:	d506      	bpl.n	4c6c <system_clock_source_get_hz+0x90>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    4c5e:	4b0d      	ldr	r3, [pc, #52]	; (4c94 <system_clock_source_get_hz+0xb8>)
    4c60:	447b      	add	r3, pc
    4c62:	68d8      	ldr	r0, [r3, #12]
    4c64:	e002      	b.n	4c6c <system_clock_source_get_hz+0x90>
#endif

	default:
		return 0;
    4c66:	2000      	movs	r0, #0
    4c68:	e000      	b.n	4c6c <system_clock_source_get_hz+0x90>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    4c6a:	480b      	ldr	r0, [pc, #44]	; (4c98 <system_clock_source_get_hz+0xbc>)
#endif

	default:
		return 0;
	}
}
    4c6c:	b003      	add	sp, #12
    4c6e:	bd00      	pop	{pc}
    4c70:	00001e56 	.word	0x00001e56
    4c74:	1fffc65a 	.word	0x1fffc65a
    4c78:	40000800 	.word	0x40000800
    4c7c:	007a1200 	.word	0x007a1200
    4c80:	1fffc642 	.word	0x1fffc642
    4c84:	1fffc63a 	.word	0x1fffc63a
    4c88:	1fffc624 	.word	0x1fffc624
    4c8c:	00000138 	.word	0x00000138
    4c90:	1fffc612 	.word	0x1fffc612
    4c94:	1fffc5f8 	.word	0x1fffc5f8
    4c98:	02dc6c00 	.word	0x02dc6c00

00004c9c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    4c9c:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    4c9e:	4b0c      	ldr	r3, [pc, #48]	; (4cd0 <system_clock_source_osc8m_set_config+0x34>)
    4ca0:	6a1c      	ldr	r4, [r3, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    4ca2:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    4ca4:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    4ca6:	7840      	ldrb	r0, [r0, #1]
    4ca8:	2201      	movs	r2, #1
    4caa:	4010      	ands	r0, r2
    4cac:	0180      	lsls	r0, r0, #6
    4cae:	2640      	movs	r6, #64	; 0x40
    4cb0:	43b4      	bics	r4, r6
    4cb2:	4304      	orrs	r4, r0
    4cb4:	402a      	ands	r2, r5
    4cb6:	01d0      	lsls	r0, r2, #7
    4cb8:	2280      	movs	r2, #128	; 0x80
    4cba:	4394      	bics	r4, r2
    4cbc:	1c22      	adds	r2, r4, #0
    4cbe:	4302      	orrs	r2, r0
    4cc0:	2003      	movs	r0, #3
    4cc2:	4001      	ands	r1, r0
    4cc4:	0209      	lsls	r1, r1, #8
    4cc6:	4803      	ldr	r0, [pc, #12]	; (4cd4 <system_clock_source_osc8m_set_config+0x38>)
    4cc8:	4002      	ands	r2, r0
    4cca:	430a      	orrs	r2, r1
    4ccc:	621a      	str	r2, [r3, #32]
}
    4cce:	bd70      	pop	{r4, r5, r6, pc}
    4cd0:	40000800 	.word	0x40000800
    4cd4:	fffffcff 	.word	0xfffffcff

00004cd8 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    4cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4cda:	465f      	mov	r7, fp
    4cdc:	4656      	mov	r6, sl
    4cde:	464d      	mov	r5, r9
    4ce0:	4644      	mov	r4, r8
    4ce2:	b4f0      	push	{r4, r5, r6, r7}
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    4ce4:	4a26      	ldr	r2, [pc, #152]	; (4d80 <system_clock_source_xosc32k_set_config+0xa8>)
    4ce6:	8a94      	ldrh	r4, [r2, #20]

	temp.bit.STARTUP = config->startup_time;
    4ce8:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    4cea:	7803      	ldrb	r3, [r0, #0]
    4cec:	4259      	negs	r1, r3
    4cee:	4159      	adcs	r1, r3
    4cf0:	468a      	mov	sl, r1
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    4cf2:	7883      	ldrb	r3, [r0, #2]
    4cf4:	469c      	mov	ip, r3
	temp.bit.EN1K = config->enable_1khz_output;
    4cf6:	78c1      	ldrb	r1, [r0, #3]
    4cf8:	4688      	mov	r8, r1
	temp.bit.EN32K = config->enable_32khz_output;
    4cfa:	7903      	ldrb	r3, [r0, #4]
    4cfc:	4699      	mov	r9, r3

	temp.bit.ONDEMAND = config->on_demand;
    4cfe:	7b46      	ldrb	r6, [r0, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    4d00:	7b07      	ldrb	r7, [r0, #12]
	temp.bit.WRTLOCK  = config->write_once;
    4d02:	7b81      	ldrb	r1, [r0, #14]
    4d04:	468b      	mov	fp, r1

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    4d06:	6880      	ldr	r0, [r0, #8]
    4d08:	4b1e      	ldr	r3, [pc, #120]	; (4d84 <system_clock_source_xosc32k_set_config+0xac>)
    4d0a:	447b      	add	r3, pc
    4d0c:	6158      	str	r0, [r3, #20]

	SYSCTRL->XOSC32K = temp;
    4d0e:	2301      	movs	r3, #1
    4d10:	4651      	mov	r1, sl
    4d12:	0088      	lsls	r0, r1, #2
    4d14:	2104      	movs	r1, #4
    4d16:	438c      	bics	r4, r1
    4d18:	4304      	orrs	r4, r0
    4d1a:	4648      	mov	r0, r9
    4d1c:	4018      	ands	r0, r3
    4d1e:	00c0      	lsls	r0, r0, #3
    4d20:	2108      	movs	r1, #8
    4d22:	438c      	bics	r4, r1
    4d24:	4304      	orrs	r4, r0
    4d26:	4640      	mov	r0, r8
    4d28:	4018      	ands	r0, r3
    4d2a:	0100      	lsls	r0, r0, #4
    4d2c:	2110      	movs	r1, #16
    4d2e:	438c      	bics	r4, r1
    4d30:	4304      	orrs	r4, r0
    4d32:	4660      	mov	r0, ip
    4d34:	4018      	ands	r0, r3
    4d36:	0140      	lsls	r0, r0, #5
    4d38:	2120      	movs	r1, #32
    4d3a:	438c      	bics	r4, r1
    4d3c:	4304      	orrs	r4, r0
    4d3e:	1c18      	adds	r0, r3, #0
    4d40:	4038      	ands	r0, r7
    4d42:	0180      	lsls	r0, r0, #6
    4d44:	2740      	movs	r7, #64	; 0x40
    4d46:	43bc      	bics	r4, r7
    4d48:	4304      	orrs	r4, r0
    4d4a:	1c18      	adds	r0, r3, #0
    4d4c:	4030      	ands	r0, r6
    4d4e:	01c0      	lsls	r0, r0, #7
    4d50:	2680      	movs	r6, #128	; 0x80
    4d52:	43b4      	bics	r4, r6
    4d54:	4304      	orrs	r4, r0
    4d56:	2007      	movs	r0, #7
    4d58:	4028      	ands	r0, r5
    4d5a:	0200      	lsls	r0, r0, #8
    4d5c:	4d0a      	ldr	r5, [pc, #40]	; (4d88 <system_clock_source_xosc32k_set_config+0xb0>)
    4d5e:	402c      	ands	r4, r5
    4d60:	4304      	orrs	r4, r0
    4d62:	4659      	mov	r1, fp
    4d64:	400b      	ands	r3, r1
    4d66:	0319      	lsls	r1, r3, #12
    4d68:	4808      	ldr	r0, [pc, #32]	; (4d8c <system_clock_source_xosc32k_set_config+0xb4>)
    4d6a:	1c23      	adds	r3, r4, #0
    4d6c:	4003      	ands	r3, r0
    4d6e:	430b      	orrs	r3, r1
    4d70:	8293      	strh	r3, [r2, #20]
}
    4d72:	bc3c      	pop	{r2, r3, r4, r5}
    4d74:	4690      	mov	r8, r2
    4d76:	4699      	mov	r9, r3
    4d78:	46a2      	mov	sl, r4
    4d7a:	46ab      	mov	fp, r5
    4d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4d7e:	46c0      	nop			; (mov r8, r8)
    4d80:	40000800 	.word	0x40000800
    4d84:	1fffc54e 	.word	0x1fffc54e
    4d88:	fffff8ff 	.word	0xfffff8ff
    4d8c:	ffffefff 	.word	0xffffefff

00004d90 <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
    4d90:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d92:	b083      	sub	sp, #12
    4d94:	1c04      	adds	r4, r0, #0
    4d96:	4e26      	ldr	r6, [pc, #152]	; (4e30 <system_clock_source_dpll_set_config+0xa0>)
    4d98:	447e      	add	r6, pc

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
    4d9a:	68c5      	ldr	r5, [r0, #12]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
    4d9c:	7d03      	ldrb	r3, [r0, #20]
    4d9e:	2b01      	cmp	r3, #1
    4da0:	d107      	bne.n	4db2 <system_clock_source_dpll_set_config+0x22>
		refclk = refclk / (2 * (config->reference_divider + 1));
    4da2:	8a01      	ldrh	r1, [r0, #16]
    4da4:	3101      	adds	r1, #1
    4da6:	0049      	lsls	r1, r1, #1
    4da8:	4b22      	ldr	r3, [pc, #136]	; (4e34 <system_clock_source_dpll_set_config+0xa4>)
    4daa:	58f3      	ldr	r3, [r6, r3]
    4dac:	1c28      	adds	r0, r5, #0
    4dae:	4798      	blx	r3
    4db0:	1c05      	adds	r5, r0, #0
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
    4db2:	68a3      	ldr	r3, [r4, #8]
    4db4:	0118      	lsls	r0, r3, #4
    4db6:	4b1f      	ldr	r3, [pc, #124]	; (4e34 <system_clock_source_dpll_set_config+0xa4>)
    4db8:	58f3      	ldr	r3, [r6, r3]
    4dba:	1c29      	adds	r1, r5, #0
    4dbc:	4798      	blx	r3
	tmpldrfrac = tmpldr & 0x0f;
    4dbe:	220f      	movs	r2, #15
    4dc0:	4002      	ands	r2, r0
	tmpldr = (tmpldr >> 4) - 1;
    4dc2:	0900      	lsrs	r0, r0, #4

	SYSCTRL->DPLLCTRLA.reg =
    4dc4:	7866      	ldrb	r6, [r4, #1]
    4dc6:	01b6      	lsls	r6, r6, #6
    4dc8:	7823      	ldrb	r3, [r4, #0]
    4dca:	01db      	lsls	r3, r3, #7
    4dcc:	431e      	orrs	r6, r3
    4dce:	b2f6      	uxtb	r6, r6
    4dd0:	4b19      	ldr	r3, [pc, #100]	; (4e38 <system_clock_source_dpll_set_config+0xa8>)
    4dd2:	2144      	movs	r1, #68	; 0x44
    4dd4:	545e      	strb	r6, [r3, r1]
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);

	SYSCTRL->DPLLRATIO.reg =
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    4dd6:	0416      	lsls	r6, r2, #16
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
	tmpldrfrac = tmpldr & 0x0f;
	tmpldr = (tmpldr >> 4) - 1;
    4dd8:	1e41      	subs	r1, r0, #1
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);

	SYSCTRL->DPLLRATIO.reg =
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
			SYSCTRL_DPLLRATIO_LDR(tmpldr);
    4dda:	0509      	lsls	r1, r1, #20
    4ddc:	0d09      	lsrs	r1, r1, #20
	SYSCTRL->DPLLCTRLA.reg =
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);

	SYSCTRL->DPLLRATIO.reg =
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    4dde:	4331      	orrs	r1, r6

	SYSCTRL->DPLLCTRLA.reg =
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);

	SYSCTRL->DPLLRATIO.reg =
    4de0:	6499      	str	r1, [r3, #72]	; 0x48
	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
    4de2:	78e6      	ldrb	r6, [r4, #3]
    4de4:	00f6      	lsls	r6, r6, #3
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
			SYSCTRL_DPLLRATIO_LDR(tmpldr);

	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
    4de6:	78a1      	ldrb	r1, [r4, #2]
    4de8:	0309      	lsls	r1, r1, #12
	SYSCTRL->DPLLRATIO.reg =
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
			SYSCTRL_DPLLRATIO_LDR(tmpldr);

	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
    4dea:	4331      	orrs	r1, r6
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
    4dec:	7926      	ldrb	r6, [r4, #4]
    4dee:	00b6      	lsls	r6, r6, #2
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
			SYSCTRL_DPLLRATIO_LDR(tmpldr);

	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
    4df0:	4331      	orrs	r1, r6
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);
    4df2:	7ca6      	ldrb	r6, [r4, #18]
    4df4:	2703      	movs	r7, #3
    4df6:	403e      	ands	r6, r7
			SYSCTRL_DPLLRATIO_LDR(tmpldr);

	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
    4df8:	4331      	orrs	r1, r6
	SYSCTRL->DPLLRATIO.reg =
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
			SYSCTRL_DPLLRATIO_LDR(tmpldr);

	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
    4dfa:	8a26      	ldrh	r6, [r4, #16]
    4dfc:	0436      	lsls	r6, r6, #16
    4dfe:	4f0f      	ldr	r7, [pc, #60]	; (4e3c <system_clock_source_dpll_set_config+0xac>)
    4e00:	403e      	ands	r6, r7
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
    4e02:	4331      	orrs	r1, r6
			SYSCTRL_DPLLRATIO_LDR(tmpldr);

	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
    4e04:	7ce7      	ldrb	r7, [r4, #19]
    4e06:	023f      	lsls	r7, r7, #8
    4e08:	26e0      	movs	r6, #224	; 0xe0
    4e0a:	00f6      	lsls	r6, r6, #3
    4e0c:	403e      	ands	r6, r7
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
    4e0e:	4331      	orrs	r1, r6

	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
    4e10:	7d24      	ldrb	r4, [r4, #20]
    4e12:	0124      	lsls	r4, r4, #4
    4e14:	2630      	movs	r6, #48	; 0x30
    4e16:	4034      	ands	r4, r6
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
    4e18:	4321      	orrs	r1, r4

	SYSCTRL->DPLLRATIO.reg =
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
			SYSCTRL_DPLLRATIO_LDR(tmpldr);

	SYSCTRL->DPLLCTRLB.reg =
    4e1a:	64d9      	str	r1, [r3, #76]	; 0x4c

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
    4e1c:	0100      	lsls	r0, r0, #4
    4e1e:	1812      	adds	r2, r2, r0
    4e20:	4355      	muls	r5, r2
    4e22:	092d      	lsrs	r5, r5, #4
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
    4e24:	4b06      	ldr	r3, [pc, #24]	; (4e40 <system_clock_source_dpll_set_config+0xb0>)
    4e26:	447b      	add	r3, pc
    4e28:	60dd      	str	r5, [r3, #12]
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
}
    4e2a:	b003      	add	sp, #12
    4e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4e2e:	46c0      	nop			; (mov r8, r8)
    4e30:	00001ca0 	.word	0x00001ca0
    4e34:	00000198 	.word	0x00000198
    4e38:	40000800 	.word	0x40000800
    4e3c:	07ff0000 	.word	0x07ff0000
    4e40:	1fffc432 	.word	0x1fffc432

00004e44 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    4e44:	b500      	push	{lr}
	switch (clock_source) {
    4e46:	2808      	cmp	r0, #8
    4e48:	d84f      	bhi.n	4eea <system_clock_source_enable+0xa6>
    4e4a:	f000 fba9 	bl	55a0 <__gnu_thumb1_case_uqi>
    4e4e:	4e15      	.short	0x4e15
    4e50:	1c0e054e 	.word	0x1c0e054e
    4e54:	2307      	.short	0x2307
    4e56:	46          	.byte	0x46
    4e57:	00          	.byte	0x00
		break;
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    4e58:	2000      	movs	r0, #0
    4e5a:	e047      	b.n	4eec <system_clock_source_enable+0xa8>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    4e5c:	4b24      	ldr	r3, [pc, #144]	; (4ef0 <system_clock_source_enable+0xac>)
    4e5e:	6a19      	ldr	r1, [r3, #32]
    4e60:	2202      	movs	r2, #2
    4e62:	430a      	orrs	r2, r1
    4e64:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    4e66:	2000      	movs	r0, #0
    4e68:	e040      	b.n	4eec <system_clock_source_enable+0xa8>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    4e6a:	4b21      	ldr	r3, [pc, #132]	; (4ef0 <system_clock_source_enable+0xac>)
    4e6c:	6999      	ldr	r1, [r3, #24]
    4e6e:	2202      	movs	r2, #2
    4e70:	430a      	orrs	r2, r1
    4e72:	619a      	str	r2, [r3, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    4e74:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
    4e76:	e039      	b.n	4eec <system_clock_source_enable+0xa8>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    4e78:	4b1d      	ldr	r3, [pc, #116]	; (4ef0 <system_clock_source_enable+0xac>)
    4e7a:	8a19      	ldrh	r1, [r3, #16]
    4e7c:	2202      	movs	r2, #2
    4e7e:	430a      	orrs	r2, r1
    4e80:	821a      	strh	r2, [r3, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    4e82:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
    4e84:	e032      	b.n	4eec <system_clock_source_enable+0xa8>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    4e86:	4b1a      	ldr	r3, [pc, #104]	; (4ef0 <system_clock_source_enable+0xac>)
    4e88:	8a99      	ldrh	r1, [r3, #20]
    4e8a:	2202      	movs	r2, #2
    4e8c:	430a      	orrs	r2, r1
    4e8e:	829a      	strh	r2, [r3, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    4e90:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
    4e92:	e02b      	b.n	4eec <system_clock_source_enable+0xa8>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    4e94:	4a17      	ldr	r2, [pc, #92]	; (4ef4 <system_clock_source_enable+0xb0>)
    4e96:	447a      	add	r2, pc
    4e98:	6811      	ldr	r1, [r2, #0]
    4e9a:	2302      	movs	r3, #2
    4e9c:	4319      	orrs	r1, r3
    4e9e:	6011      	str	r1, [r2, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    4ea0:	4a13      	ldr	r2, [pc, #76]	; (4ef0 <system_clock_source_enable+0xac>)
    4ea2:	8493      	strh	r3, [r2, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    4ea4:	1c11      	adds	r1, r2, #0
    4ea6:	2210      	movs	r2, #16
    4ea8:	68cb      	ldr	r3, [r1, #12]
    4eaa:	421a      	tst	r2, r3
    4eac:	d0fc      	beq.n	4ea8 <system_clock_source_enable+0x64>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    4eae:	4a12      	ldr	r2, [pc, #72]	; (4ef8 <system_clock_source_enable+0xb4>)
    4eb0:	447a      	add	r2, pc
    4eb2:	6891      	ldr	r1, [r2, #8]
    4eb4:	4b0e      	ldr	r3, [pc, #56]	; (4ef0 <system_clock_source_enable+0xac>)
    4eb6:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    4eb8:	6852      	ldr	r2, [r2, #4]
    4eba:	629a      	str	r2, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    4ebc:	2200      	movs	r2, #0
    4ebe:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    4ec0:	1c19      	adds	r1, r3, #0
    4ec2:	2210      	movs	r2, #16
    4ec4:	68cb      	ldr	r3, [r1, #12]
    4ec6:	421a      	tst	r2, r3
    4ec8:	d0fc      	beq.n	4ec4 <system_clock_source_enable+0x80>
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
	_system_dfll_wait_for_sync();
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    4eca:	4b0c      	ldr	r3, [pc, #48]	; (4efc <system_clock_source_enable+0xb8>)
    4ecc:	447b      	add	r3, pc
    4ece:	681a      	ldr	r2, [r3, #0]
    4ed0:	b292      	uxth	r2, r2
    4ed2:	4b07      	ldr	r3, [pc, #28]	; (4ef0 <system_clock_source_enable+0xac>)
    4ed4:	849a      	strh	r2, [r3, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    4ed6:	2000      	movs	r0, #0
    4ed8:	e008      	b.n	4eec <system_clock_source_enable+0xa8>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    4eda:	4a05      	ldr	r2, [pc, #20]	; (4ef0 <system_clock_source_enable+0xac>)
    4edc:	2344      	movs	r3, #68	; 0x44
    4ede:	5cd0      	ldrb	r0, [r2, r3]
    4ee0:	2102      	movs	r1, #2
    4ee2:	4301      	orrs	r1, r0
    4ee4:	54d1      	strb	r1, [r2, r3]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    4ee6:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
    4ee8:	e000      	b.n	4eec <system_clock_source_enable+0xa8>
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4eea:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
    4eec:	bd00      	pop	{pc}
    4eee:	46c0      	nop			; (mov r8, r8)
    4ef0:	40000800 	.word	0x40000800
    4ef4:	1fffc3c2 	.word	0x1fffc3c2
    4ef8:	1fffc3a8 	.word	0x1fffc3a8
    4efc:	1fffc38c 	.word	0x1fffc38c

00004f00 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    4f00:	b500      	push	{lr}
	uint32_t mask = 0;

	switch (clock_source) {
    4f02:	2808      	cmp	r0, #8
    4f04:	d823      	bhi.n	4f4e <system_clock_source_is_ready+0x4e>
    4f06:	f000 fb4b 	bl	55a0 <__gnu_thumb1_case_uqi>
    4f0a:	2207      	.short	0x2207
    4f0c:	09190522 	.word	0x09190522
    4f10:	0b17      	.short	0x0b17
    4f12:	0d          	.byte	0x0d
    4f13:	00          	.byte	0x00
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    4f14:	2001      	movs	r0, #1
    4f16:	e01b      	b.n	4f50 <system_clock_source_is_ready+0x50>
	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    4f18:	2301      	movs	r3, #1
		break;
    4f1a:	e010      	b.n	4f3e <system_clock_source_is_ready+0x3e>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    4f1c:	2302      	movs	r3, #2
		break;
    4f1e:	e00e      	b.n	4f3e <system_clock_source_is_ready+0x3e>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
    4f20:	2310      	movs	r3, #16
		}
		break;
    4f22:	e00c      	b.n	4f3e <system_clock_source_is_ready+0x3e>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    4f24:	2350      	movs	r3, #80	; 0x50
    4f26:	4a0b      	ldr	r2, [pc, #44]	; (4f54 <system_clock_source_is_ready+0x54>)
    4f28:	5cd0      	ldrb	r0, [r2, r3]
    4f2a:	2303      	movs	r3, #3
    4f2c:	4018      	ands	r0, r3
    4f2e:	3803      	subs	r0, #3
    4f30:	4243      	negs	r3, r0
    4f32:	4158      	adcs	r0, r3
    4f34:	b2c0      	uxtb	r0, r0
    4f36:	e00b      	b.n	4f50 <system_clock_source_is_ready+0x50>
{
	uint32_t mask = 0;

	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    4f38:	2308      	movs	r3, #8
    4f3a:	e000      	b.n	4f3e <system_clock_source_is_ready+0x3e>
		break;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    4f3c:	2304      	movs	r3, #4

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    4f3e:	4a05      	ldr	r2, [pc, #20]	; (4f54 <system_clock_source_is_ready+0x54>)
    4f40:	68d0      	ldr	r0, [r2, #12]
    4f42:	4018      	ands	r0, r3
    4f44:	1ac0      	subs	r0, r0, r3
    4f46:	4243      	negs	r3, r0
    4f48:	4158      	adcs	r0, r3
    4f4a:	b2c0      	uxtb	r0, r0
    4f4c:	e000      	b.n	4f50 <system_clock_source_is_ready+0x50>
	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;

	default:
		return false;
    4f4e:	2000      	movs	r0, #0
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
}
    4f50:	bd00      	pop	{pc}
    4f52:	46c0      	nop			; (mov r8, r8)
    4f54:	40000800 	.word	0x40000800

00004f58 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    4f58:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f5a:	b091      	sub	sp, #68	; 0x44
    4f5c:	4f48      	ldr	r7, [pc, #288]	; (5080 <system_clock_init+0x128>)
    4f5e:	447f      	add	r7, pc
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    4f60:	22c2      	movs	r2, #194	; 0xc2
    4f62:	00d2      	lsls	r2, r2, #3
    4f64:	4b47      	ldr	r3, [pc, #284]	; (5084 <system_clock_init+0x12c>)
    4f66:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    4f68:	4a47      	ldr	r2, [pc, #284]	; (5088 <system_clock_init+0x130>)
    4f6a:	6851      	ldr	r1, [r2, #4]
    4f6c:	231e      	movs	r3, #30
    4f6e:	4399      	bics	r1, r3
    4f70:	2302      	movs	r3, #2
    4f72:	4319      	orrs	r1, r3
    4f74:	6051      	str	r1, [r2, #4]
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    4f76:	aa02      	add	r2, sp, #8
    4f78:	7013      	strb	r3, [r2, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    4f7a:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    4f7c:	1c16      	adds	r6, r2, #0
    4f7e:	4b43      	ldr	r3, [pc, #268]	; (508c <system_clock_init+0x134>)
    4f80:	58fd      	ldr	r5, [r7, r3]
    4f82:	b2e0      	uxtb	r0, r4
    4f84:	1c31      	adds	r1, r6, #0
    4f86:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    4f88:	3401      	adds	r4, #1
    4f8a:	2c25      	cmp	r4, #37	; 0x25
    4f8c:	d1f9      	bne.n	4f82 <system_clock_init+0x2a>
static inline void system_clock_source_xosc32k_get_config_defaults(
		struct system_clock_source_xosc32k_config *const config)
{
	Assert(config);

	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    4f8e:	2300      	movs	r3, #0
    4f90:	a80c      	add	r0, sp, #48	; 0x30
    4f92:	7003      	strb	r3, [r0, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
	config->auto_gain_control   = false;
    4f94:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    4f96:	2280      	movs	r2, #128	; 0x80
    4f98:	0212      	lsls	r2, r2, #8
    4f9a:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    4f9c:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    4f9e:	2201      	movs	r2, #1
    4fa0:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    4fa2:	7303      	strb	r3, [r0, #12]
	config->on_demand           = true;
	config->write_once          = false;
    4fa4:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    4fa6:	2206      	movs	r2, #6
    4fa8:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    4faa:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    4fac:	4b38      	ldr	r3, [pc, #224]	; (5090 <system_clock_init+0x138>)
    4fae:	58fb      	ldr	r3, [r7, r3]
    4fb0:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    4fb2:	2005      	movs	r0, #5
    4fb4:	4b37      	ldr	r3, [pc, #220]	; (5094 <system_clock_init+0x13c>)
    4fb6:	58fb      	ldr	r3, [r7, r3]
    4fb8:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    4fba:	4b37      	ldr	r3, [pc, #220]	; (5098 <system_clock_init+0x140>)
    4fbc:	58fc      	ldr	r4, [r7, r3]
    4fbe:	2005      	movs	r0, #5
    4fc0:	47a0      	blx	r4
    4fc2:	2800      	cmp	r0, #0
    4fc4:	d0fb      	beq.n	4fbe <system_clock_init+0x66>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    4fc6:	4b2f      	ldr	r3, [pc, #188]	; (5084 <system_clock_init+0x12c>)
    4fc8:	8a99      	ldrh	r1, [r3, #20]
    4fca:	2280      	movs	r2, #128	; 0x80
    4fcc:	430a      	orrs	r2, r1
    4fce:	829a      	strh	r2, [r3, #20]
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
    4fd0:	2400      	movs	r4, #0
    4fd2:	a80b      	add	r0, sp, #44	; 0x2c
    4fd4:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    4fd6:	2601      	movs	r6, #1
    4fd8:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    4fda:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    4fdc:	4b2f      	ldr	r3, [pc, #188]	; (509c <system_clock_init+0x144>)
    4fde:	58fb      	ldr	r3, [r7, r3]
    4fe0:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    4fe2:	2006      	movs	r0, #6
    4fe4:	4b2b      	ldr	r3, [pc, #172]	; (5094 <system_clock_init+0x13c>)
    4fe6:	58fd      	ldr	r5, [r7, r3]
    4fe8:	47a8      	blx	r5


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    4fea:	4b2d      	ldr	r3, [pc, #180]	; (50a0 <system_clock_init+0x148>)
    4fec:	58fb      	ldr	r3, [r7, r3]
    4fee:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    4ff0:	a902      	add	r1, sp, #8
    4ff2:	604e      	str	r6, [r1, #4]
	config->high_when_disabled = false;
    4ff4:	704c      	strb	r4, [r1, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    4ff6:	720c      	strb	r4, [r1, #8]
	config->output_enable      = false;
    4ff8:	724c      	strb	r4, [r1, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    4ffa:	2305      	movs	r3, #5
    4ffc:	700b      	strb	r3, [r1, #0]
    4ffe:	2001      	movs	r0, #1
    5000:	4b28      	ldr	r3, [pc, #160]	; (50a4 <system_clock_init+0x14c>)
    5002:	58fb      	ldr	r3, [r7, r3]
    5004:	4798      	blx	r3
    5006:	2001      	movs	r0, #1
    5008:	4b27      	ldr	r3, [pc, #156]	; (50a8 <system_clock_init+0x150>)
    500a:	58fb      	ldr	r3, [r7, r3]
    500c:	4798      	blx	r3
 */
static inline void system_clock_source_dpll_get_config_defaults(
		struct system_clock_source_dpll_config *const config)
{
	config->on_demand           = true;
	config->run_in_standby      = false;
    500e:	a805      	add	r0, sp, #20
    5010:	7044      	strb	r4, [r0, #1]
	config->lock_bypass         = false;
    5012:	7084      	strb	r4, [r0, #2]
	config->wake_up_fast        = false;
    5014:	70c4      	strb	r4, [r0, #3]
	config->low_power_enable    = false;
    5016:	7104      	strb	r4, [r0, #4]

	config->output_frequency    = 48000000;
    5018:	4b24      	ldr	r3, [pc, #144]	; (50ac <system_clock_init+0x154>)
    501a:	6083      	str	r3, [r0, #8]
	config->reference_frequency = 32768;
    501c:	2380      	movs	r3, #128	; 0x80
    501e:	021b      	lsls	r3, r3, #8
    5020:	60c3      	str	r3, [r0, #12]
	config->reference_divider   = 1;
    5022:	8206      	strh	r6, [r0, #16]
	config->reference_clock     = SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC32K;
    5024:	7504      	strb	r4, [r0, #20]

	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
    5026:	74c4      	strb	r4, [r0, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
    5028:	7484      	strb	r4, [r0, #18]
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);

	dpll_config.on_demand        = false;
    502a:	7004      	strb	r4, [r0, #0]
	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;

	system_clock_source_dpll_set_config(&dpll_config);
    502c:	4b20      	ldr	r3, [pc, #128]	; (50b0 <system_clock_init+0x158>)
    502e:	58fb      	ldr	r3, [r7, r3]
    5030:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
    5032:	2008      	movs	r0, #8
    5034:	47a8      	blx	r5
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
    5036:	4b18      	ldr	r3, [pc, #96]	; (5098 <system_clock_init+0x140>)
    5038:	58fc      	ldr	r4, [r7, r3]
    503a:	2008      	movs	r0, #8
    503c:	47a0      	blx	r4
    503e:	2800      	cmp	r0, #0
    5040:	d0fb      	beq.n	503a <system_clock_init+0xe2>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		SYSCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
    5042:	4a10      	ldr	r2, [pc, #64]	; (5084 <system_clock_init+0x12c>)
    5044:	2344      	movs	r3, #68	; 0x44
    5046:	5cd0      	ldrb	r0, [r2, r3]
    5048:	2180      	movs	r1, #128	; 0x80
    504a:	4249      	negs	r1, r1
    504c:	4301      	orrs	r1, r0
    504e:	54d1      	strb	r1, [r2, r3]
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    5050:	4a18      	ldr	r2, [pc, #96]	; (50b4 <system_clock_init+0x15c>)
    5052:	2300      	movs	r3, #0
    5054:	7213      	strb	r3, [r2, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    5056:	7253      	strb	r3, [r2, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    5058:	7293      	strb	r3, [r2, #10]
			break;
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    505a:	72d3      	strb	r3, [r2, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    505c:	2201      	movs	r2, #1
    505e:	a902      	add	r1, sp, #8
    5060:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    5062:	704b      	strb	r3, [r1, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    5064:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    5066:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    5068:	2308      	movs	r3, #8
    506a:	700b      	strb	r3, [r1, #0]
    506c:	2000      	movs	r0, #0
    506e:	4b0d      	ldr	r3, [pc, #52]	; (50a4 <system_clock_init+0x14c>)
    5070:	58fb      	ldr	r3, [r7, r3]
    5072:	4798      	blx	r3
    5074:	2000      	movs	r0, #0
    5076:	4b0c      	ldr	r3, [pc, #48]	; (50a8 <system_clock_init+0x150>)
    5078:	58fb      	ldr	r3, [r7, r3]
    507a:	4798      	blx	r3
#endif
}
    507c:	b011      	add	sp, #68	; 0x44
    507e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5080:	00001ada 	.word	0x00001ada
    5084:	40000800 	.word	0x40000800
    5088:	41004000 	.word	0x41004000
    508c:	00000088 	.word	0x00000088
    5090:	000001b8 	.word	0x000001b8
    5094:	0000020c 	.word	0x0000020c
    5098:	00000234 	.word	0x00000234
    509c:	000000ec 	.word	0x000000ec
    50a0:	0000026c 	.word	0x0000026c
    50a4:	000000b8 	.word	0x000000b8
    50a8:	00000160 	.word	0x00000160
    50ac:	02dc6c00 	.word	0x02dc6c00
    50b0:	00000000 	.word	0x00000000
    50b4:	40000400 	.word	0x40000400

000050b8 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    50b8:	4b06      	ldr	r3, [pc, #24]	; (50d4 <system_gclk_init+0x1c>)
    50ba:	6999      	ldr	r1, [r3, #24]
    50bc:	2208      	movs	r2, #8
    50be:	430a      	orrs	r2, r1
    50c0:	619a      	str	r2, [r3, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    50c2:	2201      	movs	r2, #1
    50c4:	4b04      	ldr	r3, [pc, #16]	; (50d8 <system_gclk_init+0x20>)
    50c6:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    50c8:	1c19      	adds	r1, r3, #0
    50ca:	780b      	ldrb	r3, [r1, #0]
    50cc:	4213      	tst	r3, r2
    50ce:	d1fc      	bne.n	50ca <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    50d0:	4770      	bx	lr
    50d2:	46c0      	nop			; (mov r8, r8)
    50d4:	40000400 	.word	0x40000400
    50d8:	40000c00 	.word	0x40000c00

000050dc <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    50dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    50de:	4647      	mov	r7, r8
    50e0:	b480      	push	{r7}
    50e2:	b082      	sub	sp, #8
    50e4:	1c07      	adds	r7, r0, #0
    50e6:	4e2d      	ldr	r6, [pc, #180]	; (519c <system_gclk_gen_set_config+0xc0>)
    50e8:	447e      	add	r6, pc
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    50ea:	4680      	mov	r8, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    50ec:	780d      	ldrb	r5, [r1, #0]
    50ee:	022d      	lsls	r5, r5, #8
    50f0:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    50f2:	784b      	ldrb	r3, [r1, #1]
    50f4:	2b00      	cmp	r3, #0
    50f6:	d002      	beq.n	50fe <system_gclk_gen_set_config+0x22>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    50f8:	2380      	movs	r3, #128	; 0x80
    50fa:	02db      	lsls	r3, r3, #11
    50fc:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    50fe:	7a4b      	ldrb	r3, [r1, #9]
    5100:	2b00      	cmp	r3, #0
    5102:	d002      	beq.n	510a <system_gclk_gen_set_config+0x2e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    5104:	2380      	movs	r3, #128	; 0x80
    5106:	031b      	lsls	r3, r3, #12
    5108:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    510a:	684c      	ldr	r4, [r1, #4]
    510c:	2c01      	cmp	r4, #1
    510e:	d919      	bls.n	5144 <system_gclk_gen_set_config+0x68>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    5110:	1e63      	subs	r3, r4, #1
    5112:	421c      	tst	r4, r3
    5114:	d110      	bne.n	5138 <system_gclk_gen_set_config+0x5c>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    5116:	2c02      	cmp	r4, #2
    5118:	d906      	bls.n	5128 <system_gclk_gen_set_config+0x4c>
    511a:	2302      	movs	r3, #2
    511c:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    511e:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    5120:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    5122:	429c      	cmp	r4, r3
    5124:	d8fb      	bhi.n	511e <system_gclk_gen_set_config+0x42>
    5126:	e000      	b.n	512a <system_gclk_gen_set_config+0x4e>
    5128:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    512a:	0212      	lsls	r2, r2, #8
    512c:	433a      	orrs	r2, r7
    512e:	4690      	mov	r8, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    5130:	2380      	movs	r3, #128	; 0x80
    5132:	035b      	lsls	r3, r3, #13
    5134:	431d      	orrs	r5, r3
    5136:	e005      	b.n	5144 <system_gclk_gen_set_config+0x68>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    5138:	0224      	lsls	r4, r4, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    513a:	433c      	orrs	r4, r7
    513c:	46a0      	mov	r8, r4
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    513e:	2380      	movs	r3, #128	; 0x80
    5140:	029b      	lsls	r3, r3, #10
    5142:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    5144:	7a0b      	ldrb	r3, [r1, #8]
    5146:	2b00      	cmp	r3, #0
    5148:	d002      	beq.n	5150 <system_gclk_gen_set_config+0x74>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    514a:	2380      	movs	r3, #128	; 0x80
    514c:	039b      	lsls	r3, r3, #14
    514e:	431d      	orrs	r5, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5150:	4a13      	ldr	r2, [pc, #76]	; (51a0 <system_gclk_gen_set_config+0xc4>)
    5152:	7853      	ldrb	r3, [r2, #1]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing()) {
    5154:	b25b      	sxtb	r3, r3
    5156:	2b00      	cmp	r3, #0
    5158:	dbfb      	blt.n	5152 <system_gclk_gen_set_config+0x76>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    515a:	4b12      	ldr	r3, [pc, #72]	; (51a4 <system_gclk_gen_set_config+0xc8>)
    515c:	58f3      	ldr	r3, [r6, r3]
    515e:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    5160:	4b11      	ldr	r3, [pc, #68]	; (51a8 <system_gclk_gen_set_config+0xcc>)
    5162:	701f      	strb	r7, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5164:	4a0e      	ldr	r2, [pc, #56]	; (51a0 <system_gclk_gen_set_config+0xc4>)
    5166:	7853      	ldrb	r3, [r2, #1]

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    5168:	b25b      	sxtb	r3, r3
    516a:	2b00      	cmp	r3, #0
    516c:	dbfb      	blt.n	5166 <system_gclk_gen_set_config+0x8a>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    516e:	4b0c      	ldr	r3, [pc, #48]	; (51a0 <system_gclk_gen_set_config+0xc4>)
    5170:	4642      	mov	r2, r8
    5172:	609a      	str	r2, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5174:	1c1a      	adds	r2, r3, #0
    5176:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
    5178:	b25b      	sxtb	r3, r3
    517a:	2b00      	cmp	r3, #0
    517c:	dbfb      	blt.n	5176 <system_gclk_gen_set_config+0x9a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    517e:	4b08      	ldr	r3, [pc, #32]	; (51a0 <system_gclk_gen_set_config+0xc4>)
    5180:	6859      	ldr	r1, [r3, #4]
    5182:	2280      	movs	r2, #128	; 0x80
    5184:	0252      	lsls	r2, r2, #9
    5186:	400a      	ands	r2, r1
    5188:	4315      	orrs	r5, r2
    518a:	605d      	str	r5, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    518c:	4b07      	ldr	r3, [pc, #28]	; (51ac <system_gclk_gen_set_config+0xd0>)
    518e:	58f3      	ldr	r3, [r6, r3]
    5190:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    5192:	b002      	add	sp, #8
    5194:	bc04      	pop	{r2}
    5196:	4690      	mov	r8, r2
    5198:	bdf0      	pop	{r4, r5, r6, r7, pc}
    519a:	46c0      	nop			; (mov r8, r8)
    519c:	00001950 	.word	0x00001950
    51a0:	40000c00 	.word	0x40000c00
    51a4:	000000a0 	.word	0x000000a0
    51a8:	40000c08 	.word	0x40000c08
    51ac:	00000008 	.word	0x00000008

000051b0 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    51b0:	b530      	push	{r4, r5, lr}
    51b2:	b083      	sub	sp, #12
    51b4:	1c05      	adds	r5, r0, #0
    51b6:	4c0e      	ldr	r4, [pc, #56]	; (51f0 <system_gclk_gen_enable+0x40>)
    51b8:	447c      	add	r4, pc
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    51ba:	4a0e      	ldr	r2, [pc, #56]	; (51f4 <system_gclk_gen_enable+0x44>)
    51bc:	7853      	ldrb	r3, [r2, #1]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    51be:	b25b      	sxtb	r3, r3
    51c0:	2b00      	cmp	r3, #0
    51c2:	dbfb      	blt.n	51bc <system_gclk_gen_enable+0xc>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    51c4:	4b0c      	ldr	r3, [pc, #48]	; (51f8 <system_gclk_gen_enable+0x48>)
    51c6:	58e3      	ldr	r3, [r4, r3]
    51c8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    51ca:	4b0c      	ldr	r3, [pc, #48]	; (51fc <system_gclk_gen_enable+0x4c>)
    51cc:	701d      	strb	r5, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    51ce:	4a09      	ldr	r2, [pc, #36]	; (51f4 <system_gclk_gen_enable+0x44>)
    51d0:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    51d2:	b25b      	sxtb	r3, r3
    51d4:	2b00      	cmp	r3, #0
    51d6:	dbfb      	blt.n	51d0 <system_gclk_gen_enable+0x20>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    51d8:	4b06      	ldr	r3, [pc, #24]	; (51f4 <system_gclk_gen_enable+0x44>)
    51da:	6859      	ldr	r1, [r3, #4]
    51dc:	2280      	movs	r2, #128	; 0x80
    51de:	0252      	lsls	r2, r2, #9
    51e0:	430a      	orrs	r2, r1
    51e2:	605a      	str	r2, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    51e4:	4b06      	ldr	r3, [pc, #24]	; (5200 <system_gclk_gen_enable+0x50>)
    51e6:	58e3      	ldr	r3, [r4, r3]
    51e8:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    51ea:	b003      	add	sp, #12
    51ec:	bd30      	pop	{r4, r5, pc}
    51ee:	46c0      	nop			; (mov r8, r8)
    51f0:	00001880 	.word	0x00001880
    51f4:	40000c00 	.word	0x40000c00
    51f8:	000000a0 	.word	0x000000a0
    51fc:	40000c04 	.word	0x40000c04
    5200:	00000008 	.word	0x00000008

00005204 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    5204:	b5f0      	push	{r4, r5, r6, r7, lr}
    5206:	b083      	sub	sp, #12
    5208:	1c05      	adds	r5, r0, #0
    520a:	4c1e      	ldr	r4, [pc, #120]	; (5284 <system_gclk_gen_get_hz+0x80>)
    520c:	447c      	add	r4, pc
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    520e:	4a1e      	ldr	r2, [pc, #120]	; (5288 <system_gclk_gen_get_hz+0x84>)
    5210:	7853      	ldrb	r3, [r2, #1]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    5212:	b25b      	sxtb	r3, r3
    5214:	2b00      	cmp	r3, #0
    5216:	dbfb      	blt.n	5210 <system_gclk_gen_get_hz+0xc>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    5218:	4b1c      	ldr	r3, [pc, #112]	; (528c <system_gclk_gen_get_hz+0x88>)
    521a:	58e3      	ldr	r3, [r4, r3]
    521c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    521e:	4b1c      	ldr	r3, [pc, #112]	; (5290 <system_gclk_gen_get_hz+0x8c>)
    5220:	701d      	strb	r5, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5222:	4a19      	ldr	r2, [pc, #100]	; (5288 <system_gclk_gen_get_hz+0x84>)
    5224:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    5226:	b25b      	sxtb	r3, r3
    5228:	2b00      	cmp	r3, #0
    522a:	dbfb      	blt.n	5224 <system_gclk_gen_get_hz+0x20>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    522c:	4f16      	ldr	r7, [pc, #88]	; (5288 <system_gclk_gen_get_hz+0x84>)
    522e:	6878      	ldr	r0, [r7, #4]
    5230:	04c0      	lsls	r0, r0, #19
    5232:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    5234:	4b17      	ldr	r3, [pc, #92]	; (5294 <system_gclk_gen_get_hz+0x90>)
    5236:	58e3      	ldr	r3, [r4, r3]
    5238:	4798      	blx	r3
    523a:	1c06      	adds	r6, r0, #0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    523c:	4b14      	ldr	r3, [pc, #80]	; (5290 <system_gclk_gen_get_hz+0x8c>)
    523e:	701d      	strb	r5, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    5240:	687f      	ldr	r7, [r7, #4]
    5242:	02ff      	lsls	r7, r7, #11
    5244:	0fff      	lsrs	r7, r7, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    5246:	4b14      	ldr	r3, [pc, #80]	; (5298 <system_gclk_gen_get_hz+0x94>)
    5248:	701d      	strb	r5, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    524a:	4a0f      	ldr	r2, [pc, #60]	; (5288 <system_gclk_gen_get_hz+0x84>)
    524c:	7853      	ldrb	r3, [r2, #1]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
	while (system_gclk_is_syncing()) {
    524e:	b25b      	sxtb	r3, r3
    5250:	2b00      	cmp	r3, #0
    5252:	dbfb      	blt.n	524c <system_gclk_gen_get_hz+0x48>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    5254:	4b0c      	ldr	r3, [pc, #48]	; (5288 <system_gclk_gen_get_hz+0x84>)
    5256:	689d      	ldr	r5, [r3, #8]
    5258:	0a2d      	lsrs	r5, r5, #8
    525a:	b2ad      	uxth	r5, r5
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    525c:	4b0f      	ldr	r3, [pc, #60]	; (529c <system_gclk_gen_get_hz+0x98>)
    525e:	58e3      	ldr	r3, [r4, r3]
    5260:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    5262:	2f00      	cmp	r7, #0
    5264:	d108      	bne.n	5278 <system_gclk_gen_get_hz+0x74>
    5266:	2d01      	cmp	r5, #1
    5268:	d908      	bls.n	527c <system_gclk_gen_get_hz+0x78>
		gen_input_hz /= divider;
    526a:	4b0d      	ldr	r3, [pc, #52]	; (52a0 <system_gclk_gen_get_hz+0x9c>)
    526c:	58e3      	ldr	r3, [r4, r3]
    526e:	1c30      	adds	r0, r6, #0
    5270:	1c29      	adds	r1, r5, #0
    5272:	4798      	blx	r3
    5274:	1c06      	adds	r6, r0, #0
    5276:	e001      	b.n	527c <system_gclk_gen_get_hz+0x78>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    5278:	3501      	adds	r5, #1
    527a:	40ee      	lsrs	r6, r5
	}

	return gen_input_hz;
}
    527c:	1c30      	adds	r0, r6, #0
    527e:	b003      	add	sp, #12
    5280:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5282:	46c0      	nop			; (mov r8, r8)
    5284:	0000182c 	.word	0x0000182c
    5288:	40000c00 	.word	0x40000c00
    528c:	000000a0 	.word	0x000000a0
    5290:	40000c04 	.word	0x40000c04
    5294:	00000220 	.word	0x00000220
    5298:	40000c08 	.word	0x40000c08
    529c:	00000008 	.word	0x00000008
    52a0:	00000198 	.word	0x00000198

000052a4 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    52a4:	b530      	push	{r4, r5, lr}
    52a6:	b083      	sub	sp, #12
    52a8:	1c05      	adds	r5, r0, #0
    52aa:	4c09      	ldr	r4, [pc, #36]	; (52d0 <system_gclk_chan_enable+0x2c>)
    52ac:	447c      	add	r4, pc
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    52ae:	4b09      	ldr	r3, [pc, #36]	; (52d4 <system_gclk_chan_enable+0x30>)
    52b0:	58e3      	ldr	r3, [r4, r3]
    52b2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    52b4:	4b08      	ldr	r3, [pc, #32]	; (52d8 <system_gclk_chan_enable+0x34>)
    52b6:	701d      	strb	r5, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    52b8:	4b08      	ldr	r3, [pc, #32]	; (52dc <system_gclk_chan_enable+0x38>)
    52ba:	8859      	ldrh	r1, [r3, #2]
    52bc:	2280      	movs	r2, #128	; 0x80
    52be:	01d2      	lsls	r2, r2, #7
    52c0:	430a      	orrs	r2, r1
    52c2:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    52c4:	4b06      	ldr	r3, [pc, #24]	; (52e0 <system_gclk_chan_enable+0x3c>)
    52c6:	58e3      	ldr	r3, [r4, r3]
    52c8:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    52ca:	b003      	add	sp, #12
    52cc:	bd30      	pop	{r4, r5, pc}
    52ce:	46c0      	nop			; (mov r8, r8)
    52d0:	0000178c 	.word	0x0000178c
    52d4:	000000a0 	.word	0x000000a0
    52d8:	40000c02 	.word	0x40000c02
    52dc:	40000c00 	.word	0x40000c00
    52e0:	00000008 	.word	0x00000008

000052e4 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    52e4:	b530      	push	{r4, r5, lr}
    52e6:	b083      	sub	sp, #12
    52e8:	1c05      	adds	r5, r0, #0
    52ea:	4c12      	ldr	r4, [pc, #72]	; (5334 <system_gclk_chan_disable+0x50>)
    52ec:	447c      	add	r4, pc
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    52ee:	4b12      	ldr	r3, [pc, #72]	; (5338 <system_gclk_chan_disable+0x54>)
    52f0:	58e3      	ldr	r3, [r4, r3]
    52f2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    52f4:	4b11      	ldr	r3, [pc, #68]	; (533c <system_gclk_chan_disable+0x58>)
    52f6:	701d      	strb	r5, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    52f8:	4b11      	ldr	r3, [pc, #68]	; (5340 <system_gclk_chan_disable+0x5c>)
    52fa:	8858      	ldrh	r0, [r3, #2]
    52fc:	0500      	lsls	r0, r0, #20
    52fe:	0f00      	lsrs	r0, r0, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    5300:	8859      	ldrh	r1, [r3, #2]
    5302:	4a10      	ldr	r2, [pc, #64]	; (5344 <system_gclk_chan_disable+0x60>)
    5304:	400a      	ands	r2, r1
    5306:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    5308:	8859      	ldrh	r1, [r3, #2]
    530a:	4a0f      	ldr	r2, [pc, #60]	; (5348 <system_gclk_chan_disable+0x64>)
    530c:	400a      	ands	r2, r1
    530e:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    5310:	1c19      	adds	r1, r3, #0
    5312:	2280      	movs	r2, #128	; 0x80
    5314:	01d2      	lsls	r2, r2, #7
    5316:	884b      	ldrh	r3, [r1, #2]
    5318:	4213      	tst	r3, r2
    531a:	d1fc      	bne.n	5316 <system_gclk_chan_disable+0x32>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    531c:	4b08      	ldr	r3, [pc, #32]	; (5340 <system_gclk_chan_disable+0x5c>)
    531e:	0201      	lsls	r1, r0, #8
    5320:	8858      	ldrh	r0, [r3, #2]
    5322:	4a08      	ldr	r2, [pc, #32]	; (5344 <system_gclk_chan_disable+0x60>)
    5324:	4002      	ands	r2, r0
    5326:	430a      	orrs	r2, r1
    5328:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    532a:	4b08      	ldr	r3, [pc, #32]	; (534c <system_gclk_chan_disable+0x68>)
    532c:	58e3      	ldr	r3, [r4, r3]
    532e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    5330:	b003      	add	sp, #12
    5332:	bd30      	pop	{r4, r5, pc}
    5334:	0000174c 	.word	0x0000174c
    5338:	000000a0 	.word	0x000000a0
    533c:	40000c02 	.word	0x40000c02
    5340:	40000c00 	.word	0x40000c00
    5344:	fffff0ff 	.word	0xfffff0ff
    5348:	ffffbfff 	.word	0xffffbfff
    534c:	00000008 	.word	0x00000008

00005350 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    5350:	b510      	push	{r4, lr}
    5352:	b082      	sub	sp, #8
    5354:	4b06      	ldr	r3, [pc, #24]	; (5370 <system_gclk_chan_set_config+0x20>)
    5356:	447b      	add	r3, pc

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    5358:	780c      	ldrb	r4, [r1, #0]
    535a:	0224      	lsls	r4, r4, #8
    535c:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    535e:	4a05      	ldr	r2, [pc, #20]	; (5374 <system_gclk_chan_set_config+0x24>)
    5360:	589a      	ldr	r2, [r3, r2]
    5362:	9201      	str	r2, [sp, #4]
    5364:	4790      	blx	r2

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    5366:	b2a4      	uxth	r4, r4
    5368:	4b03      	ldr	r3, [pc, #12]	; (5378 <system_gclk_chan_set_config+0x28>)
    536a:	805c      	strh	r4, [r3, #2]
}
    536c:	b002      	add	sp, #8
    536e:	bd10      	pop	{r4, pc}
    5370:	000016e2 	.word	0x000016e2
    5374:	0000023c 	.word	0x0000023c
    5378:	40000c00 	.word	0x40000c00

0000537c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    537c:	b530      	push	{r4, r5, lr}
    537e:	b083      	sub	sp, #12
    5380:	1c05      	adds	r5, r0, #0
    5382:	4c0a      	ldr	r4, [pc, #40]	; (53ac <system_gclk_chan_get_hz+0x30>)
    5384:	447c      	add	r4, pc
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    5386:	4b0a      	ldr	r3, [pc, #40]	; (53b0 <system_gclk_chan_get_hz+0x34>)
    5388:	58e3      	ldr	r3, [r4, r3]
    538a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    538c:	4b09      	ldr	r3, [pc, #36]	; (53b4 <system_gclk_chan_get_hz+0x38>)
    538e:	701d      	strb	r5, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    5390:	4b09      	ldr	r3, [pc, #36]	; (53b8 <system_gclk_chan_get_hz+0x3c>)
    5392:	885d      	ldrh	r5, [r3, #2]
    5394:	052d      	lsls	r5, r5, #20
    5396:	0f2d      	lsrs	r5, r5, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    5398:	4b08      	ldr	r3, [pc, #32]	; (53bc <system_gclk_chan_get_hz+0x40>)
    539a:	58e3      	ldr	r3, [r4, r3]
    539c:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    539e:	1c28      	adds	r0, r5, #0
    53a0:	4b07      	ldr	r3, [pc, #28]	; (53c0 <system_gclk_chan_get_hz+0x44>)
    53a2:	58e3      	ldr	r3, [r4, r3]
    53a4:	4798      	blx	r3
}
    53a6:	b003      	add	sp, #12
    53a8:	bd30      	pop	{r4, r5, pc}
    53aa:	46c0      	nop			; (mov r8, r8)
    53ac:	000016b4 	.word	0x000016b4
    53b0:	000000a0 	.word	0x000000a0
    53b4:	40000c02 	.word	0x40000c02
    53b8:	40000c00 	.word	0x40000c00
    53bc:	00000008 	.word	0x00000008
    53c0:	000000a4 	.word	0x000000a4

000053c4 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    53c4:	4770      	bx	lr
    53c6:	46c0      	nop			; (mov r8, r8)

000053c8 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    53c8:	b510      	push	{r4, lr}
    53ca:	b082      	sub	sp, #8
    53cc:	4c09      	ldr	r4, [pc, #36]	; (53f4 <system_init+0x2c>)
    53ce:	447c      	add	r4, pc
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    53d0:	4b09      	ldr	r3, [pc, #36]	; (53f8 <system_init+0x30>)
    53d2:	58e3      	ldr	r3, [r4, r3]
    53d4:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    53d6:	4b09      	ldr	r3, [pc, #36]	; (53fc <system_init+0x34>)
    53d8:	58e3      	ldr	r3, [r4, r3]
    53da:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    53dc:	4b08      	ldr	r3, [pc, #32]	; (5400 <system_init+0x38>)
    53de:	58e3      	ldr	r3, [r4, r3]
    53e0:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    53e2:	4b08      	ldr	r3, [pc, #32]	; (5404 <system_init+0x3c>)
    53e4:	58e3      	ldr	r3, [r4, r3]
    53e6:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    53e8:	4b07      	ldr	r3, [pc, #28]	; (5408 <system_init+0x40>)
    53ea:	58e3      	ldr	r3, [r4, r3]
    53ec:	4798      	blx	r3
}
    53ee:	b002      	add	sp, #8
    53f0:	bd10      	pop	{r4, pc}
    53f2:	46c0      	nop			; (mov r8, r8)
    53f4:	0000166a 	.word	0x0000166a
    53f8:	000001f8 	.word	0x000001f8
    53fc:	00000158 	.word	0x00000158
    5400:	000001f4 	.word	0x000001f4
    5404:	00000118 	.word	0x00000118
    5408:	0000009c 	.word	0x0000009c

0000540c <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    540c:	b082      	sub	sp, #8
    540e:	4b11      	ldr	r3, [pc, #68]	; (5454 <cpu_irq_enter_critical+0x48>)
    5410:	447b      	add	r3, pc
	if (cpu_irq_critical_section_counter == 0) {
    5412:	4a11      	ldr	r2, [pc, #68]	; (5458 <cpu_irq_enter_critical+0x4c>)
    5414:	447a      	add	r2, pc
    5416:	6812      	ldr	r2, [r2, #0]
    5418:	2a00      	cmp	r2, #0
    541a:	d113      	bne.n	5444 <cpu_irq_enter_critical+0x38>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    541c:	f3ef 8210 	mrs	r2, PRIMASK
		if (cpu_irq_is_enabled()) {
    5420:	2a00      	cmp	r2, #0
    5422:	d10b      	bne.n	543c <cpu_irq_enter_critical+0x30>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    5424:	b672      	cpsid	i
    5426:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    542a:	4a0c      	ldr	r2, [pc, #48]	; (545c <cpu_irq_enter_critical+0x50>)
    542c:	589a      	ldr	r2, [r3, r2]
    542e:	2300      	movs	r3, #0
    5430:	7013      	strb	r3, [r2, #0]
			cpu_irq_prev_interrupt_state = true;
    5432:	2201      	movs	r2, #1
    5434:	4b0a      	ldr	r3, [pc, #40]	; (5460 <cpu_irq_enter_critical+0x54>)
    5436:	447b      	add	r3, pc
    5438:	711a      	strb	r2, [r3, #4]
    543a:	e003      	b.n	5444 <cpu_irq_enter_critical+0x38>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    543c:	2200      	movs	r2, #0
    543e:	4b09      	ldr	r3, [pc, #36]	; (5464 <cpu_irq_enter_critical+0x58>)
    5440:	447b      	add	r3, pc
    5442:	711a      	strb	r2, [r3, #4]
		}

	}

	cpu_irq_critical_section_counter++;
    5444:	4b08      	ldr	r3, [pc, #32]	; (5468 <cpu_irq_enter_critical+0x5c>)
    5446:	447b      	add	r3, pc
    5448:	681a      	ldr	r2, [r3, #0]
    544a:	3201      	adds	r2, #1
    544c:	601a      	str	r2, [r3, #0]
}
    544e:	b002      	add	sp, #8
    5450:	4770      	bx	lr
    5452:	46c0      	nop			; (mov r8, r8)
    5454:	00001628 	.word	0x00001628
    5458:	1fffbe64 	.word	0x1fffbe64
    545c:	000000ac 	.word	0x000000ac
    5460:	1fffbe42 	.word	0x1fffbe42
    5464:	1fffbe38 	.word	0x1fffbe38
    5468:	1fffbe32 	.word	0x1fffbe32

0000546c <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    546c:	b082      	sub	sp, #8
    546e:	4a0d      	ldr	r2, [pc, #52]	; (54a4 <cpu_irq_leave_critical+0x38>)
    5470:	447a      	add	r2, pc
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    5472:	4b0d      	ldr	r3, [pc, #52]	; (54a8 <cpu_irq_leave_critical+0x3c>)
    5474:	447b      	add	r3, pc
    5476:	6819      	ldr	r1, [r3, #0]
    5478:	3901      	subs	r1, #1
    547a:	6019      	str	r1, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    547c:	681b      	ldr	r3, [r3, #0]
    547e:	2b00      	cmp	r3, #0
    5480:	d10d      	bne.n	549e <cpu_irq_leave_critical+0x32>
    5482:	4b0a      	ldr	r3, [pc, #40]	; (54ac <cpu_irq_leave_critical+0x40>)
    5484:	447b      	add	r3, pc
    5486:	791b      	ldrb	r3, [r3, #4]
    5488:	2b00      	cmp	r3, #0
    548a:	d008      	beq.n	549e <cpu_irq_leave_critical+0x32>
		cpu_irq_enable();
    548c:	4b08      	ldr	r3, [pc, #32]	; (54b0 <cpu_irq_leave_critical+0x44>)
    548e:	58d3      	ldr	r3, [r2, r3]
    5490:	9301      	str	r3, [sp, #4]
    5492:	2301      	movs	r3, #1
    5494:	9a01      	ldr	r2, [sp, #4]
    5496:	7013      	strb	r3, [r2, #0]
    5498:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    549c:	b662      	cpsie	i
	}
}
    549e:	b002      	add	sp, #8
    54a0:	4770      	bx	lr
    54a2:	46c0      	nop			; (mov r8, r8)
    54a4:	000015c8 	.word	0x000015c8
    54a8:	1fffbe04 	.word	0x1fffbe04
    54ac:	1fffbdf4 	.word	0x1fffbdf4
    54b0:	000000ac 	.word	0x000000ac

000054b4 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    54b4:	b510      	push	{r4, lr}
    54b6:	b084      	sub	sp, #16
    54b8:	4a08      	ldr	r2, [pc, #32]	; (54dc <port_pin_set_config+0x28>)
    54ba:	447a      	add	r2, pc
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    54bc:	2480      	movs	r4, #128	; 0x80
    54be:	ab03      	add	r3, sp, #12
    54c0:	701c      	strb	r4, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    54c2:	780c      	ldrb	r4, [r1, #0]
    54c4:	705c      	strb	r4, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    54c6:	784c      	ldrb	r4, [r1, #1]
    54c8:	709c      	strb	r4, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    54ca:	7889      	ldrb	r1, [r1, #2]
    54cc:	70d9      	strb	r1, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    54ce:	1c19      	adds	r1, r3, #0
    54d0:	4b03      	ldr	r3, [pc, #12]	; (54e0 <port_pin_set_config+0x2c>)
    54d2:	58d3      	ldr	r3, [r2, r3]
    54d4:	4798      	blx	r3
}
    54d6:	b004      	add	sp, #16
    54d8:	bd10      	pop	{r4, pc}
    54da:	46c0      	nop			; (mov r8, r8)
    54dc:	0000157e 	.word	0x0000157e
    54e0:	00000264 	.word	0x00000264

000054e4 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    54e4:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    54e6:	78d3      	ldrb	r3, [r2, #3]
    54e8:	2b00      	cmp	r3, #0
    54ea:	d11e      	bne.n	552a <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    54ec:	7813      	ldrb	r3, [r2, #0]
    54ee:	2b80      	cmp	r3, #128	; 0x80
    54f0:	d004      	beq.n	54fc <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    54f2:	061b      	lsls	r3, r3, #24
    54f4:	2480      	movs	r4, #128	; 0x80
    54f6:	0264      	lsls	r4, r4, #9
    54f8:	4323      	orrs	r3, r4
    54fa:	e000      	b.n	54fe <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    54fc:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    54fe:	7854      	ldrb	r4, [r2, #1]
    5500:	2502      	movs	r5, #2
    5502:	43ac      	bics	r4, r5
    5504:	d10a      	bne.n	551c <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    5506:	7894      	ldrb	r4, [r2, #2]
    5508:	2c00      	cmp	r4, #0
    550a:	d103      	bne.n	5514 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    550c:	2480      	movs	r4, #128	; 0x80
    550e:	02a4      	lsls	r4, r4, #10
    5510:	4323      	orrs	r3, r4
    5512:	e002      	b.n	551a <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    5514:	24c0      	movs	r4, #192	; 0xc0
    5516:	02e4      	lsls	r4, r4, #11
    5518:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    551a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    551c:	7854      	ldrb	r4, [r2, #1]
    551e:	3c01      	subs	r4, #1
    5520:	2c01      	cmp	r4, #1
    5522:	d804      	bhi.n	552e <_system_pinmux_config+0x4a>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    5524:	4c11      	ldr	r4, [pc, #68]	; (556c <_system_pinmux_config+0x88>)
    5526:	4023      	ands	r3, r4
    5528:	e001      	b.n	552e <_system_pinmux_config+0x4a>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    552a:	6041      	str	r1, [r0, #4]
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    552c:	2300      	movs	r3, #0
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    552e:	040d      	lsls	r5, r1, #16
    5530:	0c2d      	lsrs	r5, r5, #16
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5532:	24a0      	movs	r4, #160	; 0xa0
    5534:	05e4      	lsls	r4, r4, #23
    5536:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    5538:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    553a:	6284      	str	r4, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    553c:	0c0d      	lsrs	r5, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    553e:	24d0      	movs	r4, #208	; 0xd0
    5540:	0624      	lsls	r4, r4, #24
    5542:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    5544:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5546:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    5548:	78d4      	ldrb	r4, [r2, #3]
    554a:	2c00      	cmp	r4, #0
    554c:	d10c      	bne.n	5568 <_system_pinmux_config+0x84>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    554e:	035c      	lsls	r4, r3, #13
    5550:	d505      	bpl.n	555e <_system_pinmux_config+0x7a>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    5552:	7893      	ldrb	r3, [r2, #2]
    5554:	2b01      	cmp	r3, #1
    5556:	d101      	bne.n	555c <_system_pinmux_config+0x78>
				port->OUTSET.reg = pin_mask;
    5558:	6181      	str	r1, [r0, #24]
    555a:	e000      	b.n	555e <_system_pinmux_config+0x7a>
			} else {
				port->OUTCLR.reg = pin_mask;
    555c:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    555e:	7853      	ldrb	r3, [r2, #1]
    5560:	3b01      	subs	r3, #1
    5562:	2b01      	cmp	r3, #1
    5564:	d800      	bhi.n	5568 <_system_pinmux_config+0x84>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    5566:	6081      	str	r1, [r0, #8]
		}
	}
}
    5568:	bd30      	pop	{r4, r5, pc}
    556a:	46c0      	nop			; (mov r8, r8)
    556c:	fffbffff 	.word	0xfffbffff

00005570 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    5570:	b508      	push	{r3, lr}
    5572:	1c03      	adds	r3, r0, #0
    5574:	1c0a      	adds	r2, r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    5576:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    5578:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    557a:	2900      	cmp	r1, #0
    557c:	d103      	bne.n	5586 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    557e:	0958      	lsrs	r0, r3, #5
    5580:	01c0      	lsls	r0, r0, #7
    5582:	4905      	ldr	r1, [pc, #20]	; (5598 <system_pinmux_pin_set_config+0x28>)
    5584:	1840      	adds	r0, r0, r1
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    5586:	211f      	movs	r1, #31
    5588:	400b      	ands	r3, r1
    558a:	2101      	movs	r1, #1
    558c:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    558e:	4b03      	ldr	r3, [pc, #12]	; (559c <system_pinmux_pin_set_config+0x2c>)
    5590:	447b      	add	r3, pc
    5592:	4798      	blx	r3
}
    5594:	bd08      	pop	{r3, pc}
    5596:	46c0      	nop			; (mov r8, r8)
    5598:	41004400 	.word	0x41004400
    559c:	ffffff51 	.word	0xffffff51

000055a0 <__gnu_thumb1_case_uqi>:
    55a0:	b402      	push	{r1}
    55a2:	4671      	mov	r1, lr
    55a4:	0849      	lsrs	r1, r1, #1
    55a6:	0049      	lsls	r1, r1, #1
    55a8:	5c09      	ldrb	r1, [r1, r0]
    55aa:	0049      	lsls	r1, r1, #1
    55ac:	448e      	add	lr, r1
    55ae:	bc02      	pop	{r1}
    55b0:	4770      	bx	lr
    55b2:	46c0      	nop			; (mov r8, r8)

000055b4 <__udivsi3>:
    55b4:	2900      	cmp	r1, #0
    55b6:	d034      	beq.n	5622 <.udivsi3_skip_div0_test+0x6a>

000055b8 <.udivsi3_skip_div0_test>:
    55b8:	2301      	movs	r3, #1
    55ba:	2200      	movs	r2, #0
    55bc:	b410      	push	{r4}
    55be:	4288      	cmp	r0, r1
    55c0:	d32c      	bcc.n	561c <.udivsi3_skip_div0_test+0x64>
    55c2:	2401      	movs	r4, #1
    55c4:	0724      	lsls	r4, r4, #28
    55c6:	42a1      	cmp	r1, r4
    55c8:	d204      	bcs.n	55d4 <.udivsi3_skip_div0_test+0x1c>
    55ca:	4281      	cmp	r1, r0
    55cc:	d202      	bcs.n	55d4 <.udivsi3_skip_div0_test+0x1c>
    55ce:	0109      	lsls	r1, r1, #4
    55d0:	011b      	lsls	r3, r3, #4
    55d2:	e7f8      	b.n	55c6 <.udivsi3_skip_div0_test+0xe>
    55d4:	00e4      	lsls	r4, r4, #3
    55d6:	42a1      	cmp	r1, r4
    55d8:	d204      	bcs.n	55e4 <.udivsi3_skip_div0_test+0x2c>
    55da:	4281      	cmp	r1, r0
    55dc:	d202      	bcs.n	55e4 <.udivsi3_skip_div0_test+0x2c>
    55de:	0049      	lsls	r1, r1, #1
    55e0:	005b      	lsls	r3, r3, #1
    55e2:	e7f8      	b.n	55d6 <.udivsi3_skip_div0_test+0x1e>
    55e4:	4288      	cmp	r0, r1
    55e6:	d301      	bcc.n	55ec <.udivsi3_skip_div0_test+0x34>
    55e8:	1a40      	subs	r0, r0, r1
    55ea:	431a      	orrs	r2, r3
    55ec:	084c      	lsrs	r4, r1, #1
    55ee:	42a0      	cmp	r0, r4
    55f0:	d302      	bcc.n	55f8 <.udivsi3_skip_div0_test+0x40>
    55f2:	1b00      	subs	r0, r0, r4
    55f4:	085c      	lsrs	r4, r3, #1
    55f6:	4322      	orrs	r2, r4
    55f8:	088c      	lsrs	r4, r1, #2
    55fa:	42a0      	cmp	r0, r4
    55fc:	d302      	bcc.n	5604 <.udivsi3_skip_div0_test+0x4c>
    55fe:	1b00      	subs	r0, r0, r4
    5600:	089c      	lsrs	r4, r3, #2
    5602:	4322      	orrs	r2, r4
    5604:	08cc      	lsrs	r4, r1, #3
    5606:	42a0      	cmp	r0, r4
    5608:	d302      	bcc.n	5610 <.udivsi3_skip_div0_test+0x58>
    560a:	1b00      	subs	r0, r0, r4
    560c:	08dc      	lsrs	r4, r3, #3
    560e:	4322      	orrs	r2, r4
    5610:	2800      	cmp	r0, #0
    5612:	d003      	beq.n	561c <.udivsi3_skip_div0_test+0x64>
    5614:	091b      	lsrs	r3, r3, #4
    5616:	d001      	beq.n	561c <.udivsi3_skip_div0_test+0x64>
    5618:	0909      	lsrs	r1, r1, #4
    561a:	e7e3      	b.n	55e4 <.udivsi3_skip_div0_test+0x2c>
    561c:	1c10      	adds	r0, r2, #0
    561e:	bc10      	pop	{r4}
    5620:	4770      	bx	lr
    5622:	2800      	cmp	r0, #0
    5624:	d001      	beq.n	562a <.udivsi3_skip_div0_test+0x72>
    5626:	2000      	movs	r0, #0
    5628:	43c0      	mvns	r0, r0
    562a:	b407      	push	{r0, r1, r2}
    562c:	4802      	ldr	r0, [pc, #8]	; (5638 <.udivsi3_skip_div0_test+0x80>)
    562e:	a102      	add	r1, pc, #8	; (adr r1, 5638 <.udivsi3_skip_div0_test+0x80>)
    5630:	1840      	adds	r0, r0, r1
    5632:	9002      	str	r0, [sp, #8]
    5634:	bd03      	pop	{r0, r1, pc}
    5636:	46c0      	nop			; (mov r8, r8)
    5638:	00000019 	.word	0x00000019

0000563c <__aeabi_uidivmod>:
    563c:	2900      	cmp	r1, #0
    563e:	d0f0      	beq.n	5622 <.udivsi3_skip_div0_test+0x6a>
    5640:	b503      	push	{r0, r1, lr}
    5642:	f7ff ffb9 	bl	55b8 <.udivsi3_skip_div0_test>
    5646:	bc0e      	pop	{r1, r2, r3}
    5648:	4342      	muls	r2, r0
    564a:	1a89      	subs	r1, r1, r2
    564c:	4718      	bx	r3
    564e:	46c0      	nop			; (mov r8, r8)

00005650 <__aeabi_idiv0>:
    5650:	4770      	bx	lr
    5652:	46c0      	nop			; (mov r8, r8)

00005654 <__muldi3>:
    5654:	469c      	mov	ip, r3
    5656:	0403      	lsls	r3, r0, #16
    5658:	b5f0      	push	{r4, r5, r6, r7, lr}
    565a:	0c1b      	lsrs	r3, r3, #16
    565c:	0417      	lsls	r7, r2, #16
    565e:	0c3f      	lsrs	r7, r7, #16
    5660:	0c15      	lsrs	r5, r2, #16
    5662:	1c1e      	adds	r6, r3, #0
    5664:	1c04      	adds	r4, r0, #0
    5666:	0c00      	lsrs	r0, r0, #16
    5668:	437e      	muls	r6, r7
    566a:	436b      	muls	r3, r5
    566c:	4347      	muls	r7, r0
    566e:	4345      	muls	r5, r0
    5670:	18fb      	adds	r3, r7, r3
    5672:	0c30      	lsrs	r0, r6, #16
    5674:	1818      	adds	r0, r3, r0
    5676:	4287      	cmp	r7, r0
    5678:	d902      	bls.n	5680 <__muldi3+0x2c>
    567a:	2380      	movs	r3, #128	; 0x80
    567c:	025b      	lsls	r3, r3, #9
    567e:	18ed      	adds	r5, r5, r3
    5680:	0c03      	lsrs	r3, r0, #16
    5682:	18ed      	adds	r5, r5, r3
    5684:	4663      	mov	r3, ip
    5686:	435c      	muls	r4, r3
    5688:	434a      	muls	r2, r1
    568a:	0436      	lsls	r6, r6, #16
    568c:	0c36      	lsrs	r6, r6, #16
    568e:	18a1      	adds	r1, r4, r2
    5690:	0400      	lsls	r0, r0, #16
    5692:	1980      	adds	r0, r0, r6
    5694:	1949      	adds	r1, r1, r5
    5696:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005698 <__libc_init_array>:
    5698:	b570      	push	{r4, r5, r6, lr}
    569a:	4e0d      	ldr	r6, [pc, #52]	; (56d0 <__libc_init_array+0x38>)
    569c:	4d0d      	ldr	r5, [pc, #52]	; (56d4 <__libc_init_array+0x3c>)
    569e:	2400      	movs	r4, #0
    56a0:	1bad      	subs	r5, r5, r6
    56a2:	10ad      	asrs	r5, r5, #2
    56a4:	d005      	beq.n	56b2 <__libc_init_array+0x1a>
    56a6:	00a3      	lsls	r3, r4, #2
    56a8:	58f3      	ldr	r3, [r6, r3]
    56aa:	3401      	adds	r4, #1
    56ac:	4798      	blx	r3
    56ae:	42a5      	cmp	r5, r4
    56b0:	d1f9      	bne.n	56a6 <__libc_init_array+0xe>
    56b2:	f001 f9b1 	bl	6a18 <_init>
    56b6:	4e08      	ldr	r6, [pc, #32]	; (56d8 <__libc_init_array+0x40>)
    56b8:	4d08      	ldr	r5, [pc, #32]	; (56dc <__libc_init_array+0x44>)
    56ba:	2400      	movs	r4, #0
    56bc:	1bad      	subs	r5, r5, r6
    56be:	10ad      	asrs	r5, r5, #2
    56c0:	d005      	beq.n	56ce <__libc_init_array+0x36>
    56c2:	00a3      	lsls	r3, r4, #2
    56c4:	58f3      	ldr	r3, [r6, r3]
    56c6:	3401      	adds	r4, #1
    56c8:	4798      	blx	r3
    56ca:	42a5      	cmp	r5, r4
    56cc:	d1f9      	bne.n	56c2 <__libc_init_array+0x2a>
    56ce:	bd70      	pop	{r4, r5, r6, pc}
    56d0:	00006a24 	.word	0x00006a24
    56d4:	00006a24 	.word	0x00006a24
    56d8:	00006a24 	.word	0x00006a24
    56dc:	00006a2c 	.word	0x00006a2c

000056e0 <memcpy>:
    56e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    56e2:	2a0f      	cmp	r2, #15
    56e4:	d935      	bls.n	5752 <memcpy+0x72>
    56e6:	1c03      	adds	r3, r0, #0
    56e8:	430b      	orrs	r3, r1
    56ea:	079c      	lsls	r4, r3, #30
    56ec:	d135      	bne.n	575a <memcpy+0x7a>
    56ee:	1c16      	adds	r6, r2, #0
    56f0:	3e10      	subs	r6, #16
    56f2:	0936      	lsrs	r6, r6, #4
    56f4:	0135      	lsls	r5, r6, #4
    56f6:	1945      	adds	r5, r0, r5
    56f8:	3510      	adds	r5, #16
    56fa:	1c0c      	adds	r4, r1, #0
    56fc:	1c03      	adds	r3, r0, #0
    56fe:	6827      	ldr	r7, [r4, #0]
    5700:	601f      	str	r7, [r3, #0]
    5702:	6867      	ldr	r7, [r4, #4]
    5704:	605f      	str	r7, [r3, #4]
    5706:	68a7      	ldr	r7, [r4, #8]
    5708:	609f      	str	r7, [r3, #8]
    570a:	68e7      	ldr	r7, [r4, #12]
    570c:	3410      	adds	r4, #16
    570e:	60df      	str	r7, [r3, #12]
    5710:	3310      	adds	r3, #16
    5712:	42ab      	cmp	r3, r5
    5714:	d1f3      	bne.n	56fe <memcpy+0x1e>
    5716:	1c73      	adds	r3, r6, #1
    5718:	011b      	lsls	r3, r3, #4
    571a:	18c5      	adds	r5, r0, r3
    571c:	18c9      	adds	r1, r1, r3
    571e:	230f      	movs	r3, #15
    5720:	4013      	ands	r3, r2
    5722:	2b03      	cmp	r3, #3
    5724:	d91b      	bls.n	575e <memcpy+0x7e>
    5726:	1f1c      	subs	r4, r3, #4
    5728:	08a4      	lsrs	r4, r4, #2
    572a:	3401      	adds	r4, #1
    572c:	00a4      	lsls	r4, r4, #2
    572e:	2300      	movs	r3, #0
    5730:	58ce      	ldr	r6, [r1, r3]
    5732:	50ee      	str	r6, [r5, r3]
    5734:	3304      	adds	r3, #4
    5736:	42a3      	cmp	r3, r4
    5738:	d1fa      	bne.n	5730 <memcpy+0x50>
    573a:	18ed      	adds	r5, r5, r3
    573c:	18c9      	adds	r1, r1, r3
    573e:	2303      	movs	r3, #3
    5740:	401a      	ands	r2, r3
    5742:	d005      	beq.n	5750 <memcpy+0x70>
    5744:	2300      	movs	r3, #0
    5746:	5ccc      	ldrb	r4, [r1, r3]
    5748:	54ec      	strb	r4, [r5, r3]
    574a:	3301      	adds	r3, #1
    574c:	4293      	cmp	r3, r2
    574e:	d1fa      	bne.n	5746 <memcpy+0x66>
    5750:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5752:	1c05      	adds	r5, r0, #0
    5754:	2a00      	cmp	r2, #0
    5756:	d1f5      	bne.n	5744 <memcpy+0x64>
    5758:	e7fa      	b.n	5750 <memcpy+0x70>
    575a:	1c05      	adds	r5, r0, #0
    575c:	e7f2      	b.n	5744 <memcpy+0x64>
    575e:	1c1a      	adds	r2, r3, #0
    5760:	e7f8      	b.n	5754 <memcpy+0x74>
    5762:	46c0      	nop			; (mov r8, r8)

00005764 <memset>:
    5764:	b5f0      	push	{r4, r5, r6, r7, lr}
    5766:	0783      	lsls	r3, r0, #30
    5768:	d046      	beq.n	57f8 <memset+0x94>
    576a:	1e54      	subs	r4, r2, #1
    576c:	2a00      	cmp	r2, #0
    576e:	d042      	beq.n	57f6 <memset+0x92>
    5770:	b2ce      	uxtb	r6, r1
    5772:	1c03      	adds	r3, r0, #0
    5774:	2503      	movs	r5, #3
    5776:	e003      	b.n	5780 <memset+0x1c>
    5778:	1e62      	subs	r2, r4, #1
    577a:	2c00      	cmp	r4, #0
    577c:	d03b      	beq.n	57f6 <memset+0x92>
    577e:	1c14      	adds	r4, r2, #0
    5780:	3301      	adds	r3, #1
    5782:	1e5a      	subs	r2, r3, #1
    5784:	7016      	strb	r6, [r2, #0]
    5786:	422b      	tst	r3, r5
    5788:	d1f6      	bne.n	5778 <memset+0x14>
    578a:	2c03      	cmp	r4, #3
    578c:	d92b      	bls.n	57e6 <memset+0x82>
    578e:	25ff      	movs	r5, #255	; 0xff
    5790:	400d      	ands	r5, r1
    5792:	022a      	lsls	r2, r5, #8
    5794:	4315      	orrs	r5, r2
    5796:	042a      	lsls	r2, r5, #16
    5798:	4315      	orrs	r5, r2
    579a:	2c0f      	cmp	r4, #15
    579c:	d915      	bls.n	57ca <memset+0x66>
    579e:	1c27      	adds	r7, r4, #0
    57a0:	3f10      	subs	r7, #16
    57a2:	093f      	lsrs	r7, r7, #4
    57a4:	1c1e      	adds	r6, r3, #0
    57a6:	013a      	lsls	r2, r7, #4
    57a8:	3610      	adds	r6, #16
    57aa:	18b6      	adds	r6, r6, r2
    57ac:	1c1a      	adds	r2, r3, #0
    57ae:	6015      	str	r5, [r2, #0]
    57b0:	6055      	str	r5, [r2, #4]
    57b2:	6095      	str	r5, [r2, #8]
    57b4:	60d5      	str	r5, [r2, #12]
    57b6:	3210      	adds	r2, #16
    57b8:	42b2      	cmp	r2, r6
    57ba:	d1f8      	bne.n	57ae <memset+0x4a>
    57bc:	3701      	adds	r7, #1
    57be:	013f      	lsls	r7, r7, #4
    57c0:	220f      	movs	r2, #15
    57c2:	19db      	adds	r3, r3, r7
    57c4:	4014      	ands	r4, r2
    57c6:	2c03      	cmp	r4, #3
    57c8:	d90d      	bls.n	57e6 <memset+0x82>
    57ca:	1f27      	subs	r7, r4, #4
    57cc:	08bf      	lsrs	r7, r7, #2
    57ce:	00ba      	lsls	r2, r7, #2
    57d0:	1d1e      	adds	r6, r3, #4
    57d2:	18b6      	adds	r6, r6, r2
    57d4:	1c1a      	adds	r2, r3, #0
    57d6:	c220      	stmia	r2!, {r5}
    57d8:	42b2      	cmp	r2, r6
    57da:	d1fc      	bne.n	57d6 <memset+0x72>
    57dc:	3701      	adds	r7, #1
    57de:	00bf      	lsls	r7, r7, #2
    57e0:	2203      	movs	r2, #3
    57e2:	19db      	adds	r3, r3, r7
    57e4:	4014      	ands	r4, r2
    57e6:	2c00      	cmp	r4, #0
    57e8:	d005      	beq.n	57f6 <memset+0x92>
    57ea:	191c      	adds	r4, r3, r4
    57ec:	b2c9      	uxtb	r1, r1
    57ee:	7019      	strb	r1, [r3, #0]
    57f0:	3301      	adds	r3, #1
    57f2:	42a3      	cmp	r3, r4
    57f4:	d1fb      	bne.n	57ee <memset+0x8a>
    57f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    57f8:	1c14      	adds	r4, r2, #0
    57fa:	1c03      	adds	r3, r0, #0
    57fc:	e7c5      	b.n	578a <memset+0x26>
    57fe:	46c0      	nop			; (mov r8, r8)

00005800 <strncmp>:
    5800:	b570      	push	{r4, r5, r6, lr}
    5802:	1c05      	adds	r5, r0, #0
    5804:	2000      	movs	r0, #0
    5806:	2a00      	cmp	r2, #0
    5808:	d02c      	beq.n	5864 <strncmp+0x64>
    580a:	1c2b      	adds	r3, r5, #0
    580c:	430b      	orrs	r3, r1
    580e:	079c      	lsls	r4, r3, #30
    5810:	d129      	bne.n	5866 <strncmp+0x66>
    5812:	2a03      	cmp	r2, #3
    5814:	d927      	bls.n	5866 <strncmp+0x66>
    5816:	682c      	ldr	r4, [r5, #0]
    5818:	680e      	ldr	r6, [r1, #0]
    581a:	42b4      	cmp	r4, r6
    581c:	d123      	bne.n	5866 <strncmp+0x66>
    581e:	1f13      	subs	r3, r2, #4
    5820:	2b00      	cmp	r3, #0
    5822:	d01f      	beq.n	5864 <strncmp+0x64>
    5824:	4e22      	ldr	r6, [pc, #136]	; (58b0 <strncmp+0xb0>)
    5826:	19a2      	adds	r2, r4, r6
    5828:	4e22      	ldr	r6, [pc, #136]	; (58b4 <strncmp+0xb4>)
    582a:	43a2      	bics	r2, r4
    582c:	4232      	tst	r2, r6
    582e:	d00e      	beq.n	584e <strncmp+0x4e>
    5830:	e018      	b.n	5864 <strncmp+0x64>
    5832:	686a      	ldr	r2, [r5, #4]
    5834:	6849      	ldr	r1, [r1, #4]
    5836:	428a      	cmp	r2, r1
    5838:	d12e      	bne.n	5898 <strncmp+0x98>
    583a:	3b04      	subs	r3, #4
    583c:	2b00      	cmp	r3, #0
    583e:	d010      	beq.n	5862 <strncmp+0x62>
    5840:	4d1b      	ldr	r5, [pc, #108]	; (58b0 <strncmp+0xb0>)
    5842:	1951      	adds	r1, r2, r5
    5844:	4391      	bics	r1, r2
    5846:	4231      	tst	r1, r6
    5848:	d10b      	bne.n	5862 <strncmp+0x62>
    584a:	1c21      	adds	r1, r4, #0
    584c:	1c05      	adds	r5, r0, #0
    584e:	1d28      	adds	r0, r5, #4
    5850:	1d0c      	adds	r4, r1, #4
    5852:	2b03      	cmp	r3, #3
    5854:	d8ed      	bhi.n	5832 <strncmp+0x32>
    5856:	1e5a      	subs	r2, r3, #1
    5858:	2b00      	cmp	r3, #0
    585a:	d021      	beq.n	58a0 <strncmp+0xa0>
    585c:	1c21      	adds	r1, r4, #0
    585e:	1c05      	adds	r5, r0, #0
    5860:	e002      	b.n	5868 <strncmp+0x68>
    5862:	2000      	movs	r0, #0
    5864:	bd70      	pop	{r4, r5, r6, pc}
    5866:	3a01      	subs	r2, #1
    5868:	782c      	ldrb	r4, [r5, #0]
    586a:	7808      	ldrb	r0, [r1, #0]
    586c:	4284      	cmp	r4, r0
    586e:	d11b      	bne.n	58a8 <strncmp+0xa8>
    5870:	2a00      	cmp	r2, #0
    5872:	d0f6      	beq.n	5862 <strncmp+0x62>
    5874:	2c00      	cmp	r4, #0
    5876:	d0f4      	beq.n	5862 <strncmp+0x62>
    5878:	1c6b      	adds	r3, r5, #1
    587a:	3101      	adds	r1, #1
    587c:	18ad      	adds	r5, r5, r2
    587e:	e005      	b.n	588c <strncmp+0x8c>
    5880:	42ab      	cmp	r3, r5
    5882:	d0ee      	beq.n	5862 <strncmp+0x62>
    5884:	2c00      	cmp	r4, #0
    5886:	d0ec      	beq.n	5862 <strncmp+0x62>
    5888:	3301      	adds	r3, #1
    588a:	3101      	adds	r1, #1
    588c:	781c      	ldrb	r4, [r3, #0]
    588e:	780a      	ldrb	r2, [r1, #0]
    5890:	4294      	cmp	r4, r2
    5892:	d0f5      	beq.n	5880 <strncmp+0x80>
    5894:	1aa0      	subs	r0, r4, r2
    5896:	e7e5      	b.n	5864 <strncmp+0x64>
    5898:	1e5a      	subs	r2, r3, #1
    589a:	1c21      	adds	r1, r4, #0
    589c:	1c05      	adds	r5, r0, #0
    589e:	e7e3      	b.n	5868 <strncmp+0x68>
    58a0:	792c      	ldrb	r4, [r5, #4]
    58a2:	790a      	ldrb	r2, [r1, #4]
    58a4:	1aa0      	subs	r0, r4, r2
    58a6:	e7dd      	b.n	5864 <strncmp+0x64>
    58a8:	1c02      	adds	r2, r0, #0
    58aa:	1aa0      	subs	r0, r4, r2
    58ac:	e7da      	b.n	5864 <strncmp+0x64>
    58ae:	46c0      	nop			; (mov r8, r8)
    58b0:	fefefeff 	.word	0xfefefeff
    58b4:	80808080 	.word	0x80808080

000058b8 <strncpy>:
    58b8:	1c03      	adds	r3, r0, #0
    58ba:	430b      	orrs	r3, r1
    58bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    58be:	1c04      	adds	r4, r0, #0
    58c0:	079d      	lsls	r5, r3, #30
    58c2:	d101      	bne.n	58c8 <strncpy+0x10>
    58c4:	2a03      	cmp	r2, #3
    58c6:	d815      	bhi.n	58f4 <strncpy+0x3c>
    58c8:	2a00      	cmp	r2, #0
    58ca:	d012      	beq.n	58f2 <strncpy+0x3a>
    58cc:	780d      	ldrb	r5, [r1, #0]
    58ce:	3a01      	subs	r2, #1
    58d0:	1c63      	adds	r3, r4, #1
    58d2:	1c4e      	adds	r6, r1, #1
    58d4:	7025      	strb	r5, [r4, #0]
    58d6:	2d00      	cmp	r5, #0
    58d8:	d01b      	beq.n	5912 <strncpy+0x5a>
    58da:	1c31      	adds	r1, r6, #0
    58dc:	e007      	b.n	58ee <strncpy+0x36>
    58de:	780c      	ldrb	r4, [r1, #0]
    58e0:	3301      	adds	r3, #1
    58e2:	1e5d      	subs	r5, r3, #1
    58e4:	3a01      	subs	r2, #1
    58e6:	702c      	strb	r4, [r5, #0]
    58e8:	3101      	adds	r1, #1
    58ea:	2c00      	cmp	r4, #0
    58ec:	d011      	beq.n	5912 <strncpy+0x5a>
    58ee:	2a00      	cmp	r2, #0
    58f0:	d1f5      	bne.n	58de <strncpy+0x26>
    58f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    58f4:	4e0b      	ldr	r6, [pc, #44]	; (5924 <strncpy+0x6c>)
    58f6:	680b      	ldr	r3, [r1, #0]
    58f8:	4f0b      	ldr	r7, [pc, #44]	; (5928 <strncpy+0x70>)
    58fa:	19dd      	adds	r5, r3, r7
    58fc:	439d      	bics	r5, r3
    58fe:	4235      	tst	r5, r6
    5900:	d1e2      	bne.n	58c8 <strncpy+0x10>
    5902:	3404      	adds	r4, #4
    5904:	1f25      	subs	r5, r4, #4
    5906:	3a04      	subs	r2, #4
    5908:	3104      	adds	r1, #4
    590a:	602b      	str	r3, [r5, #0]
    590c:	2a03      	cmp	r2, #3
    590e:	d8f2      	bhi.n	58f6 <strncpy+0x3e>
    5910:	e7da      	b.n	58c8 <strncpy+0x10>
    5912:	189c      	adds	r4, r3, r2
    5914:	2100      	movs	r1, #0
    5916:	2a00      	cmp	r2, #0
    5918:	d0eb      	beq.n	58f2 <strncpy+0x3a>
    591a:	7019      	strb	r1, [r3, #0]
    591c:	3301      	adds	r3, #1
    591e:	42a3      	cmp	r3, r4
    5920:	d1fb      	bne.n	591a <strncpy+0x62>
    5922:	e7e6      	b.n	58f2 <strncpy+0x3a>
    5924:	80808080 	.word	0x80808080
    5928:	fefefeff 	.word	0xfefefeff

0000592c <register_fini>:
    592c:	b508      	push	{r3, lr}
    592e:	4b03      	ldr	r3, [pc, #12]	; (593c <register_fini+0x10>)
    5930:	2b00      	cmp	r3, #0
    5932:	d002      	beq.n	593a <register_fini+0xe>
    5934:	4802      	ldr	r0, [pc, #8]	; (5940 <register_fini+0x14>)
    5936:	f000 f805 	bl	5944 <atexit>
    593a:	bd08      	pop	{r3, pc}
    593c:	00000000 	.word	0x00000000
    5940:	00005955 	.word	0x00005955

00005944 <atexit>:
    5944:	b508      	push	{r3, lr}
    5946:	1c01      	adds	r1, r0, #0
    5948:	2200      	movs	r2, #0
    594a:	2000      	movs	r0, #0
    594c:	2300      	movs	r3, #0
    594e:	f000 f819 	bl	5984 <__register_exitproc>
    5952:	bd08      	pop	{r3, pc}

00005954 <__libc_fini_array>:
    5954:	b538      	push	{r3, r4, r5, lr}
    5956:	4b09      	ldr	r3, [pc, #36]	; (597c <__libc_fini_array+0x28>)
    5958:	4d09      	ldr	r5, [pc, #36]	; (5980 <__libc_fini_array+0x2c>)
    595a:	1aed      	subs	r5, r5, r3
    595c:	10ad      	asrs	r5, r5, #2
    595e:	d009      	beq.n	5974 <__libc_fini_array+0x20>
    5960:	3d01      	subs	r5, #1
    5962:	00ac      	lsls	r4, r5, #2
    5964:	18e4      	adds	r4, r4, r3
    5966:	e000      	b.n	596a <__libc_fini_array+0x16>
    5968:	3d01      	subs	r5, #1
    596a:	6823      	ldr	r3, [r4, #0]
    596c:	4798      	blx	r3
    596e:	3c04      	subs	r4, #4
    5970:	2d00      	cmp	r5, #0
    5972:	d1f9      	bne.n	5968 <__libc_fini_array+0x14>
    5974:	f001 f85a 	bl	6a2c <_fini>
    5978:	bd38      	pop	{r3, r4, r5, pc}
    597a:	46c0      	nop			; (mov r8, r8)
    597c:	00006a38 	.word	0x00006a38
    5980:	00006a3c 	.word	0x00006a3c

00005984 <__register_exitproc>:
    5984:	b5f0      	push	{r4, r5, r6, r7, lr}
    5986:	464f      	mov	r7, r9
    5988:	4646      	mov	r6, r8
    598a:	b4c0      	push	{r6, r7}
    598c:	4698      	mov	r8, r3
    598e:	4b2b      	ldr	r3, [pc, #172]	; (5a3c <__register_exitproc+0xb8>)
    5990:	25a4      	movs	r5, #164	; 0xa4
    5992:	681b      	ldr	r3, [r3, #0]
    5994:	006d      	lsls	r5, r5, #1
    5996:	595c      	ldr	r4, [r3, r5]
    5998:	b083      	sub	sp, #12
    599a:	1c06      	adds	r6, r0, #0
    599c:	1c0f      	adds	r7, r1, #0
    599e:	4691      	mov	r9, r2
    59a0:	9301      	str	r3, [sp, #4]
    59a2:	2c00      	cmp	r4, #0
    59a4:	d044      	beq.n	5a30 <__register_exitproc+0xac>
    59a6:	6865      	ldr	r5, [r4, #4]
    59a8:	2d1f      	cmp	r5, #31
    59aa:	dd1a      	ble.n	59e2 <__register_exitproc+0x5e>
    59ac:	4b24      	ldr	r3, [pc, #144]	; (5a40 <__register_exitproc+0xbc>)
    59ae:	2b00      	cmp	r3, #0
    59b0:	d102      	bne.n	59b8 <__register_exitproc+0x34>
    59b2:	2001      	movs	r0, #1
    59b4:	4240      	negs	r0, r0
    59b6:	e01c      	b.n	59f2 <__register_exitproc+0x6e>
    59b8:	20c8      	movs	r0, #200	; 0xc8
    59ba:	0040      	lsls	r0, r0, #1
    59bc:	e000      	b.n	59c0 <__register_exitproc+0x3c>
    59be:	bf00      	nop
    59c0:	1e04      	subs	r4, r0, #0
    59c2:	d0f6      	beq.n	59b2 <__register_exitproc+0x2e>
    59c4:	2500      	movs	r5, #0
    59c6:	6045      	str	r5, [r0, #4]
    59c8:	23a4      	movs	r3, #164	; 0xa4
    59ca:	9801      	ldr	r0, [sp, #4]
    59cc:	005b      	lsls	r3, r3, #1
    59ce:	58c0      	ldr	r0, [r0, r3]
    59d0:	9901      	ldr	r1, [sp, #4]
    59d2:	6020      	str	r0, [r4, #0]
    59d4:	50cc      	str	r4, [r1, r3]
    59d6:	23c4      	movs	r3, #196	; 0xc4
    59d8:	005b      	lsls	r3, r3, #1
    59da:	50e5      	str	r5, [r4, r3]
    59dc:	23c6      	movs	r3, #198	; 0xc6
    59de:	005b      	lsls	r3, r3, #1
    59e0:	50e5      	str	r5, [r4, r3]
    59e2:	2e00      	cmp	r6, #0
    59e4:	d10a      	bne.n	59fc <__register_exitproc+0x78>
    59e6:	1c6b      	adds	r3, r5, #1
    59e8:	3502      	adds	r5, #2
    59ea:	00ad      	lsls	r5, r5, #2
    59ec:	6063      	str	r3, [r4, #4]
    59ee:	2000      	movs	r0, #0
    59f0:	512f      	str	r7, [r5, r4]
    59f2:	b003      	add	sp, #12
    59f4:	bc0c      	pop	{r2, r3}
    59f6:	4690      	mov	r8, r2
    59f8:	4699      	mov	r9, r3
    59fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    59fc:	00ab      	lsls	r3, r5, #2
    59fe:	18e3      	adds	r3, r4, r3
    5a00:	2288      	movs	r2, #136	; 0x88
    5a02:	4648      	mov	r0, r9
    5a04:	5098      	str	r0, [r3, r2]
    5a06:	20c4      	movs	r0, #196	; 0xc4
    5a08:	0040      	lsls	r0, r0, #1
    5a0a:	1822      	adds	r2, r4, r0
    5a0c:	6810      	ldr	r0, [r2, #0]
    5a0e:	2101      	movs	r1, #1
    5a10:	40a9      	lsls	r1, r5
    5a12:	4308      	orrs	r0, r1
    5a14:	6010      	str	r0, [r2, #0]
    5a16:	2284      	movs	r2, #132	; 0x84
    5a18:	0052      	lsls	r2, r2, #1
    5a1a:	4640      	mov	r0, r8
    5a1c:	5098      	str	r0, [r3, r2]
    5a1e:	2e02      	cmp	r6, #2
    5a20:	d1e1      	bne.n	59e6 <__register_exitproc+0x62>
    5a22:	22c6      	movs	r2, #198	; 0xc6
    5a24:	0052      	lsls	r2, r2, #1
    5a26:	18a3      	adds	r3, r4, r2
    5a28:	6818      	ldr	r0, [r3, #0]
    5a2a:	4301      	orrs	r1, r0
    5a2c:	6019      	str	r1, [r3, #0]
    5a2e:	e7da      	b.n	59e6 <__register_exitproc+0x62>
    5a30:	1c1c      	adds	r4, r3, #0
    5a32:	344d      	adds	r4, #77	; 0x4d
    5a34:	34ff      	adds	r4, #255	; 0xff
    5a36:	515c      	str	r4, [r3, r5]
    5a38:	e7b5      	b.n	59a6 <__register_exitproc+0x22>
    5a3a:	46c0      	nop			; (mov r8, r8)
    5a3c:	00006a14 	.word	0x00006a14
    5a40:	00000000 	.word	0x00000000
    5a44:	41447249 	.word	0x41447249
    5a48:	00000000 	.word	0x00000000
    5a4c:	676e6950 	.word	0x676e6950
    5a50:	00000000 	.word	0x00000000
    5a54:	636e7953 	.word	0x636e7953
    5a58:	00000000 	.word	0x00000000
    5a5c:	42000800 	.word	0x42000800
    5a60:	42000c00 	.word	0x42000c00
    5a64:	42001000 	.word	0x42001000
    5a68:	42001400 	.word	0x42001400
    5a6c:	0c0b0a09 	.word	0x0c0b0a09
    5a70:	43415254 	.word	0x43415254
    5a74:	53415f45 	.word	0x53415f45
    5a78:	54524553 	.word	0x54524553
    5a7c:	5476203a 	.word	0x5476203a
    5a80:	65636172 	.word	0x65636172
    5a84:	6f727245 	.word	0x6f727245
    5a88:	6d203a72 	.word	0x6d203a72
    5a8c:	3d206773 	.word	0x3d206773
    5a90:	554e203d 	.word	0x554e203d
    5a94:	00004c4c 	.word	0x00004c4c
    5a98:	43415254 	.word	0x43415254
    5a9c:	53415f45 	.word	0x53415f45
    5aa0:	54524553 	.word	0x54524553
    5aa4:	5476203a 	.word	0x5476203a
    5aa8:	65636172 	.word	0x65636172
    5aac:	6f727245 	.word	0x6f727245
    5ab0:	52203a72 	.word	0x52203a72
    5ab4:	726f6365 	.word	0x726f6365
    5ab8:	44726564 	.word	0x44726564
    5abc:	50617461 	.word	0x50617461
    5ac0:	3d207274 	.word	0x3d207274
    5ac4:	554e203d 	.word	0x554e203d
    5ac8:	00004c4c 	.word	0x00004c4c
    5acc:	63617254 	.word	0x63617254
    5ad0:	65522065 	.word	0x65522065
    5ad4:	64726f63 	.word	0x64726f63
    5ad8:	44207265 	.word	0x44207265
    5adc:	006f6d65 	.word	0x006f6d65
    5ae0:	63617254 	.word	0x63617254
    5ae4:	74732065 	.word	0x74732065
    5ae8:	20747261 	.word	0x20747261
    5aec:	6b72616d 	.word	0x6b72616d
    5af0:	20737265 	.word	0x20737265
    5af4:	65726c61 	.word	0x65726c61
    5af8:	20796461 	.word	0x20796461
    5afc:	74696e69 	.word	0x74696e69
    5b00:	696c6169 	.word	0x696c6169
    5b04:	2164657a 	.word	0x2164657a
    5b08:	00000000 	.word	0x00000000
    5b0c:	65747441 	.word	0x65747441
    5b10:	2074706d 	.word	0x2074706d
    5b14:	69206f74 	.word	0x69206f74
    5b18:	7865646e 	.word	0x7865646e
    5b1c:	74756f20 	.word	0x74756f20
    5b20:	65646973 	.word	0x65646973
    5b24:	65766520 	.word	0x65766520
    5b28:	6220746e 	.word	0x6220746e
    5b2c:	65666675 	.word	0x65666675
    5b30:	00002172 	.word	0x00002172
    5b34:	43415254 	.word	0x43415254
    5b38:	53415f45 	.word	0x53415f45
    5b3c:	54524553 	.word	0x54524553
    5b40:	6975203a 	.word	0x6975203a
    5b44:	65646e49 	.word	0x65646e49
    5b48:	4f664f78 	.word	0x4f664f78
    5b4c:	63656a62 	.word	0x63656a62
    5b50:	49203a74 	.word	0x49203a74
    5b54:	6c61766e 	.word	0x6c61766e
    5b58:	76206469 	.word	0x76206469
    5b5c:	65756c61 	.word	0x65756c61
    5b60:	726f6620 	.word	0x726f6620
    5b64:	6a626f20 	.word	0x6a626f20
    5b68:	63746365 	.word	0x63746365
    5b6c:	7373616c 	.word	0x7373616c
    5b70:	00000000 	.word	0x00000000
    5b74:	43415254 	.word	0x43415254
    5b78:	53415f45 	.word	0x53415f45
    5b7c:	54524553 	.word	0x54524553
    5b80:	6975203a 	.word	0x6975203a
    5b84:	65646e49 	.word	0x65646e49
    5b88:	4f664f78 	.word	0x4f664f78
    5b8c:	63656a62 	.word	0x63656a62
    5b90:	49203a74 	.word	0x49203a74
    5b94:	6c61766e 	.word	0x6c61766e
    5b98:	76206469 	.word	0x76206469
    5b9c:	65756c61 	.word	0x65756c61
    5ba0:	726f6620 	.word	0x726f6620
    5ba4:	6a626f20 	.word	0x6a626f20
    5ba8:	68746365 	.word	0x68746365
    5bac:	6c646e61 	.word	0x6c646e61
    5bb0:	00000065 	.word	0x00000065
    5bb4:	43415254 	.word	0x43415254
    5bb8:	53415f45 	.word	0x53415f45
    5bbc:	54524553 	.word	0x54524553
    5bc0:	5478203a 	.word	0x5478203a
    5bc4:	65636172 	.word	0x65636172
    5bc8:	4f746547 	.word	0x4f746547
    5bcc:	63656a62 	.word	0x63656a62
    5bd0:	6e614874 	.word	0x6e614874
    5bd4:	3a656c64 	.word	0x3a656c64
    5bd8:	766e4920 	.word	0x766e4920
    5bdc:	64696c61 	.word	0x64696c61
    5be0:	6c617620 	.word	0x6c617620
    5be4:	66206575 	.word	0x66206575
    5be8:	6f20726f 	.word	0x6f20726f
    5bec:	63656a62 	.word	0x63656a62
    5bf0:	616c6374 	.word	0x616c6374
    5bf4:	00007373 	.word	0x00007373
    5bf8:	43415254 	.word	0x43415254
    5bfc:	53415f45 	.word	0x53415f45
    5c00:	54524553 	.word	0x54524553
    5c04:	5476203a 	.word	0x5476203a
    5c08:	65636172 	.word	0x65636172
    5c0c:	65657246 	.word	0x65657246
    5c10:	656a624f 	.word	0x656a624f
    5c14:	61487463 	.word	0x61487463
    5c18:	656c646e 	.word	0x656c646e
    5c1c:	6e49203a 	.word	0x6e49203a
    5c20:	696c6176 	.word	0x696c6176
    5c24:	61762064 	.word	0x61762064
    5c28:	2065756c 	.word	0x2065756c
    5c2c:	20726f66 	.word	0x20726f66
    5c30:	656a626f 	.word	0x656a626f
    5c34:	6c637463 	.word	0x6c637463
    5c38:	00737361 	.word	0x00737361
    5c3c:	43415254 	.word	0x43415254
    5c40:	53415f45 	.word	0x53415f45
    5c44:	54524553 	.word	0x54524553
    5c48:	5476203a 	.word	0x5476203a
    5c4c:	65636172 	.word	0x65636172
    5c50:	65657246 	.word	0x65657246
    5c54:	656a624f 	.word	0x656a624f
    5c58:	61487463 	.word	0x61487463
    5c5c:	656c646e 	.word	0x656c646e
    5c60:	6e49203a 	.word	0x6e49203a
    5c64:	696c6176 	.word	0x696c6176
    5c68:	61762064 	.word	0x61762064
    5c6c:	2065756c 	.word	0x2065756c
    5c70:	20726f66 	.word	0x20726f66
    5c74:	646e6168 	.word	0x646e6168
    5c78:	0000656c 	.word	0x0000656c
    5c7c:	65747441 	.word	0x65747441
    5c80:	2074706d 	.word	0x2074706d
    5c84:	66206f74 	.word	0x66206f74
    5c88:	20656572 	.word	0x20656572
    5c8c:	65726f6d 	.word	0x65726f6d
    5c90:	6e616820 	.word	0x6e616820
    5c94:	73656c64 	.word	0x73656c64
    5c98:	61687420 	.word	0x61687420
    5c9c:	6c61206e 	.word	0x6c61206e
    5ca0:	61636f6c 	.word	0x61636f6c
    5ca4:	21646574 	.word	0x21646574
    5ca8:	00000000 	.word	0x00000000
    5cac:	43415254 	.word	0x43415254
    5cb0:	53415f45 	.word	0x53415f45
    5cb4:	54524553 	.word	0x54524553
    5cb8:	5476203a 	.word	0x5476203a
    5cbc:	65636172 	.word	0x65636172
    5cc0:	4f746553 	.word	0x4f746553
    5cc4:	63656a62 	.word	0x63656a62
    5cc8:	6d614e74 	.word	0x6d614e74
    5ccc:	6e203a65 	.word	0x6e203a65
    5cd0:	20656d61 	.word	0x20656d61
    5cd4:	4e203d3d 	.word	0x4e203d3d
    5cd8:	004c4c55 	.word	0x004c4c55
    5cdc:	656c6c49 	.word	0x656c6c49
    5ce0:	206c6167 	.word	0x206c6167
    5ce4:	656a626f 	.word	0x656a626f
    5ce8:	63207463 	.word	0x63207463
    5cec:	7373616c 	.word	0x7373616c
    5cf0:	206e6920 	.word	0x206e6920
    5cf4:	61725476 	.word	0x61725476
    5cf8:	65536563 	.word	0x65536563
    5cfc:	6a624f74 	.word	0x6a624f74
    5d00:	4e746365 	.word	0x4e746365
    5d04:	00656d61 	.word	0x00656d61
    5d08:	656c6c49 	.word	0x656c6c49
    5d0c:	206c6167 	.word	0x206c6167
    5d10:	646e6168 	.word	0x646e6168
    5d14:	2820656c 	.word	0x2820656c
    5d18:	69202930 	.word	0x69202930
    5d1c:	5476206e 	.word	0x5476206e
    5d20:	65636172 	.word	0x65636172
    5d24:	4f746553 	.word	0x4f746553
    5d28:	63656a62 	.word	0x63656a62
    5d2c:	6d614e74 	.word	0x6d614e74
    5d30:	00002e65 	.word	0x00002e65
    5d34:	43415254 	.word	0x43415254
    5d38:	53415f45 	.word	0x53415f45
    5d3c:	54524553 	.word	0x54524553
    5d40:	7270203a 	.word	0x7270203a
    5d44:	65684376 	.word	0x65684376
    5d48:	61446b63 	.word	0x61446b63
    5d4c:	6f546174 	.word	0x6f546174
    5d50:	764f6542 	.word	0x764f6542
    5d54:	72777265 	.word	0x72777265
    5d58:	65747469 	.word	0x65747469
    5d5c:	726f466e 	.word	0x726f466e
    5d60:	746c754d 	.word	0x746c754d
    5d64:	746e4569 	.word	0x746e4569
    5d68:	76457972 	.word	0x76457972
    5d6c:	73746e65 	.word	0x73746e65
    5d70:	6f6e203a 	.word	0x6f6e203a
    5d74:	746e4566 	.word	0x746e4566
    5d78:	73656972 	.word	0x73656972
    5d7c:	68436f54 	.word	0x68436f54
    5d80:	206b6365 	.word	0x206b6365
    5d84:	30203d3d 	.word	0x30203d3d
    5d88:	00000000 	.word	0x00000000
    5d8c:	43415254 	.word	0x43415254
    5d90:	53415f45 	.word	0x53415f45
    5d94:	54524553 	.word	0x54524553
    5d98:	7270203a 	.word	0x7270203a
    5d9c:	61725476 	.word	0x61725476
    5da0:	65476563 	.word	0x65476563
    5da4:	53544474 	.word	0x53544474
    5da8:	6e49203a 	.word	0x6e49203a
    5dac:	696c6176 	.word	0x696c6176
    5db0:	61762064 	.word	0x61762064
    5db4:	2065756c 	.word	0x2065756c
    5db8:	20726f66 	.word	0x20726f66
    5dbc:	61726170 	.word	0x61726170
    5dc0:	616d5f6d 	.word	0x616d5f6d
    5dc4:	53544478 	.word	0x53544478
    5dc8:	00000000 	.word	0x00000000
    5dcc:	20646142 	.word	0x20646142
    5dd0:	61726170 	.word	0x61726170
    5dd4:	616d5f6d 	.word	0x616d5f6d
    5dd8:	53544478 	.word	0x53544478
    5ddc:	206e6920 	.word	0x206e6920
    5de0:	54767270 	.word	0x54767270
    5de4:	65636172 	.word	0x65636172
    5de8:	44746547 	.word	0x44746547
    5dec:	00005354 	.word	0x00005354
    5df0:	43415254 	.word	0x43415254
    5df4:	53415f45 	.word	0x53415f45
    5df8:	54524553 	.word	0x54524553
    5dfc:	7270203a 	.word	0x7270203a
    5e00:	61725476 	.word	0x61725476
    5e04:	6f4c6563 	.word	0x6f4c6563
    5e08:	70756b6f 	.word	0x70756b6f
    5e0c:	626d7953 	.word	0x626d7953
    5e10:	61546c6f 	.word	0x61546c6f
    5e14:	45656c62 	.word	0x45656c62
    5e18:	7972746e 	.word	0x7972746e
    5e1c:	616e203a 	.word	0x616e203a
    5e20:	3d20656d 	.word	0x3d20656d
    5e24:	554e203d 	.word	0x554e203d
    5e28:	00004c4c 	.word	0x00004c4c
    5e2c:	43415254 	.word	0x43415254
    5e30:	53415f45 	.word	0x53415f45
    5e34:	54524553 	.word	0x54524553
    5e38:	7270203a 	.word	0x7270203a
    5e3c:	61725476 	.word	0x61725476
    5e40:	6f4c6563 	.word	0x6f4c6563
    5e44:	70756b6f 	.word	0x70756b6f
    5e48:	626d7953 	.word	0x626d7953
    5e4c:	61546c6f 	.word	0x61546c6f
    5e50:	45656c62 	.word	0x45656c62
    5e54:	7972746e 	.word	0x7972746e
    5e58:	656c203a 	.word	0x656c203a
    5e5c:	3d3d206e 	.word	0x3d3d206e
    5e60:	00003020 	.word	0x00003020
    5e64:	43415254 	.word	0x43415254
    5e68:	53415f45 	.word	0x53415f45
    5e6c:	54524553 	.word	0x54524553
    5e70:	7270203a 	.word	0x7270203a
    5e74:	61725476 	.word	0x61725476
    5e78:	72436563 	.word	0x72436563
    5e7c:	65746165 	.word	0x65746165
    5e80:	626d7953 	.word	0x626d7953
    5e84:	61546c6f 	.word	0x61546c6f
    5e88:	45656c62 	.word	0x45656c62
    5e8c:	7972746e 	.word	0x7972746e
    5e90:	616e203a 	.word	0x616e203a
    5e94:	3d20656d 	.word	0x3d20656d
    5e98:	554e203d 	.word	0x554e203d
    5e9c:	00004c4c 	.word	0x00004c4c
    5ea0:	43415254 	.word	0x43415254
    5ea4:	53415f45 	.word	0x53415f45
    5ea8:	54524553 	.word	0x54524553
    5eac:	7270203a 	.word	0x7270203a
    5eb0:	61725476 	.word	0x61725476
    5eb4:	72436563 	.word	0x72436563
    5eb8:	65746165 	.word	0x65746165
    5ebc:	626d7953 	.word	0x626d7953
    5ec0:	61546c6f 	.word	0x61546c6f
    5ec4:	45656c62 	.word	0x45656c62
    5ec8:	7972746e 	.word	0x7972746e
    5ecc:	656c203a 	.word	0x656c203a
    5ed0:	3d3d206e 	.word	0x3d3d206e
    5ed4:	00003020 	.word	0x00003020
    5ed8:	626d7953 	.word	0x626d7953
    5edc:	74206c6f 	.word	0x74206c6f
    5ee0:	656c6261 	.word	0x656c6261
    5ee4:	6c756620 	.word	0x6c756620
    5ee8:	49202e6c 	.word	0x49202e6c
    5eec:	6572636e 	.word	0x6572636e
    5ef0:	20657361 	.word	0x20657361
    5ef4:	424d5953 	.word	0x424d5953
    5ef8:	545f4c4f 	.word	0x545f4c4f
    5efc:	454c4241 	.word	0x454c4241
    5f00:	5a49535f 	.word	0x5a49535f
    5f04:	6e692045 	.word	0x6e692045
    5f08:	63727420 	.word	0x63727420
    5f0c:	666e6f43 	.word	0x666e6f43
    5f10:	682e6769 	.word	0x682e6769
    5f14:	00000000 	.word	0x00000000
    5f18:	43415254 	.word	0x43415254
    5f1c:	53415f45 	.word	0x53415f45
    5f20:	54524553 	.word	0x54524553
    5f24:	7270203a 	.word	0x7270203a
    5f28:	61725476 	.word	0x61725476
    5f2c:	65476563 	.word	0x65476563
    5f30:	65684374 	.word	0x65684374
    5f34:	75736b63 	.word	0x75736b63
    5f38:	70203a6d 	.word	0x70203a6d
    5f3c:	656d616e 	.word	0x656d616e
    5f40:	203d3d20 	.word	0x203d3d20
    5f44:	4c4c554e 	.word	0x4c4c554e
    5f48:	00000000 	.word	0x00000000
    5f4c:	43415254 	.word	0x43415254
    5f50:	53415f45 	.word	0x53415f45
    5f54:	54524553 	.word	0x54524553
    5f58:	7270203a 	.word	0x7270203a
    5f5c:	61725476 	.word	0x61725476
    5f60:	65476563 	.word	0x65476563
    5f64:	65684374 	.word	0x65684374
    5f68:	75736b63 	.word	0x75736b63
    5f6c:	70203a6d 	.word	0x70203a6d
    5f70:	20637263 	.word	0x20637263
    5f74:	4e203d3d 	.word	0x4e203d3d
    5f78:	004c4c55 	.word	0x004c4c55
    5f7c:	43415254 	.word	0x43415254
    5f80:	53415f45 	.word	0x53415f45
    5f84:	54524553 	.word	0x54524553
    5f88:	7270203a 	.word	0x7270203a
    5f8c:	61725476 	.word	0x61725476
    5f90:	65476563 	.word	0x65476563
    5f94:	65684374 	.word	0x65684374
    5f98:	75736b63 	.word	0x75736b63
    5f9c:	70203a6d 	.word	0x70203a6d
    5fa0:	676e656c 	.word	0x676e656c
    5fa4:	3d206874 	.word	0x3d206874
    5fa8:	554e203d 	.word	0x554e203d
    5fac:	00004c4c 	.word	0x00004c4c
    5fb0:	43415254 	.word	0x43415254
    5fb4:	53415f45 	.word	0x53415f45
    5fb8:	54524553 	.word	0x54524553
    5fbc:	7270203a 	.word	0x7270203a
    5fc0:	61725476 	.word	0x61725476
    5fc4:	704f6563 	.word	0x704f6563
    5fc8:	79536e65 	.word	0x79536e65
    5fcc:	6c6f626d 	.word	0x6c6f626d
    5fd0:	616e203a 	.word	0x616e203a
    5fd4:	3d20656d 	.word	0x3d20656d
    5fd8:	554e203d 	.word	0x554e203d
    5fdc:	00004c4c 	.word	0x00004c4c
    5fe0:	43415254 	.word	0x43415254
    5fe4:	53415f45 	.word	0x53415f45
    5fe8:	54524553 	.word	0x54524553
    5fec:	5476203a 	.word	0x5476203a
    5ff0:	65636172 	.word	0x65636172
    5ff4:	726f7453 	.word	0x726f7453
    5ff8:	73615465 	.word	0x73615465
    5ffc:	6165526b 	.word	0x6165526b
    6000:	203a7964 	.word	0x203a7964
    6004:	61766e49 	.word	0x61766e49
    6008:	2064696c 	.word	0x2064696c
    600c:	756c6176 	.word	0x756c6176
    6010:	6f662065 	.word	0x6f662065
    6014:	61682072 	.word	0x61682072
    6018:	656c646e 	.word	0x656c646e
    601c:	00000000 	.word	0x00000000
    6020:	6f636552 	.word	0x6f636552
    6024:	72656472 	.word	0x72656472
    6028:	73756220 	.word	0x73756220
    602c:	202d2079 	.word	0x202d2079
    6030:	68676968 	.word	0x68676968
    6034:	69727020 	.word	0x69727020
    6038:	7469726f 	.word	0x7469726f
    603c:	53492079 	.word	0x53492079
    6040:	73752052 	.word	0x73752052
    6044:	20676e69 	.word	0x20676e69
    6048:	63737973 	.word	0x63737973
    604c:	3f6c6c61 	.word	0x3f6c6c61
    6050:	29312820 	.word	0x29312820
    6054:	00000000 	.word	0x00000000
    6058:	43415254 	.word	0x43415254
    605c:	53415f45 	.word	0x53415f45
    6060:	54524553 	.word	0x54524553
    6064:	5476203a 	.word	0x5476203a
    6068:	65636172 	.word	0x65636172
    606c:	726f7453 	.word	0x726f7453
    6070:	776f4c65 	.word	0x776f4c65
    6074:	65776f50 	.word	0x65776f50
    6078:	49203a72 	.word	0x49203a72
    607c:	6c61766e 	.word	0x6c61766e
    6080:	66206469 	.word	0x66206469
    6084:	2067616c 	.word	0x2067616c
    6088:	756c6176 	.word	0x756c6176
    608c:	00000065 	.word	0x00000065
    6090:	43415254 	.word	0x43415254
    6094:	53415f45 	.word	0x53415f45
    6098:	54524553 	.word	0x54524553
    609c:	5476203a 	.word	0x5476203a
    60a0:	65636172 	.word	0x65636172
    60a4:	726f7453 	.word	0x726f7453
    60a8:	6a624f65 	.word	0x6a624f65
    60ac:	4e746365 	.word	0x4e746365
    60b0:	4f656d61 	.word	0x4f656d61
    60b4:	6f6c436e 	.word	0x6f6c436e
    60b8:	76456573 	.word	0x76456573
    60bc:	3a746e65 	.word	0x3a746e65
    60c0:	6a626f20 	.word	0x6a626f20
    60c4:	63746365 	.word	0x63746365
    60c8:	7373616c 	.word	0x7373616c
    60cc:	203d3e20 	.word	0x203d3e20
    60d0:	43415254 	.word	0x43415254
    60d4:	434e5f45 	.word	0x434e5f45
    60d8:	5353414c 	.word	0x5353414c
    60dc:	00005345 	.word	0x00005345
    60e0:	43415254 	.word	0x43415254
    60e4:	53415f45 	.word	0x53415f45
    60e8:	54524553 	.word	0x54524553
    60ec:	5476203a 	.word	0x5476203a
    60f0:	65636172 	.word	0x65636172
    60f4:	726f7453 	.word	0x726f7453
    60f8:	6a624f65 	.word	0x6a624f65
    60fc:	4e746365 	.word	0x4e746365
    6100:	4f656d61 	.word	0x4f656d61
    6104:	6f6c436e 	.word	0x6f6c436e
    6108:	76456573 	.word	0x76456573
    610c:	3a746e65 	.word	0x3a746e65
    6110:	766e4920 	.word	0x766e4920
    6114:	64696c61 	.word	0x64696c61
    6118:	6c617620 	.word	0x6c617620
    611c:	66206575 	.word	0x66206575
    6120:	6820726f 	.word	0x6820726f
    6124:	6c646e61 	.word	0x6c646e61
    6128:	00000065 	.word	0x00000065
    612c:	43415254 	.word	0x43415254
    6130:	53415f45 	.word	0x53415f45
    6134:	54524553 	.word	0x54524553
    6138:	5476203a 	.word	0x5476203a
    613c:	65636172 	.word	0x65636172
    6140:	726f7453 	.word	0x726f7453
    6144:	6a624f65 	.word	0x6a624f65
    6148:	50746365 	.word	0x50746365
    614c:	65706f72 	.word	0x65706f72
    6150:	65697472 	.word	0x65697472
    6154:	436e4f73 	.word	0x436e4f73
    6158:	65736f6c 	.word	0x65736f6c
    615c:	6e657645 	.word	0x6e657645
    6160:	6f203a74 	.word	0x6f203a74
    6164:	63656a62 	.word	0x63656a62
    6168:	616c6374 	.word	0x616c6374
    616c:	3e207373 	.word	0x3e207373
    6170:	5254203d 	.word	0x5254203d
    6174:	5f454341 	.word	0x5f454341
    6178:	414c434e 	.word	0x414c434e
    617c:	53455353 	.word	0x53455353
    6180:	00000000 	.word	0x00000000
    6184:	43415254 	.word	0x43415254
    6188:	53415f45 	.word	0x53415f45
    618c:	54524553 	.word	0x54524553
    6190:	5476203a 	.word	0x5476203a
    6194:	65636172 	.word	0x65636172
    6198:	726f7453 	.word	0x726f7453
    619c:	6a624f65 	.word	0x6a624f65
    61a0:	50746365 	.word	0x50746365
    61a4:	65706f72 	.word	0x65706f72
    61a8:	65697472 	.word	0x65697472
    61ac:	436e4f73 	.word	0x436e4f73
    61b0:	65736f6c 	.word	0x65736f6c
    61b4:	6e657645 	.word	0x6e657645
    61b8:	49203a74 	.word	0x49203a74
    61bc:	6c61766e 	.word	0x6c61766e
    61c0:	76206469 	.word	0x76206469
    61c4:	65756c61 	.word	0x65756c61
    61c8:	726f6620 	.word	0x726f6620
    61cc:	6e616820 	.word	0x6e616820
    61d0:	00656c64 	.word	0x00656c64
    61d4:	43415254 	.word	0x43415254
    61d8:	53415f45 	.word	0x53415f45
    61dc:	54524553 	.word	0x54524553
    61e0:	5476203a 	.word	0x5476203a
    61e4:	65636172 	.word	0x65636172
    61e8:	50746553 	.word	0x50746553
    61ec:	726f6972 	.word	0x726f6972
    61f0:	50797469 	.word	0x50797469
    61f4:	65706f72 	.word	0x65706f72
    61f8:	3a797472 	.word	0x3a797472
    61fc:	6a626f20 	.word	0x6a626f20
    6200:	63746365 	.word	0x63746365
    6204:	7373616c 	.word	0x7373616c
    6208:	203d3e20 	.word	0x203d3e20
    620c:	43415254 	.word	0x43415254
    6210:	434e5f45 	.word	0x434e5f45
    6214:	5353414c 	.word	0x5353414c
    6218:	00005345 	.word	0x00005345
    621c:	43415254 	.word	0x43415254
    6220:	53415f45 	.word	0x53415f45
    6224:	54524553 	.word	0x54524553
    6228:	5476203a 	.word	0x5476203a
    622c:	65636172 	.word	0x65636172
    6230:	50746553 	.word	0x50746553
    6234:	726f6972 	.word	0x726f6972
    6238:	50797469 	.word	0x50797469
    623c:	65706f72 	.word	0x65706f72
    6240:	3a797472 	.word	0x3a797472
    6244:	766e4920 	.word	0x766e4920
    6248:	64696c61 	.word	0x64696c61
    624c:	6c617620 	.word	0x6c617620
    6250:	66206575 	.word	0x66206575
    6254:	6920726f 	.word	0x6920726f
    6258:	00000064 	.word	0x00000064
    625c:	43415254 	.word	0x43415254
    6260:	53415f45 	.word	0x53415f45
    6264:	54524553 	.word	0x54524553
    6268:	6975203a 	.word	0x6975203a
    626c:	63617254 	.word	0x63617254
    6270:	74654765 	.word	0x74654765
    6274:	6f697250 	.word	0x6f697250
    6278:	79746972 	.word	0x79746972
    627c:	706f7250 	.word	0x706f7250
    6280:	79747265 	.word	0x79747265
    6284:	626f203a 	.word	0x626f203a
    6288:	7463656a 	.word	0x7463656a
    628c:	73616c63 	.word	0x73616c63
    6290:	3d3e2073 	.word	0x3d3e2073
    6294:	41525420 	.word	0x41525420
    6298:	4e5f4543 	.word	0x4e5f4543
    629c:	53414c43 	.word	0x53414c43
    62a0:	00534553 	.word	0x00534553
    62a4:	43415254 	.word	0x43415254
    62a8:	53415f45 	.word	0x53415f45
    62ac:	54524553 	.word	0x54524553
    62b0:	6975203a 	.word	0x6975203a
    62b4:	63617254 	.word	0x63617254
    62b8:	74654765 	.word	0x74654765
    62bc:	6f697250 	.word	0x6f697250
    62c0:	79746972 	.word	0x79746972
    62c4:	706f7250 	.word	0x706f7250
    62c8:	79747265 	.word	0x79747265
    62cc:	6e49203a 	.word	0x6e49203a
    62d0:	696c6176 	.word	0x696c6176
    62d4:	61762064 	.word	0x61762064
    62d8:	2065756c 	.word	0x2065756c
    62dc:	20726f66 	.word	0x20726f66
    62e0:	00006469 	.word	0x00006469
    62e4:	43415254 	.word	0x43415254
    62e8:	53415f45 	.word	0x53415f45
    62ec:	54524553 	.word	0x54524553
    62f0:	5476203a 	.word	0x5476203a
    62f4:	65636172 	.word	0x65636172
    62f8:	4f746553 	.word	0x4f746553
    62fc:	63656a62 	.word	0x63656a62
    6300:	61745374 	.word	0x61745374
    6304:	203a6574 	.word	0x203a6574
    6308:	656a626f 	.word	0x656a626f
    630c:	6c637463 	.word	0x6c637463
    6310:	20737361 	.word	0x20737361
    6314:	54203d3e 	.word	0x54203d3e
    6318:	45434152 	.word	0x45434152
    631c:	4c434e5f 	.word	0x4c434e5f
    6320:	45535341 	.word	0x45535341
    6324:	00000053 	.word	0x00000053
    6328:	43415254 	.word	0x43415254
    632c:	53415f45 	.word	0x53415f45
    6330:	54524553 	.word	0x54524553
    6334:	5476203a 	.word	0x5476203a
    6338:	65636172 	.word	0x65636172
    633c:	4f746553 	.word	0x4f746553
    6340:	63656a62 	.word	0x63656a62
    6344:	61745374 	.word	0x61745374
    6348:	203a6574 	.word	0x203a6574
    634c:	61766e49 	.word	0x61766e49
    6350:	2064696c 	.word	0x2064696c
    6354:	756c6176 	.word	0x756c6176
    6358:	6f662065 	.word	0x6f662065
    635c:	64692072 	.word	0x64692072
    6360:	00000000 	.word	0x00000000
    6364:	43415254 	.word	0x43415254
    6368:	53415f45 	.word	0x53415f45
    636c:	54524553 	.word	0x54524553
    6370:	6975203a 	.word	0x6975203a
    6374:	63617254 	.word	0x63617254
    6378:	74654765 	.word	0x74654765
    637c:	656a624f 	.word	0x656a624f
    6380:	74537463 	.word	0x74537463
    6384:	3a657461 	.word	0x3a657461
    6388:	6a626f20 	.word	0x6a626f20
    638c:	63746365 	.word	0x63746365
    6390:	7373616c 	.word	0x7373616c
    6394:	203d3e20 	.word	0x203d3e20
    6398:	43415254 	.word	0x43415254
    639c:	434e5f45 	.word	0x434e5f45
    63a0:	5353414c 	.word	0x5353414c
    63a4:	00005345 	.word	0x00005345
    63a8:	43415254 	.word	0x43415254
    63ac:	53415f45 	.word	0x53415f45
    63b0:	54524553 	.word	0x54524553
    63b4:	6975203a 	.word	0x6975203a
    63b8:	63617254 	.word	0x63617254
    63bc:	74654765 	.word	0x74654765
    63c0:	656a624f 	.word	0x656a624f
    63c4:	74537463 	.word	0x74537463
    63c8:	3a657461 	.word	0x3a657461
    63cc:	766e4920 	.word	0x766e4920
    63d0:	64696c61 	.word	0x64696c61
    63d4:	6c617620 	.word	0x6c617620
    63d8:	66206575 	.word	0x66206575
    63dc:	6920726f 	.word	0x6920726f
    63e0:	00000064 	.word	0x00000064
    63e4:	43415254 	.word	0x43415254
    63e8:	53415f45 	.word	0x53415f45
    63ec:	54524553 	.word	0x54524553
    63f0:	5476203a 	.word	0x5476203a
    63f4:	65636172 	.word	0x65636172
    63f8:	726f7453 	.word	0x726f7453
    63fc:	73615465 	.word	0x73615465
    6400:	6977736b 	.word	0x6977736b
    6404:	3a686374 	.word	0x3a686374
    6408:	766e4920 	.word	0x766e4920
    640c:	64696c61 	.word	0x64696c61
    6410:	6c617620 	.word	0x6c617620
    6414:	66206575 	.word	0x66206575
    6418:	7420726f 	.word	0x7420726f
    641c:	5f6b7361 	.word	0x5f6b7361
    6420:	646e6168 	.word	0x646e6168
    6424:	0000656c 	.word	0x0000656c
    6428:	43415254 	.word	0x43415254
    642c:	53415f45 	.word	0x53415f45
    6430:	54524553 	.word	0x54524553
    6434:	5476203a 	.word	0x5476203a
    6438:	65636172 	.word	0x65636172
    643c:	54746553 	.word	0x54746553
    6440:	496b7361 	.word	0x496b7361
    6444:	6174736e 	.word	0x6174736e
    6448:	4665636e 	.word	0x4665636e
    644c:	73696e69 	.word	0x73696e69
    6450:	3a646568 	.word	0x3a646568
    6454:	766e4920 	.word	0x766e4920
    6458:	64696c61 	.word	0x64696c61
    645c:	6c617620 	.word	0x6c617620
    6460:	66206575 	.word	0x66206575
    6464:	6820726f 	.word	0x6820726f
    6468:	6c646e61 	.word	0x6c646e61
    646c:	00000065 	.word	0x00000065
    6470:	20746f4e 	.word	0x20746f4e
    6474:	756f6e65 	.word	0x756f6e65
    6478:	54206867 	.word	0x54206867
    647c:	204b5341 	.word	0x204b5341
    6480:	646e6168 	.word	0x646e6168
    6484:	2073656c 	.word	0x2073656c
    6488:	6e69202d 	.word	0x6e69202d
    648c:	61657263 	.word	0x61657263
    6490:	4e206573 	.word	0x4e206573
    6494:	6b736154 	.word	0x6b736154
    6498:	206e6920 	.word	0x206e6920
    649c:	43637274 	.word	0x43637274
    64a0:	69666e6f 	.word	0x69666e6f
    64a4:	00682e67 	.word	0x00682e67
    64a8:	20746f4e 	.word	0x20746f4e
    64ac:	756f6e65 	.word	0x756f6e65
    64b0:	49206867 	.word	0x49206867
    64b4:	68205253 	.word	0x68205253
    64b8:	6c646e61 	.word	0x6c646e61
    64bc:	2d207365 	.word	0x2d207365
    64c0:	636e6920 	.word	0x636e6920
    64c4:	73616572 	.word	0x73616572
    64c8:	494e2065 	.word	0x494e2065
    64cc:	69205253 	.word	0x69205253
    64d0:	7274206e 	.word	0x7274206e
    64d4:	6e6f4363 	.word	0x6e6f4363
    64d8:	2e676966 	.word	0x2e676966
    64dc:	00000068 	.word	0x00000068
    64e0:	20746f4e 	.word	0x20746f4e
    64e4:	756f6e65 	.word	0x756f6e65
    64e8:	53206867 	.word	0x53206867
    64ec:	50414d45 	.word	0x50414d45
    64f0:	45524f48 	.word	0x45524f48
    64f4:	6e616820 	.word	0x6e616820
    64f8:	73656c64 	.word	0x73656c64
    64fc:	69202d20 	.word	0x69202d20
    6500:	6572636e 	.word	0x6572636e
    6504:	20657361 	.word	0x20657361
    6508:	6d65534e 	.word	0x6d65534e
    650c:	6f687061 	.word	0x6f687061
    6510:	69206572 	.word	0x69206572
    6514:	7274206e 	.word	0x7274206e
    6518:	6e6f4363 	.word	0x6e6f4363
    651c:	2e676966 	.word	0x2e676966
    6520:	00000068 	.word	0x00000068
    6524:	20746f4e 	.word	0x20746f4e
    6528:	756f6e65 	.word	0x756f6e65
    652c:	4d206867 	.word	0x4d206867
    6530:	58455455 	.word	0x58455455
    6534:	6e616820 	.word	0x6e616820
    6538:	73656c64 	.word	0x73656c64
    653c:	69202d20 	.word	0x69202d20
    6540:	6572636e 	.word	0x6572636e
    6544:	20657361 	.word	0x20657361
    6548:	74754d4e 	.word	0x74754d4e
    654c:	69207865 	.word	0x69207865
    6550:	7274206e 	.word	0x7274206e
    6554:	6e6f4363 	.word	0x6e6f4363
    6558:	2e676966 	.word	0x2e676966
    655c:	00000068 	.word	0x00000068
    6560:	20746f4e 	.word	0x20746f4e
    6564:	756f6e65 	.word	0x756f6e65
    6568:	51206867 	.word	0x51206867
    656c:	45554555 	.word	0x45554555
    6570:	6e616820 	.word	0x6e616820
    6574:	73656c64 	.word	0x73656c64
    6578:	69202d20 	.word	0x69202d20
    657c:	6572636e 	.word	0x6572636e
    6580:	20657361 	.word	0x20657361
    6584:	6575514e 	.word	0x6575514e
    6588:	69206575 	.word	0x69206575
    658c:	7274206e 	.word	0x7274206e
    6590:	6e6f4363 	.word	0x6e6f4363
    6594:	2e676966 	.word	0x2e676966
    6598:	00000068 	.word	0x00000068
    659c:	20746f4e 	.word	0x20746f4e
    65a0:	756f6e65 	.word	0x756f6e65
    65a4:	54206867 	.word	0x54206867
    65a8:	52454d49 	.word	0x52454d49
    65ac:	6e616820 	.word	0x6e616820
    65b0:	73656c64 	.word	0x73656c64
    65b4:	69202d20 	.word	0x69202d20
    65b8:	6572636e 	.word	0x6572636e
    65bc:	20657361 	.word	0x20657361
    65c0:	6d69544e 	.word	0x6d69544e
    65c4:	69207265 	.word	0x69207265
    65c8:	7274206e 	.word	0x7274206e
    65cc:	6e6f4363 	.word	0x6e6f4363
    65d0:	2e676966 	.word	0x2e676966
    65d4:	00000068 	.word	0x00000068
    65d8:	20746f4e 	.word	0x20746f4e
    65dc:	756f6e65 	.word	0x756f6e65
    65e0:	45206867 	.word	0x45206867
    65e4:	544e4556 	.word	0x544e4556
    65e8:	554f5247 	.word	0x554f5247
    65ec:	61682050 	.word	0x61682050
    65f0:	656c646e 	.word	0x656c646e
    65f4:	202d2073 	.word	0x202d2073
    65f8:	72636e69 	.word	0x72636e69
    65fc:	65736165 	.word	0x65736165
    6600:	76454e20 	.word	0x76454e20
    6604:	47746e65 	.word	0x47746e65
    6608:	70756f72 	.word	0x70756f72
    660c:	206e6920 	.word	0x206e6920
    6610:	43637274 	.word	0x43637274
    6614:	69666e6f 	.word	0x69666e6f
    6618:	00682e67 	.word	0x00682e67
    661c:	547a7370 	.word	0x547a7370
    6620:	65636172 	.word	0x65636172
    6624:	45746547 	.word	0x45746547
    6628:	726f7272 	.word	0x726f7272
    662c:	646e6148 	.word	0x646e6148
    6630:	3a73656c 	.word	0x3a73656c
    6634:	766e4920 	.word	0x766e4920
    6638:	64696c61 	.word	0x64696c61
    663c:	6a626f20 	.word	0x6a626f20
    6640:	63746365 	.word	0x63746365
    6644:	7373616c 	.word	0x7373616c
    6648:	00000021 	.word	0x00000021
    664c:	43415254 	.word	0x43415254
    6650:	53415f45 	.word	0x53415f45
    6654:	54524553 	.word	0x54524553
    6658:	7270203a 	.word	0x7270203a
    665c:	61725476 	.word	0x61725476
    6660:	73496563 	.word	0x73496563
    6664:	656a624f 	.word	0x656a624f
    6668:	78457463 	.word	0x78457463
    666c:	64756c63 	.word	0x64756c63
    6670:	203a6465 	.word	0x203a6465
    6674:	656a626f 	.word	0x656a626f
    6678:	6c637463 	.word	0x6c637463
    667c:	20737361 	.word	0x20737361
    6680:	54203d3e 	.word	0x54203d3e
    6684:	45434152 	.word	0x45434152
    6688:	4c434e5f 	.word	0x4c434e5f
    668c:	45535341 	.word	0x45535341
    6690:	00000053 	.word	0x00000053
    6694:	43415254 	.word	0x43415254
    6698:	53415f45 	.word	0x53415f45
    669c:	54524553 	.word	0x54524553
    66a0:	6975203a 	.word	0x6975203a
    66a4:	63617254 	.word	0x63617254
    66a8:	4f734965 	.word	0x4f734965
    66ac:	63656a62 	.word	0x63656a62
    66b0:	63784574 	.word	0x63784574
    66b4:	6564756c 	.word	0x6564756c
    66b8:	49203a64 	.word	0x49203a64
    66bc:	6c61766e 	.word	0x6c61766e
    66c0:	76206469 	.word	0x76206469
    66c4:	65756c61 	.word	0x65756c61
    66c8:	726f6620 	.word	0x726f6620
    66cc:	6e616820 	.word	0x6e616820
    66d0:	00656c64 	.word	0x00656c64
    66d4:	61766e49 	.word	0x61766e49
    66d8:	2064696c 	.word	0x2064696c
    66dc:	656a626f 	.word	0x656a626f
    66e0:	63207463 	.word	0x63207463
    66e4:	7373616c 	.word	0x7373616c
    66e8:	20444920 	.word	0x20444920
    66ec:	75206e69 	.word	0x75206e69
    66f0:	61725469 	.word	0x61725469
    66f4:	73496563 	.word	0x73496563
    66f8:	656a624f 	.word	0x656a624f
    66fc:	78457463 	.word	0x78457463
    6700:	64756c63 	.word	0x64756c63
    6704:	00216465 	.word	0x00216465
    6708:	43415254 	.word	0x43415254
    670c:	53415f45 	.word	0x53415f45
    6710:	54524553 	.word	0x54524553
    6714:	7277203a 	.word	0x7277203a
    6718:	49657469 	.word	0x49657469
    671c:	3233746e 	.word	0x3233746e
    6720:	7562203a 	.word	0x7562203a
    6724:	72656666 	.word	0x72656666
    6728:	203d3d20 	.word	0x203d3d20
    672c:	4c4c554e 	.word	0x4c4c554e
    6730:	00000000 	.word	0x00000000
    6734:	43415254 	.word	0x43415254
    6738:	53415f45 	.word	0x53415f45
    673c:	54524553 	.word	0x54524553
    6740:	7277203a 	.word	0x7277203a
    6744:	49657469 	.word	0x49657469
    6748:	3631746e 	.word	0x3631746e
    674c:	7562203a 	.word	0x7562203a
    6750:	72656666 	.word	0x72656666
    6754:	203d3d20 	.word	0x203d3d20
    6758:	4c4c554e 	.word	0x4c4c554e
    675c:	00000000 	.word	0x00000000
    6760:	6f636552 	.word	0x6f636552
    6764:	72656472 	.word	0x72656472
    6768:	61746144 	.word	0x61746144
    676c:	20727450 	.word	0x20727450
    6770:	4e207369 	.word	0x4e207369
    6774:	2e4c4c55 	.word	0x2e4c4c55
    6778:	6c614320 	.word	0x6c614320
    677c:	5476206c 	.word	0x5476206c
    6780:	65636172 	.word	0x65636172
    6784:	74696e49 	.word	0x74696e49
    6788:	63617254 	.word	0x63617254
    678c:	74614465 	.word	0x74614465
    6790:	20292861 	.word	0x20292861
    6794:	6f666562 	.word	0x6f666562
    6798:	73206572 	.word	0x73206572
    679c:	74726174 	.word	0x74726174
    67a0:	20676e69 	.word	0x20676e69
    67a4:	63617274 	.word	0x63617274
    67a8:	00002e65 	.word	0x00002e65
    67ac:	61747328 	.word	0x61747328
    67b0:	70757472 	.word	0x70757472
    67b4:	00000029 	.word	0x00000029
    67b8:	43415254 	.word	0x43415254
    67bc:	53415f45 	.word	0x53415f45
    67c0:	54524553 	.word	0x54524553
    67c4:	5476203a 	.word	0x5476203a
    67c8:	65636172 	.word	0x65636172
    67cc:	49746553 	.word	0x49746553
    67d0:	72505253 	.word	0x72505253
    67d4:	7265706f 	.word	0x7265706f
    67d8:	73656974 	.word	0x73656974
    67dc:	6e49203a 	.word	0x6e49203a
    67e0:	696c6176 	.word	0x696c6176
    67e4:	61762064 	.word	0x61762064
    67e8:	2065756c 	.word	0x2065756c
    67ec:	20726f66 	.word	0x20726f66
    67f0:	646e6168 	.word	0x646e6168
    67f4:	0000656c 	.word	0x0000656c
    67f8:	43415254 	.word	0x43415254
    67fc:	53415f45 	.word	0x53415f45
    6800:	54524553 	.word	0x54524553
    6804:	5476203a 	.word	0x5476203a
    6808:	65636172 	.word	0x65636172
    680c:	49746553 	.word	0x49746553
    6810:	72505253 	.word	0x72505253
    6814:	7265706f 	.word	0x7265706f
    6818:	73656974 	.word	0x73656974
    681c:	616e203a 	.word	0x616e203a
    6820:	3d20656d 	.word	0x3d20656d
    6824:	554e203d 	.word	0x554e203d
    6828:	00004c4c 	.word	0x00004c4c
    682c:	656c6c49 	.word	0x656c6c49
    6830:	206c6167 	.word	0x206c6167
    6834:	6c6c6163 	.word	0x6c6c6163
    6838:	206f7420 	.word	0x206f7420
    683c:	61725476 	.word	0x61725476
    6840:	74536563 	.word	0x74536563
    6844:	4965726f 	.word	0x4965726f
    6848:	65425253 	.word	0x65425253
    684c:	2c6e6967 	.word	0x2c6e6967
    6850:	63657220 	.word	0x63657220
    6854:	6564726f 	.word	0x6564726f
    6858:	75622072 	.word	0x75622072
    685c:	00217973 	.word	0x00217973
    6860:	43415254 	.word	0x43415254
    6864:	53415f45 	.word	0x53415f45
    6868:	54524553 	.word	0x54524553
    686c:	5476203a 	.word	0x5476203a
    6870:	65636172 	.word	0x65636172
    6874:	726f7453 	.word	0x726f7453
    6878:	52534965 	.word	0x52534965
    687c:	69676542 	.word	0x69676542
    6880:	49203a6e 	.word	0x49203a6e
    6884:	6c61766e 	.word	0x6c61766e
    6888:	76206469 	.word	0x76206469
    688c:	65756c61 	.word	0x65756c61
    6890:	726f6620 	.word	0x726f6620
    6894:	6e616820 	.word	0x6e616820
    6898:	00656c64 	.word	0x00656c64
    689c:	206f6f54 	.word	0x206f6f54
    68a0:	796e616d 	.word	0x796e616d
    68a4:	73656e20 	.word	0x73656e20
    68a8:	20646574 	.word	0x20646574
    68ac:	65746e69 	.word	0x65746e69
    68b0:	70757272 	.word	0x70757272
    68b4:	00217374 	.word	0x00217374
    68b8:	656c6c49 	.word	0x656c6c49
    68bc:	206c6167 	.word	0x206c6167
    68c0:	6c6c6163 	.word	0x6c6c6163
    68c4:	206f7420 	.word	0x206f7420
    68c8:	61725476 	.word	0x61725476
    68cc:	74536563 	.word	0x74536563
    68d0:	4965726f 	.word	0x4965726f
    68d4:	6e455253 	.word	0x6e455253
    68d8:	72202c64 	.word	0x72202c64
    68dc:	726f6365 	.word	0x726f6365
    68e0:	20726564 	.word	0x20726564
    68e4:	79737562 	.word	0x79737562
    68e8:	00000021 	.word	0x00000021
    68ec:	616d6e55 	.word	0x616d6e55
    68f0:	65686374 	.word	0x65686374
    68f4:	61632064 	.word	0x61632064
    68f8:	74206c6c 	.word	0x74206c6c
    68fc:	5476206f 	.word	0x5476206f
    6900:	65636172 	.word	0x65636172
    6904:	726f7453 	.word	0x726f7453
    6908:	52534965 	.word	0x52534965
    690c:	20646e45 	.word	0x20646e45
    6910:	53496e28 	.word	0x53496e28
    6914:	74636152 	.word	0x74636152
    6918:	20657669 	.word	0x20657669
    691c:	30203d3d 	.word	0x30203d3d
    6920:	7865202c 	.word	0x7865202c
    6924:	74636570 	.word	0x74636570
    6928:	3e206465 	.word	0x3e206465
    692c:	00293020 	.word	0x00293020
    6930:	43415254 	.word	0x43415254
    6934:	53415f45 	.word	0x53415f45
    6938:	54524553 	.word	0x54524553
    693c:	5478203a 	.word	0x5478203a
    6940:	65636172 	.word	0x65636172
    6944:	6e65704f 	.word	0x6e65704f
    6948:	6562614c 	.word	0x6562614c
    694c:	6c203a6c 	.word	0x6c203a6c
    6950:	6c656261 	.word	0x6c656261
    6954:	203d3d20 	.word	0x203d3d20
    6958:	4c4c554e 	.word	0x4c4c554e
    695c:	00000000 	.word	0x00000000
    6960:	43415254 	.word	0x43415254
    6964:	53415f45 	.word	0x53415f45
    6968:	54524553 	.word	0x54524553
    696c:	5476203a 	.word	0x5476203a
    6970:	65636172 	.word	0x65636172
    6974:	6e697250 	.word	0x6e697250
    6978:	203a4674 	.word	0x203a4674
    697c:	6d726f66 	.word	0x6d726f66
    6980:	74537461 	.word	0x74537461
    6984:	3d3d2072 	.word	0x3d3d2072
    6988:	4c554e20 	.word	0x4c554e20
    698c:	0000004c 	.word	0x0000004c
    6990:	61725476 	.word	0x61725476
    6994:	72506563 	.word	0x72506563
    6998:	46746e69 	.word	0x46746e69
    699c:	54202d20 	.word	0x54202d20
    69a0:	6d206f6f 	.word	0x6d206f6f
    69a4:	20796e61 	.word	0x20796e61
    69a8:	75677261 	.word	0x75677261
    69ac:	746e656d 	.word	0x746e656d
    69b0:	6d202c73 	.word	0x6d202c73
    69b4:	31207861 	.word	0x31207861
    69b8:	6c612035 	.word	0x6c612035
    69bc:	65776f6c 	.word	0x65776f6c
    69c0:	00002164 	.word	0x00002164
    69c4:	61725476 	.word	0x61725476
    69c8:	72506563 	.word	0x72506563
    69cc:	46746e69 	.word	0x46746e69
    69d0:	54202d20 	.word	0x54202d20
    69d4:	6c206f6f 	.word	0x6c206f6f
    69d8:	65677261 	.word	0x65677261
    69dc:	67726120 	.word	0x67726120
    69e0:	6e656d75 	.word	0x6e656d75
    69e4:	202c7374 	.word	0x202c7374
    69e8:	2078616d 	.word	0x2078616d
    69ec:	62203233 	.word	0x62203233
    69f0:	20657479 	.word	0x20657479
    69f4:	6f6c6c61 	.word	0x6f6c6c61
    69f8:	21646577 	.word	0x21646577
    69fc:	00000000 	.word	0x00000000
    6a00:	454c4449 	.word	0x454c4449
    6a04:	00000000 	.word	0x00000000
    6a08:	20726d54 	.word	0x20726d54
    6a0c:	00637653 	.word	0x00637653
    6a10:	00000043 	.word	0x00000043

00006a14 <_global_impure_ptr>:
    6a14:	20000018                                ... 

00006a18 <_init>:
    6a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6a1a:	46c0      	nop			; (mov r8, r8)
    6a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6a1e:	bc08      	pop	{r3}
    6a20:	469e      	mov	lr, r3
    6a22:	4770      	bx	lr

00006a24 <__init_array_start>:
    6a24:	0000592d 	.word	0x0000592d

00006a28 <__frame_dummy_init_array_entry>:
    6a28:	000000d9                                ....

00006a2c <_fini>:
    6a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6a2e:	46c0      	nop			; (mov r8, r8)
    6a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6a32:	bc08      	pop	{r3}
    6a34:	469e      	mov	lr, r3
    6a36:	4770      	bx	lr

00006a38 <__fini_array_start>:
    6a38:	000000b1 	.word	0x000000b1
